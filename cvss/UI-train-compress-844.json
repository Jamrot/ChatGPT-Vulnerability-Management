{
    "UI": {
        "ni65_set_performance": {
            "id": "ni65_set_performance",
            "ground_truth": 0,
            "function": "ni65_set_performance",
            "description": "Sets performance register and stops lance. (8 tokens)"
        },
        "dce120_timing_generator_disable_vga": {
            "id": "dce120_timing_generator_disable_vga",
            "ground_truth": 0,
            "function": "dce120_timing_generator_disable_vga",
            "description": "Disables VGA in DCE120 timing generator for virtual hardware."
        },
        "vio_cmo_entitlement_update": {
            "id": "vio_cmo_entitlement_update",
            "ground_truth": 0,
            "function": "vio_cmo_entitlement_update",
            "description": "Manage system entitlement change, increase or decrease, allocate to spare/excess pool, attempt to accommodate new entitlement, handle enomem error."
        },
        "btrfs_insert_delayed_items": {
            "id": "btrfs_insert_delayed_items",
            "ground_truth": 1,
            "function": "btrfs_insert_delayed_items",
            "description": "Insert delayed items into same leaf if continuous."
        },
        "atif_probe_device": {
            "id": "atif_probe_device",
            "ground_truth": 0,
            "function": "atif_probe_device",
            "description": "AARP probing on tentative address in atif probe device"
        },
        "vfio_find_dma": {
            "id": "vfio_find_dma",
            "ground_truth": 1,
            "function": "vfio_find_dma",
            "description": "Maps/unmaps user data buffer to DMA using IOMMU."
        },
        "ipv6_mc_up": {
            "id": "ipv6_mc_up",
            "ground_truth": 0,
            "function": "ipv6_mc_up",
            "description": "IPv6 multicast device up event"
        },
        "hexium_probe": {
            "id": "hexium_probe",
            "ground_truth": 0,
            "function": "hexium_probe",
            "description": "Function for old HV PCI6 Orion card without EEPROM"
        },
        "self_check_in_wl_tree": {
            "id": "self_check_in_wl_tree",
            "ground_truth": 0,
            "function": "self_check_in_wl_tree",
            "description": "Check wear leveling entry in RB tree, return 0 if in root, einval if not."
        },
        "acpi_ex_release_all_mutexes": {
            "id": "acpi_ex_release_all_mutexes",
            "ground_truth": 0,
            "function": "acpi_ex_release_all_mutexes",
            "description": "Release all mutexes held by thread upon interpreter exit."
        },
        "macio_release_resource": {
            "id": "macio_release_resource",
            "ground_truth": 0,
            "function": "macio_release_resource",
            "description": "Release mmio resource for macio device."
        },
        "tracing_cond_snapshot_data": {
            "id": "tracing_cond_snapshot_data",
            "ground_truth": 1,
            "function": "tracing_cond_snapshot_data",
            "description": "Retrieve user data from conditional snapshot in tracing instance"
        },
        "ubifs_remount_ro": {
            "id": "ubifs_remount_ro",
            "ground_truth": 1,
            "function": "ubifs_remount_ro",
            "description": "Remounts UBIFS as read-only assuming VFS has stopped writing, with possible background thread running commit. Uses struct UBIFS info for file system description."
        },
        "acpi_ns_repair_PSS": {
            "id": "acpi_ns_repair_PSS",
            "ground_truth": 0,
            "function": "acpi_ns_repair_PSS",
            "description": "Repair ACPI PS object, sort by CPU frequency and check proportional power dissipation"
        },
        "dm_set_geometry": {
            "id": "dm_set_geometry",
            "ground_truth": 0,
            "function": "dm_set_geometry",
            "description": "Set device geometry using dm_set_geometry function."
        },
        "fscrypt_put_direct_key": {
            "id": "fscrypt_put_direct_key",
            "ground_truth": 0,
            "function": "fscrypt_put_direct_key",
            "description": "Encrypts file system data with direct key setup."
        },
        "nfs_create_rpc_client": {
            "id": "nfs_create_rpc_client",
            "ground_truth": 0,
            "function": "nfs_create_rpc_client",
            "description": "nfs create rpc client, create rpc client handle"
        },
        "amd_pre_reset": {
            "id": "amd_pre_reset",
            "ground_truth": 0,
            "function": "amd_pre_reset",
            "description": "Perform reset handling for active ATA ports with deadline checking."
        },
        "batadv_iv_ogm_fwd_send_time": {
            "id": "batadv_iv_ogm_fwd_send_time",
            "ground_truth": 0,
            "function": "batadv_iv_ogm_fwd_send_time",
            "description": "Schedule OGM packet send time for BATADV IV forwarding."
        },
        "drm_vm_shm_close": {
            "id": "drm_vm_shm_close",
            "ground_truth": 0,
            "function": "drm_vm_shm_close",
            "description": "Close shared virtual memory, delete map info if last to close and not in global maplist."
        },
        "intel_gvt_init_gtt": {
            "id": "intel_gvt_init_gtt",
            "ground_truth": 0,
            "function": "intel_gvt_init_gtt",
            "description": "Initialize mm component of GVT device struct"
        },
        "usb_state_string": {
            "id": "usb_state_string",
            "ground_truth": 0,
            "function": "usb_state_string",
            "description": "Returns human-readable name for USB device state enum. If state is not recognized, \"unknown\" is returned."
        },
        "ibmvtpm_crq_get_next": {
            "id": "ibmvtpm_crq_get_next",
            "ground_truth": 0,
            "function": "ibmvtpm_crq_get_next",
            "description": "Get next responded CRQ from IBMVTPM device."
        },
        "prb_commit": {
            "id": "prb_commit",
            "ground_truth": 0,
            "function": "prb_commit",
            "description": "Commit reserved data to ringbuffer for writer"
        },
        "ia64_mca_cmc_int_handler": {
            "id": "ia64_mca_cmc_int_handler",
            "ground_truth": 0,
            "function": "ia64_mca_cmc_int_handler",
            "description": "Handler for corrected machine check interrupts on IA64 architecture, extracts and displays logs in defined format."
        },
        "vgic_irqfd_set_irq": {
            "id": "vgic_irqfd_set_irq",
            "ground_truth": 0,
            "function": "vgic_irqfd_set_irq",
            "description": "Sets IRQ routing entry for VGIC IRQFD injection."
        },
        "f2fs_evict_inode": {
            "id": "f2fs_evict_inode",
            "ground_truth": 1,
            "function": "f2fs_evict_inode",
            "description": "Evict inode in F2FS when nlink is zero."
        },
        "nfs_init_server": {
            "id": "nfs_init_server",
            "ground_truth": 0,
            "function": "nfs_init_server",
            "description": "NFS server initialization for version/client creation."
        },
        "nps_enet_start_xmit": {
            "id": "nps_enet_start_xmit",
            "ground_truth": 0,
            "function": "nps_enet_start_xmit",
            "description": "Starts data transmission from upper layer using skb pointer and netdev structure"
        },
        "__list_add": {
            "id": "__list_add",
            "ground_truth": 0,
            "function": "__list_add",
            "description": "Internal function for inserting new entry between known consecutive entries in a list."
        },
        "page_add_file_rmap": {
            "id": "page_add_file_rmap",
            "ground_truth": 1,
            "function": "page_add_file_rmap",
            "description": "Add file page mapping with PTE lock and compound charge option."
        },
        "eeh_pe_set_option": {
            "id": "eeh_pe_set_option",
            "ground_truth": 0,
            "function": "eeh_pe_set_option",
            "description": "Set EEH option for PE to enable/disable functionality and IO/DMA for frozen PE."
        },
        "__cvmx_helper_npi_enable": {
            "id": "__cvmx_helper_npi_enable",
            "ground_truth": 0,
            "function": "__cvmx_helper_npi_enable",
            "description": "Enables NPI with IPD, disables PKO, returns success or failure."
        },
        "saa7164_encoder_configure": {
            "id": "saa7164_encoder_configure",
            "ground_truth": 0,
            "function": "saa7164_encoder_configure",
            "description": "Encoder config from port struct flushed to hardware."
        },
        "hns_dsaf_get_strings": {
            "id": "hns_dsaf_get_strings",
            "ground_truth": 0,
            "function": "hns_dsaf_get_strings",
            "description": "Get string from DSAF device with specified parameters."
        },
        "mlx5_mr_cache_invalidate": {
            "id": "mlx5_mr_cache_invalidate",
            "ground_truth": 0,
            "function": "mlx5_mr_cache_invalidate",
            "description": "Invalidates mlx5 MR cache, fences all DMA, prevents DMA to page, completes in-progress DMA, failure indicates catastrophic HW failure."
        },
        "pci_dev_set_io_state": {
            "id": "pci_dev_set_io_state",
            "ground_truth": 0,
            "function": "pci_dev_set_io_state",
            "description": "Sets new error state for PCI device, returns true if state changed"
        },
        "rvt_create_qp": {
            "id": "rvt_create_qp",
            "ground_truth": 1,
            "function": "rvt_create_qp",
            "description": "Create queue pair for device with unique attributes, return success or errno."
        },
        "binder_alloc_prepare_to_free": {
            "id": "binder_alloc_prepare_to_free",
            "ground_truth": 1,
            "function": "binder_alloc_prepare_to_free",
            "description": "Validate user ptr, search rb tree, alloc binder for proc"
        },
        "cx88_set_tvaudio": {
            "id": "cx88_set_tvaudio",
            "ground_truth": 0,
            "function": "cx88_set_tvaudio",
            "description": "Sets TV audio for cx88."
        },
        "timekeeping_resume": {
            "id": "timekeeping_resume",
            "ground_truth": 0,
            "function": "timekeeping_resume",
            "description": "Resumes timekeeping subsystem without arguments."
        },
        "pci_read_irq": {
            "id": "pci_read_irq",
            "ground_truth": 0,
            "function": "pci_read_irq",
            "description": "Reads interrupt line and base address register for PCI, architecture dependent tweaking possible."
        },
        "pvrdma_destroy_srq": {
            "id": "pvrdma_destroy_srq",
            "ground_truth": 1,
            "function": "pvrdma_destroy_srq",
            "description": "Destroys shared receive queue object in PVRDMA."
        },
        "rvt_create_cq": {
            "id": "rvt_create_cq",
            "ground_truth": 1,
            "function": "rvt_create_cq",
            "description": "Creates completion queue with attributes and user data."
        },
        "btrfs_find_root": {
            "id": "btrfs_find_root",
            "ground_truth": 1,
            "function": "btrfs_find_root",
            "description": "Searches for root by key in Btrfs file system"
        },
        "ti_clk_retry_init": {
            "id": "ti_clk_retry_init",
            "ground_truth": 1,
            "function": "ti_clk_retry_init",
            "description": "Retries failed clock init, adds to retry list, parsed after other clocks initialized, uses init function for clock."
        },
        "bam_alloc_chan": {
            "id": "bam_alloc_chan",
            "ground_truth": 0,
            "function": "bam_alloc_chan",
            "description": "Allocates channel resource for DMA channel."
        },
        "__gcov_flush": {
            "id": "__gcov_flush",
            "ground_truth": 0,
            "function": "__gcov_flush",
            "description": "Flushes gcov for gcc profiling code, irrelevant for kernel profiling."
        },
        "tb_domain_approve_switch_key": {
            "id": "tb_domain_approve_switch_key",
            "ground_truth": 0,
            "function": "tb_domain_approve_switch_key",
            "description": "Approve and add key for secure connect switch"
        },
        "from_kuid_munged": {
            "id": "from_kuid_munged",
            "ground_truth": 1,
            "function": "from_kuid_munged",
            "description": "Create valid uid from kuid munged with user namespace mapping, always returns valid uid, suitable for syscalls like stat and getuid."
        },
        "affinity_check": {
            "id": "affinity_check",
            "ground_truth": 0,
            "function": "affinity_check",
            "description": "Affinity check for affinity"
        },
        "ep93xx_spi_dma_finish": {
            "id": "ep93xx_spi_dma_finish",
            "ground_truth": 0,
            "function": "ep93xx_spi_dma_finish",
            "description": "Finish DMA transfer for EP93xx SPI master"
        },
        "__cvmx_helper_xaui_enumerate": {
            "id": "__cvmx_helper_xaui_enumerate",
            "ground_truth": 0,
            "function": "__cvmx_helper_xaui_enumerate",
            "description": "Probe and count connected ports on XAUI interface, disable if no ports"
        },
        "iwl_blink_compensation": {
            "id": "iwl_blink_compensation",
            "ground_truth": 0,
            "function": "iwl_blink_compensation",
            "description": "Adjusts LED blink rate to compensate for clock difference, using deviation analysis to achieve desired frequency."
        },
        "sync_stop": {
            "id": "sync_stop",
            "ground_truth": 0,
            "function": "sync_stop",
            "description": "Hook removal through sync stop function."
        },
        "sysclk_init": {
            "id": "sysclk_init",
            "ground_truth": 0,
            "function": "sysclk_init",
            "description": "Initialize system clock for legacy node."
        },
        "vmci_dbell_host_context_notify": {
            "id": "vmci_dbell_host_context_notify",
            "ground_truth": 0,
            "function": "vmci_dbell_host_context_notify",
            "description": "Dispatch doorbell notification to host context."
        },
        "iommu_dev_has_feature": {
            "id": "iommu_dev_has_feature",
            "ground_truth": 0,
            "function": "iommu_dev_has_feature",
            "description": "Checks if a device has IOMMU feature."
        },
        "sitd_sched_init": {
            "id": "sitd_sched_init",
            "ground_truth": 0,
            "function": "sitd_sched_init",
            "description": "Initiates microframe scheduling for USB devices in hub's TT using split ISO TDS."
        },
        "of_irq_init": {
            "id": "of_irq_init",
            "ground_truth": 0,
            "function": "of_irq_init",
            "description": "Scan and initialize matching interrupt controller in device tree"
        },
        "rcu_scale_async_cb": {
            "id": "rcu_scale_async_cb",
            "ground_truth": 0,
            "function": "rcu_scale_async_cb",
            "description": "Callback for async grace period from RCU scale writer"
        },
        "ktime_to_ns": {
            "id": "ktime_to_ns",
            "ground_truth": 0,
            "function": "ktime_to_ns",
            "description": "Converts ktime to nanoseconds"
        },
        "offset_in_entry": {
            "id": "offset_in_entry",
            "ground_truth": 0,
            "function": "offset_in_entry",
            "description": "Checks if offset is within entry."
        },
        "mei_timer": {
            "id": "mei_timer",
            "ground_truth": 0,
            "function": "mei_timer",
            "description": "Timer function with work struct and pointer"
        },
        "eo_update_clusters": {
            "id": "eo_update_clusters",
            "ground_truth": 0,
            "function": "eo_update_clusters",
            "description": "Updates cluster count in on-disk structure"
        },
        "qbman_swp_fq_xon": {
            "id": "qbman_swp_fq_xon",
            "ground_truth": 0,
            "function": "qbman_swp_fq_xon",
            "description": "Set flow control to XON for specified frame queue index"
        },
        "acpi_ex_do_match": {
            "id": "acpi_ex_do_match",
            "ground_truth": 0,
            "function": "acpi_ex_do_match",
            "description": " Naming convention for AML interpreter execution routine based on arguments, targets, and return value."
        },
        "reboot_mode_register": {
            "id": "reboot_mode_register",
            "ground_truth": 0,
            "function": "reboot_mode_register",
            "description": "Registers reboot mode driver struct for reboot mode."
        },
        "io_cqring_wait": {
            "id": "io_cqring_wait",
            "ground_truth": 0,
            "function": "io_cqring_wait",
            "description": "Wait for available event on shared cq ring"
        },
        "unregister_memory_block_under_nodes": {
            "id": "unregister_memory_block_under_nodes",
            "ground_truth": 0,
            "function": "unregister_memory_block_under_nodes",
            "description": "Unregister memory block device under node, cannot be offline."
        },
        "ceu_init_mbus_fmt": {
            "id": "ceu_init_mbus_fmt",
            "ground_truth": 0,
            "function": "ceu_init_mbus_fmt",
            "description": "Initialize CEU medium bus format, query sensor for supported format, produce memory format, support YUYV422 and other permutations, fetch sync mode for binary data"
        },
        "intel_thermal_interrupt": {
            "id": "intel_thermal_interrupt",
            "ground_truth": 0,
            "function": "intel_thermal_interrupt",
            "description": "Intel thermal transition interrupt handler"
        },
        "handle_one_vic": {
            "id": "handle_one_vic",
            "ground_truth": 0,
            "function": "handle_one_vic",
            "description": "Handles one interrupt in single VIC, returns non-zero if at least one interrupt is handled. Reads status register before handling each interrupt."
        },
        "ncsi_cmd_build_header": {
            "id": "ncsi_cmd_build_header",
            "ground_truth": 0,
            "function": "ncsi_cmd_build_header",
            "description": "Builds header after data population"
        },
        "hpi_send_recv_ex": {
            "id": "hpi_send_recv_ex",
            "ground_truth": 0,
            "function": "hpi_send_recv_ex",
            "description": "Wrapper for HPI messageex in hpifunc compile"
        },
        "lt9611_connector_detect": {
            "id": "lt9611_connector_detect",
            "ground_truth": 0,
            "function": "lt9611_connector_detect",
            "description": "Detects LT9611 connector functions."
        },
        "t4_get_link_params": {
            "id": "t4_get_link_params",
            "ground_truth": 0,
            "function": "t4_get_link_params",
            "description": "Retrieve basic link parameters for a given port"
        },
        "untrack_pfn_moved": {
            "id": "untrack_pfn_moved",
            "ground_truth": 0,
            "function": "untrack_pfn_moved",
            "description": "Untrack PFN movement during mremapping with new VMA."
        },
        "freezer_apply_state": {
            "id": "freezer_apply_state",
            "ground_truth": 0,
            "function": "freezer_apply_state",
            "description": "Apply state change to cgroup freezer, freeze or unfreeze, perform freezing or thawing as necessary."
        },
        "smc_clc_proposal_get_prefix": {
            "id": "smc_clc_proposal_get_prefix",
            "ground_truth": 0,
            "function": "smc_clc_proposal_get_prefix",
            "description": "Determines prefix start in proposal message."
        },
        "siw_proc_rreq": {
            "id": "siw_proc_rreq",
            "ground_truth": 1,
            "function": "siw_proc_rreq",
            "description": "Inbound rreq cannot carry user data."
        },
        "vi_get_xclk": {
            "id": "vi_get_xclk",
            "ground_truth": 0,
            "function": "vi_get_xclk",
            "description": "Get xclk reference clock for gfx engine from amdgpu device pointer"
        },
        "ipmr_cache_report": {
            "id": "ipmr_cache_report",
            "ground_truth": 0,
            "function": "ipmr_cache_report",
            "description": "Cache report function queries cache and calls netlink under lock."
        },
        "hv_int_desc_free": {
            "id": "hv_int_desc_free",
            "ground_truth": 0,
            "function": "hv_int_desc_free",
            "description": "Free interrupt management hook for HV int desc."
        },
        "xfs_iunlink_insert_backref": {
            "id": "xfs_iunlink_insert_backref",
            "ground_truth": 0,
            "function": "xfs_iunlink_insert_backref",
            "description": "Inserts iunlink cache entry into hash table, caller doesn't own iu"
        },
        "ibwdt_ping": {
            "id": "ibwdt_ping",
            "ground_truth": 0,
            "function": "ibwdt_ping",
            "description": "Watchdog operation for ibwdt ping."
        },
        "amdgpu_dm_irq_register_interrupt": {
            "id": "amdgpu_dm_irq_register_interrupt",
            "ground_truth": 0,
            "function": "amdgpu_dm_irq_register_interrupt",
            "description": "Register display block IRQ handler for AMD GPU device"
        },
        "aem_init_ipmi_data": {
            "id": "aem_init_ipmi_data",
            "ground_truth": 1,
            "function": "aem_init_ipmi_data",
            "description": "Initialize IPMI address message buffer and user data"
        },
        "chain_block_next": {
            "id": "chain_block_next",
            "ground_truth": 0,
            "function": "chain_block_next",
            "description": "Get the next block in the blockchain."
        },
        "prom_feval": {
            "id": "prom_feval",
            "ground_truth": 0,
            "function": "prom_feval",
            "description": "Evaluate 4th string in prom feval"
        },
        "probe_crc": {
            "id": "probe_crc",
            "ground_truth": 0,
            "function": "probe_crc",
            "description": "Test packet CRC in card memory for validity. Used for initial packet probing."
        },
        "brcm_pcie_set_ssc": {
            "id": "brcm_pcie_set_ssc",
            "ground_truth": 0,
            "function": "brcm_pcie_set_ssc",
            "description": "Configures device for SSC mode, negative return value indicates error."
        },
        "vr41xx_get_vtclock_frequency": {
            "id": "vr41xx_get_vtclock_frequency",
            "ground_truth": 0,
            "function": "vr41xx_get_vtclock_frequency",
            "description": "Get VR41xx VTClock frequency using bus control."
        },
        "omap3isp_resizer_init": {
            "id": "omap3isp_resizer_init",
            "ground_truth": 0,
            "function": "omap3isp_resizer_init",
            "description": "Initializes OMAP3ISP resizer with ISP device pointer. Returns success or enomem."
        },
        "ieee80211_rx_ADDBARsp": {
            "id": "ieee80211_rx_ADDBARsp",
            "ground_truth": 0,
            "function": "ieee80211_rx_ADDBARsp",
            "description": "ieee80211 rx addbarsp in baproc"
        },
        "raid6_sse11_gen_syndrome": {
            "id": "raid6_sse11_gen_syndrome",
            "ground_truth": 0,
            "function": "raid6_sse11_gen_syndrome",
            "description": "RAID6 syndrome generation using SSE1 implementation."
        },
        "pmd_init": {
            "id": "pmd_init",
            "ground_truth": 0,
            "function": "pmd_init",
            "description": "Initialize new pmd table with invalid pointer"
        },
        "pvrdma_alloc_pd": {
            "id": "pvrdma_alloc_pd",
            "ground_truth": 1,
            "function": "pvrdma_alloc_pd",
            "description": "Allocate protection domain pointer for IB device."
        },
        "planetcore_set_mac_addrs": {
            "id": "planetcore_set_mac_addrs",
            "ground_truth": 0,
            "function": "planetcore_set_mac_addrs",
            "description": "Updates device tree MAC address based on EA tag."
        },
        "kvm_mips_build_exception": {
            "id": "kvm_mips_build_exception",
            "ground_truth": 0,
            "function": "kvm_mips_build_exception",
            "description": "kvm mips build exception for guest execution, generates vector to common handler"
        },
        "audit_kill_trees": {
            "id": "audit_kill_trees",
            "ground_truth": 0,
            "function": "audit_kill_trees",
            "description": "Audit kill tree for synchronous syscall delay"
        },
        "pidff_rescale_signed": {
            "id": "pidff_rescale_signed",
            "ground_truth": 0,
            "function": "pidff_rescale_signed",
            "description": "Rescale signed value in range for given field."
        },
        "sa_sync_cmd": {
            "id": "sa_sync_cmd",
            "ground_truth": 0,
            "function": "sa_sync_cmd",
            "description": "synchronous command execution and completion waiting function"
        },
        "rvt_alloc_rq": {
            "id": "rvt_alloc_rq",
            "ground_truth": 1,
            "function": "rvt_alloc_rq",
            "description": "Allocate memory for RVT receive queue data structure"
        },
        "set_mtu": {
            "id": "set_mtu",
            "ground_truth": 0,
            "function": "set_mtu",
            "description": "Set MTU to handle incoming size and restrict outgoing size. No impact on running programs."
        },
        "btrfs_submit_compressed_write": {
            "id": "btrfs_submit_compressed_write",
            "ground_truth": 1,
            "function": "btrfs_submit_compressed_write",
            "description": "Worker function for submitting compressed writes with checksum and io hook preparation."
        },
        "sym_lookup_dmap": {
            "id": "sym_lookup_dmap",
            "ground_truth": 0,
            "function": "sym_lookup_dmap",
            "description": "Lookup bit DMA segment map if direct mapping fails."
        },
        "nfs_fscache_release_page": {
            "id": "nfs_fscache_release_page",
            "ground_truth": 0,
            "function": "nfs_fscache_release_page",
            "description": "Release caching state of NFS page, return true if not busy"
        },
        "tape_std_mtfsr": {
            "id": "tape_std_mtfsr",
            "ground_truth": 0,
            "function": "tape_std_mtfsr",
            "description": "Calculate standard deviation of tape forward space"
        },
        "fsm_getstate": {
            "id": "fsm_getstate",
            "ground_truth": 0,
            "function": "fsm_getstate",
            "description": "Returns current state of FSM instance."
        },
        "e1000_kmrn_lock_loss_workaround_ich8lan": {
            "id": "e1000_kmrn_lock_loss_workaround_ich8lan",
            "ground_truth": 0,
            "function": "e1000_kmrn_lock_loss_workaround_ich8lan",
            "description": "Workaround for kumeran lock loss on link status change for gigabit speed. Checks diagnostic register for lock loss bit and resets phy if necessary."
        },
        "tty_write": {
            "id": "tty_write",
            "ground_truth": 1,
            "function": "tty_write",
            "description": "Write data to tty device via line discipline, serialized with atomic write lock"
        },
        "chained_irq_enter": {
            "id": "chained_irq_enter",
            "ground_truth": 0,
            "function": "chained_irq_enter",
            "description": "Chained IRQ handler with fasteoi/level trigger flow control."
        },
        "ct_limit_get": {
            "id": "ct_limit_get",
            "ground_truth": 0,
            "function": "ct_limit_get",
            "description": "Get CT limit with RCU read lock."
        },
        "siw_prepare_fpdu": {
            "id": "siw_prepare_fpdu",
            "ground_truth": 1,
            "function": "siw_prepare_fpdu",
            "description": "Prepares transmit context for sending fpdu with user data, computes max length, considers available sendspace, and uses qp and wqe for transmission."
        },
        "ipr_ioafp_mode_sense_page28": {
            "id": "ipr_ioafp_mode_sense_page28",
            "ground_truth": 0,
            "function": "ipr_ioafp_mode_sense_page28",
            "description": "Retrieve SCSI bus attribute using mode sense page"
        },
        "strncpy": {
            "id": "strncpy",
            "ground_truth": 0,
            "function": "strncpy",
            "description": "Copy limited length nul terminated string, not terminated if source exceeds byte char dest, from src to dest with max size"
        },
        "csi2tx_dphy_set_wakeup": {
            "id": "csi2tx_dphy_set_wakeup",
            "ground_truth": 0,
            "function": "csi2tx_dphy_set_wakeup",
            "description": "Set wakeup value in CSI2TX DPHY"
        },
        "sctp_ulpq_abort_pd": {
            "id": "sctp_ulpq_abort_pd",
            "ground_truth": 0,
            "function": "sctp_ulpq_abort_pd",
            "description": " \"Abort partial delivery in SCTP ULPQ\"."
        },
        "unregister_atmdevice_notifier": {
            "id": "unregister_atmdevice_notifier",
            "ground_truth": 0,
            "function": "unregister_atmdevice_notifier",
            "description": "Unregister ATM device notifier for signal events."
        },
        "blk_done_softirq": {
            "id": "blk_done_softirq",
            "ground_truth": 0,
            "function": "blk_done_softirq",
            "description": "Move entry to local list and pass to queue handler"
        },
        "ucb1x00_disable": {
            "id": "ucb1x00_disable",
            "ground_truth": 0,
            "function": "ucb1x00_disable",
            "description": "Disable ucb1x00 sib clock when enable and disable calls match."
        },
        "f2fs_npages_for_summary_flush": {
            "id": "f2fs_npages_for_summary_flush",
            "ground_truth": 1,
            "function": "f2fs_npages_for_summary_flush",
            "description": "Calculate current summary page for writing"
        },
        "gcov_iter_get_info": {
            "id": "gcov_iter_get_info",
            "ground_truth": 0,
            "function": "gcov_iter_get_info",
            "description": "Returns profiling data for file iterator using gcov iterator struct."
        },
        "bochs_hw_init": {
            "id": "bochs_hw_init",
            "ground_truth": 0,
            "function": "bochs_hw_init",
            "description": "initialize function for Bochs hardware."
        },
        "ctcm_chx_restart": {
            "id": "ctcm_chx_restart",
            "ground_truth": 0,
            "function": "ctcm_chx_restart",
            "description": "Restart channel state machine event with unspecified arguments"
        },
        "ia_css_set_cnr_config": {
            "id": "ia_css_set_cnr_config",
            "ground_truth": 0,
            "function": "ia_css_set_cnr_config",
            "description": "Sets CNR configuration using generated code."
        },
        "rxrpc_end_rx_phase": {
            "id": "rxrpc_end_rx_phase",
            "ground_truth": 0,
            "function": "rxrpc_end_rx_phase",
            "description": "Ends packet reception phase in rxrpc."
        },
        "bnx2x_get_load_status": {
            "id": "bnx2x_get_load_status",
            "ground_truth": 0,
            "function": "bnx2x_get_load_status",
            "description": "Reads load status for current engine under rtnl lock"
        },
        "mhi_alloc_controller": {
            "id": "mhi_alloc_controller",
            "ground_truth": 0,
            "function": "mhi_alloc_controller",
            "description": "Allocate MHI controller structure with zero initialized memory."
        },
        "xfs_dir2_leaf_hdr_from_disk": {
            "id": "xfs_dir2_leaf_hdr_from_disk",
            "ground_truth": 0,
            "function": "xfs_dir2_leaf_hdr_from_disk",
            "description": "header from disk for XFS directory."
        },
        "mvpp2_port_probe": {
            "id": "mvpp2_port_probe",
            "ground_truth": 0,
            "function": "mvpp2_port_probe",
            "description": "Port initialization for mvpp2 port probe"
        },
        "tiocsetd": {
            "id": "tiocsetd",
            "ground_truth": 1,
            "function": "tiocsetd",
            "description": "Sets line discipline for tty device based on user request"
        },
        "init_done": {
            "id": "init_done",
            "ground_truth": 0,
            "function": "init_done",
            "description": "Initializes opcode struct for nvbios."
        },
        "tx_timeout": {
            "id": "tx_timeout",
            "ground_truth": 0,
            "function": "tx_timeout",
            "description": "Updates stats and completes tx processing on hdlc frame timeout."
        },
        "ib_destroy_srq_user": {
            "id": "ib_destroy_srq_user",
            "ground_truth": 1,
            "function": "ib_destroy_srq_user",
            "description": "Destroys specified SRQ object with user or kernel data."
        },
        "ufshcd_exec_raw_upiu_cmd": {
            "id": "ufshcd_exec_raw_upiu_cmd",
            "ground_truth": 0,
            "function": "ufshcd_exec_raw_upiu_cmd",
            "description": "API for sending raw UPIU commands, supports UTP transfer and task management requests. Caller fills UPIU content, no input validation. Parameters include adapter instance, UPIU request and reply, message code, descriptor buffer and size, and descriptor operation."
        },
        "hid_match_report": {
            "id": "hid_match_report",
            "ground_truth": 0,
            "function": "hid_match_report",
            "description": "Checks if driver is raw event, compares HID driver report table report type to HID device report type struct, and reports HID report to match against."
        },
        "st_ll_disable": {
            "id": "st_ll_disable",
            "ground_truth": 0,
            "function": "st_ll_disable",
            "description": "Disable ST LL module in ST core local module."
        },
        "bnx2x_nic_load_request": {
            "id": "bnx2x_nic_load_request",
            "ground_truth": 0,
            "function": "bnx2x_nic_load_request",
            "description": "Sends load request to MCP and analyzes response."
        },
        "dm_crtc_high_irq": {
            "id": "dm_crtc_high_irq",
            "ground_truth": 0,
            "function": "dm_crtc_high_irq",
            "description": "Handles high IRQ for CRTC, notifies DRM of VSYNC event."
        },
        "sctp_chunk_destroy": {
            "id": "sctp_chunk_destroy",
            "ground_truth": 0,
            "function": "sctp_chunk_destroy",
            "description": "Release memory of SCTP chunk"
        },
        "__usbnet_queue_skb": {
            "id": "__usbnet_queue_skb",
            "ground_truth": 0,
            "function": "__usbnet_queue_skb",
            "description": "usbnet queue skb, caller holds list lock"
        },
        "is_polling_required": {
            "id": "is_polling_required",
            "ground_truth": 0,
            "function": "is_polling_required",
            "description": "Check if polling needed for battery charger manager"
        },
        "rpc_net_ns": {
            "id": "rpc_net_ns",
            "ground_truth": 0,
            "function": "rpc_net_ns",
            "description": "Get network namespace for RPC client."
        },
        "die_get_call_fileno": {
            "id": "die_get_call_fileno",
            "ground_truth": 0,
            "function": "die_get_call_fileno",
            "description": "Get call file index number in CU DIE."
        },
        "cpufreq_set_cur_state": {
            "id": "cpufreq_set_cur_state",
            "ground_truth": 0,
            "function": "cpufreq_set_cur_state",
            "description": "Sets current cooling state for thermal cooling device."
        },
        "get_driver": {
            "id": "get_driver",
            "ground_truth": 0,
            "function": "get_driver",
            "description": "Returns a driver."
        },
        "ib_dealloc_pd_user": {
            "id": "ib_dealloc_pd_user",
            "ground_truth": 1,
            "function": "ib_dealloc_pd_user",
            "description": "Deallocates protection domain, caller must destroy resources and prevent new allocation."
        },
        "intel_master_probe": {
            "id": "intel_master_probe",
            "ground_truth": 0,
            "function": "intel_master_probe",
            "description": "Master probe initialization for Intel."
        },
        "_scsih_sas_ir_operation_status_event_debug": {
            "id": "_scsih_sas_ir_operation_status_event_debug",
            "ground_truth": 0,
            "function": "_scsih_sas_ir_operation_status_event_debug",
            "description": "Debug SCSI SAS IR operation status event for MPT3SAS adapter."
        },
        "isp1760_udc_get_status": {
            "id": "isp1760_udc_get_status",
            "ground_truth": 0,
            "function": "isp1760_udc_get_status",
            "description": "Get status of ISP1760 UDC control endpoint."
        },
        "write_d8": {
            "id": "write_d8",
            "ground_truth": 0,
            "function": "write_d8",
            "description": "Writes data to D8 I2C bus."
        },
        "qed_iov_is_valid_vfid": {
            "id": "qed_iov_is_valid_vfid",
            "ground_truth": 0,
            "function": "qed_iov_is_valid_vfid",
            "description": "Check if VF ID is valid, considering enabled and non-malicious parameters."
        },
        "synthvid_negotiate_ver": {
            "id": "synthvid_negotiate_ver",
            "ground_truth": 0,
            "function": "synthvid_negotiate_ver",
            "description": "Check synthetic video protocol version with host"
        },
        "put_dec_full4": {
            "id": "put_dec_full4",
            "ground_truth": 0,
            "function": "put_dec_full4",
            "description": "Put decimal number in range with exact approximation."
        },
        "mts64_disable_readout": {
            "id": "mts64_disable_readout",
            "ground_truth": 0,
            "function": "mts64_disable_readout",
            "description": "Disable readout by clearing control register bit."
        },
        "ali_lock_sectors": {
            "id": "ali_lock_sectors",
            "ground_truth": 0,
            "function": "ali_lock_sectors",
            "description": "Locks sector count on older ATA devices for faster access"
        },
        "pcan_usb_restart_pending": {
            "id": "pcan_usb_restart_pending",
            "ground_truth": 0,
            "function": "pcan_usb_restart_pending",
            "description": "Handle submission of restart urb for PCAN USB restart pending."
        },
        "hns_rcb_reset_ring_hw": {
            "id": "hns_rcb_reset_ring_hw",
            "ground_truth": 0,
            "function": "hns_rcb_reset_ring_hw",
            "description": "Resets hardware ring for HN RCB queue."
        },
        "zynqmp_clock_get_topology": {
            "id": "zynqmp_clock_get_topology",
            "ground_truth": 0,
            "function": "zynqmp_clock_get_topology",
            "description": "Get clock topology from firmware using PM API"
        },
        "WRITE_IT_WAIT": {
            "id": "WRITE_IT_WAIT",
            "ground_truth": 0,
            "function": "WRITE_IT_WAIT",
            "description": "Write data and wait for confirmation from burnt-in address."
        },
        "ssb_set_drvdata": {
            "id": "ssb_set_drvdata",
            "ground_truth": 1,
            "function": "ssb_set_drvdata",
            "description": "Sets device-specific user data for SSB."
        },
        "ath9k_hw_btcoex_set_weight": {
            "id": "ath9k_hw_btcoex_set_weight",
            "ground_truth": 0,
            "function": "ath9k_hw_btcoex_set_weight",
            "description": "Sets weight for Bluetooth and WLAN on AR9002 and above using stomp type."
        },
        "rvt_query_gid": {
            "id": "rvt_query_gid",
            "ground_truth": 0,
            "function": "rvt_query_gid",
            "description": "Returns GID based on device, port number, and index in table."
        },
        "rcutree_dead_cpu": {
            "id": "rcutree_dead_cpu",
            "ground_truth": 0,
            "function": "rcutree_dead_cpu",
            "description": "CPU removal reported, cleanup done in process context, no explicit locking needed"
        },
        "pvrdma_modify_qp": {
            "id": "pvrdma_modify_qp",
            "ground_truth": 1,
            "function": "pvrdma_modify_qp",
            "description": "Modify queue pair attribute, return success or errno."
        },
        "i3c_generic_ibi_recycle_slot": {
            "id": "i3c_generic_ibi_recycle_slot",
            "ground_truth": 0,
            "function": "i3c_generic_ibi_recycle_slot",
            "description": "Recycles I3C generic IBIs, returns slot to pool."
        },
        "ctcmpc_dump_skb": {
            "id": "ctcmpc_dump_skb",
            "ground_truth": 0,
            "function": "ctcmpc_dump_skb",
            "description": "Dump header and first byte of sk buff for debugging."
        },
        "posix_cputimers_init_work": {
            "id": "posix_cputimers_init_work",
            "ground_truth": 0,
            "function": "posix_cputimers_init_work",
            "description": "Initialize posix cpu timer task work"
        },
        "qcom_nand_ooblayout_ecc": {
            "id": "qcom_nand_ooblayout_ecc",
            "ground_truth": 1,
            "function": "qcom_nand_ooblayout_ecc",
            "description": "Qcom NAND controller page layout with ECC enabled, including user data, ECC, reserved data, and bad block markers. Varies based on ECC strength and bus width. Inaccessible bytes are skipped when writing and ignored when reading."
        },
        "csky_pmu_read_icmc": {
            "id": "csky_pmu_read_icmc",
            "ground_truth": 0,
            "function": "csky_pmu_read_icmc",
            "description": "Reads L1 I-cache miss counter for C-SKY PMU."
        },
        "dw_apb_clocksource_start": {
            "id": "dw_apb_clocksource_start",
            "ground_truth": 0,
            "function": "dw_apb_clocksource_start",
            "description": "Starts clocksource counting, enables calibration of timer"
        },
        "jsp_hpd_irq_setup": {
            "id": "jsp_hpd_irq_setup",
            "ground_truth": 0,
            "function": "jsp_hpd_irq_setup",
            "description": "Configures IRQ setup for JSP HPD port"
        },
        "ch7017_dpms": {
            "id": "ch7017_dpms",
            "ground_truth": 0,
            "function": "ch7017_dpms",
            "description": "Set power state for ch7017 using dpms."
        },
        "may_delete": {
            "id": "may_delete",
            "ground_truth": 1,
            "function": "may_delete",
            "description": "Checks if link can be deleted from directory, requires write and exec permission, handles special cases like read-only, append-only, and immutable directories, and enforces ownership and capability requirements."
        },
        "ecryptfs_copy_mount_wide_flags_to_inode_flags": {
            "id": "ecryptfs_copy_mount_wide_flags_to_inode_flags",
            "ground_truth": 1,
            "function": "ecryptfs_copy_mount_wide_flags_to_inode_flags",
            "description": "Propagate mount-wide flag to inode flag for ecryptfs"
        },
        "btrfs_clone": {
            "id": "btrfs_clone",
            "ground_truth": 1,
            "function": "btrfs_clone",
            "description": "Clone range from inode to another, with offset and length, update time on target inode"
        },
        "jbd2_journal_unlock_updates": {
            "id": "jbd2_journal_unlock_updates",
            "ground_truth": 0,
            "function": "jbd2_journal_unlock_updates",
            "description": "Release barrier in jbd2 journal update without lock"
        },
        "remove_net_device": {
            "id": "remove_net_device",
            "ground_truth": 0,
            "function": "remove_net_device",
            "description": "Remove network device from table"
        },
        "dm_bm_is_read_only": {
            "id": "dm_bm_is_read_only",
            "ground_truth": 0,
            "function": "dm_bm_is_read_only",
            "description": "Switches BM to read-only mode, returns EPERM, write lock, flush, and unlock. Avoid using DM BM unlock move."
        },
        "mutex_lock": {
            "id": "mutex_lock",
            "ground_truth": 0,
            "function": "mutex_lock",
            "description": "Acquire mutex lock exclusively, sleep until available, release by same task, no recursive locking, unlock before exit, initialize before locking, no memset, debug option available."
        },
        "bcma_host_soc_register_driver": {
            "id": "bcma_host_soc_register_driver",
            "ground_truth": 0,
            "function": "bcma_host_soc_register_driver",
            "description": "register driver for BCMA host SOC."
        },
        "binder_alloc_new_buf": {
            "id": "binder_alloc_new_buf",
            "ground_truth": 1,
            "function": "binder_alloc_new_buf",
            "description": "Allocate new binder buffer with requested size, return kernel buffer pointer. Sum of three sizes rounded up to pointer size boundary. Includes proc size, data size, and user specified buffer offset size. Optional async transaction and PID for debugging."
        },
        "usb4_port_enumerate_retimers": {
            "id": "usb4_port_enumerate_retimers",
            "ground_truth": 0,
            "function": "usb4_port_enumerate_retimers",
            "description": "USB4 port sends broadcast RT transaction to enumerate retimers"
        },
        "ieee80211_get_SA": {
            "id": "ieee80211_get_SA",
            "ground_truth": 0,
            "function": "ieee80211_get_SA",
            "description": "Get pointer to source address in IEEE80211 frame"
        },
        "fc_fc4_add_lport": {
            "id": "fc_fc4_add_lport",
            "ground_truth": 0,
            "function": "fc_fc4_add_lport",
            "description": "Adds new local port to list and runs notifiers."
        },
        "hfi1_get_irq_affinity": {
            "id": "hfi1_get_irq_affinity",
            "ground_truth": 0,
            "function": "hfi1_get_irq_affinity",
            "description": "Sets IRQ affinity to CPU determined by function."
        },
        "islpci_mgmt_rx_fill": {
            "id": "islpci_mgmt_rx_fill",
            "ground_truth": 0,
            "function": "islpci_mgmt_rx_fill",
            "description": "Fill receive queue for management frames with fresh buffer"
        },
        "_omap_dsi_configure_irqs": {
            "id": "_omap_dsi_configure_irqs",
            "ground_truth": 0,
            "function": "_omap_dsi_configure_irqs",
            "description": "Configures IRQs for OMAP DSI, caller must lock DSI IRQ."
        },
        "_rsa_enc": {
            "id": "_rsa_enc",
            "ground_truth": 0,
            "function": "_rsa_enc",
            "description": "RSA encryption using RSAEP function from RFC3447 with modular arithmetic."
        },
        "LZ4_compressBound": {
            "id": "LZ4_compressBound",
            "ground_truth": 0,
            "function": "LZ4_compressBound",
            "description": "Max output size for worst-case input in LZ4 compression"
        },
        "seq_nr_after": {
            "id": "seq_nr_after",
            "ground_truth": 0,
            "function": "seq_nr_after",
            "description": "Check if seq nr is higher in sequence"
        },
        "alloc_userspace": {
            "id": "alloc_userspace",
            "ground_truth": 1,
            "function": "alloc_userspace",
            "description": "Allocate userspace pointer for ioctl, return error codes if memory allocation fails, specify size and extra space needed"
        },
        "done": {
            "id": "done",
            "ground_truth": 0,
            "function": "done",
            "description": "Function is complete and accessible to the public."
        },
        "bcma_core_chipcommon_early_init": {
            "id": "bcma_core_chipcommon_early_init",
            "ground_truth": 0,
            "function": "bcma_core_chipcommon_early_init",
            "description": "BCMA core chipcommon early init driver"
        },
        "i810_driver_reclaim_buffers": {
            "id": "i810_driver_reclaim_buffers",
            "ground_truth": 0,
            "function": "i810_driver_reclaim_buffers",
            "description": "Lock-held i810 driver buffer reclaim function"
        },
        "MT2063_AddExclZone": {
            "id": "MT2063_AddExclZone",
            "ground_truth": 0,
            "function": "MT2063_AddExclZone",
            "description": "Add and merge exclusion zone if range is outside 1st and not negative"
        },
        "f2fs_flush_sit_entries": {
            "id": "f2fs_flush_sit_entries",
            "ground_truth": 1,
            "function": "f2fs_flush_sit_entries",
            "description": "Flushes SIT entry and moves prefree segments to free segments."
        },
        "i40e_vsi_config_rss": {
            "id": "i40e_vsi_config_rss",
            "ground_truth": 0,
            "function": "i40e_vsi_config_rss",
            "description": "Configures RSS for i40e VSI using VMDq structure."
        },
        "adt7462_read_word_data": {
            "id": "adt7462_read_word_data",
            "ground_truth": 0,
            "function": "adt7462_read_word_data",
            "description": "Reads low byte first in ADT7462 word data register."
        },
        "af_alg_sendmsg": {
            "id": "af_alg_sendmsg",
            "ground_truth": 1,
            "function": "af_alg_sendmsg",
            "description": "af_alg_sendmsg handles sendmsg system call, allocates struct af alg tsgl, fills ctx with cmsg sock info, verifies iv size, returns copied data."
        },
        "led_trigger_register_simple": {
            "id": "led_trigger_register_simple",
            "ground_truth": 0,
            "function": "led_trigger_register_simple",
            "description": "Registers a simple LED trigger with an empty inline function."
        },
        "btrfs_get_fs_root": {
            "id": "btrfs_get_fs_root",
            "ground_truth": 1,
            "function": "btrfs_get_fs_root",
            "description": " Get Btrfs file system root reference object in memory, verify tree existence and item presence."
        },
        "ecryptfs_miscdev_write": {
            "id": "ecryptfs_miscdev_write",
            "ground_truth": 1,
            "function": "ecryptfs_miscdev_write",
            "description": "Handle write to daemon miscdev, return bytes read from buffer"
        },
        "fsnotify_unmount_inodes": {
            "id": "fsnotify_unmount_inodes",
            "ground_truth": 1,
            "function": "fsnotify_unmount_inodes",
            "description": "Handle watched inodes during unmount, safe against concurrent modifier, temporarily drop lock, can block superblock unmount."
        },
        "ocfs2_shift_tree_depth": {
            "id": "ocfs2_shift_tree_depth",
            "ground_truth": 0,
            "function": "ocfs2_shift_tree_depth",
            "description": "Add level to allocation tree, return new extent block"
        },
        "shrink_dcache_for_umount": {
            "id": "shrink_dcache_for_umount",
            "ground_truth": 1,
            "function": "shrink_dcache_for_umount",
            "description": "Shrink dcache for umount, destroy attached dentries on unmount."
        },
        "ext4_writepage": {
            "id": "ext4_writepage",
            "ground_truth": 1,
            "function": "ext4_writepage",
            "description": " Writes data to ext4 page, handles journaling, no block allocation, handles dirty buffer heads, avoids recursive page lock."
        },
        "cifs_dfs_do_mount": {
            "id": "cifs_dfs_do_mount",
            "ground_truth": 1,
            "function": "cifs_dfs_do_mount",
            "description": "Mounts path using DFS full path, allows failover with root server, uses UNC format"
        },
        "clone_private_mount": {
            "id": "clone_private_mount",
            "ground_truth": 1,
            "function": "clone_private_mount",
            "description": "Creates private clone of path, detached from namespace."
        },
        "e1000_sw_init": {
            "id": "e1000_sw_init",
            "ground_truth": 0,
            "function": "e1000_sw_init",
            "description": "Initializes e1000 adapter software and private data structures."
        },
        "caam_rsa_count_leading_zeros": {
            "id": "caam_rsa_count_leading_zeros",
            "ground_truth": 0,
            "function": "caam_rsa_count_leading_zeros",
            "description": "Counts leading zeros in RSA key using scatterlist and byte stripping."
        },
        "call_console_drivers": {
            "id": "call_console_drivers",
            "ground_truth": 1,
            "function": "call_console_drivers",
            "description": "Call console driver to write log buf with console lock held."
        },
        "stat_start": {
            "id": "stat_start",
            "ground_truth": 0,
            "function": "stat_start",
            "description": "Iterate over statistic entry with stat start."
        },
        "mid_q_entry": {
            "id": "mid_q_entry",
            "ground_truth": 0,
            "function": "mid_q_entry",
            "description": "Allocate mid sign message for mid entry setup request."
        },
        "smc_conn_abort_work": {
            "id": "smc_conn_abort_work",
            "ground_truth": 0,
            "function": "smc_conn_abort_work",
            "description": "Abort scheduled connection work from tasklet context."
        },
        "prepare_for_delete_or_cut": {
            "id": "prepare_for_delete_or_cut",
            "ground_truth": 0,
            "function": "prepare_for_delete_or_cut",
            "description": "Prepare for delete/cut, balance size, truncate, convert to direct item, return balance mode determination."
        },
        "sg_to_qm_sg": {
            "id": "sg_to_qm_sg",
            "ground_truth": 0,
            "function": "sg_to_qm_sg",
            "description": "Convert scatterlist to link table format, without final bit, return last entry."
        },
        "ixgbe_init_rx_addrs_generic": {
            "id": "ixgbe_init_rx_addrs_generic",
            "ground_truth": 0,
            "function": "ixgbe_init_rx_addrs_generic",
            "description": "Initializes receive address filter, sets MAC address, clears rest of receive address register and multicast table."
        },
        "snd_ali_reset_5451": {
            "id": "snd_ali_reset_5451",
            "ground_truth": 0,
            "function": "snd_ali_reset_5451",
            "description": "Resets AC97 using snd_ali_reset_5451."
        },
        "sisusbcon_scrolldelta": {
            "id": "sisusbcon_scrolldelta",
            "ground_truth": 0,
            "function": "sisusbcon_scrolldelta",
            "description": "Interface routine for sisusbcon scrolldelta"
        },
        "asm9260_timer_init": {
            "id": "asm9260_timer_init",
            "ground_truth": 0,
            "function": "asm9260_timer_init",
            "description": "Initialize timer in ASM9260 chip"
        },
        "print_stats": {
            "id": "print_stats",
            "ground_truth": 0,
            "function": "print_stats",
            "description": "Prints key information and statistics from procfs."
        },
        "d40_desc_queue": {
            "id": "d40_desc_queue",
            "ground_truth": 0,
            "function": "d40_desc_queue",
            "description": "Remove and add description to queues"
        },
        "shrink_dcache_sb": {
            "id": "shrink_dcache_sb",
            "ground_truth": 1,
            "function": "shrink_dcache_sb",
            "description": "Shrink dcache for specified superblock to free before unmounting file system."
        },
        "api_cmd_head_init": {
            "id": "api_cmd_head_init",
            "ground_truth": 0,
            "function": "api_cmd_head_init",
            "description": "Initialize API command chain head in HW struct for Hinic API"
        },
        "blk_rq_map_user_iov": {
            "id": "blk_rq_map_user_iov",
            "ground_truth": 1,
            "function": "blk_rq_map_user_iov",
            "description": "Maps user data to request for passthrough, uses kernel bounce buffer if needed, must be unmapped with blk rq unmap user, may need to bounce through blk queue, caller responsible for ensuring page accessibility, takes request queue and data pointer as input."
        },
        "of_changeset_init": {
            "id": "of_changeset_init",
            "ground_truth": 0,
            "function": "of_changeset_init",
            "description": "Initializes changeset structure pointer for use."
        },
        "i40iw_create_cq": {
            "id": "i40iw_create_cq",
            "ground_truth": 1,
            "function": "i40iw_create_cq",
            "description": "Creates a completion queue (CQ) with user-defined attributes."
        },
        "nand_onfi_detect": {
            "id": "nand_onfi_detect",
            "ground_truth": 0,
            "function": "nand_onfi_detect",
            "description": "Detects ONFI compliant NAND chip or returns false"
        },
        "wait_for_xmitr": {
            "id": "wait_for_xmitr",
            "ground_truth": 0,
            "function": "wait_for_xmitr",
            "description": "Wait for transmitter register to empty."
        },
        "wm8400_set_dai_fmt": {
            "id": "wm8400_set_dai_fmt",
            "ground_truth": 0,
            "function": "wm8400_set_dai_fmt",
            "description": "Sets audio format for ADC and voice DAC in wm8400."
        },
        "read_lba": {
            "id": "read_lba",
            "ground_truth": 0,
            "function": "read_lba",
            "description": "Reads LBA state from block device into buffer, returns bytes read."
        },
        "ext4_ext_rm_leaf": {
            "id": "ext4_ext_rm_leaf",
            "ground_truth": 1,
            "function": "ext4_ext_rm_leaf",
            "description": "Remove extent between start and end blocks in ext4 file system"
        },
        "ve_spc_round_performance": {
            "id": "ve_spc_round_performance",
            "ground_truth": 0,
            "function": "ve_spc_round_performance",
            "description": "Find closest match to given frequency in opp table"
        },
        "mwifiex_cmd_reg_access": {
            "id": "mwifiex_cmd_reg_access",
            "ground_truth": 0,
            "function": "mwifiex_cmd_reg_access",
            "description": "Prepare command to access various types of registers"
        },
        "usb_bus_start_enum": {
            "id": "usb_bus_start_enum",
            "ground_truth": 0,
            "function": "usb_bus_start_enum",
            "description": "Starts immediate USB enumeration for OTG controller driver"
        },
        "__nla_validate_nested": {
            "id": "__nla_validate_nested",
            "ground_truth": 0,
            "function": "__nla_validate_nested",
            "description": "nla_validate_nested validates nested attribute stream against policy, ignores attributes exceeding maxtype, returns success or error code."
        },
        "change_mode": {
            "id": "change_mode",
            "ground_truth": 0,
            "function": "change_mode",
            "description": "Safe mode change with possible EBUSY error"
        },
        "hostap_update_sta_ps": {
            "id": "hostap_update_sta_ps",
            "ground_truth": 0,
            "function": "hostap_update_sta_ps",
            "description": "Updates STA power saving state based on received frames."
        },
        "bnx2x_vf_qtbl_set_q": {
            "id": "bnx2x_vf_qtbl_set_q",
            "ground_truth": 0,
            "function": "bnx2x_vf_qtbl_set_q",
            "description": "Sets VF API helper for bnx2x VF qtbl."
        },
        "__filemap_fdatawrite_range": {
            "id": "__filemap_fdatawrite_range",
            "ground_truth": 1,
            "function": "__filemap_fdatawrite_range",
            "description": "filemap fdatawrite range start writeback on mapping dirty page in range"
        },
        "wil_mtu2macbuf": {
            "id": "wil_mtu2macbuf",
            "ground_truth": 0,
            "function": "wil_mtu2macbuf",
            "description": "Calculate firmware's byte-aligned MAC buffer size with overhead for wireless transmission."
        },
        "snd_pcm_link": {
            "id": "snd_pcm_link",
            "ground_truth": 0,
            "function": "snd_pcm_link",
            "description": "Handles linking of PCM devices."
        },
        "btrfs_run_delayed_refs": {
            "id": "btrfs_run_delayed_refs",
            "ground_truth": 1,
            "function": "btrfs_run_delayed_refs",
            "description": "Process delayed reference count and extent insertion in Btrfs"
        },
        "mei_fsync": {
            "id": "mei_fsync",
            "ground_truth": 0,
            "function": "mei_fsync",
            "description": "fsync handler struct file pointer mei_fsync, enodev if client not connected"
        },
        "pr_to_dev": {
            "id": "pr_to_dev",
            "ground_truth": 0,
            "function": "pr_to_dev",
            "description": "Converts PR to Dev for config item type TB Dev PR CIT."
        },
        "tb_xdomain_add": {
            "id": "tb_xdomain_add",
            "ground_truth": 0,
            "function": "tb_xdomain_add",
            "description": "Add xdomain to bus, start discovery protocol, call tb xdomain remove to release object"
        },
        "cros_ec_keyb_report_bs": {
            "id": "cros_ec_keyb_report_bs",
            "ground_truth": 0,
            "function": "cros_ec_keyb_report_bs",
            "description": "Reports non-matrixed button/switch bitmap from EC, syncs event, updates keyboard device struct."
        },
        "mlx5_eq_update_cc": {
            "id": "mlx5_eq_update_cc",
            "ground_truth": 0,
            "function": "mlx5_eq_update_cc",
            "description": "Updates consumer index to prevent queue overflow in mlx5 eq."
        },
        "ds1685_rtc_read_alarm": {
            "id": "ds1685_rtc_read_alarm",
            "ground_truth": 0,
            "function": "ds1685_rtc_read_alarm",
            "description": "Reads alarm register in ds1685 RTC, with wildcard support. Takes device and alarm structures as input."
        },
        "mptscsih_bios_param": {
            "id": "mptscsih_bios_param",
            "ground_truth": 0,
            "function": "mptscsih_bios_param",
            "description": "Unknown function with unclear purpose."
        },
        "t4_fw_bye": {
            "id": "t4_fw_bye",
            "ground_truth": 0,
            "function": "t4_fw_bye",
            "description": "Terminate communication with firmware using adapter and mailbox"
        },
        "radix_tree_next_chunk": {
            "id": "radix_tree_next_chunk",
            "ground_truth": 0,
            "function": "radix_tree_next_chunk",
            "description": "Finds next chunk in radix tree for iteration, returns pointer to first slot and fills iter with chunk position data."
        },
        "aac_rx_deliver_producer": {
            "id": "aac_rx_deliver_producer",
            "ground_truth": 0,
            "function": "aac_rx_deliver_producer",
            "description": "Delivers AAC RX producer struct FIB to issue and returns success."
        },
        "__ppp_channel_push": {
            "id": "__ppp_channel_push",
            "ground_truth": 0,
            "function": "__ppp_channel_push",
            "description": "Attempt to send data on PPP channel"
        },
        "die_walk_lines": {
            "id": "die_walk_lines",
            "ground_truth": 1,
            "function": "die_walk_lines",
            "description": "Walks on lines in given die, calls callback on each line. Works on function or cu die. Includes function entry and inline call site."
        },
        "virtio_break_device": {
            "id": "virtio_break_device",
            "ground_truth": 0,
            "function": "virtio_break_device",
            "description": "Prevents device use, allows driver recovery, may require lock for flushing."
        },
        "csi2_get_format": {
            "id": "csi2_get_format",
            "ground_truth": 0,
            "function": "csi2_get_format",
            "description": "Get CSI2 format from handle, subdev, and configuration"
        },
        "dcss_mkname": {
            "id": "dcss_mkname",
            "ground_truth": 0,
            "function": "dcss_mkname",
            "description": "Converts ASCII name to EBCDIC VM segment name"
        },
        "btrfs_qgroup_free_refroot": {
            "id": "btrfs_qgroup_free_refroot",
            "ground_truth": 1,
            "function": "btrfs_qgroup_free_refroot",
            "description": "Frees reserved space for a qgroup with specified type."
        },
        "i40iw_dealloc_pd": {
            "id": "i40iw_dealloc_pd",
            "ground_truth": 1,
            "function": "i40iw_dealloc_pd",
            "description": "Deallocates PD structure for i40iw driver. (10 tokens)"
        },
        "mwifiex_update_autoindex_ies": {
            "id": "mwifiex_update_autoindex_ies",
            "ground_truth": 0,
            "function": "mwifiex_update_autoindex_ies",
            "description": "Prepares IE data buffer for FW command."
        },
        "usc_DmaCmd": {
            "id": "usc_DmaCmd",
            "ground_truth": 0,
            "function": "usc_DmaCmd",
            "description": "Issue DMA command to DCAR with device info and command mask"
        },
        "set_termios": {
            "id": "set_termios",
            "ground_truth": 1,
            "function": "set_termios",
            "description": "Set termios value for tty device, prepare data, lock ldisc and termios."
        },
        "print_address": {
            "id": "print_address",
            "ground_truth": 0,
            "function": "print_address",
            "description": "Prints address with copyright information."
        },
        "ccw_device_set_options": {
            "id": "ccw_device_set_options",
            "ground_truth": 0,
            "function": "ccw_device_set_options",
            "description": "Sets specified options for a CCW device. (10 tokens)"
        },
        "drm_atomic_bridge_chain_pre_enable": {
            "id": "drm_atomic_bridge_chain_pre_enable",
            "ground_truth": 0,
            "function": "drm_atomic_bridge_chain_pre_enable",
            "description": "Prepares for enabling all bridges in encoder chain."
        },
        "FUSE_ATTR_SUBMOUNT": {
            "id": "FUSE_ATTR_SUBMOUNT",
            "ground_truth": 1,
            "function": "FUSE_ATTR_SUBMOUNT",
            "description": "Fuse attribute submount object for submount root."
        },
        "batadv_gw_bandwidth_set": {
            "id": "batadv_gw_bandwidth_set",
            "ground_truth": 0,
            "function": "batadv_gw_bandwidth_set",
            "description": "Parse and set download/upload gateway bandwidth from buffer for soft interface"
        },
        "kvm_set_way_flush": {
            "id": "kvm_set_way_flush",
            "ground_truth": 0,
            "function": "kvm_set_way_flush",
            "description": " Converts ops to VA ops for cache maintenance, used when turning cache on/off, flushes cache on both on/off, enables VM trapping for full clean if trapped operation detected."
        },
        "sst_slot_put": {
            "id": "sst_slot_put",
            "ground_truth": 0,
            "function": "sst_slot_put",
            "description": "Sets interleaver/deinterleaver control status using register address and kcontrol number. One value per slot channel."
        },
        "load_elfcorehdr_segment": {
            "id": "load_elfcorehdr_segment",
            "ground_truth": 0,
            "function": "load_elfcorehdr_segment",
            "description": "Loads elfcorehdr segment for kdump kernel, returns success or error with image and buffer parameters."
        },
        "db1550_pci_setup": {
            "id": "db1550_pci_setup",
            "ground_truth": 0,
            "function": "db1550_pci_setup",
            "description": "MIPS PCI bus scan setup for db1550 architecture."
        },
        "clk_hw_round_rate": {
            "id": "clk_hw_round_rate",
            "ground_truth": 0,
            "function": "clk_hw_round_rate",
            "description": "Rounds input rate for hardware clock, returns rounded rate if supported, else returns parent rate"
        },
        "nl80211_common_reg_change_event": {
            "id": "nl80211_common_reg_change_event",
            "ground_truth": 0,
            "function": "nl80211_common_reg_change_event",
            "description": "Regulatory change event for nl80211, global or device-specific based on custom domain."
        },
        "__tcp_select_window": {
            "id": "__tcp_select_window",
            "ground_truth": 0,
            "function": "__tcp_select_window",
            "description": "Raw window selection without scaling or shrinking check"
        },
        "vlan_dev_change_flags": {
            "id": "vlan_dev_change_flags",
            "ground_truth": 0,
            "function": "vlan_dev_change_flags",
            "description": "Change VLAN device flag using VLAN flag enum in Linux"
        },
        "lpfc_copy_fcf_record": {
            "id": "lpfc_copy_fcf_record",
            "ground_truth": 0,
            "function": "lpfc_copy_fcf_record",
            "description": "Copy FCF info to LPFC HBA data structure from FCF record."
        },
        "arm_dma_supported": {
            "id": "arm_dma_supported",
            "ground_truth": 0,
            "function": "arm_dma_supported",
            "description": "Check if device DMA address mask is supported for proper bus mastering."
        },
        "rcar_cmm_setup": {
            "id": "rcar_cmm_setup",
            "ground_truth": 0,
            "function": "rcar_cmm_setup",
            "description": "Configures and enables the CMM unit with given configuration, supporting LUT unit programming and access to CMM register."
        },
        "ibmvmc_handle_crq": {
            "id": "ibmvmc_handle_crq",
            "ground_truth": 0,
            "function": "ibmvmc_handle_crq",
            "description": "Handle CRQ message, execute request based on type"
        },
        "intel_panel_set_backlight_acpi": {
            "id": "intel_panel_set_backlight_acpi",
            "ground_truth": 0,
            "function": "intel_panel_set_backlight_acpi",
            "description": "Sets backlight brightness using ACPI for Intel panels."
        },
        "power_actor_get_max_power": {
            "id": "power_actor_get_max_power",
            "ground_truth": 0,
            "function": "power_actor_get_max_power",
            "description": "Get max power consumption of cooling device in milliwatts"
        },
        "__writeback_single_inode": {
            "id": "__writeback_single_inode",
            "ground_truth": 1,
            "function": "__writeback_single_inode",
            "description": "Write out inode and dirty page, caller sets sync flag and clears it"
        },
        "s3c2410_map_io": {
            "id": "s3c2410_map_io",
            "ground_truth": 0,
            "function": "s3c2410_map_io",
            "description": "Registers standard and custom CPU IO areas"
        },
        "amdgpu_gem_timeout": {
            "id": "amdgpu_gem_timeout",
            "ground_truth": 0,
            "function": "amdgpu_gem_timeout",
            "description": "Calculate jiffy timeout from absolute value in n"
        },
        "ath6kl_credit_seek": {
            "id": "ath6kl_credit_seek",
            "ground_truth": 0,
            "function": "ath6kl_credit_seek",
            "description": "Seeks credit for HTC HA endpoint with specified endpoint."
        },
        "i40iw_alloc_pd": {
            "id": "i40iw_alloc_pd",
            "ground_truth": 1,
            "function": "i40iw_alloc_pd",
            "description": "Allocate protection domain struct for i40iw."
        },
        "fault": {
            "id": "fault",
            "ground_truth": 0,
            "function": "fault",
            "description": "Socket disconnect error in fault function."
        },
        "mount_ubifs": {
            "id": "mount_ubifs",
            "ground_truth": 1,
            "function": "mount_ubifs",
            "description": "Mounts UBIFS file system, returns success/error code. Uses struct UBIFS info object."
        },
        "xenon_set_acg": {
            "id": "xenon_set_acg",
            "ground_truth": 0,
            "function": "xenon_set_acg",
            "description": "Enables/disables auto clock gating in Xenon."
        },
        "BEx_get_resources": {
            "id": "BEx_get_resources",
            "ground_truth": 0,
            "function": "BEx_get_resources",
            "description": "Retrieve BEx resources without limit suggestion on BE2/BE3 FW."
        },
        "afs_wait_for_fs_probes": {
            "id": "afs_wait_for_fs_probes",
            "ground_truth": 0,
            "function": "afs_wait_for_fs_probes",
            "description": "Wait for untried fileserver to respond in AFS"
        },
        "crypto_free_shash": {
            "id": "crypto_free_shash",
            "ground_truth": 0,
            "function": "crypto_free_shash",
            "description": "Free and zeroize message digest handle for shash cipher."
        },
        "remove_ranges": {
            "id": "remove_ranges",
            "ground_truth": 0,
            "function": "remove_ranges",
            "description": "Deletes bus range and parent entry from resource input."
        },
        "samsung_gpio_getcfg_2bit": {
            "id": "samsung_gpio_getcfg_2bit",
            "ground_truth": 0,
            "function": "samsung_gpio_getcfg_2bit",
            "description": "Reads 2-bit Samsung GPIO config, returns value for setcfg."
        },
        "iavf_set_promiscuous": {
            "id": "iavf_set_promiscuous",
            "ground_truth": 0,
            "function": "iavf_set_promiscuous",
            "description": "Enables promiscuous mode for iavf adapter to control unicast/multicast."
        },
        "btrfs_reserve_data_bytes": {
            "id": "btrfs_reserve_data_bytes",
            "ground_truth": 1,
            "function": "btrfs_reserve_data_bytes",
            "description": "Reserve data bytes for allocation in Btrfs filesystem."
        },
        "nfs_umount": {
            "id": "nfs_umount",
            "ground_truth": 1,
            "function": "nfs_umount",
            "description": "Unmount NFS export and notify server using UDP with short timeout."
        },
        "bnx2x_func_start": {
            "id": "bnx2x_func_start",
            "ground_truth": 0,
            "function": "bnx2x_func_start",
            "description": "Initialize bnx2x function for client setup in driver handle."
        },
        "ixgbe_set_num_queues": {
            "id": "ixgbe_set_num_queues",
            "ground_truth": 0,
            "function": "ixgbe_set_num_queues",
            "description": "Allocate device queues based on feature set"
        },
        "is_overloaded": {
            "id": "is_overloaded",
            "ground_truth": 0,
            "function": "is_overloaded",
            "description": "Check if server is overloaded with dest flag and IP v dest overload."
        },
        "f2fs_prepare_lookup": {
            "id": "f2fs_prepare_lookup",
            "ground_truth": 1,
            "function": "f2fs_prepare_lookup",
            "description": "Prepares to look up dentry in dir, computes casefolded name and f2fs dirhash, packs info into f2fs filename."
        },
        "compute_large_page_tx_descs": {
            "id": "compute_large_page_tx_descs",
            "ground_truth": 0,
            "function": "compute_large_page_tx_descs",
            "description": "Compute large page tx descriptors for breaking down stack requests."
        },
        "queue_rx_peekhead": {
            "id": "queue_rx_peekhead",
            "ground_truth": 0,
            "function": "queue_rx_peekhead",
            "description": "Dequeues buffer from receive buffer list, returns null if empty. Assumes mutual exclusion."
        },
        "sun4i_hash": {
            "id": "sun4i_hash",
            "ground_truth": 0,
            "function": "sun4i_hash",
            "description": "Hash engine for sha1 and md5, writes data in 32-bit steps, gets hash state at end, handles partial data and stores in temporary buffer."
        },
        "defined": {
            "id": "defined",
            "ground_truth": 0,
            "function": "defined",
            "description": "Function for defined writeback"
        },
        "img_ir_timing_range_convert": {
            "id": "img_ir_timing_range_convert",
            "ground_truth": 0,
            "function": "img_ir_timing_range_convert",
            "description": "Converts microsecond range to IR clock cycle with tolerance and shift."
        },
        "link_path_walk": {
            "id": "link_path_walk",
            "ground_truth": 1,
            "function": "link_path_walk",
            "description": "Basic name resolution function for path walk"
        },
        "i3c_generic_ibi_alloc_pool": {
            "id": "i3c_generic_ibi_alloc_pool",
            "ground_truth": 0,
            "function": "i3c_generic_ibi_alloc_pool",
            "description": "Create generic IBI pool based on device info and setup request"
        },
        "hw_collect_samples": {
            "id": "hw_collect_samples",
            "ground_truth": 0,
            "function": "hw_collect_samples",
            "description": "Collects and pushes hardware sampling data to perf event subsystem"
        },
        "kallsyms_lookup_name": {
            "id": "kallsyms_lookup_name",
            "ground_truth": 0,
            "function": "kallsyms_lookup_name",
            "description": "kallsyms lookup name, find symbol address or return not found"
        },
        "init_vbt_missing_defaults": {
            "id": "init_vbt_missing_defaults",
            "ground_truth": 0,
            "function": "init_vbt_missing_defaults",
            "description": "Initialize missing VBT defaults if none exist."
        },
        "dwc2_handle_otg_intr": {
            "id": "dwc2_handle_otg_intr",
            "ground_truth": 0,
            "function": "dwc2_handle_otg_intr",
            "description": "Handles OTG interrupt, reads gotgint register to determine interrupt type, uses struct dwc2 hsotg for programming view of controller."
        },
        "dm_get_mdptr": {
            "id": "dm_get_mdptr",
            "ground_truth": 0,
            "function": "dm_get_mdptr",
            "description": "Retrieve pointer stored with mapped device"
        },
        "fib6_del": {
            "id": "fib6_del",
            "ground_truth": 0,
            "function": "fib6_del",
            "description": "Deletes IPv6 forwarding information from table tb6 with lock ownership."
        },
        "is_special_type": {
            "id": "is_special_type",
            "ground_truth": 0,
            "function": "is_special_type",
            "description": "Checks if type is special font gu or preset alias."
        },
        "pvr2_hdw_untrip": {
            "id": "pvr2_hdw_untrip",
            "ground_truth": 0,
            "function": "pvr2_hdw_untrip",
            "description": "Error trapping circuit breaker for PVR2 hardware untrip reset worker."
        },
        "tty_ioctl": {
            "id": "tty_ioctl",
            "ground_truth": 1,
            "function": "tty_ioctl",
            "description": "Splitting tty ioctl for gcc"
        },
        "fm10k_update_mc_addr_vf": {
            "id": "fm10k_update_mc_addr_vf",
            "ground_truth": 0,
            "function": "fm10k_update_mc_addr_vf",
            "description": "Update VF multicast MAC address in device table"
        },
        "HUF_optimalTableLog": {
            "id": "HUF_optimalTableLog",
            "ground_truth": 0,
            "function": "HUF_optimalTableLog",
            "description": "Utility function for optimal HUF table log"
        },
        "p9_check_errors": {
            "id": "p9_check_errors",
            "ground_truth": 0,
            "function": "p9_check_errors",
            "description": "Check 9p packet for errors, return error code if found."
        },
        "talitos_error": {
            "id": "talitos_error",
            "ground_truth": 0,
            "function": "talitos_error",
            "description": "Recovers from Talitos error interrupt."
        },
        "ec_mul2": {
            "id": "ec_mul2",
            "ground_truth": 0,
            "function": "ec_mul2",
            "description": "Performs elliptic curve multiplication with modulo operation."
        },
        "write_tx_buf": {
            "id": "write_tx_buf",
            "ground_truth": 0,
            "function": "write_tx_buf",
            "description": "tx buffer}."
        },
        "btrfs_write_marked_extents": {
            "id": "btrfs_write_marked_extents",
            "ground_truth": 1,
            "function": "btrfs_write_marked_extents",
            "description": "Write marked extents for allocated btree blocks, ensuring they are sent to disk without waiting."
        },
        "anysee_wr_reg_mask": {
            "id": "anysee_wr_reg_mask",
            "ground_truth": 0,
            "function": "anysee_wr_reg_mask",
            "description": "Writes single register with mask using anysee."
        },
        "FPU_mul": {
            "id": "FPU_mul",
            "ground_truth": 0,
            "function": "FPU_mul",
            "description": "Multiplies two registers and stores the result in a register."
        },
        "sched_autogroup_create_attach": {
            "id": "sched_autogroup_create_attach",
            "ground_truth": 0,
            "function": "sched_autogroup_create_attach",
            "description": "Allocate kernel gfp for autogroup creation, no spinlock."
        },
        "fimc_pending_queue_add": {
            "id": "fimc_pending_queue_add",
            "ground_truth": 0,
            "function": "fimc_pending_queue_add",
            "description": "Adds buffer to pending queue in fimc vid cap struct."
        },
        "rsnd_ssi_init": {
            "id": "rsnd_ssi_init",
            "ground_truth": 0,
            "function": "rsnd_ssi_init",
            "description": "Initializes SSI module in RSND."
        },
        "_base_get_msix_index": {
            "id": "_base_get_msix_index",
            "ground_truth": 0,
            "function": "_base_get_msix_index",
            "description": "Returns MSIX index for general reply queue of HBA firmware."
        },
        "__thaw_task": {
            "id": "__thaw_task",
            "ground_truth": 0,
            "function": "__thaw_task",
            "description": "Thaws task by releasing and allocating task lock."
        },
        "smc_listen_out_connected": {
            "id": "smc_listen_out_connected",
            "ground_truth": 0,
            "function": "smc_listen_out_connected",
            "description": "Listen worker finished in connected state"
        },
        "mts64_device_init": {
            "id": "mts64_device_init",
            "ground_truth": 0,
            "function": "mts64_device_init",
            "description": "Initializes MTS64 device with LED blinking and returns initialization status."
        },
        "ieee80211_alloc_hw_nm": {
            "id": "ieee80211_alloc_hw_nm",
            "ground_truth": 0,
            "function": "ieee80211_alloc_hw_nm",
            "description": "Allocate new hardware device with private data area and callback ops. Return pointer to device or null on error."
        },
        "tracing_snapshot_cond_enable": {
            "id": "tracing_snapshot_cond_enable",
            "ground_truth": 1,
            "function": "tracing_snapshot_cond_enable",
            "description": "Enables conditional snapshot for an instance and checks if already enabled, saves associated data and updates function."
        },
        "smcr_lgr_set_type": {
            "id": "smcr_lgr_set_type",
            "ground_truth": 0,
            "function": "smcr_lgr_set_type",
            "description": "Sets new lgr type and clears asymmetric link tagging."
        },
        "soc_button_lookup_gpio": {
            "id": "soc_button_lookup_gpio",
            "ground_truth": 0,
            "function": "soc_button_lookup_gpio",
            "description": "Get nth GPIO number from ACPI object for SOC button"
        },
        "plpar_hcall": {
            "id": "plpar_hcall",
            "ground_truth": 0,
            "function": "plpar_hcall",
            "description": "Make pseries hypervisor call with up to argument and return argument support, using plpar hcall bufsize for return argument buffer size."
        },
        "f2fs_write_cache_pages": {
            "id": "f2fs_write_cache_pages",
            "ground_truth": 1,
            "function": "f2fs_write_cache_pages",
            "description": "Function for writing cache pages in F2FS with separate steps for cold and hot data pages."
        },
        "smu7_enable_acpi_power_management": {
            "id": "smu7_enable_acpi_power_management",
            "ground_truth": 0,
            "function": "smu7_enable_acpi_power_management",
            "description": "Enables ACPI power management in SMU7"
        },
        "btrfs_sync_file": {
            "id": "btrfs_sync_file",
            "ground_truth": 1,
            "function": "btrfs_sync_file",
            "description": "Optimized fsync for btrfs file/dir sync"
        },
        "intel_scu_ipc_unregister": {
            "id": "intel_scu_ipc_unregister",
            "ground_truth": 0,
            "function": "intel_scu_ipc_unregister",
            "description": "Unregister Intel SCU IPC device, release resources."
        },
        "do_amba_entry": {
            "id": "do_amba_entry",
            "ground_truth": 0,
            "function": "do_amba_entry",
            "description": "Pattern match AMBA DN as uppercase hex digit or single digit."
        },
        "ssp_save_state": {
            "id": "ssp_save_state",
            "ground_truth": 0,
            "function": "ssp_save_state",
            "description": "Save SSP configuration state for suspend using ssp_save_state function."
        },
        "enable_debug_cgroup": {
            "id": "enable_debug_cgroup",
            "ground_truth": 0,
            "function": "enable_debug_cgroup",
            "description": "Enables debug cgroup with implicit controller on v2."
        },
        "conv_8bit_to_uni": {
            "id": "conv_8bit_to_uni",
            "ground_truth": 0,
            "function": "conv_8bit_to_uni",
            "description": "Convert 8-bit to Unicode for keyboard input, unaffected by G0/G1 switching. Assume Latin1 if user map is default. Consider locking table update for consistency with keyboard driver and console."
        },
        "cm_conn_rep_handler": {
            "id": "cm_conn_rep_handler",
            "ground_truth": 0,
            "function": "cm_conn_rep_handler",
            "description": "Handles connection reporting for active side CM ID."
        },
        "scmi_initialize_events_queue": {
            "id": "scmi_initialize_events_queue",
            "ground_truth": 0,
            "function": "scmi_initialize_events_queue",
            "description": " Initialize event queue with kfifo buffer allocation and initialization."
        },
        "edac_pci_do_parity_check": {
            "id": "edac_pci_do_parity_check",
            "ground_truth": 0,
            "function": "edac_pci_do_parity_check",
            "description": "PCI parity check operation performed by edac_pci_do_parity_check"
        },
        "sanitize_watermarks": {
            "id": "sanitize_watermarks",
            "ground_truth": 0,
            "function": "sanitize_watermarks",
            "description": "Sanitizes watermarks to match internal state and hardware settings."
        },
        "qedf_dbg_host_init": {
            "id": "qedf_dbg_host_init",
            "ground_truth": 0,
            "function": "qedf_dbg_host_init",
            "description": "Sets up debugfs file for PF in qedf_dbg_host_init."
        },
        "efi_map_regions": {
            "id": "efi_map_regions",
            "ground_truth": 0,
            "function": "efi_map_regions",
            "description": "Map EFI memory range, update mmap with virtual address"
        },
        "SiS_GetCH700x": {
            "id": "SiS_GetCH700x",
            "ground_truth": 0,
            "function": "SiS_GetCH700x",
            "description": "Reads from Chrontel 700x using SiS"
        },
        "sym_get_cam_status": {
            "id": "sym_get_cam_status",
            "ground_truth": 0,
            "function": "sym_get_cam_status",
            "description": "Get status field of CAM CCB in sym"
        },
        "i40iw_configure_aeq_vector": {
            "id": "i40iw_configure_aeq_vector",
            "ground_truth": 0,
            "function": "i40iw_configure_aeq_vector",
            "description": "Configure aeq vector for i40iw device, allocate interrupt resource, enable irq handling, return success/error"
        },
        "dbl_to_sgl_fcnvuf": {
            "id": "dbl_to_sgl_fcnvuf",
            "ground_truth": 0,
            "function": "dbl_to_sgl_fcnvuf",
            "description": "Converts double unsigned fixed to single floating point."
        },
        "pick_next_task": {
            "id": "pick_next_task",
            "ground_truth": 0,
            "function": "pick_next_task",
            "description": "Selects highest priority task for execution."
        },
        "pci_enable_ats": {
            "id": "pci_enable_ats",
            "ground_truth": 0,
            "function": "pci_enable_ats",
            "description": "Enables AT capability on PCI device, returns success or failure."
        },
        "inode_set_iversion_queried": {
            "id": "inode_set_iversion_queried",
            "ground_truth": 0,
            "function": "inode_set_iversion_queried",
            "description": "Sets inode version to queried value, flags for increment on next change. Use when loading existing inode from disk to ensure unique version value."
        },
        "power_supply_deferred_register_work": {
            "id": "power_supply_deferred_register_work",
            "ground_truth": 0,
            "function": "power_supply_deferred_register_work",
            "description": "Registers power supply after parent probing, waits on parent mutex to avoid early execution of driver's get property function."
        },
        "__acquires": {
            "id": "__acquires",
            "ground_truth": 0,
            "function": "__acquires",
            "description": "Acquires lock for compaction, potentially heavily contended, sync always returns true for easier tracking."
        },
        "setup_events_to_report": {
            "id": "setup_events_to_report",
            "ground_truth": 0,
            "function": "setup_events_to_report",
            "description": "Sets up logical event to report."
        },
        "ascii2desc": {
            "id": "ascii2desc",
            "ground_truth": 0,
            "function": "ascii2desc",
            "description": "Helper function for USB string descriptor, converts ASCII to UTF-16LE"
        },
        "adjust_lcb_for_fpga_serdes": {
            "id": "adjust_lcb_for_fpga_serdes",
            "ground_truth": 0,
            "function": "adjust_lcb_for_fpga_serdes",
            "description": "Adjust LCB for FPGA SerDes in Aurora core"
        },
        "ceph_put_fmode": {
            "id": "ceph_put_fmode",
            "ground_truth": 0,
            "function": "ceph_put_fmode",
            "description": "Counts open files by mode using ceph put fmode."
        },
        "err_pos": {
            "id": "err_pos",
            "ground_truth": 0,
            "function": "err_pos",
            "description": "Find position of string in command for error caret placement"
        },
        "mgag200_mm_init": {
            "id": "mgag200_mm_init",
            "ground_truth": 0,
            "function": "mgag200_mm_init",
            "description": "initialize function for mgag200 graphics card driver."
        },
        "xilinx_dma_tx_submit": {
            "id": "xilinx_dma_tx_submit",
            "ground_truth": 0,
            "function": "xilinx_dma_tx_submit",
            "description": "Submits Xilinx DMA transaction with async descriptor and cookie."
        },
        "fc_fc4_register_provider": {
            "id": "fc_fc4_register_provider",
            "ground_truth": 0,
            "function": "fc_fc4_register_provider",
            "description": "Registers FC upper level provider, returns success or error. Describes provider with ops vector."
        },
        "xz_dec_test_init": {
            "id": "xz_dec_test_init",
            "ground_truth": 0,
            "function": "xz_dec_test_init",
            "description": "Allocate xz decoder state and register device"
        },
        "is_arm_mapping_symbol": {
            "id": "is_arm_mapping_symbol",
            "ground_truth": 0,
            "function": "is_arm_mapping_symbol",
            "description": "Check if symbol is arm mapping in arm elf file"
        },
        "build_skb": {
            "id": "build_skb",
            "ground_truth": 0,
            "function": "build_skb",
            "description": "Wrapper for build_skb with special handling for skb head and pfmemalloc, using page fragments for non-zero frag sizes."
        },
        "dvb_pll_configure": {
            "id": "dvb_pll_configure",
            "ground_truth": 0,
            "function": "dvb_pll_configure",
            "description": "Configure DVB PLL code"
        },
        "hci_adv_monitors_clear": {
            "id": "hci_adv_monitors_clear",
            "ground_truth": 0,
            "function": "hci_adv_monitors_clear",
            "description": "Clears HCI advertising monitors with hdev lock."
        },
        "visor_open": {
            "id": "visor_open",
            "ground_truth": 0,
            "function": "visor_open",
            "description": "Driver function for opening Handspring Visor"
        },
        "efx_farch_filter_increment": {
            "id": "efx_farch_filter_increment",
            "ground_truth": 0,
            "function": "efx_farch_filter_increment",
            "description": "Incremental filter search for hash collisions in efx farch."
        },
        "dm9000_inblk_8bit": {
            "id": "dm9000_inblk_8bit",
            "ground_truth": 0,
            "function": "dm9000_inblk_8bit",
            "description": "Input 8-bit block from dm9000 to memory."
        },
        "netif_testing_on": {
            "id": "netif_testing_on",
            "ground_truth": 0,
            "function": "netif_testing_on",
            "description": "Interface testing changes device state per RFC2863"
        },
        "am33xx_cm_module_enable": {
            "id": "am33xx_cm_module_enable",
            "ground_truth": 0,
            "function": "am33xx_cm_module_enable",
            "description": "Enables module mode in clkctrl for am33xx, with mode and register offsets as parameters."
        },
        "rvt_alloc_ucontext": {
            "id": "rvt_alloc_ucontext",
            "ground_truth": 1,
            "function": "rvt_alloc_ucontext",
            "description": "Allocate user context for IB udata and ucontext."
        },
        "ccroc_writel": {
            "id": "ccroc_writel",
            "ground_truth": 0,
            "function": "ccroc_writel",
            "description": "Writes value to ccroc register, no return, using struct tegra soctherm."
        },
        "one_param_ctrl_event": {
            "id": "one_param_ctrl_event",
            "ground_truth": 0,
            "function": "one_param_ctrl_event",
            "description": "Encode one parameter control event with one parameter."
        },
        "bdc_submit_cmd": {
            "id": "bdc_submit_cmd",
            "ground_truth": 0,
            "function": "bdc_submit_cmd",
            "description": "Submits and analyzes return value of bdc issue cmd."
        },
        "init_configure_mem_clk": {
            "id": "init_configure_mem_clk",
            "ground_truth": 0,
            "function": "init_configure_mem_clk",
            "description": "Initialize and configure memory clock opcode struct in nvbios."
        },
        "st_nci_spi_write": {
            "id": "st_nci_spi_write",
            "ground_truth": 0,
            "function": "st_nci_spi_write",
            "description": "Write SPI frame, return 0 for success or error, do not alter skb"
        },
        "sysfs_remove_mount_point": {
            "id": "sysfs_remove_mount_point",
            "ground_truth": 1,
            "function": "sysfs_remove_mount_point",
            "description": "Removes always empty directory from sysfs mount point."
        },
        "f2fs_io_type_to_rw_hint": {
            "id": "f2fs_io_type_to_rw_hint",
            "ground_truth": 1,
            "function": "f2fs_io_type_to_rw_hint",
            "description": "Returns write hint for each segment type based on mount option and hint mode. Hint can be set by user or default."
        },
        "ceph_unarmor": {
            "id": "ceph_unarmor",
            "ground_truth": 0,
            "function": "ceph_unarmor",
            "description": "Unarmors Ceph armor."
        },
        "ntfs_read_inode_mount": {
            "id": "ntfs_read_inode_mount",
            "ground_truth": 1,
            "function": "ntfs_read_inode_mount",
            "description": "Special read inode for mount time use only, reads MFT file, copes with circular reference problem, starts with data attribute and iterates over all extents using NTFS attr lookup data."
        },
        "ohci_init": {
            "id": "ohci_init",
            "ground_truth": 0,
            "function": "ohci_init",
            "description": " \"Clears memory, disables BIOS SMM for OHCI init."
        },
        "lpfc_get_hba_model_desc": {
            "id": "lpfc_get_hba_model_desc",
            "ground_truth": 0,
            "function": "lpfc_get_hba_model_desc",
            "description": "Retrieves HBA device model name and description. Returns model name, maximum speed, and host bus type."
        },
        "ntfs_dir_fsync": {
            "id": "ntfs_dir_fsync",
            "ground_truth": 1,
            "function": "ntfs_dir_fsync",
            "description": "Syncs directory to disk for data integrity, based on ntfs file fsync. Writes MFT record, associated extent MFT record, index allocation, and bitmap attribute, then syncs block device. If datasync is true, waits on page cache page to be written out. Caller must hold mutex on inode. Ignores attribute index inodes. Flushes user data if datasync is non-zero."
        },
        "f2fs_dirty_inode": {
            "id": "f2fs_dirty_inode",
            "ground_truth": 1,
            "function": "f2fs_dirty_inode",
            "description": "Write dirty inode from mark inode dirty in F2FS"
        },
        "jpeg_v2_5_dec_ring_get_wptr": {
            "id": "jpeg_v2_5_dec_ring_get_wptr",
            "ground_truth": 0,
            "function": "jpeg_v2_5_dec_ring_get_wptr",
            "description": "Get current hardware write pointer for JPEG v2 decoding ring."
        },
        "iomap_end": {
            "id": "iomap_end",
            "ground_truth": 0,
            "function": "iomap_end",
            "description": "Commit/unreserve space allocated by iomap begin, write length to commit, zero if no data written"
        },
        "tty_ldisc_ref_wait": {
            "id": "tty_ldisc_ref_wait",
            "ground_truth": 1,
            "function": "tty_ldisc_ref_wait",
            "description": "Wait for tty ldisc struct change, avoid deadlock"
        },
        "jz4740_mmc_release_dma_channels": {
            "id": "jz4740_mmc_release_dma_channels",
            "ground_truth": 0,
            "function": "jz4740_mmc_release_dma_channels",
            "description": "Release DMA channels for JZ4740 MMC."
        },
        "mlx4_cmd_imm": {
            "id": "mlx4_cmd_imm",
            "ground_truth": 0,
            "function": "mlx4_cmd_imm",
            "description": "Invokes mlx4 command with immediate output parameter and copies output to caller's out param pointer."
        },
        "mwifiex_setup_ht_caps": {
            "id": "mwifiex_setup_ht_caps",
            "ground_truth": 0,
            "function": "mwifiex_setup_ht_caps",
            "description": "Sets up default HT capabilities for mwifiex with firmware support."
        },
        "coda_link": {
            "id": "coda_link",
            "ground_truth": 0,
            "function": "coda_link",
            "description": "Link source directory inode to destination directory inode"
        },
        "prism2_rx": {
            "id": "prism2_rx",
            "ground_truth": 0,
            "function": "prism2_rx",
            "description": "Tasklet-based software IRQ for Prism2 RX."
        },
        "mei_me_cl_rm_by_uuid": {
            "id": "mei_me_cl_rm_by_uuid",
            "ground_truth": 0,
            "function": "mei_me_cl_rm_by_uuid",
            "description": "Remove ME client by UUID, lock device, match UUID."
        },
        "pcc_parse_subspace_irq": {
            "id": "pcc_parse_subspace_irq",
            "ground_truth": 0,
            "function": "pcc_parse_subspace_irq",
            "description": "Parse PCC IRQ and ACK registers for each PCC client"
        },
        "il3945_calc_db_from_ratio": {
            "id": "il3945_calc_db_from_ratio",
            "ground_truth": 0,
            "function": "il3945_calc_db_from_ratio",
            "description": "Calculates relative dB value from linear ratio, assumes voltage log."
        },
        "bnx2x_check_half_open_conn": {
            "id": "bnx2x_check_half_open_conn",
            "ground_truth": 0,
            "function": "bnx2x_check_half_open_conn",
            "description": "Check for half-open connection, analyze link error, detect remote fault status message in MAC"
        },
        "shmem_swapin_page": {
            "id": "shmem_swapin_page",
            "ground_truth": 0,
            "function": "shmem_swapin_page",
            "description": "Swaps in a page from shmem, returns page or error"
        },
        "fuse_mount_put": {
            "id": "fuse_mount_put",
            "ground_truth": 1,
            "function": "fuse_mount_put",
            "description": "Mounts FUSE file system"
        },
        "update_turbo_limits": {
            "id": "update_turbo_limits",
            "ground_truth": 0,
            "function": "update_turbo_limits",
            "description": "Update turbo limits based on register content and enable flag"
        },
        "r8712_init_cmd_priv": {
            "id": "r8712_init_cmd_priv",
            "ground_truth": 0,
            "function": "r8712_init_cmd_priv",
            "description": "Initializes command privilege and protects it with spin lock."
        },
        "qlcnic_diag_free_res": {
            "id": "qlcnic_diag_free_res",
            "ground_truth": 0,
            "function": "qlcnic_diag_free_res",
            "description": "Free resources in qlcnic diag function."
        },
        "ia_css_frame_allocate_from_info": {
            "id": "ia_css_frame_allocate_from_info",
            "ground_truth": 0,
            "function": "ia_css_frame_allocate_from_info",
            "description": "Allocate frame using resolution and format from frame info struct"
        },
        "qdio_int_handler": {
            "id": "qdio_int_handler",
            "ground_truth": 0,
            "function": "qdio_int_handler",
            "description": "QDIO interrupt handler function"
        },
        "lpfc_idiag_queacc_write": {
            "id": "lpfc_idiag_queacc_write",
            "ground_truth": 1,
            "function": "lpfc_idiag_queacc_write",
            "description": "Syntax check and set up idiag queacc command for debugfs port queue read/write operations, returns nbytges on success or error code on failure."
        },
        "nondisk_go_callback": {
            "id": "nondisk_go_callback",
            "ground_truth": 0,
            "function": "nondisk_go_callback",
            "description": "Callback signaling nondisk glock withdrawal in GFS2 cluster"
        },
        "path_lookupat": {
            "id": "path_lookupat",
            "ground_truth": 1,
            "function": "path_lookupat",
            "description": "Returns valid nd on success, error otherwise."
        },
        "k3_r5_rproc_prepare": {
            "id": "k3_r5_rproc_prepare",
            "ground_truth": 0,
            "function": "k3_r5_rproc_prepare",
            "description": "k3 r5 rproc prepare for loading firmware onto R5 core"
        },
        "dasd_find_busid": {
            "id": "dasd_find_busid",
            "ground_truth": 0,
            "function": "dasd_find_busid",
            "description": "Find devmap for device with given bus id."
        },
        "ip27_boot_secondary": {
            "id": "ip27_boot_secondary",
            "ground_truth": 0,
            "function": "ip27_boot_secondary",
            "description": "Launches slave into SMP bootstrap, sets stack and proc struct."
        },
        "test_accept_after_delete": {
            "id": "test_accept_after_delete",
            "ground_truth": 0,
            "function": "test_accept_after_delete",
            "description": "Check child socket creation after parent removal from sockmap"
        },
        "xfs_fs_measure_sickness": {
            "id": "xfs_fs_measure_sickness",
            "ground_truth": 0,
            "function": "xfs_fs_measure_sickness",
            "description": "Measure sickness of XFS file system metadata"
        },
        "tusb_set_async_mode": {
            "id": "tusb_set_async_mode",
            "ground_truth": 0,
            "function": "tusb_set_async_mode",
            "description": "Sets asynchronous mode for TUSB."
        },
        "xen_mc_extend_args": {
            "id": "xen_mc_extend_args",
            "ground_truth": 0,
            "function": "xen_mc_extend_args",
            "description": "Extends argument of previous multicall command, matching op and allocating space for arg size byte. Returns success with mc pointing to command and args pointing to new space, or null on failure."
        },
        "bcm_resume": {
            "id": "bcm_resume",
            "ground_truth": 0,
            "function": "bcm_resume",
            "description": "Callback function for resuming bcm resume"
        },
        "da7218_tonegen_freq_get": {
            "id": "da7218_tonegen_freq_get",
            "ground_truth": 0,
            "function": "da7218_tonegen_freq_get",
            "description": "da7218 tonegen freq retrieval function"
        },
        "xa_delete_node": {
            "id": "xa_delete_node",
            "ground_truth": 0,
            "function": "xa_delete_node",
            "description": "Private interface for removing node from tree, requires xa lock"
        },
        "lance_init_ring": {
            "id": "lance_init_ring",
            "ground_truth": 0,
            "function": "lance_init_ring",
            "description": "Initialize Lance RX and TX ring"
        },
        "splice_from_pipe": {
            "id": "splice_from_pipe",
            "ground_truth": 0,
            "function": "splice_from_pipe",
            "description": "Splice data from pipe to file, locking pipe inode, with splice modifier flag and actor handler."
        },
        "zpa2326_reset_device": {
            "id": "zpa2326_reset_device",
            "ground_truth": 0,
            "function": "zpa2326_reset_device",
            "description": "Resets zpa2326 device to default state, disables sampling, empties hardware fifo, requires device to be enabled and not in low power mode."
        },
        "blk_rq_unmap_user": {
            "id": "blk_rq_unmap_user",
            "ground_truth": 1,
            "function": "blk_rq_unmap_user",
            "description": "Unmap user data request, supply original bio, return bio struct."
        },
        "exfat_truncate_atime": {
            "id": "exfat_truncate_atime",
            "ground_truth": 0,
            "function": "exfat_truncate_atime",
            "description": "ExFAT function truncates access time with double second granularity. No 10ms increment field for access time. Access time has only second resolution."
        },
        "ext4_quota_write": {
            "id": "ext4_quota_write",
            "ground_truth": 1,
            "function": "ext4_quota_write",
            "description": "Writes to ext4 quotafile with started transaction and sufficient credit."
        },
        "mtd_get_fact_prot_info": {
            "id": "mtd_get_fact_prot_info",
            "ground_truth": 1,
            "function": "mtd_get_fact_prot_info",
            "description": "Access factory protection register in flash device. Factory data is read-only."
        },
        "test_lru_sanity3": {
            "id": "test_lru_sanity3",
            "ground_truth": 0,
            "function": "test_lru_sanity3",
            "description": "Test LRU map rotation, insertion, and removal"
        },
        "ccw_device_siosl": {
            "id": "ccw_device_siosl",
            "ground_truth": 0,
            "function": "ccw_device_siosl",
            "description": "Initiates logging for model-dependent channel subsystem."
        },
        "ocfs2_extent_map_insert_rec": {
            "id": "ocfs2_extent_map_insert_rec",
            "ground_truth": 0,
            "function": "ocfs2_extent_map_insert_rec",
            "description": "Inserts ocfs2 extent map record with truncate call to avoid overlapping mappings"
        },
        "sctp_ulpq_order": {
            "id": "sctp_ulpq_order",
            "ground_truth": 0,
            "function": "sctp_ulpq_order",
            "description": " Forward declaration for SCTP ULPQ order helper."
        },
        "drm_atomic_helper_check_plane_damage": {
            "id": "drm_atomic_helper_check_plane_damage",
            "ground_truth": 0,
            "function": "drm_atomic_helper_check_plane_damage",
            "description": "Verify plane damage on atomic check, discard if full modeset. Handle full plane update cases. Returns src and damage struct for given plane state."
        },
        "ib_dealloc_xrcd_user": {
            "id": "ib_dealloc_xrcd_user",
            "ground_truth": 1,
            "function": "ib_dealloc_xrcd_user",
            "description": "Deallocates XRC domain struct with user data."
        },
        "iscsi_iser_conn_start": {
            "id": "iscsi_iser_conn_start",
            "ground_truth": 0,
            "function": "iscsi_iser_conn_start",
            "description": "Starts iSCSI iSER connection, waits for stop completion"
        },
        "intel_overlay_recover_from_interrupt": {
            "id": "intel_overlay_recover_from_interrupt",
            "ground_truth": 0,
            "function": "intel_overlay_recover_from_interrupt",
            "description": "Recovers from signal interruption, avoids repeating work indefinitely, makes forward progress."
        },
        "radeon_atpx_switch_i2c_mux": {
            "id": "radeon_atpx_switch_i2c_mux",
            "ground_truth": 0,
            "function": "radeon_atpx_switch_i2c_mux",
            "description": "Switches I2C HPD mux between discrete and integrated GPU using ATPX function. Returns success or error."
        },
        "fuse_iomap_begin": {
            "id": "fuse_iomap_begin",
            "ground_truth": 0,
            "function": "fuse_iomap_begin",
            "description": "Ephemeral mapping for DAX, not for permanent use."
        },
        "get_highmem_buffer": {
            "id": "get_highmem_buffer",
            "ground_truth": 0,
            "function": "get_highmem_buffer",
            "description": "Allocate buffer for highmem page in hibernation image"
        },
        "swsusp_check": {
            "id": "swsusp_check",
            "ground_truth": 0,
            "function": "swsusp_check",
            "description": "Check for swsusp signature in resume device."
        },
        "rvt_destroy_cq": {
            "id": "rvt_destroy_cq",
            "ground_truth": 1,
            "function": "rvt_destroy_cq",
            "description": "Destroys completion queue in RVT. (10 tokens)"
        },
        "cns3420_early_serial_setup": {
            "id": "cns3420_early_serial_setup",
            "ground_truth": 0,
            "function": "cns3420_early_serial_setup",
            "description": "Configures early serial setup for CNS3420 using UART."
        },
        "rt2x00lib_get_bssidx": {
            "id": "rt2x00lib_get_bssidx",
            "ground_truth": 0,
            "function": "rt2x00lib_get_bssidx",
            "description": "Get BSSID index using rt2x00lib."
        },
        "available_clocksource_show": {
            "id": "available_clocksource_show",
            "ground_truth": 0,
            "function": "available_clocksource_show",
            "description": "Sysfs interface for listing clocksource, fills buffer with list"
        },
        "aac_src_deliver_message": {
            "id": "aac_src_deliver_message",
            "ground_truth": 0,
            "function": "aac_src_deliver_message",
            "description": "Delivers AAC message and returns FIB if successful."
        },
        "broadsheet_init_display": {
            "id": "broadsheet_init_display",
            "ground_truth": 0,
            "function": "broadsheet_init_display",
            "description": "Manipulates display and other functions"
        },
        "ufs_empty_dir": {
            "id": "ufs_empty_dir",
            "ground_truth": 0,
            "function": "ufs_empty_dir",
            "description": "Check if directory is empty for rmdir"
        },
        "hibernate_resume_nonboot_cpu_disable": {
            "id": "hibernate_resume_nonboot_cpu_disable",
            "ground_truth": 0,
            "function": "hibernate_resume_nonboot_cpu_disable",
            "description": "Disable non-boot CPU during hibernate resume"
        },
        "rcar_drif_get_fbuf": {
            "id": "rcar_drif_get_fbuf",
            "ground_truth": 0,
            "function": "rcar_drif_get_fbuf",
            "description": "Get frame buffer from list in rcar drif."
        },
        "ima_load_kexec_buffer": {
            "id": "ima_load_kexec_buffer",
            "ground_truth": 0,
            "function": "ima_load_kexec_buffer",
            "description": "Restore measurement list from previous kernel using ima_load_kexec_buffer."
        },
        "ipr_invalid_adapter": {
            "id": "ipr_invalid_adapter",
            "ground_truth": 0,
            "function": "ipr_invalid_adapter",
            "description": "Determines if adapter is supported on hardware, returns value indicating support."
        },
        "batadv_nc_init_bat_priv": {
            "id": "batadv_nc_init_bat_priv",
            "ground_truth": 0,
            "function": "batadv_nc_init_bat_priv",
            "description": "Initializes nc-specific variables in bat_priv struct with interface information."
        },
        "snd_timer_continue": {
            "id": "snd_timer_continue",
            "ground_truth": 0,
            "function": "snd_timer_continue",
            "description": "Restart timer tick with snd_timer_continue"
        },
        "inode_to_wb_is_valid": {
            "id": "inode_to_wb_is_valid",
            "ground_truth": 0,
            "function": "inode_to_wb_is_valid",
            "description": "Checks if inode has wb, returns true if yes. No locking needed."
        },
        "dwc2_op_mode": {
            "id": "dwc2_op_mode",
            "ground_truth": 0,
            "function": "dwc2_op_mode",
            "description": "Returns controller mode as ghwcfg2 otg."
        },
        "drbd_process_write_request": {
            "id": "drbd_process_write_request",
            "ground_truth": 0,
            "function": "drbd_process_write_request",
            "description": "Returns expected number of connections for writing data in DRBD, excluding those already ahead."
        },
        "DvbDmxFilterCallback": {
            "id": "DvbDmxFilterCallback",
            "ground_truth": 0,
            "function": "DvbDmxFilterCallback",
            "description": "IRQ handling for DVB DMX filter callback"
        },
        "omap_hwmod_init_reg_offs": {
            "id": "omap_hwmod_init_reg_offs",
            "ground_truth": 0,
            "function": "omap_hwmod_init_reg_offs",
            "description": "Initializes register offset for OMAP hardware module."
        },
        "prcmu_get_xp70_current_state": {
            "id": "prcmu_get_xp70_current_state",
            "ground_truth": 0,
            "function": "prcmu_get_xp70_current_state",
            "description": " init, apboot, apexecute, apdeepsleep, apsleep, apidle, apreset."
        },
        "genwqe_reset_interrupt_capability": {
            "id": "genwqe_reset_interrupt_capability",
            "ground_truth": 0,
            "function": "genwqe_reset_interrupt_capability",
            "description": "Undo genwqe interrupt capability reset for device pointer"
        },
        "xenbus_exists": {
            "id": "xenbus_exists",
            "ground_truth": 0,
            "function": "xenbus_exists",
            "description": "Check if path exists in Xenbus and return result"
        },
        "btrfs_search_slot": {
            "id": "btrfs_search_slot",
            "ground_truth": 1,
            "function": "btrfs_search_slot",
            "description": "Search and modify Btrfs tree, return key's location or insertion point"
        },
        "copy_from_read_buf": {
            "id": "copy_from_read_buf",
            "ground_truth": 1,
            "function": "copy_from_read_buf",
            "description": "Copy read data directly to user space for tty device"
        },
        "array_find_l": {
            "id": "array_find_l",
            "ground_truth": 0,
            "function": "array_find_l",
            "description": "Find same element in long array"
        },
        "rcu_sync_is_idle": {
            "id": "rcu_sync_is_idle",
            "ground_truth": 0,
            "function": "rcu_sync_is_idle",
            "description": "Check if RCU sync is idle for reader fastpaths"
        },
        "of_dma_configure_id": {
            "id": "of_dma_configure_id",
            "ground_truth": 0,
            "function": "of_dma_configure_id",
            "description": "Configure DMA for device from device tree or platform code, with optional input ID."
        },
        "__ssp_readl": {
            "id": "__ssp_readl",
            "ground_truth": 0,
            "function": "__ssp_readl",
            "description": "Reads content of serial port register at given offset"
        },
        "soft_offline_page_store": {
            "id": "soft_offline_page_store",
            "ground_truth": 0,
            "function": "soft_offline_page_store",
            "description": "Soft offline page store with caching and graceful degradation"
        },
        "calc_gus_envelope_time": {
            "id": "calc_gus_envelope_time",
            "ground_truth": 0,
            "function": "calc_gus_envelope_time",
            "description": "Calculates GU envelope time."
        },
        "ceph_copy_user_to_page_vector": {
            "id": "ceph_copy_user_to_page_vector",
            "ground_truth": 1,
            "function": "ceph_copy_user_to_page_vector",
            "description": "Copies user data to page vector."
        },
        "cec_msg_opcode": {
            "id": "cec_msg_opcode",
            "ground_truth": 0,
            "function": "cec_msg_opcode",
            "description": "Returns message opcode for CEC message structure"
        },
        "family_write": {
            "id": "family_write",
            "ground_truth": 0,
            "function": "family_write",
            "description": "Write family register values from src0 and src1."
        },
        "isp1760_udc_irq": {
            "id": "isp1760_udc_irq",
            "ground_truth": 0,
            "function": "isp1760_udc_irq",
            "description": "Interrupt handling for isp1760 udc"
        },
        "calc_l1_acceptable": {
            "id": "calc_l1_acceptable",
            "ground_truth": 0,
            "function": "calc_l1_acceptable",
            "description": "Convert L1 acceptable latency encoding to N. (8 tokens)"
        },
        "kdump_mem_notifier": {
            "id": "kdump_mem_notifier",
            "ground_truth": 0,
            "function": "kdump_mem_notifier",
            "description": "kdump mem notifier ensures crashkernel memory is not offline"
        },
        "siw_qp_prepare_tx": {
            "id": "siw_qp_prepare_tx",
            "ground_truth": 1,
            "function": "siw_qp_prepare_tx",
            "description": "Prepare TX state for sending FPDUs, build complete pkt, handle fragmented pkt."
        },
        "gs_cutoff": {
            "id": "gs_cutoff",
            "ground_truth": 0,
            "function": "gs_cutoff",
            "description": "Calculate cutoff frequency with quarter semitone step and maximum value"
        },
        "jsm_uart_port_init": {
            "id": "jsm_uart_port_init",
            "ground_truth": 0,
            "function": "jsm_uart_port_init",
            "description": "Prototype for initializing JSM UART port"
        },
        "os_info_csum": {
            "id": "os_info_csum",
            "ground_truth": 0,
            "function": "os_info_csum",
            "description": "Computes checksum over OS info structure."
        },
        "cxusb_auxbuf_append_urb": {
            "id": "cxusb_auxbuf_append_urb",
            "ground_truth": 0,
            "function": "cxusb_auxbuf_append_urb",
            "description": "Appends URB to CXUSB auxbuf, detects overwritten data."
        },
        "__btrfs_run_delayed_items": {
            "id": "__btrfs_run_delayed_items",
            "ground_truth": 1,
            "function": "__btrfs_run_delayed_items",
            "description": "Function for running delayed items in Btrfs transactions"
        },
        "__range_ok": {
            "id": "__range_ok",
            "ground_truth": 0,
            "function": "__range_ok",
            "description": "Validates memory block range, returns true if valid."
        },
        "die_walk_instances": {
            "id": "die_walk_instances",
            "ground_truth": 1,
            "function": "die_walk_instances",
            "description": "Walks on instance of given die, returns callback value or enoent. Uses inlined function declaration with callback function and user data."
        },
        "process_fetch_insn_bottom": {
            "id": "process_fetch_insn_bottom",
            "ground_truth": 0,
            "function": "process_fetch_insn_bottom",
            "description": " Process fetch instruction bottom with different parameters."
        },
        "mptcp_pm_new_connection": {
            "id": "mptcp_pm_new_connection",
            "ground_truth": 0,
            "function": "mptcp_pm_new_connection",
            "description": "Handler for new MPTCP connection path manager event"
        },
        "hpfs_remove_dtree": {
            "id": "hpfs_remove_dtree",
            "ground_truth": 0,
            "function": "hpfs_remove_dtree",
            "description": "Remove empty directory, handle obscure case of tree of empty dnodes"
        },
        "audit_mount": {
            "id": "audit_mount",
            "ground_truth": 1,
            "function": "audit_mount",
            "description": "Audits mount operation with profile, operation, name, src, type, trans, flag, data, perm, info, error"
        },
        "tb_tunnel_alloc_dp": {
            "id": "tb_tunnel_alloc_dp",
            "ground_truth": 0,
            "function": "tb_tunnel_alloc_dp",
            "description": "Allocates DP tunnel between in and out ports with bandwidth limits."
        },
        "trace_io_uring_submit_sqe": {
            "id": "trace_io_uring_submit_sqe",
            "ground_truth": 1,
            "function": "trace_io_uring_submit_sqe",
            "description": "Track submission of IO uring SQE with context and opcode"
        },
        "qla2x00_dfs_setup": {
            "id": "qla2x00_dfs_setup",
            "ground_truth": 0,
            "function": "qla2x00_dfs_setup",
            "description": "Global function prototype for qla2x00 dfs setup in source file."
        },
        "nand_get_bits_per_cell": {
            "id": "nand_get_bits_per_cell",
            "ground_truth": 0,
            "function": "nand_get_bits_per_cell",
            "description": "Extracts bit per cell from 3rd byte of extended ID"
        },
        "f2fs_setup_filename": {
            "id": "f2fs_setup_filename",
            "ground_truth": 1,
            "function": "f2fs_setup_filename",
            "description": "Prepare filename search, compute casefolded name and f2fs dirhash, pack into f2fs filename."
        },
        "usb_serial_generic_write_start": {
            "id": "usb_serial_generic_write_start",
            "ground_truth": 1,
            "function": "usb_serial_generic_write_start",
            "description": "USB serial write start with busy flag, port, memory allocation flag, and error handling."
        },
        "kdb_bt1": {
            "id": "kdb_bt1",
            "ground_truth": 0,
            "function": "kdb_bt1",
            "description": "Implements bt command for stack traceback, with options for alternate stack, kernel stack, and task structure. Returns zero for success, useful for manual traceback."
        },
        "hpi_dsp_code_open": {
            "id": "hpi_dsp_code_open",
            "ground_truth": 0,
            "function": "hpi_dsp_code_open",
            "description": "Prepare code file name for adapter, return success/error if code unavailable."
        },
        "hw_atl_rdm_cpu_id_set": {
            "id": "hw_atl_rdm_cpu_id_set",
            "ground_truth": 0,
            "function": "hw_atl_rdm_cpu_id_set",
            "description": "Sets CPU ID using HW ATL RDM."
        },
        "fpsimd_release_task": {
            "id": "fpsimd_release_task",
            "ground_truth": 0,
            "function": "fpsimd_release_task",
            "description": "Release task for fpsimd, called when dead task is confirmed"
        },
        "sxgbe_tx_ctxt_desc_get_cde": {
            "id": "sxgbe_tx_ctxt_desc_get_cde",
            "ground_truth": 0,
            "function": "sxgbe_tx_ctxt_desc_get_cde",
            "description": "Get status of context descriptor for tx."
        },
        "cfpkt_peek_head": {
            "id": "cfpkt_peek_head",
            "ground_truth": 0,
            "function": "cfpkt_peek_head",
            "description": "Peek packet header, extract & copy data, return success/error code"
        },
        "audit_filter_rules": {
            "id": "audit_filter_rules",
            "ground_truth": 0,
            "function": "audit_filter_rules",
            "description": "Compares audit filter rules to task struct, filters at task creation time, accesses tsk cred without rcu read lock in certain situations"
        },
        "capi_cmd2str": {
            "id": "capi_cmd2str",
            "ground_truth": 0,
            "function": "capi_cmd2str",
            "description": "Converts CAPI command/subcommand number to name. Returns static string."
        },
        "set_srp_direction": {
            "id": "set_srp_direction",
            "ground_truth": 0,
            "function": "set_srp_direction",
            "description": "Sets SRP direction and buffer number based on SCSI command."
        },
        "i2400m_rx_edata": {
            "id": "i2400m_rx_edata",
            "ground_truth": 0,
            "function": "i2400m_rx_edata",
            "description": "Receives and sends extended data packets, handles reordering, and fakes Ethernet header for emulation without copying packets. Assumes payload size has been verified."
        },
        "batadv_store_throughput_override": {
            "id": "batadv_store_throughput_override",
            "ground_truth": 1,
            "function": "batadv_store_throughput_override",
            "description": "Parse and store user-entered throughput override in mesh sysfs directory"
        },
        "configfs_write_file": {
            "id": "configfs_write_file",
            "ground_truth": 1,
            "function": "configfs_write_file",
            "description": "Writes configfs attribute struct file with user data"
        },
        "ext4_read_inline_dir": {
            "id": "ext4_read_inline_dir",
            "ground_truth": 1,
            "function": "ext4_read_inline_dir",
            "description": "Reads inline directory in ext4 file system. Converts from inline to blocked based directory. Maintains persistence after conversion."
        },
        "devm_mbox_controller_register": {
            "id": "devm_mbox_controller_register",
            "ground_truth": 0,
            "function": "devm_mbox_controller_register",
            "description": "Registers managed mbox controller for device."
        },
        "batadv_gw_out_of_range": {
            "id": "batadv_gw_out_of_range",
            "ground_truth": 0,
            "function": "batadv_gw_out_of_range",
            "description": "Check if DHCP request is sent to best gateway, reallocate if needed. True if unicast and not best gw, false otherwise."
        },
        "stm32_timer_start": {
            "id": "stm32_timer_start",
            "ground_truth": 0,
            "function": "stm32_timer_start",
            "description": "Starts STM32 timer, resets counter, disables interrupt on overflow, uses upcounter direction."
        },
        "dump_elf_task_fp": {
            "id": "dump_elf_task_fp",
            "ground_truth": 0,
            "function": "dump_elf_task_fp",
            "description": "Dump ELF task FP for FP register"
        },
        "cavium_rng_probe": {
            "id": "cavium_rng_probe",
            "ground_truth": 0,
            "function": "cavium_rng_probe",
            "description": "Enable and activate Cavium RNG hardware for VF"
        },
        "pl08x_choose_master_bus": {
            "id": "pl08x_choose_master_bus",
            "ground_truth": 0,
            "function": "pl08x_choose_master_bus",
            "description": "Autoselects master bus for transfer, victimizes unaligned slave, reduces width to byte, prefers destination bus, fixed address peripheral"
        },
        "e1000_phy_igp_get_info": {
            "id": "e1000_phy_igp_get_info",
            "ground_truth": 0,
            "function": "e1000_phy_igp_get_info",
            "description": "Get IGP-specific register info from e1000 PHY"
        },
        "mtd_set_dev_defaults": {
            "id": "mtd_set_dev_defaults",
            "ground_truth": 0,
            "function": "mtd_set_dev_defaults",
            "description": "Sets default values for device based on parent device."
        },
        "ncm_tx_timeout": {
            "id": "ncm_tx_timeout",
            "ground_truth": 0,
            "function": "ncm_tx_timeout",
            "description": "NCM transmit timeout for duration without sent skb data."
        },
        "snd_hdac_stream_set_params": {
            "id": "snd_hdac_stream_set_params",
            "ground_truth": 0,
            "function": "snd_hdac_stream_set_params",
            "description": "Sets stream parameters for HD audio core stream from substream format value. (19 tokens)"
        },
        "_rt2x00_desc_read": {
            "id": "_rt2x00_desc_read",
            "ground_truth": 0,
            "function": "_rt2x00_desc_read",
            "description": "Reads word from hardware descriptor at specified index."
        },
        "nilfs_empty_dir": {
            "id": "nilfs_empty_dir",
            "ground_truth": 0,
            "function": "nilfs_empty_dir",
            "description": "Check if directory is empty for rmdir"
        },
        "rbv_setpalette": {
            "id": "rbv_setpalette",
            "ground_truth": 0,
            "function": "rbv_setpalette",
            "description": "Sets video palette in RAM."
        },
        "synthesize_reljump": {
            "id": "synthesize_reljump",
            "ground_truth": 0,
            "function": "synthesize_reljump",
            "description": "Generates relative jump call instruction."
        },
        "ds1682_eeprom_read": {
            "id": "ds1682_eeprom_read",
            "ground_truth": 1,
            "function": "ds1682_eeprom_read",
            "description": "Read user data attribute from ds1682 eeprom."
        },
        "lpfc_debugfs_multixripools_write": {
            "id": "lpfc_debugfs_multixripools_write",
            "ground_truth": 1,
            "function": "lpfc_debugfs_multixripools_write",
            "description": "Clears multi xri pool statistic from debugfs user space buffer. Returns number of bytes passed in from user space on success and proper error code on error."
        },
        "drm_mode_addfb_ioctl": {
            "id": "drm_mode_addfb_ioctl",
            "ground_truth": 0,
            "function": "drm_mode_addfb_ioctl",
            "description": "Adds a framebuffer to the Direct Rendering Manager."
        },
        "ip22zilog_release_port": {
            "id": "ip22zilog_release_port",
            "ground_truth": 0,
            "function": "ip22zilog_release_port",
            "description": "Release port without mapping register request"
        },
        "ext4_write_end": {
            "id": "ext4_write_end",
            "ground_truth": 1,
            "function": "ext4_write_end",
            "description": "Pick new inode size after write, manage metadata internally"
        },
        "chcr_ktls_mark_tcb_close": {
            "id": "chcr_ktls_mark_tcb_close",
            "ground_truth": 0,
            "function": "chcr_ktls_mark_tcb_close",
            "description": "Mark TCB state to close for CHCR KTLS, return net TX OK or drop for driver-specific TL info."
        },
        "__ab_c_size": {
            "id": "__ab_c_size",
            "ground_truth": 0,
            "function": "__ab_c_size",
            "description": "Compute size max for struct size below with overflow helper."
        },
        "lpfc_idiag_pcicfg_write": {
            "id": "lpfc_idiag_pcicfg_write",
            "ground_truth": 1,
            "function": "lpfc_idiag_pcicfg_write",
            "description": "Syntax check and execute PCI config space read/write command, return nbytes on success or error code on failure."
        },
        "hfi1_ud_rcv": {
            "id": "hfi1_ud_rcv",
            "ground_truth": 0,
            "function": "hfi1_ud_rcv",
            "description": "Process incoming UD packet for given QP at interrupt level"
        },
        "netlink_table_grab": {
            "id": "netlink_table_grab",
            "ground_truth": 0,
            "function": "netlink_table_grab",
            "description": "Locking netlink table, good on UP, bad on SMP, sleep solves issue"
        },
        "rwsem_owner_flags": {
            "id": "rwsem_owner_flags",
            "ground_truth": 0,
            "function": "rwsem_owner_flags",
            "description": "Returns owner task pointer and non-null flag."
        },
        "ipu_csi_init_interface": {
            "id": "ipu_csi_init_interface",
            "ground_truth": 0,
            "function": "ipu_csi_init_interface",
            "description": "Initializes IPU CSI interface for CMOS sensor."
        },
        "ishtp_hbm_cl_hdr": {
            "id": "ishtp_hbm_cl_hdr",
            "ground_truth": 0,
            "function": "ishtp_hbm_cl_hdr",
            "description": "Constructs client HBM header and initializes buffer for HBM message command."
        },
        "may_umount": {
            "id": "may_umount",
            "ground_truth": 1,
            "function": "may_umount",
            "description": "Check if mount point is busy before unmounting"
        },
        "ieee80211_classify": {
            "id": "ieee80211_classify",
            "ground_truth": 0,
            "function": "ieee80211_classify",
            "description": "Classifies data packet for sending"
        },
        "sunzilog_stop_tx": {
            "id": "sunzilog_stop_tx",
            "ground_truth": 0,
            "function": "sunzilog_stop_tx",
            "description": "Stop transmission with port lock and disabled interrupts."
        },
        "ext4_count_dirs": {
            "id": "ext4_count_dirs",
            "ground_truth": 1,
            "function": "ext4_count_dirs",
            "description": "Count directories in ext4 at mount time, with locked super block."
        },
        "xilinx_dpdma_chan_unpause": {
            "id": "xilinx_dpdma_chan_unpause",
            "ground_truth": 0,
            "function": "xilinx_dpdma_chan_unpause",
            "description": "Unpause Xilinx DPDMA channel struct"
        },
        "anybus_bus_match": {
            "id": "anybus_bus_match",
            "ground_truth": 0,
            "function": "anybus_bus_match",
            "description": "Matches Anybus bus."
        },
        "snd_soc_jack_free_gpios": {
            "id": "snd_soc_jack_free_gpios",
            "ground_truth": 0,
            "function": "snd_soc_jack_free_gpios",
            "description": "Release GPIO and IRQ resources for an ASOC jack."
        },
        "arm_iommu_unmap_sg": {
            "id": "arm_iommu_unmap_sg",
            "ground_truth": 0,
            "function": "arm_iommu_unmap_sg",
            "description": "Unmaps set of SG buffers mapped by DMA with same rules as DMA unmap, using device pointer, SG list, and direction."
        },
        "__get_user_pages": {
            "id": "__get_user_pages",
            "ground_truth": 1,
            "function": "__get_user_pages",
            "description": "Get user pages, pinning pages in memory, returning number of pages pinned or error details. Must be called with mmap lock held. Use get user page or get user page fast instead of get user page."
        },
        "return_all_reservations": {
            "id": "return_all_reservations",
            "ground_truth": 0,
            "function": "return_all_reservations",
            "description": "Returns all reservations and frees up reserved space."
        },
        "pvrdma_destroy_cq": {
            "id": "pvrdma_destroy_cq",
            "ground_truth": 1,
            "function": "pvrdma_destroy_cq",
            "description": "Destroys completion queue for PVRDMA."
        },
        "sd_init": {
            "id": "sd_init",
            "ground_truth": 0,
            "function": "sd_init",
            "description": "Initializes SD at probe and resume."
        },
        "tiocgetd": {
            "id": "tiocgetd",
            "ground_truth": 1,
            "function": "tiocgetd",
            "description": "Retrieve line discipline ID from tty struct with locking wait"
        },
        "sclp_sd_receiver": {
            "id": "sclp_sd_receiver",
            "ground_truth": 0,
            "function": "sclp_sd_receiver",
            "description": "Receiver for store data event process with matching event ID"
        },
        "hydration_init": {
            "id": "hydration_init",
            "ground_truth": 0,
            "function": "hydration_init",
            "description": "Initialize hydration process for entity"
        },
        "lpfc_idiag_ctlacc_write": {
            "id": "lpfc_idiag_ctlacc_write",
            "ground_truth": 1,
            "function": "lpfc_idiag_ctlacc_write",
            "description": "Syntax check and set up for lpfc idiag ctlacc command, returns nbytes on success or error code on failure"
        },
        "ieee_hw_rate_init": {
            "id": "ieee_hw_rate_init",
            "ground_truth": 0,
            "function": "ieee_hw_rate_init",
            "description": "Initializes IEEE hardware rate without locking."
        },
        "uvd_v2_2_resume": {
            "id": "uvd_v2_2_resume",
            "ground_truth": 0,
            "function": "uvd_v2_2_resume",
            "description": "Resume memory controller programming for UVD v2."
        },
        "irqd_set_single_target": {
            "id": "irqd_set_single_target",
            "ground_truth": 0,
            "function": "irqd_set_single_target",
            "description": "Sets single target for irqd, called after irqchip irq set affinity or domain allocation."
        },
        "rvt_create_mmap_info": {
            "id": "rvt_create_mmap_info",
            "ground_truth": 1,
            "function": "rvt_create_mmap_info",
            "description": "Allocate mmap info for HFI1 device, with user data and opaque pointer."
        },
        "xfs_fs_set_info": {
            "id": "xfs_fs_set_info",
            "ground_truth": 0,
            "function": "xfs_fs_set_info",
            "description": "Adjust XFS file system quota timer warning."
        },
        "lpfc_idiag_baracc_write": {
            "id": "lpfc_idiag_baracc_write",
            "ground_truth": 1,
            "function": "lpfc_idiag_baracc_write",
            "description": "Syntax check and set up idiag bar access command for pci bar memory mapped space read/write, returns nbytes on success or error code on failure."
        },
        "ia_css_frame_allocate_contiguous_from_info": {
            "id": "ia_css_frame_allocate_contiguous_from_info",
            "ground_truth": 0,
            "function": "ia_css_frame_allocate_contiguous_from_info",
            "description": "Allocate contiguous frame using info structure"
        },
        "__swizzle_addr_none": {
            "id": "__swizzle_addr_none",
            "ground_truth": 0,
            "function": "__swizzle_addr_none",
            "description": "Swizzle address with no modification (MIPS architecture)."
        },
        "llc_conn_ev_rx_xxx_rsp_fbit_set_1": {
            "id": "llc_conn_ev_rx_xxx_rsp_fbit_set_1",
            "ground_truth": 0,
            "function": "llc_conn_ev_rx_xxx_rsp_fbit_set_1",
            "description": "Unused function for setting FBIT in LLC connection response."
        },
        "sdma_txinit_ahg": {
            "id": "sdma_txinit_ahg",
            "ground_truth": 1,
            "function": "sdma_txinit_ahg",
            "description": "Initialize SDMA txreq struct with AHG allocation, supporting urgent, AHG copy, and use AHG flags. Callback can be provided for completion status and flag, with precise user data and header byte counts."
        },
        "a3d_adc_close": {
            "id": "a3d_adc_close",
            "ground_truth": 0,
            "function": "a3d_adc_close",
            "description": "Callback for closing A3D ADC input routine."
        },
        "ep93xx_pata_rw_end": {
            "id": "ep93xx_pata_rw_end",
            "ground_truth": 0,
            "function": "ep93xx_pata_rw_end",
            "description": "Common end for ep93xx PATA read/write function."
        },
        "leon_flush_needed": {
            "id": "leon_flush_needed",
            "ground_truth": 0,
            "function": "leon_flush_needed",
            "description": "Cache configuration check for possible flush skipping in leon2 and leon3"
        },
        "ia_css_get_sdis2_horicoef_config": {
            "id": "ia_css_get_sdis2_horicoef_config",
            "ground_truth": 0,
            "function": "ia_css_get_sdis2_horicoef_config",
            "description": "Get SDIS2 horizontal coefficient configuration code."
        },
        "rcu_scale_shutdown": {
            "id": "rcu_scale_shutdown",
            "ground_truth": 0,
            "function": "rcu_scale_shutdown",
            "description": "RCU scalability shutdown kthread waits and shuts down system."
        },
        "__btrfs_run_delayed_refs": {
            "id": "__btrfs_run_delayed_refs",
            "ground_truth": 1,
            "function": "__btrfs_run_delayed_refs",
            "description": "btrfs_run_delayed_refs returns success or failure with transaction abort"
        },
        "rt2x00queue_update_beacon_locked": {
            "id": "rt2x00queue_update_beacon_locked",
            "ground_truth": 0,
            "function": "rt2x00queue_update_beacon_locked",
            "description": "Updates beacon for specified interface in hardware."
        },
        "dfx_close": {
            "id": "dfx_close",
            "ground_truth": 0,
            "function": "dfx_close",
            "description": "Close device module, return code, deregister ISR, reset adapter, DMA unavailable state."
        },
        "pcap_keys_handler": {
            "id": "pcap_keys_handler",
            "ground_truth": 0,
            "function": "pcap_keys_handler",
            "description": "Handles key presses during pcap2 interrupt."
        },
        "smc_wr_rx_post": {
            "id": "smc_wr_rx_post",
            "ground_truth": 0,
            "function": "smc_wr_rx_post",
            "description": "Post new receive work request to fill old entry."
        },
        "qib_7322_boardname": {
            "id": "qib_7322_boardname",
            "ground_truth": 0,
            "function": "qib_7322_boardname",
            "description": "Identifies board name and features based on revision register struct for QLogic IB device."
        },
        "btrfs_log_inode_parent": {
            "id": "btrfs_log_inode_parent",
            "ground_truth": 1,
            "function": "btrfs_log_inode_parent",
            "description": "Logs parent directory of newly created inode in btrfs."
        },
        "tsi721_add_outb_message": {
            "id": "tsi721_add_outb_message",
            "ground_truth": 0,
            "function": "tsi721_add_outb_message",
            "description": "Add message to outbound queue of TSI721 device"
        },
        "kvmppc_copy_guest": {
            "id": "kvmppc_copy_guest",
            "ground_truth": 0,
            "function": "kvmppc_copy_guest",
            "description": "Copy guest memory in single memslot"
        },
        "pvrdma_dealloc_pd": {
            "id": "pvrdma_dealloc_pd",
            "ground_truth": 1,
            "function": "pvrdma_dealloc_pd",
            "description": "Deallocates protection domain in PVRDMA. (10 tokens)"
        },
        "usbnet_get_link_ksettings": {
            "id": "usbnet_get_link_ksettings",
            "ground_truth": 0,
            "function": "usbnet_get_link_ksettings",
            "description": "USBnet} get link settings for ethtool method."
        },
        "drm_dp_dual_mode_detect": {
            "id": "drm_dp_dual_mode_detect",
            "ground_truth": 0,
            "function": "drm_dp_dual_mode_detect",
            "description": "Identifies DP dual mode adaptor type using I2C adapter."
        },
        "dc_fixpt_sqr": {
            "id": "dc_fixpt_sqr",
            "ground_truth": 0,
            "function": "dc_fixpt_sqr",
            "description": "Compute the square of a fixed-point number."
        },
        "vmw_execbuf_cmdbuf": {
            "id": "vmw_execbuf_cmdbuf",
            "ground_truth": 1,
            "function": "vmw_execbuf_cmdbuf",
            "description": "Function prepares user command batch for submission using command buffer manager. Returns pointer to data in buffer if successful, else returns error value."
        },
        "i40e_vc_config_irq_map_msg": {
            "id": "i40e_vc_config_irq_map_msg",
            "ground_truth": 0,
            "function": "i40e_vc_config_irq_map_msg",
            "description": "Configures IRQ to queue map for VF using message buffer."
        },
        "ps3_start_probe_thread": {
            "id": "ps3_start_probe_thread",
            "ground_truth": 0,
            "function": "ps3_start_probe_thread",
            "description": "Starts background probe thread for PS3 bus type."
        },
        "snd_ftu_eff_switch_info": {
            "id": "snd_ftu_eff_switch_info",
            "ground_truth": 0,
            "function": "snd_ftu_eff_switch_info",
            "description": "Audio switch info for FastTrack Ultra quirk in snd ftu eff."
        },
        "dlm_slots_assign": {
            "id": "dlm_slots_assign",
            "ground_truth": 0,
            "function": "dlm_slots_assign",
            "description": "Assign DLM slots for nodes without slot support"
        },
        "zfcp_fc_sym_name_update": {
            "id": "zfcp_fc_sym_name_update",
            "ground_truth": 0,
            "function": "zfcp_fc_sym_name_update",
            "description": "Update symbolic port name for fc host in npiv mode."
        },
        "pseudo_lock_cstates_constrain": {
            "id": "pseudo_lock_cstates_constrain",
            "ground_truth": 0,
            "function": "pseudo_lock_cstates_constrain",
            "description": "Restricts core from entering c6 to prevent cache power management. Uses lowest c6 exit latency as latency requirement. Considers ACPI latency and prevents entering c2."
        },
        "cx8802_blackbird_advise_acquire": {
            "id": "cx8802_blackbird_advise_acquire",
            "ground_truth": 0,
            "function": "cx8802_blackbird_advise_acquire",
            "description": "Hardware usage advice for cx8802 MPEG API."
        },
        "dasd_eer_enable": {
            "id": "dasd_eer_enable",
            "ground_truth": 0,
            "function": "dasd_eer_enable",
            "description": "Enable error reporting on device with dasd_eer_enable."
        },
        "rio_destid_free": {
            "id": "rio_destid_free",
            "ground_truth": 0,
            "function": "rio_destid_free",
            "description": "Free allocated destid for reuse in RIO network."
        },
        "pcnet32_suspend": {
            "id": "pcnet32_suspend",
            "ground_truth": 0,
            "function": "pcnet32_suspend",
            "description": "Suspends pcnet32 with lp lock held."
        },
        "dvb_ringbuffer_flush_spinlock_wakeup": {
            "id": "dvb_ringbuffer_flush_spinlock_wakeup",
            "ground_truth": 0,
            "function": "dvb_ringbuffer_flush_spinlock_wakeup",
            "description": "Flushes and wakes up waiting tasks in DVB ringbuffer using spinlock."
        },
        "maple_cpufreq_target": {
            "id": "maple_cpufreq_target",
            "ground_truth": 0,
            "function": "maple_cpufreq_target",
            "description": "Common interface for cpufreq core in Maple"
        },
        "ixgb_get_ee_mac_addr": {
            "id": "ixgb_get_ee_mac_addr",
            "ground_truth": 0,
            "function": "ixgb_get_ee_mac_addr",
            "description": "Returns MAC address from EEPROM if valid, else None."
        },
        "saa7134_enable_i2s": {
            "id": "saa7134_enable_i2s",
            "ground_truth": 0,
            "function": "saa7134_enable_i2s",
            "description": "Enables SAA7134 I2S with common external entry."
        },
        "drm_get_subpixel_order_name": {
            "id": "drm_get_subpixel_order_name",
            "ground_truth": 1,
            "function": "drm_get_subpixel_order_name",
            "description": "Returns subpixel order name as string for given enum."
        },
        "drm_vma_offset_manager_init": {
            "id": "drm_vma_offset_manager_init",
            "ground_truth": 0,
            "function": "drm_vma_offset_manager_init",
            "description": "Initializes new offset manager for DRM VMA with page-based offset and size. Adding/removing nodes is locked internally, but node allocation/destruction is left for caller. Given node must always be guaranteed to be referenced."
        },
        "ice_fltr_remove_mac_list": {
            "id": "ice_fltr_remove_mac_list",
            "ground_truth": 0,
            "function": "ice_fltr_remove_mac_list",
            "description": "Remove list of MAC filter from ICE VSI."
        },
        "ehci_mem_init": {
            "id": "ehci_mem_init",
            "ground_truth": 0,
            "function": "ehci_mem_init",
            "description": "Initializes EHCI memory, add cleanup code if needed."
        },
        "debug_opt_scan": {
            "id": "debug_opt_scan",
            "ground_truth": 0,
            "function": "debug_opt_scan",
            "description": "Debugging function for analyzing options and returning false if errors found."
        },
        "cca_cipher2protkey": {
            "id": "cca_cipher2protkey",
            "ground_truth": 0,
            "function": "cca_cipher2protkey",
            "description": "Derive protected key from CCA AES cipher secure key."
        },
        "pagecache_get_page": {
            "id": "pagecache_get_page",
            "ground_truth": 1,
            "function": "pagecache_get_page",
            "description": "Find and get page from cache with flags for locking, accessing, and creating. Uses gfp mask for memory allocation. Returns locked page with increased refcount."
        },
        "amdgpu_vm_cpu_map_table": {
            "id": "amdgpu_vm_cpu_map_table",
            "ground_truth": 0,
            "function": "amdgpu_vm_cpu_map_table",
            "description": "Map AMDGPU virtual memory tables for new or validated page directories and page tables."
        },
        "ipr_oper_timeout": {
            "id": "ipr_oper_timeout",
            "ground_truth": 0,
            "function": "ipr_oper_timeout",
            "description": "Adapter times out, blocks host request, resets adapter. Returns timer list and ipr command struct."
        },
        "tcx_blank": {
            "id": "tcx_blank",
            "ground_truth": 0,
            "function": "tcx_blank",
            "description": "Optional function to blank display in frame buffer struct."
        },
        "set_raw_egress_record": {
            "id": "set_raw_egress_record",
            "ground_truth": 0,
            "function": "set_raw_egress_record",
            "description": "Write packed record to egress LUT table row"
        },
        "jffs2_get_inode_nodes": {
            "id": "jffs2_get_inode_nodes",
            "ground_truth": 1,
            "function": "jffs2_get_inode_nodes",
            "description": "Get inode nodes, order data nodes, avoid memory depletion"
        },
        "hackrf_return_all_buffers": {
            "id": "hackrf_return_all_buffers",
            "ground_truth": 0,
            "function": "hackrf_return_all_buffers",
            "description": "Returns all buffers for HackRF using videobuf2."
        },
        "pvrdma_create_cq": {
            "id": "pvrdma_create_cq",
            "ground_truth": 1,
            "function": "pvrdma_create_cq",
            "description": "Creates completion queue with user data on success."
        },
        "xchk_da_process_error": {
            "id": "xchk_da_process_error",
            "ground_truth": 0,
            "function": "xchk_da_process_error",
            "description": "Error check for DA B-tree operation in xchk function."
        },
        "snd_hwdep_proc_read": {
            "id": "snd_hwdep_proc_read",
            "ground_truth": 0,
            "function": "snd_hwdep_proc_read",
            "description": "Reads info from sound hardware dependent interface."
        },
        "cx25840_ir_log_status": {
            "id": "cx25840_ir_log_status",
            "ground_truth": 0,
            "function": "cx25840_ir_log_status",
            "description": "Supports V4L2 subdevice core ops for IR logging status in cx25840."
        },
        "host1x_syncpt_nb_pts": {
            "id": "host1x_syncpt_nb_pts",
            "ground_truth": 0,
            "function": "host1x_syncpt_nb_pts",
            "description": "Returns number of supported sync points in host1x."
        },
        "pm80xx_chip_soft_rst": {
            "id": "pm80xx_chip_soft_rst",
            "ground_truth": 0,
            "function": "pm80xx_chip_soft_rst",
            "description": "Resets PM8001 chip, clears FW register status, and updates HBA card info."
        },
        "kunit_destroy_resource": {
            "id": "kunit_destroy_resource",
            "ground_truth": 0,
            "function": "kunit_destroy_resource",
            "description": "Destroys a KUnit resource by finding and freeing it based on a matching function."
        },
        "lpfc_stop_port_s4": {
            "id": "lpfc_stop_port_s4",
            "ground_truth": 0,
            "function": "lpfc_stop_port_s4",
            "description": "Stops an SLI4 device port, disabling interrupts and timers."
        },
        "rtw_restructure_ht_ie": {
            "id": "rtw_restructure_ht_ie",
            "ground_truth": 0,
            "function": "rtw_restructure_ht_ie",
            "description": "Passive function restructuring HT IE in RTW."
        },
        "irq_chip_enable_parent": {
            "id": "irq_chip_enable_parent",
            "ground_truth": 0,
            "function": "irq_chip_enable_parent",
            "description": "Enables parent interrupt if data pointer is null."
        },
        "rds_ib_sysctl_init": {
            "id": "rds_ib_sysctl_init",
            "ground_truth": 0,
            "function": "rds_ib_sysctl_init",
            "description": "initialize function for RDS IB sysctl settings."
        },
        "ib_alloc_xrcd_user": {
            "id": "ib_alloc_xrcd_user",
            "ground_truth": 1,
            "function": "ib_alloc_xrcd_user",
            "description": "Allocates XRC domain struct for user with device, inode, and user data."
        },
        "get_rx_frame_len": {
            "id": "get_rx_frame_len",
            "ground_truth": 0,
            "function": "get_rx_frame_len",
            "description": "Get receive frame size from RX frame length."
        },
        "hrz_close_rx": {
            "id": "hrz_close_rx",
            "ground_truth": 0,
            "function": "hrz_close_rx",
            "description": "Cancels listening on VC for HRZ RX."
        },
        "hclgevf_get_channels": {
            "id": "hclgevf_get_channels",
            "ground_truth": 0,
            "function": "hclgevf_get_channels",
            "description": "Get current and max enabled channels, no separate tx/rx queue, max queue pair support, hardware info for network interface."
        },
        "gfs2_lm_mount": {
            "id": "gfs2_lm_mount",
            "ground_truth": 1,
            "function": "gfs2_lm_mount",
            "description": "Mounts GFS2 filesystem with locking protocol and error handling."
        },
        "rpc_wake_up_first_on_wq": {
            "id": "rpc_wake_up_first_on_wq",
            "ground_truth": 0,
            "function": "rpc_wake_up_first_on_wq",
            "description": "Wake up first task on wait queue for RPC"
        },
        "t3_sge_prep": {
            "id": "t3_sge_prep",
            "ground_truth": 0,
            "function": "t3_sge_prep",
            "description": "One-time initialization of SGE SW state and parameters for adapter struct"
        },
        "compat_ifr_data_ioctl": {
            "id": "compat_ifr_data_ioctl",
            "ground_truth": 0,
            "function": "compat_ifr_data_ioctl",
            "description": "Handle ioctl for ifreq ifr data, convert to 32-bit format."
        },
        "wf_set_overtemp": {
            "id": "wf_set_overtemp",
            "ground_truth": 0,
            "function": "wf_set_overtemp",
            "description": "Sets overtemp condition with refcounting."
        },
        "ps3_vuart_remove": {
            "id": "ps3_vuart_remove",
            "ground_truth": 0,
            "function": "ps3_vuart_remove",
            "description": "Removes PS3 vuart device instance and resources."
        },
        "i40iw_reg_user_mr": {
            "id": "i40iw_reg_user_mr",
            "ground_truth": 1,
            "function": "i40iw_reg_user_mr",
            "description": "Registers user memory region with access and user data."
        },
        "init_follower_unmute": {
            "id": "init_follower_unmute",
            "ground_truth": 0,
            "function": "init_follower_unmute",
            "description": "Initiates follower unmute via sound control"
        },
        "qed_global_rl_rt_init": {
            "id": "qed_global_rl_rt_init",
            "ground_truth": 0,
            "function": "qed_global_rl_rt_init",
            "description": "Prepare runtime init value for specified RL set, max link speed 100Gbps per limiter. Return on error."
        },
        "x86_fsbase_read_cpu": {
            "id": "x86_fsbase_read_cpu",
            "ground_truth": 0,
            "function": "x86_fsbase_read_cpu",
            "description": "Helper function for reading/writing x86 fsbase register."
        },
        "r5c_flush_stripe": {
            "id": "r5c_flush_stripe",
            "ground_truth": 0,
            "function": "r5c_flush_stripe",
            "description": "Moves cached stripe to handle list, requires device lock."
        },
        "hash__map_kernel_page": {
            "id": "hash__map_kernel_page",
            "ground_truth": 0,
            "function": "hash__map_kernel_page",
            "description": "Add kernel page to ioremap and hpt with hash mapping"
        },
        "m920x_identify_state": {
            "id": "m920x_identify_state",
            "ground_truth": 0,
            "function": "m920x_identify_state",
            "description": "Identifies state for DVB USB using m920x callback."
        },
        "nfs_page_group_lock_subreq": {
            "id": "nfs_page_group_lock_subreq",
            "ground_truth": 0,
            "function": "nfs_page_group_lock_subreq",
            "description": "Helper function for NFS lock and join request, locks subrequest with head request and page group, returns on error with page group unlocked."
        },
        "ishtp_bus_remove_all_clients": {
            "id": "ishtp_bus_remove_all_clients",
            "ground_truth": 0,
            "function": "ishtp_bus_remove_all_clients",
            "description": "Removes all clients during reset flow, targets errors, handles warm reset, suspends"
        },
        "mlx5_eswitch_manager_vport": {
            "id": "mlx5_eswitch_manager_vport",
            "ground_truth": 0,
            "function": "mlx5_eswitch_manager_vport",
            "description": "Manage vports in mlx5 eswitch dev"
        },
        "zfcp_qdio_sbale_req": {
            "id": "zfcp_qdio_sbale_req",
            "ground_truth": 0,
            "function": "zfcp_qdio_sbale_req",
            "description": "Returns pointer to sbale on req for zfcp qdio request."
        },
        "ib_dereg_mr_user": {
            "id": "ib_dereg_mr_user",
            "ground_truth": 1,
            "function": "ib_dereg_mr_user",
            "description": "Deregisters memory region from HCA translation table. Can fail."
        },
        "genpd_resume_noirq": {
            "id": "genpd_resume_noirq",
            "ground_truth": 0,
            "function": "genpd_resume_noirq",
            "description": "Resume device in PM domain, restore power if needed"
        },
        "ocfs2_may_continue_on_blocked_lock": {
            "id": "ocfs2_may_continue_on_blocked_lock",
            "ground_truth": 0,
            "function": "ocfs2_may_continue_on_blocked_lock",
            "description": "Predict lock level drop and check compatibility for ocfs2"
        },
        "get_voice": {
            "id": "get_voice",
            "ground_truth": 0,
            "function": "get_voice",
            "description": "Prototype for obtaining voice"
        },
        "dpu_core_irq_uninstall": {
            "id": "dpu_core_irq_uninstall",
            "ground_truth": 0,
            "function": "dpu_core_irq_uninstall",
            "description": "Uninstall DPU core IRQ handler."
        },
        "hw_atl_rpfl3l4_ipv4_dest_addr_clear": {
            "id": "hw_atl_rpfl3l4_ipv4_dest_addr_clear",
            "ground_truth": 0,
            "function": "hw_atl_rpfl3l4_ipv4_dest_addr_clear",
            "description": "Clear IPv4 filter destination address in HW ATL RPFL3L4."
        },
        "shutdown": {
            "id": "shutdown",
            "ground_truth": 0,
            "function": "shutdown",
            "description": "Request shutdown and disconnect from gadget."
        },
        "ubifs_add_snod": {
            "id": "ubifs_add_snod",
            "ground_truth": 0,
            "function": "ubifs_add_snod",
            "description": "Add scanned node to UBIFS scanning info, return success or error code."
        },
        "pvrdma_create_ah": {
            "id": "pvrdma_create_ah",
            "ground_truth": 1,
            "function": "pvrdma_create_ah",
            "description": "Creates an IB address handle with user data."
        },
        "mlxbf_tmfifo_delete_vdev": {
            "id": "mlxbf_tmfifo_delete_vdev",
            "ground_truth": 0,
            "function": "mlxbf_tmfifo_delete_vdev",
            "description": "Delete vdev for the FIFO in mlxbf tmfifo."
        },
        "rvt_alloc_pd": {
            "id": "rvt_alloc_pd",
            "ground_truth": 1,
            "function": "rvt_alloc_pd",
            "description": "Allocates and tracks protection domain struct for IB PD with optional user data."
        },
        "sst_handle_vb_timer": {
            "id": "sst_handle_vb_timer",
            "ground_truth": 0,
            "function": "sst_handle_vb_timer",
            "description": "Handle VB timer for DSP scheduler operations"
        },
        "setcolor": {
            "id": "setcolor",
            "ground_truth": 0,
            "function": "setcolor",
            "description": "Sets color and returns old value."
        },
        "fm10k_sm_mbx_create_connect_hdr": {
            "id": "fm10k_sm_mbx_create_connect_hdr",
            "ground_truth": 0,
            "function": "fm10k_sm_mbx_create_connect_hdr",
            "description": "Generates local mailbox header for connection."
        },
        "pqi_revert_to_sis_mode": {
            "id": "pqi_revert_to_sis_mode",
            "ground_truth": 0,
            "function": "pqi_revert_to_sis_mode",
            "description": "Switch controller from PQI to SI mode."
        },
        "phy_ethtool_get_eee": {
            "id": "phy_ethtool_get_eee",
            "ground_truth": 0,
            "function": "phy_ethtool_get_eee",
            "description": "Get EEE support and status, report advertisement and capability using phy ethtool."
        },
        "rvt_dealloc_pd": {
            "id": "rvt_dealloc_pd",
            "ground_truth": 1,
            "function": "rvt_dealloc_pd",
            "description": "Frees memory allocated for an InfiniBand protection domain and associated user data."
        },
        "f2fs_find_entry": {
            "id": "f2fs_find_entry",
            "ground_truth": 1,
            "function": "f2fs_find_entry",
            "description": "Find directory entry by name, return page and valid entry."
        },
        "efx_port_dummy_op_int": {
            "id": "efx_port_dummy_op_int",
            "ground_truth": 0,
            "function": "efx_port_dummy_op_int",
            "description": "Dummy operations for EFX port PHY driver."
        },
        "mega_cmd_done": {
            "id": "mega_cmd_done",
            "ground_truth": 0,
            "function": "mega_cmd_done",
            "description": "Complete command, call callback, adapter pointer, soft state, completed ID array, nstatus, status"
        },
        "lpfc_idiag_mbxacc_write": {
            "id": "lpfc_idiag_mbxacc_write",
            "ground_truth": 1,
            "function": "lpfc_idiag_mbxacc_write",
            "description": "Syntax check and set up idiag mbxacc command; get debugfs idiag command struct from user space, perform syntax check for driver mailbox command dump, set up necessary state in idiag command struct, return nbytges passing in from debugfs user space when successful, return proper error code back to user space."
        },
        "cnd_virq_enable_channel": {
            "id": "cnd_virq_enable_channel",
            "ground_truth": 0,
            "function": "cnd_virq_enable_channel",
            "description": "Enables virtual super IRQ channel with given ID."
        },
        "hpte_valid": {
            "id": "hpte_valid",
            "ground_truth": 0,
            "function": "hpte_valid",
            "description": "Validating Linux hugepage PMD with HPTE bit entries"
        },
        "snd_lookup_minor_data": {
            "id": "snd_lookup_minor_data",
            "ground_truth": 1,
            "function": "snd_lookup_minor_data",
            "description": "Get user data of registered minor device type"
        },
        "i2400m_roq_log_dump": {
            "id": "i2400m_roq_log_dump",
            "ground_truth": 0,
            "function": "i2400m_roq_log_dump",
            "description": "Dump i2400m roq log entries and reset fifo."
        },
        "strncpy_from_user": {
            "id": "strncpy_from_user",
            "ground_truth": 1,
            "function": "strncpy_from_user",
            "description": "Copy nul terminated string from userspace to kernel space, return length of string (excluding nul), handle access failure, copy count bytes."
        },
        "reqsk_queue_unlink": {
            "id": "reqsk_queue_unlink",
            "ground_truth": 0,
            "function": "reqsk_queue_unlink",
            "description": "Returns true if req was found in ehash table"
        },
        "usbnet_skb_return": {
            "id": "usbnet_skb_return",
            "ground_truth": 0,
            "function": "usbnet_skb_return",
            "description": "Update and pass USB packet up stack, modify original skb"
        },
        "ubifs_fast_find_empty": {
            "id": "ubifs_fast_find_empty",
            "ground_truth": 0,
            "function": "ubifs_fast_find_empty",
            "description": "Quickly finds empty LEB in UBIFS file system"
        },
        "sirfsoc_dma_irq": {
            "id": "sirfsoc_dma_irq",
            "ground_truth": 0,
            "function": "sirfsoc_dma_irq",
            "description": "Interrupt handler for sirfsoc dma irq"
        },
        "lpfc_idiag_extacc_write": {
            "id": "lpfc_idiag_extacc_write",
            "ground_truth": 1,
            "function": "lpfc_idiag_extacc_write",
            "description": "Syntax check and set up idiag extacc command; get debugfs idiag command struct from user space, perform syntax check for extent information access command, set up necessary state in idiag command struct, return nbytges when successful, return error code for error condition."
        },
        "is_handled_by_aud_tr_if": {
            "id": "is_handled_by_aud_tr_if",
            "ground_truth": 0,
            "function": "is_handled_by_aud_tr_if",
            "description": "Check if address is handled by audio token ring interface"
        },
        "rds_ib_ack_send_complete": {
            "id": "rds_ib_ack_send_complete",
            "ground_truth": 0,
            "function": "rds_ib_ack_send_complete",
            "description": "Ack frame sent from adapter in send completion handler"
        },
        "at91_cf_set_mem_map": {
            "id": "at91_cf_set_mem_map",
            "ground_truth": 0,
            "function": "at91_cf_set_mem_map",
            "description": "Sets memory map for PCMCIA layer by mapping and unmapping memory region."
        },
        "vortex_wt_SetVolume": {
            "id": "vortex_wt_SetVolume",
            "ground_truth": 0,
            "function": "vortex_wt_SetVolume",
            "description": "Extracts volume information from CADB topology structure for Vortex WT."
        },
        "ia_css_set_wb_config": {
            "id": "ia_css_set_wb_config",
            "ground_truth": 0,
            "function": "ia_css_set_wb_config",
            "description": "Sets white balance configuration using generated code."
        },
        "__lookup_hash": {
            "id": "__lookup_hash",
            "ground_truth": 1,
            "function": "__lookup_hash",
            "description": "Lookup hash parent directory with exclusive lock, called only when no in-lookup child exists."
        },
        "snd_hda_jack_add_kctl": {
            "id": "snd_hda_jack_add_kctl",
            "ground_truth": 0,
            "function": "snd_hda_jack_add_kctl",
            "description": "Assigns jack detection kctl to given pin with name and index for HDA codec and reports jack type bit."
        },
        "sta32x_set_dai_fmt": {
            "id": "sta32x_set_dai_fmt",
            "ground_truth": 0,
            "function": "sta32x_set_dai_fmt",
            "description": "Configures codec for selected audio format using bitmask of snd soc daifmt bit."
        },
        "v4l2_subdev_free_pad_config": {
            "id": "v4l2_subdev_free_pad_config",
            "ground_truth": 0,
            "function": "v4l2_subdev_free_pad_config",
            "description": "Frees memory allocated by v4l2 subdev pad config."
        },
        "mmhub_v1_0_set_fault_enable_default": {
            "id": "mmhub_v1_0_set_fault_enable_default",
            "ground_truth": 0,
            "function": "mmhub_v1_0_set_fault_enable_default",
            "description": "Sets default fault handling for GART VM and redirects faults to default page."
        },
        "do_print_item": {
            "id": "do_print_item",
            "ground_truth": 0,
            "function": "do_print_item",
            "description": "Prints menu item using do_print_item function."
        },
        "lpfc_bsg_diag_loopback_run": {
            "id": "lpfc_bsg_diag_loopback_run",
            "ground_truth": 1,
            "function": "lpfc_bsg_diag_loopback_run",
            "description": "Loopback test on port with user data buffer"
        },
        "ocfs2_cow_align_start": {
            "id": "ocfs2_cow_align_start",
            "ground_truth": 0,
            "function": "ocfs2_cow_align_start",
            "description": "Find closest contig cluster for extent alignment"
        },
        "pvrdma_alloc_ucontext": {
            "id": "pvrdma_alloc_ucontext",
            "ground_truth": 1,
            "function": "pvrdma_alloc_ucontext",
            "description": "Allocate ucontext struct for PVRDMA with user data."
        },
        "nvkm_sddr3_calc": {
            "id": "nvkm_sddr3_calc",
            "ground_truth": 0,
            "function": "nvkm_sddr3_calc",
            "description": "RAM type specific MR calculation routine for nvkm sddr3"
        },
        "memory_bm_next_pfn": {
            "id": "memory_bm_next_pfn",
            "ground_truth": 0,
            "function": "memory_bm_next_pfn",
            "description": "Find next set bit in memory bitmap and return PFN"
        },
        "ioreq_read16": {
            "id": "ioreq_read16",
            "ground_truth": 0,
            "function": "ioreq_read16",
            "description": "Reads 16-bit data from I/O request."
        },
        "arch_uprobe_xol_was_trapped": {
            "id": "arch_uprobe_xol_was_trapped",
            "ground_truth": 0,
            "function": "arch_uprobe_xol_was_trapped",
            "description": "Detects if an arch uprobe xol was trapped by checking trap nr."
        },
        "spu_sync_start": {
            "id": "spu_sync_start",
            "ground_truth": 0,
            "function": "spu_sync_start",
            "description": "Starts synchronization with profiling hook."
        },
        "region_add": {
            "id": "region_add",
            "ground_truth": 0,
            "function": "region_add",
            "description": "Adds huge page range to reserve map, may allocate new entries"
        },
        "onenand_scan": {
            "id": "onenand_scan",
            "ground_truth": 0,
            "function": "onenand_scan",
            "description": "Scan onenand interface for device, fill function pointers, read flash ID, fill MTD chip structure, max chips"
        },
        "v9fs_mount": {
            "id": "v9fs_mount",
            "ground_truth": 1,
            "function": "v9fs_mount",
            "description": "Mounts v9fs with specified options and device name."
        },
        "fan_watchdog_show": {
            "id": "fan_watchdog_show",
            "ground_truth": 0,
            "function": "fan_watchdog_show",
            "description": "Displays fan watchdog information from sysfs and hwmon driver."
        },
        "copy_to_user_page": {
            "id": "copy_to_user_page",
            "ground_truth": 1,
            "function": "copy_to_user_page",
            "description": "Copy user data to different process address space for user space model to handle."
        },
        "message_send": {
            "id": "message_send",
            "ground_truth": 0,
            "function": "message_send",
            "description": "Zero for successful message queue, negative errno otherwise"
        },
        "init_over_drive_limits": {
            "id": "init_over_drive_limits",
            "ground_truth": 0,
            "function": "init_over_drive_limits",
            "description": "Retrieve overdrive limit from vbios and update platform descriptor."
        },
        "fc_fcp_resp": {
            "id": "fc_fcp_resp",
            "ground_truth": 0,
            "function": "fc_fcp_resp",
            "description": "Handles FCP response packets and frames."
        },
        "netlbl_domhsh_search": {
            "id": "netlbl_domhsh_search",
            "ground_truth": 0,
            "function": "netlbl_domhsh_search",
            "description": "Searches domain hash table for entry, returns pointer if found, null if not. Caller ensures hash table is protected."
        },
        "prom_apply_generic_ranges": {
            "id": "prom_apply_generic_ranges",
            "ground_truth": 0,
            "function": "prom_apply_generic_ranges",
            "description": "Apply range to prom node and parent node for registration."
        },
        "dio_bio_submit": {
            "id": "dio_bio_submit",
            "ground_truth": 0,
            "function": "dio_bio_submit",
            "description": "Submits dirty pages for I/O completion using BIOS. (20 tokens)"
        },
        "f2fs_quota_read": {
            "id": "f2fs_quota_read",
            "ground_truth": 1,
            "function": "f2fs_quota_read",
            "description": "Reads quota data from f2fs quotafile."
        },
        "intel_guc_ads_create": {
            "id": "intel_guc_ads_create",
            "ground_truth": 0,
            "function": "intel_guc_ads_create",
            "description": "Allocates and initializes memory for Intel GUC AD data."
        },
        "cm_register": {
            "id": "cm_register",
            "ground_truth": 0,
            "function": "cm_register",
            "description": "Register low-level data with function pointer using cm_register"
        },
        "gasket_sysfs_get_device_data": {
            "id": "gasket_sysfs_get_device_data",
            "ground_truth": 1,
            "function": "gasket_sysfs_get_device_data",
            "description": "Lookup user data for device using sysfs, release with put device data"
        },
        "xprt_register_transport": {
            "id": "xprt_register_transport",
            "ground_truth": 0,
            "function": "xprt_register_transport",
            "description": "Registers transport implementation for RPC client. Handles module loading and unloading."
        },
        "mc_remove": {
            "id": "mc_remove",
            "ground_truth": 0,
            "function": "mc_remove",
            "description": "Removes driver from platform device struct."
        },
        "qxl_release_from_id_locked": {
            "id": "qxl_release_from_id_locked",
            "ground_truth": 0,
            "function": "qxl_release_from_id_locked",
            "description": "Release QXL from ID locked for debugfs"
        },
        "tx39_blast_dcache_page": {
            "id": "tx39_blast_dcache_page",
            "ground_truth": 0,
            "function": "tx39_blast_dcache_page",
            "description": " \"Blasts data cache page on TX39H2 and TX39H3."
        },
        "amdgpu_debugfs_regs_init": {
            "id": "amdgpu_debugfs_regs_init",
            "ground_truth": 0,
            "function": "amdgpu_debugfs_regs_init",
            "description": "Initializes debugfs entry for register access in amdgpu device."
        },
        "pnfs_alloc_commit_array": {
            "id": "pnfs_alloc_commit_array",
            "ground_truth": 0,
            "function": "pnfs_alloc_commit_array",
            "description": "Allocate commit array for PNFS NFS in 5 tokens."
        },
        "send_cmd_ioarrin": {
            "id": "send_cmd_ioarrin",
            "ground_truth": 0,
            "function": "send_cmd_ioarrin",
            "description": "Send AFU command via IOARRIN to host's AFU. Returns SCSI MLQUEUE host busy on failure."
        },
        "glk_rpm_retune_wa": {
            "id": "glk_rpm_retune_wa",
            "ground_truth": 0,
            "function": "glk_rpm_retune_wa",
            "description": "Restores tuning value for GLK RPM with firmware workaround."
        },
        "urb_enqueue": {
            "id": "urb_enqueue",
            "ground_truth": 0,
            "function": "urb_enqueue",
            "description": "Manages device state for request in urb enqueue."
        },
        "cmm_oom_notify": {
            "id": "cmm_oom_notify",
            "ground_truth": 0,
            "function": "cmm_oom_notify",
            "description": "Not enough information provided to summarize the function description into 20 tokens."
        },
        "oaktrail_restore_display_registers": {
            "id": "oaktrail_restore_display_registers",
            "ground_truth": 0,
            "function": "oaktrail_restore_display_registers",
            "description": "Restores lost display register state during suspend/resume."
        },
        "smc_ib_port_event_work": {
            "id": "smc_ib_port_event_work",
            "ground_truth": 0,
            "function": "smc_ib_port_event_work",
            "description": "Wrapper for processing SMC IB port events, may sleep."
        },
        "virt_wifi_get_station": {
            "id": "virt_wifi_get_station",
            "ground_truth": 0,
            "function": "virt_wifi_get_station",
            "description": "Get station info from virtual wifi with rtnl lock"
        },
        "cros_ec_lpc_mec_in_range": {
            "id": "cros_ec_lpc_mec_in_range",
            "ground_truth": 0,
            "function": "cros_ec_lpc_mec_in_range",
            "description": "Determines if address is in MEC EMI range."
        },
        "nv04_nvsw_mthd_get_ref": {
            "id": "nv04_nvsw_mthd_get_ref",
            "ground_truth": 0,
            "function": "nv04_nvsw_mthd_get_ref",
            "description": "Software object class for nv04 nvsw mthd get ref."
        },
        "css_get": {
            "id": "css_get",
            "ground_truth": 0,
            "function": "css_get",
            "description": "Obtain reference on specified cgroup subsystem state."
        },
        "start_transport": {
            "id": "start_transport",
            "ground_truth": 0,
            "function": "start_transport",
            "description": "Starts transport for specified pipe channels with bit mask."
        },
        "cvmx_helper_initialize_packet_io_local": {
            "id": "cvmx_helper_initialize_packet_io_local",
            "ground_truth": 0,
            "function": "cvmx_helper_initialize_packet_io_local",
            "description": "Initialize packet IO local, return 0 on success, void argument"
        },
        "intel_write_sha_text": {
            "id": "intel_write_sha_text",
            "ground_truth": 0,
            "function": "intel_write_sha_text",
            "description": "Returns updated SHA index after writing SHA text."
        },
        "zr364xx_vidioc_streamon": {
            "id": "zr364xx_vidioc_streamon",
            "ground_truth": 0,
            "function": "zr364xx_vidioc_streamon",
            "description": "V4L2 integration for zr364xx video streaming."
        },
        "tb_drom_read": {
            "id": "tb_drom_read",
            "ground_truth": 0,
            "function": "tb_drom_read",
            "description": "Copy and parse DROM to switch SW in tb DROM read function."
        },
        "blk_rq_map_kern": {
            "id": "blk_rq_map_kern",
            "ground_truth": 1,
            "function": "blk_rq_map_kern",
            "description": "Map kernel data to request for passthrough, using bounce buffer if necessary. Multiple calls can append buffers."
        },
        "pvrdma_reg_user_mr": {
            "id": "pvrdma_reg_user_mr",
            "ground_truth": 1,
            "function": "pvrdma_reg_user_mr",
            "description": "Registers userspace memory region for protection domain."
        },
        "ib_destroy_wq_user": {
            "id": "ib_destroy_wq_user",
            "ground_truth": 1,
            "function": "ib_destroy_wq_user",
            "description": "Destroys user's work queue (WQ) in InfiniBand with valid user data."
        },
        "pcibios_plat_dev_init": {
            "id": "pcibios_plat_dev_init",
            "ground_truth": 0,
            "function": "pcibios_plat_dev_init",
            "description": "Initializes platform-specific devices during PCI device enablement."
        },
        "trace_io_uring_complete": {
            "id": "trace_io_uring_complete",
            "ground_truth": 1,
            "function": "trace_io_uring_complete",
            "description": "Trace completion of io uring request with context and user data"
        },
        "ecryptfs_mount": {
            "id": "ecryptfs_mount",
            "ground_truth": 1,
            "function": "ecryptfs_mount",
            "description": "Mounts ecryptfs with specified options and path."
        },
        "register_tracepoint_module_notifier": {
            "id": "register_tracepoint_module_notifier",
            "ground_truth": 0,
            "function": "register_tracepoint_module_notifier",
            "description": "Registers tracepoint module notifier for module coming/going."
        },
        "__dev_get_by_index": {
            "id": "__dev_get_by_index",
            "ground_truth": 0,
            "function": "__dev_get_by_index",
            "description": "Find device by index in net namespace, return pointer or null"
        },
        "dm_helpers_parse_edid_caps": {
            "id": "dm_helpers_parse_edid_caps",
            "ground_truth": 0,
            "function": "dm_helpers_parse_edid_caps",
            "description": "Parse EDID capabilities from input pointer and return"
        },
        "vidtv_psi_pat_program_assign": {
            "id": "vidtv_psi_pat_program_assign",
            "ground_truth": 0,
            "function": "vidtv_psi_pat_program_assign",
            "description": "loops assigned to the PAT table."
        },
        "iommu_set_fault_handler": {
            "id": "iommu_set_fault_handler",
            "ground_truth": 1,
            "function": "iommu_set_fault_handler",
            "description": "Sets fault handler for an IOMMU domain to notify user of faults."
        },
        "line6_init_midi": {
            "id": "line6_init_midi",
            "ground_truth": 0,
            "function": "line6_init_midi",
            "description": "Initializes Line6 MIDI subsystem."
        },
        "fc_exch_update_stats": {
            "id": "fc_exch_update_stats",
            "ground_truth": 0,
            "function": "fc_exch_update_stats",
            "description": "Updates exchange manager stats for local port."
        },
        "cond_set_guest_storage_key": {
            "id": "cond_set_guest_storage_key",
            "ground_truth": 0,
            "function": "cond_set_guest_storage_key",
            "description": "Updates guest storage key if necessary based on input parameters."
        },
        "grcan_stop_hardware": {
            "id": "grcan_stop_hardware",
            "ground_truth": 0,
            "function": "grcan_stop_hardware",
            "description": "Stop hardware device without configuration change."
        },
        "ipa_server_bye": {
            "id": "ipa_server_bye",
            "ground_truth": 0,
            "function": "ipa_server_bye",
            "description": "IPA server disconnects QMI clients on modem shutdown or crash."
        },
        "set_device_state": {
            "id": "set_device_state",
            "ground_truth": 0,
            "function": "set_device_state",
            "description": "Sets device state to on or off."
        },
        "iop_chan_memcpy_slot_count": {
            "id": "iop_chan_memcpy_slot_count",
            "ground_truth": 0,
            "function": "iop_chan_memcpy_slot_count",
            "description": "Supports large buffer size for memcpy in IOP channel."
        },
        "locks_free_lock": {
            "id": "locks_free_lock",
            "ground_truth": 0,
            "function": "locks_free_lock",
            "description": "Lock-free lock not in use"
        },
        "qla2x00_handle_dif_error": {
            "id": "qla2x00_handle_dif_error",
            "ground_truth": 0,
            "function": "qla2x00_handle_dif_error",
            "description": "Check and set error in HBA, update sense buffer"
        },
        "get_secindex": {
            "id": "get_secindex",
            "ground_truth": 0,
            "function": "get_secindex",
            "description": "Accessor for section index, hides 64k section ugliness."
        },
        "igb_write_pcie_cap_reg": {
            "id": "igb_write_pcie_cap_reg",
            "ground_truth": 0,
            "function": "igb_write_pcie_cap_reg",
            "description": "Driver implements igb write pcie cap reg function."
        },
        "tfp410_i2c_probe": {
            "id": "tfp410_i2c_probe",
            "ground_truth": 0,
            "function": "tfp410_i2c_probe",
            "description": "No i2c functionality in tfp410 i2c probe"
        },
        "kdb_symbol_print": {
            "id": "kdb_symbol_print",
            "ground_truth": 0,
            "function": "kdb_symbol_print",
            "description": "Prints symbol name and offset, does own lookup, prints punctuation, only prints if address is in kernel."
        },
        "hw_atl_rpo_rx_desc_vlan_stripping_set": {
            "id": "hw_atl_rpo_rx_desc_vlan_stripping_set",
            "ground_truth": 0,
            "function": "hw_atl_rpo_rx_desc_vlan_stripping_set",
            "description": "Enables stripping of VLAN tags from received packets in RX descriptor."
        },
        "clkdm_in_hwsup": {
            "id": "clkdm_in_hwsup",
            "ground_truth": 0,
            "function": "clkdm_in_hwsup",
            "description": " Check if clkdm has hardware supervised idle enabled."
        },
        "adv748x_hdmi_s_dv_timings": {
            "id": "adv748x_hdmi_s_dv_timings",
            "ground_truth": 0,
            "function": "adv748x_hdmi_s_dv_timings",
            "description": "V4L2 subdev video ops for ADV748x HDMI DV timing."
        },
        "sbi_set_timer": {
            "id": "sbi_set_timer",
            "ground_truth": 0,
            "function": "sbi_set_timer",
            "description": "Sets timer for next event with given time value."
        },
        "atlx_link_chg_task": {
            "id": "atlx_link_chg_task",
            "ground_truth": 0,
            "function": "atlx_link_chg_task",
            "description": "Task for handling link change events outside of interrupts."
        },
        "s3c24xx_mci_def_set_power": {
            "id": "s3c24xx_mci_def_set_power",
            "ground_truth": 0,
            "function": "s3c24xx_mci_def_set_power",
            "description": "Sets power mode and voltage for s3c24xx mmc/sdi device."
        },
        "vfs_create_mount": {
            "id": "vfs_create_mount",
            "ground_truth": 1,
            "function": "vfs_create_mount",
            "description": "Creates mount for configured superblock, caller should invoke vfs get tree before calling, does not attach mount to anything."
        },
        "rq_depth_scale_up": {
            "id": "rq_depth_scale_up",
            "ground_truth": 0,
            "function": "rq_depth_scale_up",
            "description": "Returns true if scaling up rq depth is possible, false otherwise."
        },
        "bb_get_frame_time": {
            "id": "bb_get_frame_time",
            "ground_truth": 0,
            "function": "bb_get_frame_time",
            "description": "Calculates data frame transmitting time based on various parameters such as preamble type, packet type, frame length, and transmission rate. Returns the frame time."
        },
        "aha152x_queue_lck": {
            "id": "aha152x_queue_lck",
            "ground_truth": 0,
            "function": "aha152x_queue_lck",
            "description": "Locks AHA152x queue for command queuing"
        },
        "_debug_dump_mf": {
            "id": "_debug_dump_mf",
            "ground_truth": 0,
            "function": "_debug_dump_mf",
            "description": "Debugging print for message frame with MPI request pointer and dword count."
        },
        "fifo_icap_set_configuration": {
            "id": "fifo_icap_set_configuration",
            "ground_truth": 1,
            "function": "fifo_icap_set_configuration",
            "description": "Sends configuration data to icap struct, writes user data to write fifo, and starts transfer to icap device."
        },
        "video_mux": {
            "id": "video_mux",
            "ground_truth": 0,
            "function": "video_mux",
            "description": "Video mux for audio and video decoding."
        },
        "cifs_nlink_fattr_to_inode": {
            "id": "cifs_nlink_fattr_to_inode",
            "ground_truth": 0,
            "function": "cifs_nlink_fattr_to_inode",
            "description": "Copy nlink to inode, provide sane value if none provided."
        },
        "posixtimer_rearm": {
            "id": "posixtimer_rearm",
            "ground_truth": 0,
            "function": "posixtimer_rearm",
            "description": "Exported function to update overrun entry and restart timer"
        },
        "memdup_user": {
            "id": "memdup_user",
            "ground_truth": 1,
            "function": "memdup_user",
            "description": "Duplicate user memory region, copy bytes from user space, contiguous result, free with kfree"
        },
        "canon_copy_from_read_buf": {
            "id": "canon_copy_from_read_buf",
            "ground_truth": 1,
            "function": "canon_copy_from_read_buf",
            "description": "Copy read data in canonical mode for tty device"
        },
        "show_in": {
            "id": "show_in",
            "ground_truth": 0,
            "function": "show_in",
            "description": "Display in sysfs."
        },
        "plip_bh": {
            "id": "plip_bh",
            "ground_truth": 0,
            "function": "plip_bh",
            "description": "Handler for plip bh bottom half in plip."
        },
        "ntfs_sync_mft_mirror_umount": {
            "id": "ntfs_sync_mft_mirror_umount",
            "ground_truth": 1,
            "function": "ntfs_sync_mft_mirror_umount",
            "description": "Synchronizes an MFT record to the MFT mirror, bypassing cache and MFT mirror inode, only for use at umount time."
        },
        "hnae_ae_register": {
            "id": "hnae_ae_register",
            "ground_truth": 0,
            "function": "hnae_ae_register",
            "description": "Registers AE engine to HNAE framework struct."
        },
        "orion5x_sata_init": {
            "id": "orion5x_sata_init",
            "ground_truth": 0,
            "function": "orion5x_sata_init",
            "description": "Initialization for Orion5x SATA."
        },
        "brcmf_bus_change_state": {
            "id": "brcmf_bus_change_state",
            "ground_truth": 0,
            "function": "brcmf_bus_change_state",
            "description": "Configure global bus state for upper layer"
        },
        "fnic_device_reset": {
            "id": "fnic_device_reset",
            "ground_truth": 0,
            "function": "fnic_device_reset",
            "description": "Resets FNIC device when SCSI commands fail. (13 tokens)"
        },
        "ubifs_remount_rw": {
            "id": "ubifs_remount_rw",
            "ground_truth": 1,
            "function": "ubifs_remount_rw",
            "description": "Remounts UBIFS in read-write mode, allocating necessary resources."
        },
        "otx_cptvf_send_vf_down": {
            "id": "otx_cptvf_send_vf_down",
            "ground_truth": 0,
            "function": "otx_cptvf_send_vf_down",
            "description": "Communication of VF status to PF"
        },
        "pipe_toggle_restore": {
            "id": "pipe_toggle_restore",
            "ground_truth": 0,
            "function": "pipe_toggle_restore",
            "description": "Toggle pipe restore with disabled interrupt"
        },
        "of_usb_get_dr_mode_by_phy": {
            "id": "of_usb_get_dr_mode_by_phy",
            "ground_truth": 0,
            "function": "of_usb_get_dr_mode_by_phy",
            "description": "Get USB dual role mode from PHY device node."
        },
        "fas216_eh_abort": {
            "id": "fas216_eh_abort",
            "ground_truth": 0,
            "function": "fas216_eh_abort",
            "description": "Abort SCSI command, lock IO request, disable IRQs"
        },
        "cmdq_thread_invalidate_fetched_data": {
            "id": "cmdq_thread_invalidate_fetched_data",
            "ground_truth": 0,
            "function": "cmdq_thread_invalidate_fetched_data",
            "description": "Invalidates fetched data for cmdq thread, triggers re-fetch by setting gce thread pc."
        },
        "gvbctv3pci_audio": {
            "id": "gvbctv3pci_audio",
            "ground_truth": 0,
            "function": "gvbctv3pci_audio",
            "description": "Connect audio to GPIO pin"
        },
        "bnx2x_func_comp_cmd": {
            "id": "bnx2x_func_comp_cmd",
            "ground_truth": 0,
            "function": "bnx2x_func_comp_cmd",
            "description": "Completes state change command check for bnx2x, using device handle and function info."
        },
        "trace_io_uring_defer": {
            "id": "trace_io_uring_defer",
            "ground_truth": 1,
            "function": "trace_io_uring_defer",
            "description": "Track deferred io uring requests, get insight on non-started requests."
        },
        "xa_reserve": {
            "id": "xa_reserve",
            "ground_truth": 0,
            "function": "xa_reserve",
            "description": "Reserve index in xarray, mark as reserved, return null if unused, release with xa release or xa erase."
        },
        "mwifiex_pcie_cmdrsp_complete": {
            "id": "mwifiex_pcie_cmdrsp_complete",
            "ground_truth": 0,
            "function": "mwifiex_pcie_cmdrsp_complete",
            "description": "Handler for processing complete command response in mwifiex pcie"
        },
        "ehci_turn_off_all_ports": {
            "id": "ehci_turn_off_all_ports",
            "ground_truth": 0,
            "function": "ehci_turn_off_all_ports",
            "description": "Turns off all ports, disables remote wakeup, prevents system shutdown."
        },
        "batadv_tp_batctl_notify": {
            "id": "batadv_tp_batctl_notify",
            "ground_truth": 0,
            "function": "batadv_tp_batctl_notify",
            "description": "Notify client of TP meter session result with destination, start time, total sent byte acked, and cookie"
        },
        "do_sync_gen_syndrome": {
            "id": "do_sync_gen_syndrome",
            "ground_truth": 0,
            "function": "do_sync_gen_syndrome",
            "description": "Synchronously calculates RAID6 syndrome with given parameters and submits it for asynchronous processing."
        },
        "batadv_store_isolation_mark": {
            "id": "batadv_store_isolation_mark",
            "ground_truth": 1,
            "function": "batadv_store_isolation_mark",
            "description": "Parse and store user-entered isolation mark mask in mesh sysfs directory"
        },
        "i40iw_create_qp": {
            "id": "i40iw_create_qp",
            "ground_truth": 1,
            "function": "i40iw_create_qp",
            "description": "Creates a QP with specified attributes and user data."
        },
        "bnx2x_8705_config_init": {
            "id": "bnx2x_8705_config_init",
            "ground_truth": 0,
            "function": "bnx2x_8705_config_init",
            "description": "Initializes configuration for BCM8705 PHY in bnx2x."
        },
        "btrfs_free_block_groups": {
            "id": "btrfs_free_block_groups",
            "ground_truth": 1,
            "function": "btrfs_free_block_groups",
            "description": "Freeing block group after stopping worker to avoid racing with caching kthreads."
        },
        "vivid_radio_rx_s_ctrl": {
            "id": "vivid_radio_rx_s_ctrl",
            "ground_truth": 0,
            "function": "vivid_radio_rx_s_ctrl",
            "description": "Control for vivid radio receiver in RX mode."
        },
        "iceland_ih_irq_disable": {
            "id": "iceland_ih_irq_disable",
            "ground_truth": 0,
            "function": "iceland_ih_irq_disable",
            "description": "Disable interrupt on AMDGPU device pointer"
        },
        "hpfs_error": {
            "id": "hpfs_error",
            "ground_truth": 0,
            "function": "hpfs_error",
            "description": "Filesystem error in hpfs"
        },
        "ib_test": {
            "id": "ib_test",
            "ground_truth": 0,
            "function": "ib_test",
            "description": "Function for testing, named ib_test."
        },
        "__get_fiq_regs": {
            "id": "__get_fiq_regs",
            "ground_truth": 0,
            "function": "__get_fiq_regs",
            "description": "Get helper for FIQ registers in FIQ assembly."
        },
        "x25_frames_acked": {
            "id": "x25_frames_acked",
            "ground_truth": 0,
            "function": "x25_frames_acked",
            "description": "X25 frame acked in subroutines"
        },
        "ap_get_table_length": {
            "id": "ap_get_table_length",
            "ground_truth": 0,
            "function": "ap_get_table_length",
            "description": "Obtain table length based on signature."
        },
        "sonic_multicast_list": {
            "id": "sonic_multicast_list",
            "ground_truth": 0,
            "function": "sonic_multicast_list",
            "description": "Sets/clears multicast filter for adaptor."
        },
        "alarm_clock_getres": {
            "id": "alarm_clock_getres",
            "ground_truth": 0,
            "function": "alarm_clock_getres",
            "description": "Get granularity of alarm clock with POSIX interface"
        },
        "board_added": {
            "id": "board_added",
            "ground_truth": 0,
            "function": "board_added",
            "description": "Board added function configures PCI device info for hotplug controller."
        },
        "xfs_attr_get": {
            "id": "xfs_attr_get",
            "ground_truth": 0,
            "function": "xfs_attr_get",
            "description": "Retrieve extended attribute by name and value, indicate existence and size, allocate buffer if needed, free buffer, return size limit error if exceeded."
        },
        "btrfs_root_node": {
            "id": "btrfs_root_node",
            "ground_truth": 1,
            "function": "btrfs_root_node",
            "description": "Safely get reference to Btrfs root node without locking."
        },
        "test_and_change_bit": {
            "id": "test_and_change_bit",
            "ground_truth": 0,
            "function": "test_and_change_bit",
            "description": "Atomic bit test and change operation on volatile memory address."
        },
        "intel_hdcp_capable": {
            "id": "intel_hdcp_capable",
            "ground_truth": 0,
            "function": "intel_hdcp_capable",
            "description": "HDCP1 capable on platform and sink"
        },
        "kfd_iommu_device_init": {
            "id": "kfd_iommu_device_init",
            "ground_truth": 0,
            "function": "kfd_iommu_device_init",
            "description": "Initialize IOMMU for KFD device"
        },
        "ser12_set_divisor": {
            "id": "ser12_set_divisor",
            "ground_truth": 0,
            "function": "ser12_set_divisor",
            "description": "Sets divisor for ser12."
        },
        "tiocgsid": {
            "id": "tiocgsid",
            "ground_truth": 1,
            "function": "tiocgsid",
            "description": "Obtain session ID of tty, return error if none, safe locking."
        },
        "gpio_reg_init": {
            "id": "gpio_reg_init",
            "ground_truth": 0,
            "function": "gpio_reg_init",
            "description": "Initializes GPIO register with fixed input/output configuration, up to maximum number of GPIO signals. Optional device association and interrupt mapping."
        },
        "diag_cmd_data_alloc": {
            "id": "diag_cmd_data_alloc",
            "ground_truth": 1,
            "function": "diag_cmd_data_alloc",
            "description": "Allocates and populates buffer with user data, returns list."
        },
        "lpfc_snapshot_mxp": {
            "id": "lpfc_snapshot_mxp",
            "ground_truth": 0,
            "function": "lpfc_snapshot_mxp",
            "description": "Snapshot PBL, PVT, and busy count. Call before test case. Increment stat snapshot during test case. Takes snapshot when stat snapshot equals lpfc mxp snapshot taken."
        },
        "f2fs_match_ci_name": {
            "id": "f2fs_match_ci_name",
            "ground_truth": 1,
            "function": "f2fs_match_ci_name",
            "description": "Tests case-insensitive directory entry against searched filename."
        },
        "sst_slot_get": {
            "id": "sst_slot_get",
            "ground_truth": 0,
            "function": "sst_slot_get",
            "description": "Get interleaver/deinterleaver status from control struct"
        },
        "snd_soc_component_open": {
            "id": "snd_soc_component_open",
            "ground_truth": 0,
            "function": "snd_soc_component_open",
            "description": "Open component driver operations for sound system."
        },
        "ath11k_dp_rxbufs_replenish": {
            "id": "ath11k_dp_rxbufs_replenish",
            "ground_truth": 0,
            "function": "ath11k_dp_rxbufs_replenish",
            "description": "Returns number of replenished rx buffers."
        },
        "crypto_alloc_base": {
            "id": "crypto_alloc_base",
            "ground_truth": 0,
            "function": "crypto_alloc_base",
            "description": "Function allocates and locates crypto algorithm, not for new types. Uses existing or loads module, constructs algorithm on the fly. Returns non-determinate type transform."
        },
        "amd_threshold_interrupt": {
            "id": "amd_threshold_interrupt",
            "ground_truth": 0,
            "function": "amd_threshold_interrupt",
            "description": "AMD threshold interrupt handler for error count limit"
        },
        "be_max_qp_irqs": {
            "id": "be_max_qp_irqs",
            "ground_truth": 0,
            "function": "be_max_qp_irqs",
            "description": "Max IRQs for combined queue in be_max_qp_irqs function"
        },
        "ubifs_mount_orphans": {
            "id": "ubifs_mount_orphans",
            "ground_truth": 1,
            "function": "ubifs_mount_orphans",
            "description": "Deletes orphan inodes and erases corresponding LEBs during mount, called for recovery from unclean unmount and read-only mount."
        },
        "ieee80211_ibss_notify_scan_completed": {
            "id": "ieee80211_ibss_notify_scan_completed",
            "ground_truth": 0,
            "function": "ieee80211_ibss_notify_scan_completed",
            "description": "Notify completion of IEEE 802.11 IBSS scan"
        },
        "iio_read_mount_matrix": {
            "id": "iio_read_mount_matrix",
            "ground_truth": 1,
            "function": "iio_read_mount_matrix",
            "description": "Retrieve IIO device mounting matrix from device mount matrix property."
        },
        "vmw_binding_scrub_vb": {
            "id": "vmw_binding_scrub_vb",
            "ground_truth": 0,
            "function": "vmw_binding_scrub_vb",
            "description": "Scrub vertex buffer binding schedule from context struct."
        },
        "aa_unpack": {
            "id": "aa_unpack",
            "ground_truth": 1,
            "function": "aa_unpack",
            "description": "Unpacks binary profile data, returns allocated profile in order of discovery with list chain, returns namespace profile is in or error pointer."
        },
        "rt2x00usb_disable_radio": {
            "id": "rt2x00usb_disable_radio",
            "ground_truth": 0,
            "function": "rt2x00usb_disable_radio",
            "description": " \"Disable rt2x00usb radio handler\"."
        },
        "bnx2_set_rx_mode": {
            "id": "bnx2_set_rx_mode",
            "ground_truth": 0,
            "function": "bnx2_set_rx_mode",
            "description": "Sets RX mode with rtnl and netif tx lock from vlan and multicast"
        },
        "wm97xx_init_pen_irq": {
            "id": "wm97xx_init_pen_irq",
            "ground_truth": 0,
            "function": "wm97xx_init_pen_irq",
            "description": "Initializes pen IRQ handler and workqueue for wm97xx."
        },
        "fib_dealloc": {
            "id": "fib_dealloc",
            "ground_truth": 0,
            "function": "fib_dealloc",
            "description": "Deallocates and returns fib struct to free pool."
        },
        "extcon_unregister_notifier": {
            "id": "extcon_unregister_notifier",
            "ground_truth": 0,
            "function": "extcon_unregister_notifier",
            "description": "Unregister notifier block from extcon device. Return success or error number."
        },
        "ath5k_hw_set_rxdp": {
            "id": "ath5k_hw_set_rxdp",
            "ground_truth": 0,
            "function": "ath5k_hw_set_rxdp",
            "description": "Sets RX descriptor address in ath5k hardware."
        },
        "ethtool_rxfh_indir_default": {
            "id": "ethtool_rxfh_indir_default",
            "ground_truth": 0,
            "function": "ethtool_rxfh_indir_default",
            "description": "Get default value for rx flow hash indirection table"
        },
        "temac_dma_dcr_in": {
            "id": "temac_dma_dcr_in",
            "ground_truth": 0,
            "function": "temac_dma_dcr_in",
            "description": "Reads DMA data from DCR using in32 function."
        },
        "btree_init_mempool": {
            "id": "btree_init_mempool",
            "ground_truth": 0,
            "function": "btree_init_mempool",
            "description": "Initialize btree with given mempool, no need to destroy mempool struct."
        },
        "sgl_to_sgl_fcnvfxt": {
            "id": "sgl_to_sgl_fcnvfxt",
            "ground_truth": 0,
            "function": "sgl_to_sgl_fcnvfxt",
            "description": "Converts single floating point to single fixed point with truncation."
        },
        "sa1100_stop_tx": {
            "id": "sa1100_stop_tx",
            "ground_truth": 0,
            "function": "sa1100_stop_tx",
            "description": "sa1100 stop tx, interrupt disabled"
        },
        "tty_ldisc_open": {
            "id": "tty_ldisc_open",
            "ground_truth": 1,
            "function": "tty_ldisc_open",
            "description": "Open line discipline on tty struct with helper method and locking"
        },
        "brcmf_pno_find_reqid_by_bucket": {
            "id": "brcmf_pno_find_reqid_by_bucket",
            "ground_truth": 0,
            "function": "brcmf_pno_find_reqid_by_bucket",
            "description": "Find request ID for given firmware bucket index in brcmf PNO instance."
        },
        "sa1100_mask_irq": {
            "id": "sa1100_mask_irq",
            "ground_truth": 0,
            "function": "sa1100_mask_irq",
            "description": "Mask IRQ for SA1100, except for GPIOs. Internal IRQs from LCD to RTCALRM."
        },
        "rpcrdma_xprt_connect": {
            "id": "rpcrdma_xprt_connect",
            "ground_truth": 0,
            "function": "rpcrdma_xprt_connect",
            "description": "Connects RPCRDMA transport instance, returns success or negative errno."
        }
    }
}