{"PR": {"nested_vmx_check_permission": {"id": "nested_vmx_check_permission", "ground_truth": 1, "function": "nested_vmx_check_permission", "description": "Check permission for nested VMX instruction"}, "proc_fd_permission": {"id": "proc_fd_permission", "ground_truth": 1, "function": "proc_fd_permission", "description": "Special permission handler for proc fd access after setuid execution."}, "security_init": {"id": "security_init", "ground_truth": 1, "function": "security_init", "description": "Initialize security framework early in kernel initialization."}, "scsi_target_reap_ref_release": {"id": "scsi_target_reap_ref_release", "ground_truth": 0, "function": "scsi_target_reap_ref_release", "description": "Remove target from visibility on last reap ref put"}, "apex_ioctl_check_permissions": {"id": "apex_ioctl_check_permissions", "ground_truth": 1, "function": "apex_ioctl_check_permissions", "description": "Permission check for Apex ioctls"}, "devm_sigmadsp_init_i2c": {"id": "devm_sigmadsp_init_i2c", "ground_truth": 0, "function": "devm_sigmadsp_init_i2c", "description": "Initializes and allocates sigmadsp instance, loads firmware, returns pointer."}, "fc_lport_timeout": {"id": "fc_lport_timeout", "ground_truth": 0, "function": "fc_lport_timeout", "description": "Handler for lport timeout retry work timer"}, "set_cis_map": {"id": "set_cis_map", "ground_truth": 0, "function": "set_cis_map", "description": "Maps card memory to virtual space with ops mutex held."}, "alc_read_coefex_idx": {"id": "alc_read_coefex_idx", "ground_truth": 0, "function": "alc_read_coefex_idx", "description": "Helper function for accessing ALC coefficient index"}, "pxm_to_online_node": {"id": "pxm_to_online_node", "ground_truth": 0, "function": "pxm_to_online_node", "description": "Maps proximity ID to nearest online node, handles offline nodes, used by ACPI device drivers for obtaining device NUMA topology."}, "ixgbevf_check_for_msg_vf": {"id": "ixgbevf_check_for_msg_vf", "ground_truth": 0, "function": "ixgbevf_check_for_msg_vf", "description": "Checks for message from PF to VF."}, "ntb_db_clear": {"id": "ntb_db_clear", "ground_truth": 0, "function": "ntb_db_clear", "description": "Clears bit in local doorbell register for next doorbell."}, "qeth_count_elements": {"id": "qeth_count_elements", "ground_truth": 0, "function": "qeth_count_elements", "description": "Count qdio buffer elements for skb transmission"}, "xfs_dir2_data_check_new_free": {"id": "xfs_dir2_data_check_new_free", "ground_truth": 0, "function": "xfs_dir2_data_check_new_free", "description": "Sanity check for new bestfree entry in XFS dir2 data."}, "smack_inode_getsecid": {"id": "smack_inode_getsecid", "ground_truth": 1, "function": "smack_inode_getsecid", "description": "Extracts inode security ID in Smack."}, "vio_cmo_set_dev_desired": {"id": "vio_cmo_set_dev_desired", "ground_truth": 0, "function": "vio_cmo_set_dev_desired", "description": "Sets device entitlement level for runtime or sysfs change scheduling."}, "am33xx_prm_assert_hardreset": {"id": "am33xx_prm_assert_hardreset", "ground_truth": 0, "function": "am33xx_prm_assert_hardreset", "description": "Asserts hardware reset for submodule IP"}, "pcie_bandwidth_capable": {"id": "pcie_bandwidth_capable", "ground_truth": 0, "function": "pcie_bandwidth_capable", "description": "Calculates PCI device's link bandwidth capability in Mbps."}, "nanddev_size": {"id": "nanddev_size", "ground_truth": 0, "function": "nanddev_size", "description": "nanddev size returns NAND size"}, "hns_nic_set_link_ksettings": {"id": "hns_nic_set_link_ksettings", "ground_truth": 0, "function": "hns_nic_set_link_ksettings", "description": "Sets link settings for HN NIC using ethtool."}, "esparser_queue_all_src": {"id": "esparser_queue_all_src", "ground_truth": 0, "function": "esparser_queue_all_src", "description": "Handler for queuing multiple source buffers to esparser."}, "nfs_set_verifier": {"id": "nfs_set_verifier", "ground_truth": 0, "function": "nfs_set_verifier", "description": "nfs set verifier saves parent directory verifier in dentry"}, "vmw_context_binding_state": {"id": "vmw_context_binding_state", "ground_truth": 0, "function": "vmw_context_binding_state", "description": "Returns pointer to context binding state structure, indicating current binding state of given context. Stale when dev priv binding mutex is unlocked."}, "rvt_update_mmap_info": {"id": "rvt_update_mmap_info", "ground_truth": 0, "function": "rvt_update_mmap_info", "description": "Update memory map information in RVT function"}, "free_tx_buffers": {"id": "free_tx_buffers", "ground_truth": 0, "function": "free_tx_buffers", "description": "Frees queued tx buffers, returns void."}, "nfs4_opendata_access": {"id": "nfs4_opendata_access", "ground_truth": 1, "function": "nfs4_opendata_access", "description": "Permission check for nfsv4 open with read/execute distinction and disabling for new file creation."}, "qcm_process_device": {"id": "qcm_process_device", "ground_truth": 0, "function": "qcm_process_device", "description": "Process device support for ASIC packet format"}, "message_store": {"id": "message_store", "ground_truth": 0, "function": "message_store", "description": "Write new message to display via sysfs"}, "hinic_read_wqe_direct": {"id": "hinic_read_wqe_direct", "ground_truth": 0, "function": "hinic_read_wqe_direct", "description": "Reads WQE directly from CI position and returns it."}, "__snd_rawmidi_transmit_peek": {"id": "__snd_rawmidi_transmit_peek", "ground_truth": 0, "function": "__snd_rawmidi_transmit_peek", "description": "Function: snd_rawmidi_transmit_peek\nDescription: Copies data from internal buffer without spinlock."}, "verify_new_ex": {"id": "verify_new_ex", "ground_truth": 1, "function": "verify_new_ex", "description": "Verify if new exception allowed by parent cgroup"}, "ibm_slot_from_id": {"id": "ibm_slot_from_id", "ground_truth": 0, "function": "ibm_slot_from_id", "description": "Returns ACPI slot descriptor for Linux slot number, free with kfree."}, "lock_anon_vma_root": {"id": "lock_anon_vma_root", "ground_truth": 0, "function": "lock_anon_vma_root", "description": "Locks anon vma root for efficient traversal"}, "uio_unregister_device": {"id": "uio_unregister_device", "ground_truth": 0, "function": "uio_unregister_device", "description": "Unregister industrial I/O device."}, "qcom_scm_cpu_power_down": {"id": "qcom_scm_cpu_power_down", "ground_truth": 0, "function": "qcom_scm_cpu_power_down", "description": "CPU power down with cache flush and warm boot entry point set"}, "debugfs_create_file": {"id": "debugfs_create_file", "ground_truth": 0, "function": "debugfs_create_file", "description": "Creates file in debugfs filesystem with flexibility. Returns pointer to dentry for removal. No automatic cleanup. Returns error if debugfs not enabled."}, "nested_vmx_vmexit": {"id": "nested_vmx_vmexit", "ground_truth": 0, "function": "nested_vmx_vmexit", "description": "Emulates exit from nested guest L2 to L1, modifies VMCS12 to prepare for L1, only for use in L2 guest mode."}, "devm_irq_setup_generic_chip": {"id": "devm_irq_setup_generic_chip", "ground_truth": 0, "function": "devm_irq_setup_generic_chip", "description": "Setup interrupt range for managed device with generic chip"}, "l3_resume_noirq": {"id": "l3_resume_noirq", "ground_truth": 0, "function": "l3_resume_noirq", "description": "Resumes L3 NoC without IRQ, using delta register configuration."}, "spurious_kernel_fault": {"id": "spurious_kernel_fault", "ground_truth": 0, "function": "spurious_kernel_fault", "description": "Handle spurious kernel fault caused by stale TLB entry, lazily refresh TLB when increasing kernel page permission. No security implications leaving stale TLB."}, "exec_drive_taskfile": {"id": "exec_drive_taskfile", "ground_truth": 0, "function": "exec_drive_taskfile", "description": "Executes taskfile derived from IDE taskfile ioctl."}, "drmm_add_action_or_reset": {"id": "drmm_add_action_or_reset", "ground_truth": 0, "function": "drmm_add_action_or_reset", "description": "Adds managed release action to DRM device; calls cleanup work on failure."}, "alua_check_tpgs": {"id": "alua_check_tpgs", "ground_truth": 0, "function": "alua_check_tpgs", "description": "Evaluate TPGS setting to check ALUA support"}, "qdi_qc_issue": {"id": "qdi_qc_issue", "ground_truth": 0, "function": "qdi_qc_issue", "description": "Command for QDI QC issue"}, "rtnl_get_net_ns_capable": {"id": "rtnl_get_net_ns_capable", "ground_truth": 1, "function": "rtnl_get_net_ns_capable", "description": "Get network namespace by netnsid if privileged"}, "denormal_subd1": {"id": "denormal_subd1", "ground_truth": 0, "function": "denormal_subd1", "description": "Denormal subd1ix iy with denormal iy and ix."}, "xfs_finish_inode_setup": {"id": "xfs_finish_inode_setup", "ground_truth": 0, "function": "xfs_finish_inode_setup", "description": "Prevent premature inode visibility during setup"}, "find_inode_by_ino_rcu": {"id": "find_inode_by_ino_rcu", "ground_truth": 0, "function": "find_inode_by_ino_rcu", "description": "Find inode in cache by ino using RCU lock"}, "ccdc_has_all_fields": {"id": "ccdc_has_all_fields", "ground_truth": 0, "function": "ccdc_has_all_fields", "description": "Checks if all necessary fields are captured for buffer completion."}, "INIT_LIST_HEAD": {"id": "INIT_LIST_HEAD", "ground_truth": 0, "function": "INIT_LIST_HEAD", "description": "Initialize list head structure to empty list"}, "i40iw_reg_user_mr": {"id": "i40iw_reg_user_mr", "ground_truth": 0, "function": "i40iw_reg_user_mr", "description": "Registers user memory region in i40iw."}, "printf": {"id": "printf", "ground_truth": 0, "function": "printf", "description": "Print formatted output from kernel code to user space."}, "lpfc_read_lnk_stat": {"id": "lpfc_read_lnk_stat", "ground_truth": 0, "function": "lpfc_read_lnk_stat", "description": "Prepare mailbox command for reading HBA link status. Includes all link-related error counters. Counter wrap."}, "seq_buf_to_user": {"id": "seq_buf_to_user", "ground_truth": 0, "function": "seq_buf_to_user", "description": "Copy sequence buffer to user space, starting from readpos, up to cnt characters or end of buffer len. Returns bytes copied on success, ebusy if all content has been read, and efault on copy failure."}, "lpfc_bsg_send_mgmt_rsp": {"id": "lpfc_bsg_send_mgmt_rsp", "ground_truth": 0, "function": "lpfc_bsg_send_mgmt_rsp", "description": "Sends management response for BSG vendor command."}, "rvt_poll_cq": {"id": "rvt_poll_cq", "ground_truth": 0, "function": "rvt_poll_cq", "description": "Polls for work completion entry, called from interrupt context and by ib poll cq."}, "ice_vf_post_vsi_rebuild": {"id": "ice_vf_post_vsi_rebuild", "ground_truth": 0, "function": "ice_vf_post_vsi_rebuild", "description": "Task for ice vf post vsi rebuild after rebuilding vf's vsi."}, "__device_links_queue_sync_state": {"id": "__device_links_queue_sync_state", "ground_truth": 0, "function": "__device_links_queue_sync_state", "description": "Sync state callback for device link queue"}, "doc_write_erase_wait_status": {"id": "doc_write_erase_wait_status", "ground_truth": 0, "function": "doc_write_erase_wait_status", "description": "Wait for completion of write/erase, check status, return success/error"}, "scsi_eh_completed_normally": {"id": "scsi_eh_completed_normally", "ground_truth": 0, "function": "scsi_eh_completed_normally", "description": "SCSI EH cmd returned normally from LLD."}, "page_mkwrite_check_truncate": {"id": "page_mkwrite_check_truncate", "ground_truth": 0, "function": "page_mkwrite_check_truncate", "description": "Checks if page was truncated and returns number of bytes up to EOF or EFAULT."}, "generic_fillattr": {"id": "generic_fillattr", "ground_truth": 0, "function": "generic_fillattr", "description": "Fill basic attributes from inode to kstat structure"}, "batadv_gw_node_free": {"id": "batadv_gw_node_free", "ground_truth": 0, "function": "batadv_gw_node_free", "description": "Free gateway info from soft interface in batadv"}, "spu_mb_init": {"id": "spu_mb_init", "ground_truth": 0, "function": "spu_mb_init", "description": "Initialize mailbox client request ownership of channel for probed SPU."}, "selinux_xfrm_postroute_last": {"id": "selinux_xfrm_postroute_last", "ground_truth": 1, "function": "selinux_xfrm_postroute_last", "description": "SELinux xfrm postroute last hook for security association checking."}, "rose_insert_socket": {"id": "rose_insert_socket", "ground_truth": 0, "function": "rose_insert_socket", "description": "Add socket to bound socket list in rose insert socket."}, "mac_wol_reset": {"id": "mac_wol_reset", "ground_truth": 0, "function": "mac_wol_reset", "description": "Resets WOL after low power mode exit."}, "cap_capable": {"id": "cap_capable", "ground_truth": 1, "function": "cap_capable", "description": "Determines task's effective capability, returns true if specified capability is present, false if not."}, "gic_read_iar_cavium_thunderx": {"id": "gic_read_iar_cavium_thunderx", "ground_truth": 0, "function": "gic_read_iar_cavium_thunderx", "description": "Reads modified GIC IAR status for Cavium ThunderX"}, "nfp_net_irqs_assign": {"id": "nfp_net_irqs_assign", "ground_truth": 0, "function": "nfp_net_irqs_assign", "description": "Assigns externally allocated interrupts to netdev port."}, "core_param": {"id": "core_param", "ground_truth": 0, "function": "core_param", "description": "Defines core kernel parameters without prefix or modularity"}, "device_complete": {"id": "device_complete", "ground_truth": 0, "function": "device_complete", "description": "Complete device PM transition for given device."}, "kernfs_get_active": {"id": "kernfs_get_active", "ground_truth": 0, "function": "kernfs_get_active", "description": "kernfs node active reference retrieval"}, "nla_get_bitfield32": {"id": "nla_get_bitfield32", "ground_truth": 0, "function": "nla_get_bitfield32", "description": "Returns bitfield attribute payload in 32-bit format."}, "srpt_alloc_ioctx": {"id": "srpt_alloc_ioctx", "ground_truth": 0, "function": "srpt_alloc_ioctx", "description": "Allocate SRPT context structure for I/O operations."}, "genpd_complete": {"id": "genpd_complete", "ground_truth": 0, "function": "genpd_complete", "description": "Complete power transition of device in power domain"}, "__igb_open": {"id": "__igb_open", "ground_truth": 0, "function": "__igb_open", "description": "Network interface activation triggers igb open function."}, "component_add_typed": {"id": "component_add_typed", "ground_truth": 0, "function": "component_add_typed", "description": "Register and differentiate components for device function, called when driver is ready to bind. Must be unregistered at driver unload."}, "cleancache_init_fs": {"id": "cleancache_init_fs", "ground_truth": 0, "function": "cleancache_init_fs", "description": "Initiates cleancache shim layer, checks config and enables cleancache with no performance impact."}, "check_kill_permission": {"id": "check_kill_permission", "ground_truth": 1, "function": "check_kill_permission", "description": "Check kill permission for signal sender with RCU read lock"}, "i40iw_get_used_rsrc": {"id": "i40iw_get_used_rsrc", "ground_truth": 0, "function": "i40iw_get_used_rsrc", "description": "Determines internal resource usage after allocation."}, "psb_gem_create": {"id": "psb_gem_create", "ground_truth": 0, "function": "psb_gem_create", "description": "Creates mappable object using psb gem."}, "amdgpu_unregister_atpx_handler": {"id": "amdgpu_unregister_atpx_handler", "ground_truth": 0, "function": "amdgpu_unregister_atpx_handler", "description": "Unregister AMDGPU ATPX handler from VGA switcheroo for all ASICs."}, "cail_pll_read": {"id": "cail_pll_read", "ground_truth": 0, "function": "cail_pll_read", "description": "Reads PLL register for Atom interpreter R4xx."}, "velocity_mii_ioctl": {"id": "velocity_mii_ioctl", "ground_truth": 0, "function": "velocity_mii_ioctl", "description": "Handles velocity MII ioctl requests."}, "tsi148_slot_get": {"id": "tsi148_slot_get", "ground_truth": 0, "function": "tsi148_slot_get", "description": "Determines geographical addressing in tsi148 slot."}, "devcgroup_legacy_check_permission": {"id": "devcgroup_legacy_check_permission", "ground_truth": 1, "function": "devcgroup_legacy_check_permission", "description": "Checks permission for inode operation, returns success or eperm if not permitted."}, "user_mode": {"id": "user_mode", "ground_truth": 0, "function": "user_mode", "description": "Determines if register set is from user mode on x86"}, "iio_chrdev_release": {"id": "iio_chrdev_release", "ground_truth": 0, "function": "iio_chrdev_release", "description": "Release IIO chrdev file, close buffer access, and ioctls."}, "access_error": {"id": "access_error", "ground_truth": 1, "function": "access_error", "description": "Permission check for access errors on vma"}, "apparmor_socket_getpeername": {"id": "apparmor_socket_getpeername", "ground_truth": 1, "function": "apparmor_socket_getpeername", "description": "Check apparmor socket perm before getting remote address."}, "fc_adisc_fill": {"id": "fc_adisc_fill", "ground_truth": 0, "function": "fc_adisc_fill", "description": "Fills adisc request frame."}, "batadv_algo_select": {"id": "batadv_algo_select", "ground_truth": 0, "function": "batadv_algo_select", "description": "Selects algorithm for soft interface, no deinitialization or initialization of previous/selected algorithm, only allowed in creation function."}, "ipa_cmd_tag_process": {"id": "ipa_cmd_tag_process", "ground_truth": 0, "function": "ipa_cmd_tag_process", "description": "IPA command tag processing function"}, "ice_vsi_setup": {"id": "ice_vsi_setup", "ground_truth": 0, "function": "ice_vsi_setup", "description": "Sets up VSI by type, allocates SW VSI structure, returns pointer on success, null on failure."}, "fcoe_rcv": {"id": "fcoe_rcv", "ground_truth": 0, "function": "fcoe_rcv", "description": "Receives FCoE packet from net device, builds FC frame, passes to libfc."}, "fwserial_create": {"id": "fwserial_create", "ground_truth": 0, "function": "fwserial_create", "description": "Initialize fwserial for specific fw card, manage tty ports, add unit device as first peer"}, "batadv_tt_orig_list_entry_put": {"id": "batadv_tt_orig_list_entry_put", "ground_truth": 0, "function": "batadv_tt_orig_list_entry_put", "description": "Decrement and release tt orig entry refcounter."}, "atiixp_prereset": {"id": "atiixp_prereset", "ground_truth": 0, "function": "atiixp_prereset", "description": "atiixp prereset handles reset."}, "scsi_netlink_init": {"id": "scsi_netlink_init", "ground_truth": 0, "function": "scsi_netlink_init", "description": "Initializes SCSI transport netlink interface for scsi subsystem."}, "cbus_transfer": {"id": "cbus_transfer", "ground_truth": 0, "function": "cbus_transfer", "description": "Data transfer over bus using cbus"}, "regmap_irq_chip_get_base": {"id": "regmap_irq_chip_get_base", "ground_truth": 0, "function": "regmap_irq_chip_get_base", "description": "Retrieve interrupt base for regmap irq chip for driver IRQ requests."}, "capable": {"id": "capable", "ground_truth": 1, "function": "capable", "description": "Determines task's superior capability, returns true if available, false if not. Sets superpriv on task if capability available."}, "strndup_user": {"id": "strndup_user", "ground_truth": 0, "function": "strndup_user", "description": "Duplicate user string in limited length"}, "xudc_handle_setup": {"id": "xudc_handle_setup", "ground_truth": 0, "function": "xudc_handle_setup", "description": "Process setup packet and delegate to gadget layer"}, "vfree": {"id": "vfree", "ground_truth": 0, "function": "vfree", "description": "Release memory allocated by vmalloc, free virtually continuous memory area starting at addr obtained from vmalloc, also frees physical memory, but only when last user goes away. If addr is null, no operation is performed."}, "__netlink_ns_capable": {"id": "__netlink_ns_capable", "ground_truth": 1, "function": "__netlink_ns_capable", "description": "Netlink message capability test for user namespace"}, "csky_pmu_read_l2rac": {"id": "csky_pmu_read_l2rac", "ground_truth": 0, "function": "csky_pmu_read_l2rac", "description": "Reads access counter using csky pmu."}, "mark_clean": {"id": "mark_clean", "ground_truth": 0, "function": "mark_clean", "description": "Marks written pages as clean to avoid flushing during mapping to executable VM area."}, "e1000_io_error_detected": {"id": "e1000_io_error_detected", "ground_truth": 0, "function": "e1000_io_error_detected", "description": "Function detects PCI errors affecting device."}, "inode_owner_or_capable": {"id": "inode_owner_or_capable", "ground_truth": 1, "function": "inode_owner_or_capable", "description": "Checks if current task has permission to inode based on owner or capability."}, "valid_mmap_phys_addr_range": {"id": "valid_mmap_phys_addr_range", "ground_truth": 0, "function": "valid_mmap_phys_addr_range", "description": "Valid physical address for mmap access check"}, "omap2_wd_timer_reset": {"id": "omap2_wd_timer_reset", "ground_truth": 0, "function": "omap2_wd_timer_reset", "description": "Resets and disables omap2 wd timer block, executes watchdog disable sequence, returns etimedout or success."}, "soctherm_oc_irq_enable": {"id": "soctherm_oc_irq_enable", "ground_truth": 0, "function": "soctherm_oc_irq_enable", "description": "Enables SoC therm over current interrupt queue"}, "ahc_set_transaction_status": {"id": "ahc_set_transaction_status", "ground_truth": 0, "function": "ahc_set_transaction_status", "description": "Wrapper for setting transaction status in AHC"}, "spu_rx_callback": {"id": "spu_rx_callback", "ground_truth": 0, "function": "spu_rx_callback", "description": "Callback function for SPU RX with mailbox response"}, "btrfs_reserve_metadata_bytes": {"id": "btrfs_reserve_metadata_bytes", "ground_truth": 0, "function": "btrfs_reserve_metadata_bytes", "description": "Reserves metadata bytes from block rsv, flushes if necessary, fails if not enough space."}, "tomoyo_inet_entry": {"id": "tomoyo_inet_entry", "ground_truth": 1, "function": "tomoyo_inet_entry", "description": "Permission check for inet network operation, returns negative value on failure."}, "has_capability_noaudit": {"id": "has_capability_noaudit", "ground_truth": 1, "function": "has_capability_noaudit", "description": "Check if task has unaudited capability for initial user, return true/false, no audit message written."}, "amdgpu_sync_peek_fence": {"id": "amdgpu_sync_peek_fence", "ground_truth": 0, "function": "amdgpu_sync_peek_fence", "description": "Returns next unsignaled fence from sync object."}, "tipc_crypto_rcv": {"id": "tipc_crypto_rcv", "ground_truth": 0, "function": "tipc_crypto_rcv", "description": "Summary: Decrypts TIPC message from peer, trims encryption header and auth tag, returns decrypted skb or frees skb if decryption fails. Can use suitable tx cluster key for decryption."}, "tomoyo_socket_connect_permission": {"id": "tomoyo_socket_connect_permission", "ground_truth": 1, "function": "tomoyo_socket_connect_permission", "description": "Socket connect permission check for remote address setting"}, "csio_init_link_config": {"id": "csio_init_link_config", "ground_truth": 0, "function": "csio_init_link_config", "description": "Initializes link configuration in software state."}, "lpfc_sli4_chk_avail_extnt_rsrc": {"id": "lpfc_sli4_chk_avail_extnt_rsrc", "ground_truth": 0, "function": "lpfc_sli4_chk_avail_extnt_rsrc", "description": "Check for available SLI4 resource extent after port reset."}, "in_persistence": {"id": "in_persistence", "ground_truth": 0, "function": "in_persistence", "description": "Check connection control by persistence in in_persistence."}, "AVE_IDR": {"id": "AVE_IDR", "ground_truth": 0, "function": "AVE_IDR", "description": "Ethernet driver for AVE IDR by Panasonic and Socionext."}, "nanddev_cleanup": {"id": "nanddev_cleanup", "ground_truth": 0, "function": "nanddev_cleanup", "description": "Frees resources allocated in nanddev init."}, "smk_curacc": {"id": "smk_curacc", "ground_truth": 1, "function": "smk_curacc", "description": "Determines current access to object, checks label pair in rule list, returns permit/non-permit."}, "drm_get_unmapped_area": {"id": "drm_get_unmapped_area", "ground_truth": 0, "function": "drm_get_unmapped_area", "description": "Find unused user space for huge page table entry"}, "myrb_exec_type3D": {"id": "myrb_exec_type3D", "ground_truth": 0, "function": "myrb_exec_type3D", "description": "Executes type 3d command and waits for completion."}, "amd64_read_dct_pci_cfg": {"id": "amd64_read_dct_pci_cfg", "ground_truth": 0, "function": "amd64_read_dct_pci_cfg", "description": "Reads AMD64 DCT PCI configuration based on family and DCT number"}, "ice_rem_prof_from_list": {"id": "ice_rem_prof_from_list", "ground_truth": 0, "function": "ice_rem_prof_from_list", "description": "Remove ice profile from list"}, "gfs2_glock_nq_num": {"id": "gfs2_glock_nq_num", "ground_truth": 0, "function": "gfs2_glock_nq_num", "description": "Acquire glock based on lock number."}, "scsw_cmd_is_valid_cstat": {"id": "scsw_cmd_is_valid_cstat", "ground_truth": 0, "function": "scsw_cmd_is_valid_cstat", "description": "Check validity of scsw cmd cstat field, return non-zero if valid"}, "key_task_permission": {"id": "key_task_permission", "ground_truth": 1, "function": "key_task_permission", "description": "Permission check for key usage with security module override"}, "stmmac_get_tx_hwtstamp": {"id": "stmmac_get_tx_hwtstamp", "ground_truth": 0, "function": "stmmac_get_tx_hwtstamp", "description": "Reads and checks HW TX timestamps from descriptor."}, "ieee80211_queue_work": {"id": "ieee80211_queue_work", "ground_truth": 0, "function": "ieee80211_queue_work", "description": "Add work to mac80211 workqueue, prevent driver misuse"}, "mptscsih_taskmgmt_complete": {"id": "mptscsih_taskmgmt_complete", "ground_truth": 0, "function": "mptscsih_taskmgmt_complete", "description": "Taskmgmt complete for mptscsih driver"}, "recalculate_deny_mode": {"id": "recalculate_deny_mode", "ground_truth": 0, "function": "recalculate_deny_mode", "description": "Recalculate deny mode on released/downgraded file state ID."}, "pv_init": {"id": "pv_init", "ground_truth": 0, "function": "pv_init", "description": "Virtualization initialization function"}, "common_perm": {"id": "common_perm", "ground_truth": 1, "function": "common_perm", "description": "Wrapper function for basic permission check on path"}, "drm_crtc_enable_color_mgmt": {"id": "drm_crtc_enable_color_mgmt", "ground_truth": 0, "function": "drm_crtc_enable_color_mgmt", "description": "Enables color management property on crtc, including degamma, csc, and gamma properties. Optional lut size property informs userspace. Legacy gamma set callback used for implementation."}, "dpu_core_irq_uninstall": {"id": "dpu_core_irq_uninstall", "ground_truth": 0, "function": "dpu_core_irq_uninstall", "description": "Uninstalls DPU core IRQ handler."}, "security_node_sid": {"id": "security_node_sid", "ground_truth": 1, "function": "security_node_sid", "description": "Obtains SID for node host in security."}, "omap_prefetch_enable": {"id": "omap_prefetch_enable", "ground_truth": 0, "function": "omap_prefetch_enable", "description": "Enables and starts prefetch transfer in OMAP."}, "__clk_core_init": {"id": "__clk_core_init", "ground_truth": 0, "function": "__clk_core_init", "description": "Initialize data structure, query hardware for parent and rate, set both"}, "nilfs_palloc_count_desc_blocks": {"id": "nilfs_palloc_count_desc_blocks", "ground_truth": 0, "function": "nilfs_palloc_count_desc_blocks", "description": "Counts descriptor blocks in nilfs palloc."}, "scsi_eh_ready_devs": {"id": "scsi_eh_ready_devs", "ground_truth": 0, "function": "scsi_eh_ready_devs", "description": "Checks device readiness and recovers if necessary."}, "security_context_to_sid_default": {"id": "security_context_to_sid_default", "ground_truth": 1, "function": "security_context_to_sid_default", "description": "Obtains SID for security context, with fallback default. Handles ML field and invalid contexts. Returns errors or success."}, "xcan_resume": {"id": "xcan_resume", "ground_truth": 0, "function": "xcan_resume", "description": "Resume operation after suspend using xcan_resume."}, "omap2_init_clk_clkdm": {"id": "omap2_init_clk_clkdm", "ground_truth": 0, "function": "omap2_init_clk_clkdm", "description": "Initialize and store clock domain pointer in struct, return success or error."}, "check_cleanup_prefix_route": {"id": "check_cleanup_prefix_route", "ground_truth": 0, "function": "check_cleanup_prefix_route", "description": "Check if prefix route needed after deleting interface"}, "jent_rct_insert": {"id": "jent_rct_insert", "ground_truth": 0, "function": "jent_rct_insert", "description": "Inserts 90b section EC for stuck entropy collector."}, "usage_accumulate": {"id": "usage_accumulate", "ground_truth": 0, "function": "usage_accumulate", "description": "Accumulates usage to detect safe/unsafe bugs in backward search"}, "pci_epc_destroy": {"id": "pci_epc_destroy", "ground_truth": 0, "function": "pci_epc_destroy", "description": "Destroys PCI EPC device."}, "hinic_unregister_vf_mbox_cb": {"id": "hinic_unregister_vf_mbox_cb", "ground_truth": 0, "function": "hinic_unregister_vf_mbox_cb", "description": "Unregister VF mbox callback for HINIC."}, "radeon_atom_pick_pll": {"id": "radeon_atom_pick_pll", "ground_truth": 0, "function": "radeon_atom_pick_pll", "description": "Allocate and return pixel PLL for CRTC, skip if not needed, available for all DP and non-DP monitors"}, "set_controller_speed": {"id": "set_controller_speed", "ground_truth": 0, "function": "set_controller_speed", "description": "Sets controller speed by changing frequency/mode to match adapter speed."}, "ntfs_file_write_iter": {"id": "ntfs_file_write_iter", "ground_truth": 0, "function": "ntfs_file_write_iter", "description": "Wrapper for ntfs file write iter, uses ntfs perform write instead of generic perform write, direct not implemented."}, "i915_perf_disable_locked": {"id": "i915_perf_disable_locked", "ground_truth": 0, "function": "i915_perf_disable_locked", "description": "Function disables i915 perf ioctl capture for a stream, cheaper than destroying and reopening stream, no guarantee on state or buffered data retention, error if userspace reads from disabled stream."}, "t4_update_port_info": {"id": "t4_update_port_info", "ground_truth": 0, "function": "t4_update_port_info", "description": "Updates port information if changed."}, "aa_simple_write_to_buffer": {"id": "aa_simple_write_to_buffer", "ground_truth": 0, "function": "aa_simple_write_to_buffer", "description": "Writes user policy to buffer in a simple way."}, "amd_iommu_bind_pasid": {"id": "amd_iommu_bind_pasid", "ground_truth": 0, "function": "amd_iommu_bind_pasid", "description": "Bind task to PASID on device, return success or negative value on error."}, "snd_hda_lock_devices": {"id": "snd_hda_lock_devices", "ground_truth": 0, "function": "snd_hda_lock_devices", "description": "Toggle device access, lock pseudo device, prevent hack"}, "apparmor_socket_shutdown": {"id": "apparmor_socket_shutdown", "ground_truth": 1, "function": "apparmor_socket_shutdown", "description": "Socket shutdown check permission before closing connection"}, "smk_set_cipso": {"id": "smk_set_cipso", "ground_truth": 0, "function": "smk_set_cipso", "description": "Sets CIPSO rule for write, accepts one rule per call, returns bytes written or error code."}, "cti_map_trigger": {"id": "cti_map_trigger", "ground_truth": 0, "function": "cti_map_trigger", "description": "Maps trigger input to output using channel."}, "check_acpi_cpu_flag": {"id": "check_acpi_cpu_flag", "ground_truth": 0, "function": "check_acpi_cpu_flag", "description": "Check ACPI CPU flag for given node"}, "show_docked": {"id": "show_docked", "ground_truth": 0, "function": "show_docked", "description": "Displays docked file using sysfs read method."}, "_enable_sysc": {"id": "_enable_sysc", "ground_truth": 0, "function": "_enable_sysc", "description": "Enables module from idle via OCP sysconfig register. Sets IP block as active. May use smart idle/standby or force/no idle mode. No return value."}, "nvdimm_allocated_dpa": {"id": "nvdimm_allocated_dpa", "ground_truth": 0, "function": "nvdimm_allocated_dpa", "description": "Allocates DPA to label ID and returns current allocation."}, "xattr_permission": {"id": "xattr_permission", "ground_truth": 1, "function": "xattr_permission", "description": "Extended attribute access permission check with complex namespace rules."}, "qla4xxx_wait_login_resp_boot_tgt": {"id": "qla4xxx_wait_login_resp_boot_tgt", "ground_truth": 0, "function": "qla4xxx_wait_login_resp_boot_tgt", "description": "Wait for iSCSI boot target login response during probe"}, "dma_pool_destroy": {"id": "dma_pool_destroy", "ground_truth": 0, "function": "dma_pool_destroy", "description": "Destroys DMA memory pool after ensuring no further usage."}, "security_net_peersid_resolve": {"id": "security_net_peersid_resolve", "ground_truth": 1, "function": "security_net_peersid_resolve", "description": "Compares and resolves network peer SIDs, returns single SID if possible, otherwise returns negative value."}, "vpif_update_std_info": {"id": "vpif_update_std_info", "ground_truth": 0, "function": "vpif_update_std_info", "description": "Updates standard-related info for selected standard in device data structure."}, "fsl_rio_tx_handler": {"id": "fsl_rio_tx_handler", "ground_truth": 0, "function": "fsl_rio_tx_handler", "description": "Handles outbound message interrupt and acknowledges occurrence."}, "nlm_privileged_requester": {"id": "nlm_privileged_requester", "ground_truth": 1, "function": "nlm_privileged_requester", "description": "Ensures local privileged caller for incoming requests."}, "check_memory_region": {"id": "check_memory_region", "ground_truth": 0, "function": "check_memory_region", "description": "Checks memory region for invalid access and reports."}, "qla4xxx_bsg_request": {"id": "qla4xxx_bsg_request", "ground_truth": 0, "function": "qla4xxx_bsg_request", "description": "Handle bsg request from iSCSI transport in qla4xxx."}, "b43_phy_free": {"id": "b43_phy_free", "ground_truth": 0, "function": "b43_phy_free", "description": "Free phy structs in b43."}, "afs_permission": {"id": "afs_permission", "ground_truth": 1, "function": "afs_permission", "description": "afs permission check on file with parent directory ACL"}, "batadv_dbg_ratelimited": {"id": "batadv_dbg_ratelimited", "ground_truth": 0, "function": "batadv_dbg_ratelimited", "description": "Store debug output with rate limiting"}, "qcom_scm_hdcp_req": {"id": "qcom_scm_hdcp_req", "ground_truth": 0, "function": "qcom_scm_hdcp_req", "description": "Send HDCP request via SCM to write HDCP register."}, "CRC32_POLYNOMIAL": {"id": "CRC32_POLYNOMIAL", "ground_truth": 0, "function": "CRC32_POLYNOMIAL", "description": "lookup table for fast crc32 calculation with different polynomial used in genwqe."}, "__v9fs_readpage_to_fscache": {"id": "__v9fs_readpage_to_fscache", "ground_truth": 0, "function": "__v9fs_readpage_to_fscache", "description": "Cache write for v9fs readpage"}, "nanddev_get_ecc_conf": {"id": "nanddev_get_ecc_conf", "ground_truth": 0, "function": "nanddev_get_ecc_conf", "description": "Extract ECC configuration from NAND device."}, "pci_dev_adjust_pme": {"id": "pci_dev_adjust_pme", "ground_truth": 0, "function": "pci_dev_adjust_pme", "description": "Adjust PME setting for suspended device to prevent unnecessary system wake-up."}, "igb_read_phy_reg_mdic": {"id": "igb_read_phy_reg_mdic", "ground_truth": 0, "function": "igb_read_phy_reg_mdic", "description": "Reads MDI control register for IGB PHY."}, "ata_acpi_handle_hotplug": {"id": "ata_acpi_handle_hotplug", "ground_truth": 0, "function": "ata_acpi_handle_hotplug", "description": "Handles hotplug events for ATA ACPI devices, including port-wide and device-specific events. Handles hotplug notifications differently from unplug notifications. Can sleep while locking ACPI notify handler context."}, "iceland_ih_decode_iv": {"id": "iceland_ih_decode_iv", "ground_truth": 0, "function": "iceland_ih_decode_iv", "description": "Decodes interrupt vector and advances position."}, "n_tty_flush_buffer": {"id": "n_tty_flush_buffer", "ground_truth": 0, "function": "n_tty_flush_buffer", "description": "Clean input queue for tty buffer"}, "security_get_user_sids": {"id": "security_get_user_sids", "ground_truth": 1, "function": "security_get_user_sids", "description": "Obtain reachable SIDs for user, generate legal security context set, dynamically allocate array, set number of elements."}, "mraid_mm_setup_dma_pools": {"id": "mraid_mm_setup_dma_pools", "ground_truth": 0, "function": "mraid_mm_setup_dma_pools", "description": "Sets up DMA buffer pool per adapter to avoid memory waste"}, "queue_access_lock": {"id": "queue_access_lock", "ground_truth": 1, "function": "queue_access_lock", "description": "Queue access lock to check client permission and lock queue if necessary."}, "ns_cmp": {"id": "ns_cmp", "ground_truth": 0, "function": "ns_cmp", "description": "Compares n for label set ordering."}, "mmc_wait_for_cmd": {"id": "mmc_wait_for_cmd", "ground_truth": 0, "function": "mmc_wait_for_cmd", "description": "Wait for MMC command start and completion"}, "tracing_cond_snapshot_data": {"id": "tracing_cond_snapshot_data", "ground_truth": 0, "function": "tracing_cond_snapshot_data", "description": "Retrieve user data from conditional snapshot with tracing."}, "amdgpu_virt_request_full_gpu": {"id": "amdgpu_virt_request_full_gpu", "ground_truth": 0, "function": "amdgpu_virt_request_full_gpu", "description": "Requests full GPU access for AMDGPU virtualization."}, "wil_brd_process": {"id": "wil_brd_process", "ground_truth": 0, "function": "wil_brd_process", "description": "Process section from BRD file, return error code"}, "scmi_allocate_event_handler": {"id": "scmi_allocate_event_handler", "ground_truth": 0, "function": "scmi_allocate_event_handler", "description": "Allocate event handler and notification chain for key, pending initialization."}, "mext_check_coverage": {"id": "mext_check_coverage", "ground_truth": 0, "function": "mext_check_coverage", "description": "Checks extent type coverage in range"}, "drm_fb_helper_sys_read": {"id": "drm_fb_helper_sys_read", "ground_truth": 0, "function": "drm_fb_helper_sys_read", "description": "Wrapper for fbdev core's sys read function."}, "security_transition_sid": {"id": "security_transition_sid", "ground_truth": 1, "function": "security_transition_sid", "description": "Compute SID for new subject/object based on SID pair, return error if invalid parameters or insufficient memory."}, "most_register_component": {"id": "most_register_component", "ground_truth": 0, "function": "most_register_component", "description": "Component driver registration with core"}, "rsi_mac80211_detach": {"id": "rsi_mac80211_detach", "ground_truth": 0, "function": "rsi_mac80211_detach", "description": "De-initialize mac80211 stack using rsi."}, "ww_acquire_done": {"id": "ww_acquire_done", "ground_truth": 0, "function": "ww_acquire_done", "description": "Marks end of acquire phase, forbids further mutex lock calls, optional for documentation"}, "scsicam_bios_param": {"id": "scsicam_bios_param", "ground_truth": 0, "function": "scsicam_bios_param", "description": "Determines disk geometry for SCSI CAM system using BIOS mapping."}, "setattr_prepare": {"id": "setattr_prepare", "ground_truth": 1, "function": "setattr_prepare", "description": "Checks attribute change permission, clears sgid bit, and clears file capability and ima extended attribute if necessary."}, "comedi_usb_driver_unregister": {"id": "comedi_usb_driver_unregister", "ground_truth": 0, "function": "comedi_usb_driver_unregister", "description": "Unregister USB comedi driver; called from module exit. Use helper macro instead."}, "debugfs_create_file_unsafe": {"id": "debugfs_create_file_unsafe", "ground_truth": 0, "function": "debugfs_create_file_unsafe", "description": "Creates a file in debugfs filesystem without protection against file removal."}, "has_pid_permissions": {"id": "has_pid_permissions", "ground_truth": 1, "function": "has_pid_permissions", "description": "Checks if current process has permissions to access scheduling and command line information for a specified PID."}, "qbman_swp_interrupt_set_inhibit": {"id": "qbman_swp_interrupt_set_inhibit", "ground_truth": 0, "function": "qbman_swp_interrupt_set_inhibit", "description": "Sets interrupt mask register to inhibit interrupts for qbman swp."}, "rd_module_exit": {"id": "rd_module_exit", "ground_truth": 0, "function": "rd_module_exit", "description": "Function for rd module exit in target core init configfs"}, "rsi_mac80211_conf_filter": {"id": "rsi_mac80211_conf_filter", "ground_truth": 0, "function": "rsi_mac80211_conf_filter", "description": "Configures device's RX filter in RSI MAC80211."}, "sock_common_setsockopt": {"id": "sock_common_setsockopt", "ground_truth": 0, "function": "sock_common_setsockopt", "description": "Sets inet socket option using sock_common_setsockopt."}, "board_tracer_show": {"id": "board_tracer_show", "ground_truth": 0, "function": "board_tracer_show", "description": "Display board tracer number attribute in read-only mode."}, "batadv_bla_claim_dump_bucket": {"id": "batadv_bla_claim_dump_bucket", "ground_truth": 0, "function": "batadv_bla_claim_dump_bucket", "description": "Dump one bucket of claim table to netlink socket"}, "lpfc_fcpcmd_to_iocb": {"id": "lpfc_fcpcmd_to_iocb", "ground_truth": 0, "function": "lpfc_fcpcmd_to_iocb", "description": "Copy FCP command to IOCB, byte swap to big endian for transmission"}, "drm_dp_mst_topology_mgr_set_mst": {"id": "drm_dp_mst_topology_mgr_set_mst", "ground_truth": 0, "function": "drm_dp_mst_topology_mgr_set_mst", "description": "Sets MST state for topology manager when MST capable device is plugged/unplugged."}, "gsm_dlci_open": {"id": "gsm_dlci_open", "ground_truth": 0, "function": "gsm_dlci_open", "description": "GSM DLCI open function opens DLCI in GSM network."}, "seq_buf_putc": {"id": "seq_buf_putc", "ground_truth": 0, "function": "seq_buf_putc", "description": "Single character copy into sequence buffer, returns 0 on success and handles overflow."}, "avic_update_access_page": {"id": "avic_update_access_page", "ground_truth": 1, "function": "avic_update_access_page", "description": "Nested page table permission check using AVIC backing page pointer field for APIC access page setup."}, "key_is_dead": {"id": "key_is_dead", "ground_truth": 0, "function": "key_is_dead", "description": "Determines if a key is dead."}, "component_del": {"id": "component_del", "ground_truth": 0, "function": "component_del", "description": "Unregister and remove component from aggregate driver, forcing unbinding of all components."}, "amdgpu_dm_irq_resume_early": {"id": "amdgpu_dm_irq_resume_early", "ground_truth": 0, "function": "amdgpu_dm_irq_resume_early", "description": "Enables asic interrupt during resume in amdgpu dm irq"}, "omap_vc_i2c_init": {"id": "omap_vc_i2c_init", "ground_truth": 0, "function": "omap_vc_i2c_init", "description": "Initializes I2C interface for PMIC with PMIC settings for high speed mode and master code. Configures VC I2C configuration register for first channel, which is common to all channels."}, "vxge_hw_ring_rxd_post_post": {"id": "vxge_hw_ring_rxd_post_post", "ground_truth": 0, "function": "vxge_hw_ring_rxd_post_post", "description": "Post-processes RXD after post-processing RXD in VXGE HW ring."}, "gic_dist_security_disabled": {"id": "gic_dist_security_disabled", "ground_truth": 1, "function": "gic_dist_security_disabled", "description": "Check GIC dist security disabled for single state view."}, "ptrace_parent": {"id": "ptrace_parent", "ground_truth": 0, "function": "ptrace_parent", "description": "ptrace parent returns tracing task, null if none, called with rcu read lock"}, "batadv_nc_skb_src_search": {"id": "batadv_nc_skb_src_search", "ground_truth": 0, "function": "batadv_nc_skb_src_search", "description": "Loop through neighboring nodes to find sender or originator"}, "security_extensions_enabled": {"id": "security_extensions_enabled", "ground_truth": 1, "function": "security_extensions_enabled", "description": "Security extension enabled with 2 permitted values"}, "cfg80211_get_chandef_type": {"id": "cfg80211_get_chandef_type", "ground_truth": 0, "function": "cfg80211_get_chandef_type", "description": "Returns old channel type from chandef."}, "get_group_info": {"id": "get_group_info", "ground_truth": 0, "function": "get_group_info", "description": "Retrieve group info and supplementary groups for task credentials with RCU read lock."}, "sk_stream_closing": {"id": "sk_stream_closing", "ground_truth": 0, "function": "sk_stream_closing", "description": "Returns if buffer has remaining data to send."}, "drm_rect_downscale": {"id": "drm_rect_downscale", "ground_truth": 0, "function": "drm_rect_downscale", "description": "Downscale rectangle by dividing coordinates by horz and vert."}, "unregister_syscore_ops": {"id": "unregister_syscore_ops", "ground_truth": 0, "function": "unregister_syscore_ops", "description": "Unregister system core operations set."}, "selinux_netlbl_sk_security_reset": {"id": "selinux_netlbl_sk_security_reset", "ground_truth": 1, "function": "selinux_netlbl_sk_security_reset", "description": "Resets netlabel field in sk security struct. Caller responsible for locking."}, "host1x_register": {"id": "host1x_register", "ground_truth": 0, "function": "host1x_register", "description": "Registers host1x controller driver with infrastructure for tegra soc generation. Academic function for single host1x instance."}, "security_add_hooks": {"id": "security_add_hooks", "ground_truth": 1, "function": "security_add_hooks", "description": "Add module hook to hook list for LSM registration"}, "mei_cl_device_match": {"id": "mei_cl_device_match", "ground_truth": 0, "function": "mei_cl_device_match", "description": "Matches MEI CL device."}, "ext4_splice_branch": {"id": "ext4_splice_branch", "ground_truth": 0, "function": "ext4_splice_branch", "description": "Splice allocated branch onto inode, fill missing link, do housekeeping, return full chain to new block."}, "cnt32_to_63": {"id": "cnt32_to_63", "ground_truth": 0, "function": "cnt32_to_63", "description": "Expands bit counter to avoid frequent wrap arounds in hardware clock counters, by synchronizing hardware and memory counters and updating memory counter when hardware counter wraps around. Requires regular calls and no preemption longer than half period of bit counter."}, "net_dim": {"id": "net_dim", "ground_truth": 0, "function": "net_dim", "description": "Algorithm entry point for processing data and deciding next action."}, "ipr_init_res_table": {"id": "ipr_init_res_table", "ground_truth": 0, "function": "ipr_init_res_table", "description": "Initialize resource table by comparing with config table, handle device and schedule changes, return appropriate value."}, "cfg80211_pmksa_candidate_notify": {"id": "cfg80211_pmksa_candidate_notify", "ground_truth": 0, "function": "cfg80211_pmksa_candidate_notify", "description": "Notify about PMKSA caching candidate."}, "disk_get_part": {"id": "disk_get_part", "ground_truth": 0, "function": "disk_get_part", "description": "Increment reference count for partition found in disk_get_part."}, "disable_irq_nosync": {"id": "disable_irq_nosync", "ground_truth": 0, "function": "disable_irq_nosync", "description": "Disable IRQ without synchronization"}, "apparmor_socket_listen": {"id": "apparmor_socket_listen", "ground_truth": 1, "function": "apparmor_socket_listen", "description": "Checks apparmor socket listen permission before allowing listen."}, "security_port_sid": {"id": "security_port_sid", "ground_truth": 1, "function": "security_port_sid", "description": "Obtains SID for port in security"}, "pids_charge": {"id": "pids_charge", "ground_truth": 0, "function": "pids_charge", "description": "Hierarchical PID charging function for reverting failed attachments, may exceed limit"}, "fcoe_fip_vlan_recv": {"id": "fcoe_fip_vlan_recv", "ground_truth": 0, "function": "fcoe_fip_vlan_recv", "description": "Handles received FCoE FIP VLAN discovery frames."}, "bnx2i_ep_ofld_timer": {"id": "bnx2i_ep_ofld_timer", "ground_truth": 0, "function": "bnx2i_ep_ofld_timer", "description": "Handle offload destroy request timeout for iSCSI logout"}, "radeon_atpx_get_client_id": {"id": "radeon_atpx_get_client_id", "ground_truth": 0, "function": "radeon_atpx_get_client_id", "description": "Get client ID for Radeon ATPX, check if integrated or discrete GPU, return ID."}, "apparmor_socket_create": {"id": "apparmor_socket_create", "ground_truth": 1, "function": "apparmor_socket_create", "description": "Socket creation with permission check in AppArmor"}, "i7core_udimm_check_mc_ecc_err": {"id": "i7core_udimm_check_mc_ecc_err", "ground_truth": 0, "function": "i7core_udimm_check_mc_ecc_err", "description": "Checks ECC errors on i7core UDIMM using device function register A. (13 tokens)"}, "sun3_map_test": {"id": "sun3_map_test", "ground_truth": 0, "function": "sun3_map_test", "description": "Tests memory access, checks VME bus address, handles potential faults"}, "rpcb_v4_register": {"id": "rpcb_v4_register", "ground_truth": 0, "function": "rpcb_v4_register", "description": "Registers/unregisters RPC services with local rpcbind daemon. Returns error code if unsuccessful. Supports UDP/TCP over IPv4/IPv6."}, "tomoyo_permstr": {"id": "tomoyo_permstr", "ground_truth": 1, "function": "tomoyo_permstr", "description": "Permission keyword search function using strncmp"}, "d_test": {"id": "d_test", "ground_truth": 0, "function": "d_test", "description": "d_test checks if debugging should be enabled based on master debug switch and requested level, evaluated in compile time."}, "atlx_tx_timeout": {"id": "atlx_tx_timeout", "ground_truth": 0, "function": "atlx_tx_timeout", "description": "Responds to TX hang with timeout in ATLX"}, "rsi_is_cipher_wep": {"id": "rsi_is_cipher_wep", "ground_truth": 0, "function": "rsi_is_cipher_wep", "description": "Determines if cipher is WEP or not."}, "ishtp_start": {"id": "ishtp_start", "ground_truth": 0, "function": "ishtp_start", "description": "Starts ISH processing by sending query subscriber message."}, "hns_xgmac_config_max_frame_length": {"id": "hns_xgmac_config_max_frame_length", "ground_truth": 0, "function": "hns_xgmac_config_max_frame_length", "description": "Sets maximum frame length for HN XGMAC."}, "textsearch_prepare": {"id": "textsearch_prepare", "ground_truth": 0, "function": "textsearch_prepare", "description": "Prepares search algorithm module, creates new configuration for pattern, returns configuration or error if pattern is zero length."}, "imgu_all_nodes_streaming": {"id": "imgu_all_nodes_streaming", "ground_truth": 0, "function": "imgu_all_nodes_streaming", "description": "Check if all enabled video nodes are streaming, ignore exceptions."}, "iio_channel_cb_set_buffer_watermark": {"id": "iio_channel_cb_set_buffer_watermark", "ground_truth": 0, "function": "iio_channel_cb_set_buffer_watermark", "description": "Sets buffer watermark for IIO channel callback."}, "mic_read_spad": {"id": "mic_read_spad", "ground_truth": 0, "function": "mic_read_spad", "description": "Reads a single SPAD value from the microphone."}, "do_inode_permission": {"id": "do_inode_permission", "ground_truth": 1, "function": "do_inode_permission", "description": "Generic permission function with fast case for inode opflags cache flag."}, "cap_capset": {"id": "cap_capset", "ground_truth": 1, "function": "cap_capset", "description": "Validate and apply proposed change to current process's capability set"}, "tty_audit_add_data": {"id": "tty_audit_add_data", "ground_truth": 0, "function": "tty_audit_add_data", "description": "Add data for tty auditing, audit data size from tty."}, "xchk_agi_xref_fiblocks": {"id": "xchk_agi_xref_fiblocks", "ground_truth": 0, "function": "xchk_agi_xref_fiblocks", "description": "Check AGI FI block against tree size."}, "smack_audit_rule_match": {"id": "smack_audit_rule_match", "ground_truth": 0, "function": "smack_audit_rule_match", "description": "Audit decision for object based on smack rule match"}, "sci_controller_reset": {"id": "sci_controller_reset", "ground_truth": 0, "function": "sci_controller_reset", "description": "Reset sci controller, wipes out current operations, indicates success or fatal error"}, "i40iw_vf_reset": {"id": "i40iw_vf_reset", "ground_truth": 0, "function": "i40iw_vf_reset", "description": "Resets VF when destroyed by PF, cleans up resources."}, "pm_runtime_status_suspended": {"id": "pm_runtime_status_suspended", "ground_truth": 0, "function": "pm_runtime_status_suspended", "description": "Check if runtime PM status is suspended, return true/false. Trust only if called under runtime PM lock or unchangeable condition."}, "arch_dup_task_struct": {"id": "arch_dup_task_struct", "ground_truth": 0, "function": "arch_dup_task_struct", "description": "Updates thread info flag for current task before duplicating task struct"}, "debug_object_free": {"id": "debug_object_free", "ground_truth": 0, "function": "debug_object_free", "description": "Checks object before freeing to debug."}, "common_perm_create": {"id": "common_perm_create", "ground_truth": 1, "function": "common_perm_create", "description": "Creates common permission wrapper for create operation."}, "s2io_link_test": {"id": "s2io_link_test", "ground_truth": 0, "function": "s2io_link_test", "description": "Verifies NIC link state, updates input argument, returns on success."}, "qib_set_mtu": {"id": "qib_set_mtu", "ground_truth": 0, "function": "qib_set_mtu", "description": "Sets maximum transmission unit (MTU) size, no sanity checking, may cause link init state."}, "bcm63xx_fifo_setup": {"id": "bcm63xx_fifo_setup", "ground_truth": 0, "function": "bcm63xx_fifo_setup", "description": "Reinitializes fifo boundary and sets parameters based on usb link speed for iudma channel pair."}, "rio_map_outb_region": {"id": "rio_map_outb_region", "ground_truth": 0, "function": "rio_map_outb_region", "description": "Creates mapping from RIO space to local memory."}, "sas_enable_tlr": {"id": "sas_enable_tlr", "ground_truth": 0, "function": "sas_enable_tlr", "description": "Enables TLR by setting the TLR flag."}, "css_task_iter_start": {"id": "css_task_iter_start", "ground_truth": 0, "function": "css_task_iter_start", "description": "Initiates iteration through CS task, ends with cs task iter end"}, "arch_timer_select_ppi": {"id": "arch_timer_select_ppi", "ground_truth": 0, "function": "arch_timer_select_ppi", "description": "Select suitable PPI for system, use virtual timer if possible, redirect to CNTHP EL2 counterpart if available, use physical timer if no virtual timer interrupt provided."}, "dce_v10_0_latency_watermark": {"id": "dce_v10_0_latency_watermark", "ground_truth": 0, "function": "dce_v10_0_latency_watermark", "description": "Calculate latency watermark for display and bandwidth calculation in DCE v10."}, "tomoyo_check_path_number_acl": {"id": "tomoyo_check_path_number_acl", "ground_truth": 1, "function": "tomoyo_check_path_number_acl", "description": "Check path number ACL permission, return true/false"}, "drm_pci_free": {"id": "drm_pci_free", "ground_truth": 0, "function": "drm_pci_free", "description": "Free PCI consistent memory block in DRM"}, "audit_filter_inodes": {"id": "audit_filter_inodes", "ground_truth": 0, "function": "audit_filter_inodes", "description": "Audit filter for inodes at syscall exit time"}, "kvm_phys_addr_ioremap": {"id": "kvm_phys_addr_ioremap", "ground_truth": 0, "function": "kvm_phys_addr_ioremap", "description": "Maps device range to guest IPA using KVM."}, "parse_next_property": {"id": "parse_next_property", "ground_truth": 0, "function": "parse_next_property", "description": "Process next property from input buffer, return name or null on error"}, "check_ept_pointer_match": {"id": "check_ept_pointer_match", "ground_truth": 0, "function": "check_ept_pointer_match", "description": "Verifies EPT pointer match and lock protection."}, "fc_exch_pool_reset": {"id": "fc_exch_pool_reset", "ground_truth": 0, "function": "fc_exch_pool_reset", "description": "Resets exchange pool per CPU, releasing all sequences and exchanges. Resets only sourced or destined exchanges if specified."}, "amdgpu_mm_rreg8": {"id": "amdgpu_mm_rreg8", "ground_truth": 0, "function": "amdgpu_mm_rreg8", "description": "Reads memory mapped IO register and returns bit value from specified offset."}, "d_find_any_alias": {"id": "d_find_any_alias", "ground_truth": 0, "function": "d_find_any_alias", "description": "Find any alias for given inode, return reference if exists, else null."}, "rdma_put_gid_attr": {"id": "rdma_put_gid_attr", "ground_truth": 0, "function": "rdma_put_gid_attr", "description": "Release reference to IB/RoCE GID attribute acquired using rdma get gid attr."}, "crypto_alloc_rng": {"id": "crypto_alloc_rng", "ground_truth": 0, "function": "crypto_alloc_rng", "description": "Allocates RNG handle & cipher handle for random number generator. Creates new private copy of RNG for each instance."}, "svc_unregister": {"id": "svc_unregister", "ground_truth": 0, "function": "svc_unregister", "description": "Removes registered netids, addresses, and ports from local rpcbind database. Reported via dprintk."}, "tomoyo_path_chown": {"id": "tomoyo_path_chown", "ground_truth": 0, "function": "tomoyo_path_chown", "description": "Securely change ownership of target path, return success or negative value."}, "strim": {"id": "strim", "ground_truth": 0, "function": "strim", "description": "Removes leading/trailing whitespace, replaces first trailing whitespace with null terminator, returns pointer to first non-whitespace character."}, "dfl_fpga_check_port_id": {"id": "dfl_fpga_check_port_id", "ground_truth": 0, "function": "dfl_fpga_check_port_id", "description": "DFL FPGA port ID check for 5G networks."}, "jfs_rmdir": {"id": "jfs_rmdir", "ground_truth": 0, "function": "jfs_rmdir", "description": "Remove child directory link from parent directory in JFS."}, "iwl_mvm_tx_protection": {"id": "iwl_mvm_tx_protection", "ground_truth": 0, "function": "iwl_mvm_tx_protection", "description": "Enables RTS/CT protection through firmware for iwl MVM TX."}, "ufshcd_async_scan": {"id": "ufshcd_async_scan", "ground_truth": 0, "function": "ufshcd_async_scan", "description": "Asynchronous execution for probing HBA in ufshcd."}, "i40iw_build_mpa_v2": {"id": "i40iw_build_mpa_v2", "ground_truth": 0, "function": "i40iw_build_mpa_v2", "description": "Builds MPA v2 frame for i40iw."}, "octeon_i2c_reg_read": {"id": "octeon_i2c_reg_read", "ground_truth": 0, "function": "octeon_i2c_reg_read", "description": "Reads lower bit of i2c core register, returns data. Accessed indirectly via sw twsi csr."}, "dn_nsp_disc_conf": {"id": "dn_nsp_disc_conf", "ground_truth": 0, "function": "dn_nsp_disc_conf", "description": "Identifies no resource/link message based on reason field"}, "sw_dis_diffserv": {"id": "sw_dis_diffserv", "ground_truth": 0, "function": "sw_dis_diffserv", "description": "Disable switch diffserv priority function"}, "xgmac_poll": {"id": "xgmac_poll", "ground_truth": 0, "function": "xgmac_poll", "description": "Receives and completes transmission using xgmac poll method and napi."}, "devm_extcon_dev_register": {"id": "devm_extcon_dev_register", "ground_truth": 0, "function": "devm_extcon_dev_register", "description": "Registers and manages extcon device resources, automatically unregisters on driver detach. Use devm extcon dev unregister to unregister separately. Returns success or negative error number."}, "read": {"id": "read", "ground_truth": 1, "function": "read", "description": "Reads register in SOC with access function"}, "wiphy_rfkill_set_hw_state": {"id": "wiphy_rfkill_set_hw_state", "ground_truth": 0, "function": "wiphy_rfkill_set_hw_state", "description": "Notify cfg80211 of hardware block state change."}, "img_ir_free_timing_dynamic": {"id": "img_ir_free_timing_dynamic", "ground_truth": 0, "function": "img_ir_free_timing_dynamic", "description": "Updates free time register value for dynamic timing in IR-free image."}, "copy_frags": {"id": "copy_frags", "ground_truth": 0, "function": "copy_frags", "description": "Copy fragments from gather list to skb shared info."}, "snd_soc_get_enum_double": {"id": "snd_soc_get_enum_double", "ground_truth": 0, "function": "snd_soc_get_enum_double", "description": "Callback function for getting value of enumerated double mixer"}, "devm_gpio_free": {"id": "devm_gpio_free", "ground_truth": 0, "function": "devm_gpio_free", "description": "Free allocated GPIO resources using devm"}, "apparmor_socket_accept": {"id": "apparmor_socket_accept", "ground_truth": 1, "function": "apparmor_socket_accept", "description": "Checks apparmor permissions before accepting new socket connection."}, "amdgpu_vram_mgr_virt_start": {"id": "amdgpu_vram_mgr_virt_start", "ground_truth": 0, "function": "amdgpu_vram_mgr_virt_start", "description": "Update virtual start address for AMDGPU VRAM manager"}, "recover_peb": {"id": "recover_peb", "ground_truth": 0, "function": "recover_peb", "description": "Recovers PEB from write failure, moves good data, writes unwritten data, returns success or error code, retries UBI IO."}, "tep_print_event": {"id": "tep_print_event", "ground_truth": 0, "function": "tep_print_event", "description": "Prints event info to trace buffer"}, "lowpan_nhc_do_uncompression": {"id": "lowpan_nhc_do_uncompression", "ground_truth": 0, "function": "lowpan_nhc_do_uncompression", "description": "Uncompresses Lowpan NHC data using callback function."}, "cik_sdma_ring_test": {"id": "cik_sdma_ring_test", "ground_truth": 0, "function": "cik_sdma_ring_test", "description": "Tests async DMA engine by writing value to memory. Returns success/error."}, "page_get_anon_vma": {"id": "page_get_anon_vma", "ground_truth": 0, "function": "page_get_anon_vma", "description": "returns locked anon vma for page, no serialization against page remove rmap."}, "apparmor_socket_connect": {"id": "apparmor_socket_connect", "ground_truth": 1, "function": "apparmor_socket_connect", "description": "Check apparmor permissions before connecting socket to address."}, "keyctl_join_session_keyring": {"id": "keyctl_join_session_keyring", "ground_truth": 1, "function": "keyctl_join_session_keyring", "description": "Join or create named/anonymous session keyring, skip if no search permission, cannot create/join dot-named keyrings, return joined keyring ID"}, "dfl_fpga_set_irq_triggers": {"id": "dfl_fpga_set_irq_triggers", "ground_truth": 0, "function": "dfl_fpga_set_irq_triggers", "description": "Sets eventfd trigger for DFL feature interrupt, binds eventfds with irqs, unbinds related irq if fds is negative or count specified number of irqs if fds ptr is null."}, "tb_domain_approve_switch": {"id": "tb_domain_approve_switch", "ground_truth": 0, "function": "tb_domain_approve_switch", "description": "Approve switch for tb domain with tunnel creation"}, "kcsan_check_read_write": {"id": "kcsan_check_read_write", "ground_truth": 1, "function": "kcsan_check_read_write", "description": "Regular read/write access checked for race"}, "vcs_size": {"id": "vcs_size", "ground_truth": 0, "function": "vcs_size", "description": "Returns size for VC, requires console lock."}, "mv_print_info": {"id": "mv_print_info", "ground_truth": 0, "function": "mv_print_info", "description": "Prints key info to kernel log for perusal."}, "kstrtobool": {"id": "kstrtobool", "ground_truth": 0, "function": "kstrtobool", "description": "Converts user input to boolean value, returns match or einval."}, "vti6_dev_setup": {"id": "vti6_dev_setup", "ground_truth": 0, "function": "vti6_dev_setup", "description": "Initialize virtual tunnel device with function pointer and parameters"}, "stmmac_reset_queues_param": {"id": "stmmac_reset_queues_param", "ground_truth": 0, "function": "stmmac_reset_queues_param", "description": "Reset queue parameter for stmmac."}, "devm_hwmon_device_register_with_info": {"id": "devm_hwmon_device_register_with_info", "ground_truth": 0, "function": "devm_hwmon_device_register_with_info", "description": "Registers and returns new hwmon device pointer, automatically unregistered with parent device."}, "e1000_shift_out_ee_bits": {"id": "e1000_shift_out_ee_bits", "ground_truth": 0, "function": "e1000_shift_out_ee_bits", "description": "Shifts data bits out to EEPROM in e1000."}, "nvmf_log_connect_error": {"id": "nvmf_log_connect_error", "ground_truth": 0, "function": "nvmf_log_connect_error", "description": "nvmf log connect error} - diagnostic print out function for connect error."}, "kvm_pmi_trigger_fn": {"id": "kvm_pmi_trigger_fn", "ground_truth": 0, "function": "kvm_pmi_trigger_fn", "description": "Function kvm_pmi_trigger_fn triggers performance counters for both general purpose and fixed counters, which are stored in separate structs within the kvm pmu. The function uses three types of index to access the counters: msr, idx, and pmc. The pmc index is unique across all counters and is specific to the pmu code. The function supports both Intel and AMD processors, with Intel having a maximum number of generic and fixed counters and AMD having a set number of general purpose counters."}, "usb_disconnect": {"id": "usb_disconnect", "ground_truth": 0, "function": "usb_disconnect", "description": "Disconnect USB device and its children, synchronous call, not for interrupt context."}, "stmpe_reg_write": {"id": "stmpe_reg_write", "ground_truth": 0, "function": "stmpe_reg_write", "description": "Write single STMPE register"}, "yenta_fixup_parent_bridge": {"id": "yenta_fixup_parent_bridge", "ground_truth": 0, "function": "yenta_fixup_parent_bridge", "description": "Fixes subordinate bus of parent bridge, checks for invisible devices during PCI scan, carefully fixes misconfigured subordinate number, checks for conflicts."}, "megasas_dump_fusion_io": {"id": "megasas_dump_fusion_io", "ground_truth": 0, "function": "megasas_dump_fusion_io", "description": "Prints SCSI IO key details in megasas dump fusion."}, "nf_register_sockopt": {"id": "nf_register_sockopt", "ground_truth": 1, "function": "nf_register_sockopt", "description": "Registers sockopt functions for nf, permission check required."}, "acpi_unregister_wakeup_handler": {"id": "acpi_unregister_wakeup_handler", "ground_truth": 0, "function": "acpi_unregister_wakeup_handler", "description": "Unregister ACPI wakeup handler."}, "sysc_check_one_child": {"id": "sysc_check_one_child", "ground_truth": 0, "function": "sysc_check_one_child", "description": "Child configuration check for interconnect target node driver"}, "cbus_send_data": {"id": "cbus_send_data", "ground_truth": 0, "function": "cbus_send_data", "description": "Sends len data over bus"}, "mei_cl_notify_get": {"id": "mei_cl_notify_get", "ground_truth": 0, "function": "mei_cl_notify_get", "description": "Get or wait for notification event locking under device lock."}, "tty_kref_put": {"id": "tty_kref_put", "ground_truth": 0, "function": "tty_kref_put", "description": "Releases TTY kref using tty_kref_put."}, "ata_is_port": {"id": "ata_is_port", "ground_truth": 0, "function": "ata_is_port", "description": "Check if device is ATA port"}, "snd_card_set_id": {"id": "snd_card_set_id", "ground_truth": 0, "function": "snd_card_set_id", "description": "Sets identification name for sound card."}, "i40e_vsi_reset_stats": {"id": "i40e_vsi_reset_stats", "ground_truth": 0, "function": "i40e_vsi_reset_stats", "description": "Resets all stats of given VSI."}, "mei_txe_sec_reg_read_silent": {"id": "mei_txe_sec_reg_read_silent", "ground_truth": 0, "function": "mei_txe_sec_reg_read_silent", "description": "Reads 32-bit data from sec bar without aliveness check."}, "sched_idle_set_state": {"id": "sched_idle_set_state", "ground_truth": 0, "function": "sched_idle_set_state", "description": "Record idle state for current CPU in sched_idle_set_state"}, "set_nlink": {"id": "set_nlink", "ground_truth": 0, "function": "set_nlink", "description": "Low-level function to set inode link count directly."}, "ecryptfs_miscdev_write": {"id": "ecryptfs_miscdev_write", "ground_truth": 0, "function": "ecryptfs_miscdev_write", "description": "Handle write to ecryptfs miscdev, return bytes read from buf"}, "i40e_mdio_if_number_selection": {"id": "i40e_mdio_if_number_selection", "ground_truth": 0, "function": "i40e_mdio_if_number_selection", "description": "Selects MDIO interface number in i40e."}, "__ffs": {"id": "__ffs", "ground_truth": 0, "function": "__ffs", "description": "20-token summary: ffs finds first bit in word, undefined if none, check first."}, "tracing_map_init": {"id": "tracing_map_init", "ground_truth": 0, "function": "tracing_map_init", "description": "Allocate and clear tracing map, add fields, double size internally for sparse table"}, "pcpu_alloc_area": {"id": "pcpu_alloc_area", "ground_truth": 0, "function": "pcpu_alloc_area", "description": "Allocate area from pcpu chunk with alignment and scan allocation map for valid free area"}, "tomoyo_check_mkdev_acl": {"id": "tomoyo_check_mkdev_acl", "ground_truth": 1, "function": "tomoyo_check_mkdev_acl", "description": "Check permission for path operation, return true/false"}, "kvm_mips_count_disable": {"id": "kvm_mips_count_disable", "ground_truth": 0, "function": "kvm_mips_count_disable", "description": "kvm mips count disable, disables cp0 count timer interrupt, assumes previously enabled, handled before final stop time, count disabled"}, "ipcperms": {"id": "ipcperms", "ground_truth": 1, "function": "ipcperms", "description": "IPC permission check for resource access, returns allowed flag based on user group and other permissions."}, "fsmc_nand_disable": {"id": "fsmc_nand_disable", "ground_truth": 0, "function": "fsmc_nand_disable", "description": "Disable NAND bank in FSMC"}, "mceusb_set_rx_carrier_report": {"id": "mceusb_set_rx_carrier_report", "ground_truth": 0, "function": "mceusb_set_rx_carrier_report", "description": "Enables/disables carrier frequency reporting for short range receiver."}, "genwqe_recovery_on_fatal_gfir_required": {"id": "genwqe_recovery_on_fatal_gfir_required", "ground_truth": 0, "function": "genwqe_recovery_on_fatal_gfir_required", "description": "Recovers fatal GFIRs in older bitstreams for card manufacturer and test lab."}, "netlbl_unlhsh_hash": {"id": "netlbl_unlhsh_hash", "ground_truth": 0, "function": "netlbl_unlhsh_hash", "description": "Hashing function for unlabeled hash table, returns bucket number for device interface. Caller ensures hash table protection."}, "__security_genfs_sid": {"id": "__security_genfs_sid", "ground_truth": 1, "function": "__security_genfs_sid", "description": "Helper function to obtain SID for file in non-xattr filesystems."}, "dpni_set_buffer_layout": {"id": "dpni_set_buffer_layout", "ground_truth": 0, "function": "dpni_set_buffer_layout", "description": "dpni_set_buffer_layout} sets buffer layout config when dpni is disabled."}, "br_port_carrier_check": {"id": "br_port_carrier_check", "ground_truth": 0, "function": "br_port_carrier_check", "description": "Checks for port carrier transition."}, "qcom_scm_assign_mem": {"id": "qcom_scm_assign_mem", "ground_truth": 0, "function": "qcom_scm_assign_mem", "description": "Securely reassign memory ownership, return errno on failure or update srcvm on success."}, "nfsd3_proc_access": {"id": "nfsd3_proc_access", "ground_truth": 1, "function": "nfsd3_proc_access", "description": "Check file access for NFSv3."}, "kcsan_check_write": {"id": "kcsan_check_write", "ground_truth": 1, "function": "kcsan_check_write", "description": "Kernel function checks for regular write access for race detection"}, "nfs4_proc_get_locations": {"id": "nfs4_proc_get_locations", "ground_truth": 0, "function": "nfs4_proc_get_locations", "description": "Discover location for migrated fsid, return success or error code."}, "__mips_clear_bit": {"id": "__mips_clear_bit", "ground_truth": 0, "function": "__mips_clear_bit", "description": "Clears a bit in memory for MIPS architecture."}, "ibmvmc_read": {"id": "ibmvmc_read", "ground_truth": 0, "function": "ibmvmc_read", "description": "Reads data using ibmvmc."}, "wext_permission_check": {"id": "wext_permission_check", "ground_truth": 1, "function": "wext_permission_check", "description": "Checks user permission for set/get encoding parameter in wext."}, "nfs_block_size": {"id": "nfs_block_size", "ground_truth": 0, "function": "nfs_block_size", "description": "Compute and set NFS server blocksize."}, "ata_pci_sff_activate_host": {"id": "ata_pci_sff_activate_host", "ground_truth": 0, "function": "ata_pci_sff_activate_host", "description": "Activate ATA PCI SFF host, request and register IRQ."}, "fcntl_setlease": {"id": "fcntl_setlease", "ground_truth": 0, "function": "fcntl_setlease", "description": "Sets lease on open file using fcntl."}, "evergreen_cs_handle_reg": {"id": "evergreen_cs_handle_reg", "ground_truth": 0, "function": "evergreen_cs_handle_reg", "description": "Handles special registration process in Evergreen C."}, "may_change_ptraced_domain": {"id": "may_change_ptraced_domain", "ground_truth": 0, "function": "may_change_ptraced_domain", "description": "Checks if ptraced domain can be changed and if tracing task is allowed to trace new domain."}, "term_afu": {"id": "term_afu", "ground_truth": 0, "function": "term_afu", "description": "Terminates AFU safe to call with partially allocated initialized state"}, "jpeg_codec_sleep": {"id": "jpeg_codec_sleep", "ground_truth": 0, "function": "jpeg_codec_sleep", "description": "Sleep function for JPEG codec access"}, "smack_privileged": {"id": "smack_privileged", "ground_truth": 1, "function": "smack_privileged", "description": "Check if task can be privileged based on rules"}, "__rdtgroup_cbm_overlaps": {"id": "__rdtgroup_cbm_overlaps", "ground_truth": 0, "function": "__rdtgroup_cbm_overlaps", "description": "Checks for overlap of intended cbm with other closids/hardware usage"}, "NFP_NET_CFG_ICR_BASE": {"id": "NFP_NET_CFG_ICR_BASE", "ground_truth": 0, "function": "NFP_NET_CFG_ICR_BASE", "description": "Registers for interrupt control, used when MSI auto masking is off. Array indexed by MSI entry, 1b in size. FW writes cause to corresponding field and masks entry. Host driver must clear to re-enable."}, "riva_get_cmap_len": {"id": "riva_get_cmap_len", "ground_truth": 0, "function": "riva_get_cmap_len", "description": "Query current color map length in RivaFB setcolreg"}, "vmw_kms_stdu_init_display": {"id": "vmw_kms_stdu_init_display", "ground_truth": 0, "function": "vmw_kms_stdu_init_display", "description": "Initializes screen target display based on hardware capability."}, "vmw_resource_mob_detach": {"id": "vmw_resource_mob_detach", "ground_truth": 0, "function": "vmw_resource_mob_detach", "description": "Detach resource from backing mob in vmw."}, "blk_mq_tagset_wait_completed_request": {"id": "blk_mq_tagset_wait_completed_request", "ground_truth": 0, "function": "blk_mq_tagset_wait_completed_request", "description": "Wait for completed requests to finish in blk mq tagset"}, "nor_erase_prepare": {"id": "nor_erase_prepare", "ground_truth": 0, "function": "nor_erase_prepare", "description": "Prepares NOR flash for erasure, fills with zeros, prevents failure."}, "wait_for_dest_dir_move": {"id": "wait_for_dest_dir_move", "ground_truth": 0, "function": "wait_for_dest_dir_move", "description": "Delay directory rename, wait for ancestor with higher inode number, rename order matters"}, "security_netlbl_sid_to_secattr": {"id": "security_netlbl_sid_to_secattr", "ground_truth": 1, "function": "security_netlbl_sid_to_secattr", "description": "Convert SELinux SID to Netlabel security attribute. Return 0 on success, negative value on failure."}, "cap_ptrace_traceme": {"id": "cap_ptrace_traceme", "ground_truth": 1, "function": "cap_ptrace_traceme", "description": "Determines if process can trace current process, grants or denies permission."}, "alloc_workqueue": {"id": "alloc_workqueue", "ground_truth": 0, "function": "alloc_workqueue", "description": "Allocate workqueue with specified parameters."}, "rio_set_drvdata": {"id": "rio_set_drvdata", "ground_truth": 0, "function": "rio_set_drvdata", "description": "Sets driver data pointer for RIO device with specific data argument."}, "hdlc_ioctl": {"id": "hdlc_ioctl", "ground_truth": 0, "function": "hdlc_ioctl", "description": "hdlc_ioctl called by driver for user hdlc service"}, "hinic_hwdev_ifup": {"id": "hinic_hwdev_ifup", "ground_truth": 0, "function": "hinic_hwdev_ifup", "description": "Prepare hw for io, return success or failure"}, "ps3_lpm_copy_tb": {"id": "ps3_lpm_copy_tb", "ground_truth": 0, "function": "ps3_lpm_copy_tb", "description": "Copy trace buffer data to kernel buffer on error"}, "isci_task_execute_task": {"id": "isci_task_execute_task", "ground_truth": 0, "function": "isci_task_execute_task", "description": "Execute task in SA domain template, called by libsas, success at status zero."}, "ice_vf_vlan_offload_ena": {"id": "ice_vf_vlan_offload_ena", "ground_truth": 0, "function": "ice_vf_vlan_offload_ena", "description": "Determines if VF supports VLAN offloads. Returns true if supported, false if not."}, "print_hex_dump_bytes": {"id": "print_hex_dump_bytes", "ground_truth": 0, "function": "print_hex_dump_bytes", "description": "Print hex dump bytes with default params, log level of kern debug, group size of rowsize, and ascii output."}, "batadv_nc_get_path": {"id": "batadv_nc_get_path", "ground_truth": 0, "function": "batadv_nc_get_path", "description": "Get existing or allocate new batadv nc path"}, "scsih_scan_start": {"id": "scsih_scan_start", "ground_truth": 0, "function": "scsih_scan_start", "description": "scsih_scan_start initiates firmware discovery for target discovery."}, "tick_is_oneshot_available": {"id": "tick_is_oneshot_available", "ground_truth": 1, "function": "tick_is_oneshot_available", "description": "Check if event device supports oneshot tick."}, "v4l2_g_ctrl": {"id": "v4l2_g_ctrl", "ground_truth": 0, "function": "v4l2_g_ctrl", "description": "Helper function for v4l2 control implementation, returns einval if hdl is null."}, "atl1c_close": {"id": "atl1c_close", "ground_truth": 0, "function": "atl1c_close", "description": "atl1c_close} disables network interface, cannot fail. Called when interface is deactivated, issues global MAC reset to stop hardware and free resources."}, "mdiobus_register_board_info": {"id": "mdiobus_register_board_info", "ground_truth": 0, "function": "mdiobus_register_board_info", "description": "Register MDIO device for board with initdata"}, "of_changeset_destroy": {"id": "of_changeset_destroy", "ground_truth": 0, "function": "of_changeset_destroy", "description": "Destroys changeset irreversibly if applied."}, "page_is_file_lru": {"id": "page_is_file_lru", "ground_truth": 0, "function": "page_is_file_lru", "description": "Determines if page is file or anon LRU"}, "skb_orphan_frags": {"id": "skb_orphan_frags", "ground_truth": 0, "function": "skb_orphan_frags", "description": "Orphaned frags in skb buffer"}, "e1000_check_copper_options": {"id": "e1000_check_copper_options", "ground_truth": 0, "function": "e1000_check_copper_options", "description": "Copper option range check for e1000 adapter"}, "__kcsan_check_read": {"id": "__kcsan_check_read", "ground_truth": 1, "function": "__kcsan_check_read", "description": "Regular read access checked for race"}, "i2c_master_recv": {"id": "i2c_master_recv", "ground_truth": 0, "function": "i2c_master_recv", "description": "Receives single I2C message in master mode, returns byte count or negative errno."}, "cpumask_copy": {"id": "cpumask_copy", "ground_truth": 0, "function": "cpumask_copy", "description": "Copies CPU mask from source to destination."}, "__copy_to_user_inatomic": {"id": "__copy_to_user_inatomic", "ground_truth": 0, "function": "__copy_to_user_inatomic", "description": "Atomic data copy from kernel to user space with access check and pinned user space address"}, "tipc_sk_set_orig_addr": {"id": "tipc_sk_set_orig_addr", "ground_truth": 0, "function": "tipc_sk_set_orig_addr", "description": "Sets original address for received message in TIPC."}, "xfrm_state_ok": {"id": "xfrm_state_ok", "ground_truth": 0, "function": "xfrm_state_ok", "description": "Check policy restriction for transformed skb"}, "tomoyo_path_number_perm": {"id": "tomoyo_path_number_perm", "ground_truth": 1, "function": "tomoyo_path_number_perm", "description": "Permission check for file operations, returns negative value on failure."}, "FSL_MC_OBJ_FLAG_NO_MEM_SHAREABILITY": {"id": "FSL_MC_OBJ_FLAG_NO_MEM_SHAREABILITY", "ground_truth": 0, "function": "FSL_MC_OBJ_FLAG_NO_MEM_SHAREABILITY", "description": "Object flag for non-shareable memory access, user handles memory through IOMMU config."}, "fcoe_ctlr_recv_work": {"id": "fcoe_ctlr_recv_work", "ground_truth": 0, "function": "fcoe_ctlr_recv_work", "description": "Receives FIP frame in FCoE controller worker thread."}, "smk_ipv6_check": {"id": "smk_ipv6_check", "ground_truth": 1, "function": "smk_ipv6_check", "description": "ipv6 access check using smack access"}, "ks8851_eeprom_claim": {"id": "ks8851_eeprom_claim", "ground_truth": 1, "function": "ks8851_eeprom_claim", "description": "Activate device EEPROM and interface, check for presence, enable software access."}, "ice_flow_set_rss_seg_info": {"id": "ice_flow_set_rss_seg_info", "ground_truth": 0, "function": "ice_flow_set_rss_seg_info", "description": "Sets up packet segment for flow field extraction from hash bitmap."}, "privileged_wrt_inode_uidgid": {"id": "privileged_wrt_inode_uidgid", "ground_truth": 1, "function": "privileged_wrt_inode_uidgid", "description": "Checks if inode uid and gid are within namespace for privileged capability"}, "vema_get_port": {"id": "vema_get_port", "ground_truth": 0, "function": "vema_get_port", "description": "Returns OPA vnic vema port structure for given port number."}, "gfs2_check_sb": {"id": "gfs2_check_sb", "ground_truth": 0, "function": "gfs2_check_sb", "description": "Checks GFS2 superblock version and structure size."}, "zap_page_range": {"id": "zap_page_range", "ground_truth": 0, "function": "zap_page_range", "description": "Remove user page in given range, protect vma list"}, "skb_flow_get_icmp_tci": {"id": "skb_flow_get_icmp_tci", "ground_truth": 0, "function": "skb_flow_get_icmp_tci", "description": "Extract ICMP type, code, and identifier from skb flow."}, "pcie_get_width_cap": {"id": "pcie_get_width_cap", "ground_truth": 0, "function": "pcie_get_width_cap", "description": "PCIe device's maximum link width capability query function"}, "state_show": {"id": "state_show", "ground_truth": 0, "function": "state_show", "description": "Debugfs entry showing hardware and endpoint state"}, "ubifs_evict_xattr_inode": {"id": "ubifs_evict_xattr_inode", "ground_truth": 0, "function": "ubifs_evict_xattr_inode", "description": "Evicts xattr inode to prevent memory waste during removal of host inode. Clears link counter for eviction."}, "batadv_dat_init_own_addr": {"id": "batadv_dat_init_own_addr", "ground_truth": 0, "function": "batadv_dat_init_own_addr", "description": "Assigns dat address to node itself."}, "ps3_sys_manager_handle_msg": {"id": "ps3_sys_manager_handle_msg", "ground_truth": 0, "function": "ps3_sys_manager_handle_msg", "description": "PS3 system manager handles messages and polls vuart."}, "__drm_atomic_helper_bridge_duplicate_state": {"id": "__drm_atomic_helper_bridge_duplicate_state", "ground_truth": 0, "function": "__drm_atomic_helper_bridge_duplicate_state", "description": "Copy atomic bridge state for driver subclassing bridge state."}, "pseries_power_off": {"id": "pseries_power_off", "ground_truth": 0, "function": "pseries_power_off", "description": "Function for powering off pseries system, uses power off tokens and allows auto power on after power is restored."}, "cnstr_shdsc_rfc4106_encap": {"id": "cnstr_shdsc_rfc4106_encap", "ground_truth": 0, "function": "cnstr_shdsc_rfc4106_encap", "description": "IPSec ESP GCM encapsulation with shared descriptor, input/output sequence, AAD, ICV, and association length."}, "smk_ipv6_port_check": {"id": "smk_ipv6_port_check", "ground_truth": 1, "function": "smk_ipv6_port_check", "description": "IPv6 port access check function for Smack"}, "sci_clk_get_parent": {"id": "sci_clk_get_parent", "ground_truth": 0, "function": "sci_clk_get_parent", "description": "Returns index of current parent for TI SCI clock."}, "i40e_update_filter_state": {"id": "i40e_update_filter_state", "ground_truth": 0, "function": "i40e_update_filter_state", "description": "Update filter state based on firmware data, return successful filter count."}, "gpiochip_fwd_create": {"id": "gpiochip_fwd_create", "ground_truth": 0, "function": "gpiochip_fwd_create", "description": "Creates new gpio forwarder chip to pass gpio operations."}, "lola_proc_codec_rw_write": {"id": "lola_proc_codec_rw_write", "ground_truth": 0, "function": "lola_proc_codec_rw_write", "description": "Direct codec access for debugging in lola proc codec rw write."}, "skl_dum_set": {"id": "skl_dum_set", "ground_truth": 0, "function": "skl_dum_set", "description": "Sets dummy bit in EM2 register to fix incorrect position reporting on device power up."}, "qib_get_eeprom_info": {"id": "qib_get_eeprom_info", "ground_truth": 1, "function": "qib_get_eeprom_info", "description": "Get GUID and other info from TSWI EEPROM device, use NGUID field for all chips."}, "apparmor_socket_getsockname": {"id": "apparmor_socket_getsockname", "ground_truth": 1, "function": "apparmor_socket_getsockname", "description": "Check socket permission before getting local address."}, "ixgbe_read_mbx_pf": {"id": "ixgbe_read_mbx_pf", "ground_truth": 0, "function": "ixgbe_read_mbx_pf", "description": "Reads message from mailbox in ixgbe."}, "w_send_dblock": {"id": "w_send_dblock", "ground_truth": 0, "function": "w_send_dblock", "description": "Sends worker callback to mirror write request data packet."}, "batadv_socket_init": {"id": "batadv_socket_init", "ground_truth": 0, "function": "batadv_socket_init", "description": "Initialize socket data for soft interface"}, "link_retransmit_failure": {"id": "link_retransmit_failure", "ground_truth": 0, "function": "link_retransmit_failure", "description": "Detects repeated link retransmit failures."}, "rio_std_route_clr_table": {"id": "rio_std_route_clr_table", "ground_truth": 0, "function": "rio_std_route_clr_table", "description": "Clears switch route table using standard register in RIO spec."}, "novatd_frontend_attach": {"id": "novatd_frontend_attach", "ground_truth": 0, "function": "novatd_frontend_attach", "description": "Attaches Nova TD frontend with specific GPIO0 and LED"}, "tomoyo_unix_entry": {"id": "tomoyo_unix_entry", "ground_truth": 1, "function": "tomoyo_unix_entry", "description": "Unix network permission check function, returns negative value on failure."}, "radeon_doorbell_init": {"id": "radeon_doorbell_init", "ground_truth": 0, "function": "radeon_doorbell_init", "description": "Initializes Radeon doorbell driver for CIK architecture."}, "nand_read_page_swecc": {"id": "nand_read_page_swecc", "ground_truth": 0, "function": "nand_read_page_swecc", "description": "Software ECC-based NAND page read with SWECC replacement."}, "ecryptfs_process_key_cipher": {"id": "ecryptfs_process_key_cipher", "ground_truth": 0, "function": "ecryptfs_process_key_cipher", "description": "Initialize key cipher, release crypto tfm structs on superblock put event"}, "aa_dfa_unpack": {"id": "aa_dfa_unpack", "ground_truth": 0, "function": "aa_dfa_unpack", "description": "Unpack serialized DFA binary table to find format info. Check documentation for details. Assumes byte-aligned stream."}, "legacy_probe_add": {"id": "legacy_probe_add", "ground_truth": 0, "function": "legacy_probe_add", "description": "Adds interface to probe list."}, "cti_init": {"id": "cti_init", "ground_truth": 0, "function": "cti_init", "description": "Initializes cti instance with board dependent irq and trig out."}, "timekeeping_max_deferment": {"id": "timekeeping_max_deferment", "ground_truth": 0, "function": "timekeeping_max_deferment", "description": "Returns max clocksource deferment time."}, "is_ep_periodic": {"id": "is_ep_periodic", "ground_truth": 0, "function": "is_ep_periodic", "description": "Detects if endpoint is in periodic mode for interrupt/iso transfer"}, "spi_nor_sr_is_locked": {"id": "spi_nor_sr_is_locked", "ground_truth": 0, "function": "spi_nor_sr_is_locked", "description": "Checks if SPI NOR SR region is completely locked."}, "pnp_assign_resources": {"id": "pnp_assign_resources", "ground_truth": 0, "function": "pnp_assign_resources", "description": "Assigns resources to device based on dependent number."}, "rproc_elf_load_segments": {"id": "rproc_elf_load_segments", "ground_truth": 0, "function": "rproc_elf_load_segments", "description": "Loads firmware segment to memory for specific remote processors, translating device address to kernel address for physically contiguous carveout memory regions. Only supports remote processors with carveout allocation and mapped iommus. Direct allocation not yet supported."}, "i40iw_hmc_sd_one": {"id": "i40iw_hmc_sd_one", "ground_truth": 0, "function": "i40iw_hmc_sd_one", "description": "Sets up SD entry for CQP in i40iw HMC."}, "ice_deinit_hw": {"id": "ice_deinit_hw", "ground_truth": 0, "function": "ice_deinit_hw", "description": "Deinitializes hardware after successful initialization."}, "nand_select_target": {"id": "nand_select_target", "ground_truth": 0, "function": "nand_select_target", "description": "Selects NAND target die for chip operation"}, "igb_write_phy_reg_mdic": {"id": "igb_write_phy_reg_mdic", "ground_truth": 0, "function": "igb_write_phy_reg_mdic", "description": "Writes to MDI control register for IGB PHY."}, "set_pte": {"id": "set_pte", "ground_truth": 0, "function": "set_pte", "description": "Special architecture hook for modifying page table PTEs"}, "sk_wait_data": {"id": "sk_wait_data", "ground_truth": 0, "function": "sk_wait_data", "description": "Wait for data in socket receive queue, check before scheduling, lock ensures state change, optimization for new data."}, "iwl_mvm_update_smps": {"id": "iwl_mvm_update_smps", "ground_truth": 0, "function": "iwl_mvm_update_smps", "description": "Updates SMPS mode based on driver requests."}, "generic_file_buffered_read": {"id": "generic_file_buffered_read", "ground_truth": 0, "function": "generic_file_buffered_read", "description": "Generic file read routine using mapping ops readpage function for low level stuff. Ugly code with goto for error handling."}, "sysfs_update_group": {"id": "sysfs_update_group", "ground_truth": 0, "function": "sysfs_update_group", "description": "Updates attribute group in sysfs directory without warning for existing files or changing group/subdirectory names. Used after changes affecting group visibility. Returns success or error code."}, "i40e_set_rxnfc": {"id": "i40e_set_rxnfc", "ground_truth": 0, "function": "i40e_set_rxnfc", "description": "Sets rx flow classification rule, returns success if supported."}, "mcpm_cpu_suspend": {"id": "mcpm_cpu_suspend", "ground_truth": 0, "function": "mcpm_cpu_suspend", "description": "Suspend CPU, prepare for power down, allow asynchronous wake up with interrupt, last man standing in cluster, interrupt disabled, re-entry via mcpm entry point, return if platform register not called."}, "audit_ctl_owner_current": {"id": "audit_ctl_owner_current", "ground_truth": 0, "function": "audit_ctl_owner_current", "description": "Check ownership of audit control lock by current task"}, "drm_mode_object_put": {"id": "drm_mode_object_put", "ground_truth": 0, "function": "drm_mode_object_put", "description": "Decrements refcount of DRM mode object, releases reference."}, "security_read_policy": {"id": "security_read_policy", "ground_truth": 1, "function": "security_read_policy", "description": "Reads security policy."}, "p9100_blank": {"id": "p9100_blank", "ground_truth": 0, "function": "p9100_blank", "description": "Optional function to blank display in p9100."}, "fm10k_mbx_read_copy": {"id": "fm10k_mbx_read_copy", "ground_truth": 0, "function": "fm10k_mbx_read_copy", "description": "Copy data from mbmem to rx fifo in fm10k"}, "dasd_biodasdinfo": {"id": "dasd_biodasdinfo", "ground_truth": 0, "function": "dasd_biodasdinfo", "description": "Fill dasd info structure with provided pointer"}, "pcxhr_init_rmh": {"id": "pcxhr_init_rmh", "ground_truth": 0, "function": "pcxhr_init_rmh", "description": "Initializes the RMH instance in pcxhr."}, "tomoyo_put_name": {"id": "tomoyo_put_name", "ground_truth": 0, "function": "tomoyo_put_name", "description": "Drop reference on struct tomoyo name, no return."}, "bcom_get_bd": {"id": "bcom_get_bd", "ground_truth": 0, "function": "bcom_get_bd", "description": "Get bd from queue using bcom"}, "tomoyo_socket_listen_permission": {"id": "tomoyo_socket_listen_permission", "ground_truth": 1, "function": "tomoyo_socket_listen_permission", "description": "Check permission for listening socket, return negative on failure"}, "be_cmd_get_fn_privileges": {"id": "be_cmd_get_fn_privileges", "ground_truth": 1, "function": "be_cmd_get_fn_privileges", "description": "Get function privilege for command"}, "ibmvfc_set_host_action": {"id": "ibmvfc_set_host_action", "ground_truth": 0, "function": "ibmvfc_set_host_action", "description": "Set next init action for host using ibmvfc"}, "drm_vma_node_is_allowed": {"id": "drm_vma_node_is_allowed", "ground_truth": 1, "function": "drm_vma_node_is_allowed", "description": "Checks if open file is allowed in DRM VMA node list."}, "inv_icm42600_setup": {"id": "inv_icm42600_setup", "ground_truth": 0, "function": "inv_icm42600_setup", "description": "Check and setup inv icm42600 chip"}, "st_lsm6dsx_read_tagged_fifo": {"id": "st_lsm6dsx_read_tagged_fifo", "ground_truth": 0, "function": "st_lsm6dsx_read_tagged_fifo", "description": "Reads samples from hardware FIFO and pushes to IIO buffer."}, "snd_hda_check_amp_caps": {"id": "snd_hda_check_amp_caps", "ground_truth": 1, "function": "snd_hda_check_amp_caps", "description": "Check widget's amp capability for given direction."}, "usb_get_dr_mode": {"id": "usb_get_dr_mode", "ground_truth": 0, "function": "usb_get_dr_mode", "description": "Get dual role mode for USB device from property."}, "tomoyo_path2_perm": {"id": "tomoyo_path2_perm", "ground_truth": 1, "function": "tomoyo_path2_perm", "description": "Permission check for rename/link and pivot root. Returns negative value on failure."}, "reiserfs_security_init": {"id": "reiserfs_security_init", "ground_truth": 1, "function": "reiserfs_security_init", "description": "Initialize security context for inode, return block count if successful, release with reiserfs security free."}, "rdma_set_service_type": {"id": "rdma_set_service_type", "ground_truth": 0, "function": "rdma_set_service_type", "description": "Set service type for connection ID with differentiated service field, specify before route resolution, may not be supported by network."}, "xudc_write32_be": {"id": "xudc_write32_be", "ground_truth": 0, "function": "xudc_write32_be", "description": "Device register write function, big endian"}, "context_read_and_validate": {"id": "context_read_and_validate", "ground_truth": 1, "function": "context_read_and_validate", "description": "Read and validate security context from binary file"}, "mlxsw_cmd_access_reg": {"id": "mlxsw_cmd_access_reg", "ground_truth": 0, "function": "mlxsw_cmd_access_reg", "description": "Access device register using mlxsw cmd with EMAD support for bootstrapping."}, "nfp_cpp_explicit_acquire": {"id": "nfp_cpp_explicit_acquire", "ground_truth": 0, "function": "nfp_cpp_explicit_acquire", "description": "Acquires explicit access handle for NFP CPP with useful data and signal references."}, "ib_pack": {"id": "ib_pack", "ground_truth": 0, "function": "ib_pack", "description": "Packs structure into buffer using field array in desc."}, "batadv_algo_seq_print_text": {"id": "batadv_algo_seq_print_text", "ground_truth": 0, "function": "batadv_algo_seq_print_text", "description": "Prints supported algorithm in seq file."}, "gfs2_llseek": {"id": "gfs2_llseek", "ground_truth": 0, "function": "gfs2_llseek", "description": "Seek to file location, requires glock for file size"}, "ceph_drop_caps_for_unlink": {"id": "ceph_drop_caps_for_unlink", "ground_truth": 0, "function": "ceph_drop_caps_for_unlink", "description": "Drops cap for unlinking file if link count will hit, except pin cap."}, "e1000_get_link_up_info_vf": {"id": "e1000_get_link_up_info_vf", "ground_truth": 0, "function": "e1000_get_link_up_info_vf", "description": "Get link up info for e1000 VF."}, "xprt_request_get_cong": {"id": "xprt_request_get_cong", "ground_truth": 0, "function": "xprt_request_get_cong", "description": "Get congestion control credit for transport"}, "comedi_8254_mm_init": {"id": "comedi_8254_mm_init", "ground_truth": 0, "function": "comedi_8254_mm_init", "description": "Allocate and initialize device for mmio access."}, "ixgbevf_reuse_rx_page": {"id": "ixgbevf_reuse_rx_page", "ground_truth": 0, "function": "ixgbevf_reuse_rx_page", "description": "Buffer reuse for adapter with page synchronization"}, "sve_sync_to_fpsimd": {"id": "sve_sync_to_fpsimd", "ground_truth": 0, "function": "sve_sync_to_fpsimd", "description": "Ensures task's fpsimd state is up-to-date, called by ptrace, requires non-runnable task thread and allocated kernel memory."}, "pdc_stable_initialize": {"id": "pdc_stable_initialize", "ground_truth": 0, "function": "pdc_stable_initialize", "description": "Initialize stable storage content to zero and erase all previous data. Use with caution."}, "set_security_override_from_ctx": {"id": "set_security_override_from_ctx", "ground_truth": 1, "function": "set_security_override_from_ctx", "description": "Sets security override from context with security ID in credential set. LSM security ID also set for subjective security override with alternative credential. Security ID specified as string in LSM-interpreted context."}, "netdev_txq_bql_enqueue_prefetchw": {"id": "netdev_txq_bql_enqueue_prefetchw", "ground_truth": 0, "function": "netdev_txq_bql_enqueue_prefetchw", "description": "Prefetches BQL data for write in netdev txq"}, "keyctl_keyring_search": {"id": "keyctl_keyring_search", "ground_truth": 1, "function": "keyctl_keyring_search", "description": "Searches keyring and linked keyrings for matching key, grants search permission, links found key to destination keyring if permitted."}, "fm10k_request_glort_range": {"id": "fm10k_request_glort_range", "ground_truth": 0, "function": "fm10k_request_glort_range", "description": "Allocate glort range for interface rule configuration."}, "is_cmd_valid": {"id": "is_cmd_valid", "ground_truth": 0, "function": "is_cmd_valid", "description": "Checks validity of input args for dimm control function."}, "ip_route_input_slow": {"id": "ip_route_input_slow", "ground_truth": 0, "function": "ip_route_input_slow", "description": "Filters packets with local source address, enforces policy, handles spoofing attempts, uses RCU read lock."}, "sg_init_marker": {"id": "sg_init_marker", "ground_truth": 0, "function": "sg_init_marker", "description": "Initializes marker in SG table."}, "ohci_hcd_omap_remove": {"id": "ohci_hcd_omap_remove", "ground_truth": 0, "function": "ohci_hcd_omap_remove", "description": "Shutdown processing for OMAP-based OHCI HCDs"}, "led_set_flash_brightness": {"id": "led_set_flash_brightness", "ground_truth": 0, "function": "led_set_flash_brightness", "description": "Sets brightness of flash LED."}, "cros_ec_sensors_core_read": {"id": "cros_ec_sensors_core_read", "ground_truth": 0, "function": "cros_ec_sensors_core_read", "description": "Request sensor value using cros_ec_sensors_core_read."}, "__hwspin_lock_timeout": {"id": "__hwspin_lock_timeout", "ground_truth": 0, "function": "__hwspin_lock_timeout", "description": "Lock hwspin with timeout, busy loop if taken, caution for raw mode, disable preemption and interrupt on success, user decides interrupt state and mode"}, "scif_send": {"id": "scif_send", "ground_truth": 0, "function": "scif_send", "description": "Sends data using the SCI framework."}, "cxlflash_disk_clone": {"id": "cxlflash_disk_clone", "ground_truth": 0, "function": "cxlflash_disk_clone", "description": "Clones cxlflash disk context by making snapshot of another. Requires pristine destination context."}, "FPU_get_address": {"id": "FPU_get_address", "ground_truth": 0, "function": "FPU_get_address", "description": "FPU_get_address} - FPU address mod byte special use, SIB byte used for 100b mod opcode."}, "parport_claim_or_block": {"id": "parport_claim_or_block", "ground_truth": 0, "function": "parport_claim_or_block", "description": "Claim or block access to parallel port device"}, "sg_mark_end": {"id": "sg_mark_end", "ground_truth": 0, "function": "sg_mark_end", "description": "Marks end of scatterlist, sets termination point for sg table, sg next returns null."}, "drm_ioctl_permit": {"id": "drm_ioctl_permit", "ground_truth": 1, "function": "drm_ioctl_permit", "description": "Check ioctl permission for caller to run ioctl."}, "pti_port_shutdown": {"id": "pti_port_shutdown", "ground_truth": 0, "function": "pti_port_shutdown", "description": "Stop item on last tty port close with pti port shutdown."}, "__cpcmd": {"id": "__cpcmd", "ground_truth": 0, "function": "__cpcmd", "description": "Restricted cpcmd function, unlocked and not smp safe."}, "nvt_hw_detect": {"id": "nvt_hw_detect", "ground_truth": 0, "function": "nvt_hw_detect", "description": "Detects hardware features."}, "fscrypt_set_context": {"id": "fscrypt_set_context", "ground_truth": 0, "function": "fscrypt_set_context", "description": "Sets fscrypt context for new inode during filesystem transaction. No gfp nofs safety."}, "kcsan_check_read": {"id": "kcsan_check_read", "ground_truth": 1, "function": "kcsan_check_read", "description": "Kernel function checks for race in regular read access"}, "set_security_override": {"id": "set_security_override", "ground_truth": 1, "function": "set_security_override", "description": "Security override for alternative credentials in set"}, "__kcsan_check_access": {"id": "__kcsan_check_access", "ground_truth": 1, "function": "__kcsan_check_access", "description": "Generic access race check function"}, "i40iw_create_aeq": {"id": "i40iw_create_aeq", "ground_truth": 0, "function": "i40iw_create_aeq", "description": "Creates async event queue and associated resource, returns success/error."}, "COLOR_ALIGN": {"id": "COLOR_ALIGN", "ground_truth": 0, "function": "COLOR_ALIGN", "description": "Color alignment for mmap with file-backed map and fixed mapping, avoids mapping within 4GB of Spitfire Niagara VA hole."}, "smack_inode_permission": {"id": "smack_inode_permission", "ground_truth": 1, "function": "smack_inode_permission", "description": "Smack hook for inode permission, returns permit/error code."}, "alloc_huge_page_vma": {"id": "alloc_huge_page_vma", "ground_truth": 0, "function": "alloc_huge_page_vma", "description": "Allocate huge page with migration callback."}, "ab8500_charger_set_output_curr": {"id": "ab8500_charger_set_output_curr", "ground_truth": 0, "function": "ab8500_charger_set_output_curr", "description": "Sets charger output current and returns error code on failure."}, "ipc_check_perms": {"id": "ipc_check_perms", "ground_truth": 1, "function": "ipc_check_perms", "description": "Security check for IPC object with existing key, returns IPC ID"}, "i40e_ptp_rx_hwtstamp": {"id": "i40e_ptp_rx_hwtstamp", "ground_truth": 0, "function": "i40e_ptp_rx_hwtstamp", "description": "Utility function for checking and fetching receive timestamp from rxtime register in xl710"}, "i40iw_check_mr_contiguous": {"id": "i40iw_check_mr_contiguous", "ground_truth": 0, "function": "i40iw_check_mr_contiguous", "description": "Checks if MR is physically contiguous."}, "sis635_get_mac_addr": {"id": "sis635_get_mac_addr", "ground_truth": 0, "function": "sis635_get_mac_addr", "description": "Get MAC address for SIS635 model"}, "is_report_browser": {"id": "is_report_browser", "ground_truth": 0, "function": "is_report_browser", "description": "Browser check for report or not"}, "drm_property_flags_valid": {"id": "drm_property_flags_valid", "ground_truth": 0, "function": "drm_property_flags_valid", "description": "Function validates DRM property flags for atomic modeset ioctl. Property values have defined range enforced by DRM core. Property names are mapped to IDs for atomic and get/set property ioctl."}, "ieee802154_le64_to_be64": {"id": "ieee802154_le64_to_be64", "ground_truth": 0, "function": "ieee802154_le64_to_be64", "description": "Converts little-endian 64-bit to big-endian 64-bit."}, "BUILD_BUG_ON": {"id": "BUILD_BUG_ON", "ground_truth": 0, "function": "BUILD_BUG_ON", "description": "Detect compile-time condition changes with BUILD_BUG_ON."}, "debugfs_create_u32": {"id": "debugfs_create_u32", "ground_truth": 0, "function": "debugfs_create_u32", "description": "Creates debugfs file for unsigned bit value read/write."}, "ntfs_check_log_client_array": {"id": "ntfs_check_log_client_array", "ground_truth": 0, "function": "ntfs_check_log_client_array", "description": "Checks NTFS log client array for consistency, returns true if consistent, requires full restart page and system page size byte."}, "eeh_save_bars": {"id": "eeh_save_bars", "ground_truth": 0, "function": "eeh_save_bars", "description": "Save device bar value for PCI devices individually, not recursively"}, "atapi_check_dma": {"id": "atapi_check_dma", "ground_truth": 0, "function": "atapi_check_dma", "description": "Checks if ATAPI DMA is supported."}, "ps3_gelic_driver_probe": {"id": "ps3_gelic_driver_probe", "ground_truth": 0, "function": "ps3_gelic_driver_probe", "description": "Add device to driver control in ps3 gelic driver probe."}, "gfs2_get_tree": {"id": "gfs2_get_tree", "ground_truth": 0, "function": "gfs2_get_tree", "description": "Get GFS2 superblock and root directory in gfs2_get_tree."}, "tty_schedule_flip": {"id": "tty_schedule_flip", "ground_truth": 0, "function": "tty_schedule_flip", "description": "Character push to ldisc via tty schedule flip"}, "i40e_get_link_speed": {"id": "i40e_get_link_speed", "ground_truth": 0, "function": "i40e_get_link_speed", "description": "Returns link speed for interface in i40e."}, "pseries_get_cpu_char": {"id": "pseries_get_cpu_char", "ground_truth": 0, "function": "pseries_get_cpu_char", "description": "Check hardware safety against speculative attacks using firmware info"}, "pcie_update_aspm_capable": {"id": "pcie_update_aspm_capable", "ground_truth": 1, "function": "pcie_update_aspm_capable", "description": "Update PCIe ASPM capability for root link"}, "sst_pause_stream": {"id": "sst_pause_stream", "ground_truth": 0, "function": "sst_pause_stream", "description": "Function pauses running stream by sending message"}, "arch_atomic_sub_and_test": {"id": "arch_atomic_sub_and_test", "ground_truth": 0, "function": "arch_atomic_sub_and_test", "description": "Atomic subtraction and test for architecture"}, "drm_mode_getfb2_ioctl": {"id": "drm_mode_getfb2_ioctl", "ground_truth": 0, "function": "drm_mode_getfb2_ioctl", "description": "Get extended fb info via ioctl for given id"}, "netlink_ns_capable": {"id": "netlink_ns_capable", "ground_truth": 1, "function": "netlink_ns_capable", "description": "Netlink message capability test for user namespace"}, "cmd64x_sff_irq_check": {"id": "cmd64x_sff_irq_check", "ground_truth": 0, "function": "cmd64x_sff_irq_check", "description": "IDE interrupt check in cmd64x sff."}, "goodix_configure_dev": {"id": "goodix_configure_dev", "ground_truth": 0, "function": "goodix_configure_dev", "description": "Device initialization function with common code for GPIO and non-GPIO devices. Called from probe or firmware wait callback."}, "i40iw_cq_poll_completion": {"id": "i40iw_cq_poll_completion", "ground_truth": 0, "function": "i40iw_cq_poll_completion", "description": "Get i40iw cq completion info from poll completion."}, "zynq_slcr_cpu_stop": {"id": "zynq_slcr_cpu_stop", "ground_truth": 0, "function": "zynq_slcr_cpu_stop", "description": "Stop Zynq CPU using SLCR"}, "goya_init_security": {"id": "goya_init_security", "ground_truth": 1, "function": "goya_init_security", "description": "Initialize security model with range and protection per register"}, "ata_scsi_slave_destroy": {"id": "ata_scsi_slave_destroy", "ground_truth": 0, "function": "ata_scsi_slave_destroy", "description": "Destroys ATA SCSI slave scsi device."}, "it821x_passthru_bmdma_start": {"id": "it821x_passthru_bmdma_start", "ground_truth": 0, "function": "it821x_passthru_bmdma_start", "description": "DMA start callback for it821x passthru bmdma"}, "power_supply_unregister": {"id": "power_supply_unregister", "ground_truth": 0, "function": "power_supply_unregister", "description": "Remove power supply from system and free resources."}, "lpfc_mbuf_alloc": {"id": "lpfc_mbuf_alloc", "ground_truth": 0, "function": "lpfc_mbuf_alloc", "description": "Allocate mbuf from lpfc mbuf pool with dma mapping"}, "gfs2_withdrawn": {"id": "gfs2_withdrawn", "ground_truth": 0, "function": "gfs2_withdrawn", "description": "GFS2 file system withdrawal test"}, "be_cmd_set_fn_privileges": {"id": "be_cmd_set_fn_privileges", "ground_truth": 1, "function": "be_cmd_set_fn_privileges", "description": "Sets function privilege in BE command."}, "__prci_wrpll_unpack": {"id": "__prci_wrpll_unpack", "ground_truth": 0, "function": "__prci_wrpll_unpack", "description": "Unpacks wrpll configuration register into parameter value and populates wrpll configuration record. (19 tokens)"}, "apparmor_socket_bind": {"id": "apparmor_socket_bind", "ground_truth": 1, "function": "apparmor_socket_bind", "description": "Socket bind permission check in AppArmor"}, "udf_rename": {"id": "udf_rename", "ground_truth": 1, "function": "udf_rename", "description": "Allows renaming with permission check left to higher level routine"}, "nfs_init_fs_context": {"id": "nfs_init_fs_context", "ground_truth": 0, "function": "nfs_init_fs_context", "description": "Prepares NFS superblock config using attached namespaces."}, "ssctl_send_event": {"id": "ssctl_send_event", "ground_truth": 0, "function": "ssctl_send_event", "description": "Sends notification of remote SSR event."}, "netprio_prio": {"id": "netprio_prio", "ground_truth": 0, "function": "netprio_prio", "description": "Calculate netprio of cgroup net device pair under lock"}, "synchronize_net": {"id": "synchronize_net", "ground_truth": 0, "function": "synchronize_net", "description": "Synchronizes net with packet receive, waits for current packet, doesn't block future packets."}, "of_fdt_is_compatible": {"id": "of_fdt_is_compatible", "ground_truth": 0, "function": "of_fdt_is_compatible", "description": "Checks if given node is compatible with given blob."}, "b43_phy_shm_tssi_read": {"id": "b43_phy_shm_tssi_read", "ground_truth": 0, "function": "b43_phy_shm_tssi_read", "description": "Reads average TSSI from shared memory and returns value or error code."}, "tomoyo_check_acl": {"id": "tomoyo_check_acl", "ground_truth": 1, "function": "tomoyo_check_acl", "description": "Permission check function with read lock"}, "ext4_rename": {"id": "ext4_rename", "ground_truth": 1, "function": "ext4_rename", "description": "ext4_rename allows anyone to rename anything without permission checks."}, "tomoyo_check_unix_acl": {"id": "tomoyo_check_unix_acl", "ground_truth": 1, "function": "tomoyo_check_unix_acl", "description": "Unix ACL check for socket operation, return true/false"}, "smc_clc_msg_acc_conf_valid": {"id": "smc_clc_msg_acc_conf_valid", "ground_truth": 0, "function": "smc_clc_msg_acc_conf_valid", "description": "Validate SMC CLC message acceptance or confirmation"}, "read_persistent_wall_and_boot_offset": {"id": "read_persistent_wall_and_boot_offset", "ground_truth": 0, "function": "read_persistent_wall_and_boot_offset", "description": "Reads persistent wall and boot offset, clock and boot time for arch without dedicated boot time clock."}, "atl1_check_options": {"id": "atl1_check_options", "ground_truth": 0, "function": "atl1_check_options", "description": "Validates command line parameters, sets default values if necessary, and stores the final value in adapter structure."}, "copy_to_user_fromio": {"id": "copy_to_user_fromio", "ground_truth": 0, "function": "copy_to_user_fromio", "description": "Copy data from mmio to user space"}, "vgic_its_restore_collection_table": {"id": "vgic_its_restore_collection_table", "ground_truth": 0, "function": "vgic_its_restore_collection_table", "description": "Restores IT internal state from collection table in guest memory. Requires restoring baser register first."}, "ssp_register_consumer": {"id": "ssp_register_consumer", "ground_truth": 0, "function": "ssp_register_consumer", "description": "Registers IIO consumer in SSP framework."}, "cfg80211_check_combinations": {"id": "cfg80211_check_combinations", "ground_truth": 0, "function": "cfg80211_check_combinations", "description": "Interface combination check function for driver"}, "which_prom": {"id": "which_prom", "ground_truth": 0, "function": "which_prom", "description": "Detects DECstation's PROM and sets callback vector"}, "pids_can_fork": {"id": "pids_can_fork", "ground_truth": 0, "function": "pids_can_fork", "description": "pid can fork task cs check true in pid can fork"}, "__policy_find": {"id": "__policy_find", "ground_truth": 0, "function": "__policy_find", "description": "Find policy by name on list with RCU read lock"}, "ext4_inc_count": {"id": "ext4_inc_count", "ground_truth": 0, "function": "ext4_inc_count", "description": "Increments directory link count to avoid overflow"}, "ecc_is_pubkey_valid_partial": {"id": "ecc_is_pubkey_valid_partial", "ground_truth": 0, "function": "ecc_is_pubkey_valid_partial", "description": "Validate partial ECC public key according to SP800-56A. No check for correct elliptic curve subgroup."}, "mite_request_channel": {"id": "mite_request_channel", "ground_truth": 0, "function": "mite_request_channel", "description": "Request Mite DMA channel through Mite request channel."}, "sas_release_transport": {"id": "sas_release_transport", "ground_truth": 0, "function": "sas_release_transport", "description": "sa release transport template instance"}, "ice_flow_rem_entry": {"id": "ice_flow_rem_entry", "ground_truth": 0, "function": "ice_flow_rem_entry", "description": "Remove flow entry from ice flow."}, "badblocks_store": {"id": "badblocks_store", "ground_truth": 0, "function": "badblocks_store", "description": "Sysfs access to bad block list storage"}, "ice_devlink_nvm_snapshot": {"id": "ice_devlink_nvm_snapshot", "ground_truth": 0, "function": "ice_devlink_nvm_snapshot", "description": "Capture snapshot of shadow RAM content in response to devlink cmd region trigger"}, "aa_file_perm": {"id": "aa_file_perm", "ground_truth": 1, "function": "aa_file_perm", "description": "Permission revalidation check audit for file"}, "generic_permission": {"id": "generic_permission", "ground_truth": 1, "function": "generic_permission", "description": "Checks file system access rights using fsuid, allows arbitrary permission, RCU walk aware, returns echild if RCU walk request cannot be satisfied."}, "ath5k_ani_phy_error_report": {"id": "ath5k_ani_phy_error_report", "ground_truth": 0, "function": "ath5k_ani_phy_error_report", "description": "Report phy errors for older hardware without counter on frame basis."}, "nf_unregister_sockopt": {"id": "nf_unregister_sockopt", "ground_truth": 1, "function": "nf_unregister_sockopt", "description": "Unregister sockopt functions for get/setsockopt range, check permission."}, "tomoyo_socket_sendmsg": {"id": "tomoyo_socket_sendmsg", "ground_truth": 1, "function": "tomoyo_socket_sendmsg", "description": "Permission check for socket sendmsg, returns negative value on failure."}, "fm10k_clean_all_rx_rings": {"id": "fm10k_clean_all_rx_rings", "ground_truth": 0, "function": "fm10k_clean_all_rx_rings", "description": "Free all RX buffers in FM10K's RX rings for all queues."}, "vmw_fifo_flush": {"id": "vmw_fifo_flush", "ground_truth": 0, "function": "vmw_fifo_flush", "description": "Flushes buffered commands and ensures processing starts."}, "has_ns_capability_noaudit": {"id": "has_ns_capability_noaudit", "ground_truth": 1, "function": "has_ns_capability_noaudit", "description": "Checks if task has unaudited capability for specific user namespace."}, "initiate_cifs_search": {"id": "initiate_cifs_search", "ground_truth": 0, "function": "initiate_cifs_search", "description": "Initiates CIFS search for symlink reparse path"}, "intel_calculate_wm": {"id": "intel_calculate_wm", "ground_truth": 0, "function": "intel_calculate_wm", "description": "Calculates display plane's watermark level based on FIFO size and pixel clock rate. Caller must provide correct parameters."}, "ima_match_rules": {"id": "ima_match_rules", "ground_truth": 0, "function": "ima_match_rules", "description": "Determines if inode matches policy rule, returns true on match, false on failure."}, "workqueue_select_cpu_near": {"id": "workqueue_select_cpu_near", "ground_truth": 0, "function": "workqueue_select_cpu_near", "description": "Select CPU based on NUMA node, find random CPU, schedule work"}, "qlogicfas408_detect": {"id": "qlogicfas408_detect", "ground_truth": 0, "function": "qlogicfas408_detect", "description": "Detects QLogic FA408 HBA card"}, "tomoyo_path_perm": {"id": "tomoyo_path_perm", "ground_truth": 1, "function": "tomoyo_path_perm", "description": "Permission check for file operations, returns negative value on failure."}, "coda_mpeg2_parse_headers": {"id": "coda_mpeg2_parse_headers", "ground_truth": 0, "function": "coda_mpeg2_parse_headers", "description": "Check MPEG2 buffer for sequence header and extensions"}, "rpc_xprt_switch_add_xprt": {"id": "rpc_xprt_switch_add_xprt", "ground_truth": 0, "function": "rpc_xprt_switch_add_xprt", "description": "Add new RPC xprt to xprt switch list"}, "gfs2_permission": {"id": "gfs2_permission", "ground_truth": 1, "function": "gfs2_permission", "description": "Checks and locks glock for gfs2 permission."}, "netdev_boot_setup_add": {"id": "netdev_boot_setup_add", "ground_truth": 0, "function": "netdev_boot_setup_add", "description": "Add new netdev boot setup entry"}, "nilfs_read_summary_info": {"id": "nilfs_read_summary_info", "ground_truth": 0, "function": "nilfs_read_summary_info", "description": "Reads summary block item from log"}, "lookup_mnt": {"id": "lookup_mnt", "ground_truth": 0, "function": "lookup_mnt", "description": "Find first child mount at given path chronologically"}, "cec_msg_init": {"id": "cec_msg_init", "ground_truth": 0, "function": "cec_msg_init", "description": "Initializes CEC message structure with zeroed fields, sets len to poll message, and fills initiator and destination."}, "key_permission": {"id": "key_permission", "ground_truth": 1, "function": "key_permission", "description": "Checks if key permission is granted for desired use."}, "ir_sharp_encode": {"id": "ir_sharp_encode", "ground_truth": 0, "function": "ir_sharp_encode", "description": "Encode raw event data into compressed binary format."}, "is_vsyscall_vaddr": {"id": "is_vsyscall_vaddr", "ground_truth": 1, "function": "is_vsyscall_vaddr", "description": "Checks if vsyscall vaddr has user accessible permission."}, "drm_sched_entity_is_idle": {"id": "drm_sched_entity_is_idle", "ground_truth": 0, "function": "drm_sched_entity_is_idle", "description": "Checks if DRM scheduling entity is idle. Returns true if no unscheduled jobs."}, "radeon_atpx_detect": {"id": "radeon_atpx_detect", "ground_truth": 0, "function": "radeon_atpx_detect", "description": "Detects if there is a PX system, returns true if yes, false if not."}, "i40iw_get_hw_addr": {"id": "i40iw_get_hw_addr", "ground_truth": 0, "function": "i40iw_get_hw_addr", "description": "Returns hardware address in i40iw."}, "typec_altmode_get_plug": {"id": "typec_altmode_get_plug", "ground_truth": 0, "function": "typec_altmode_get_plug", "description": "Find and increment reference count for cable plug alternate mode device"}, "smb311_posix_query_path_info": {"id": "smb311_posix_query_path_info", "ground_truth": 0, "function": "smb311_posix_query_path_info", "description": "Query path info using SMB311 POSIX extension."}, "pvrdma_modify_qp": {"id": "pvrdma_modify_qp", "ground_truth": 0, "function": "pvrdma_modify_qp", "description": "Modify queue pair attribute, return success or errno."}, "dp_ctrl_host_deinit": {"id": "dp_ctrl_host_deinit", "ground_truth": 0, "function": "dp_ctrl_host_deinit", "description": "Uninitializes DP controller and its resources."}, "sdma_v5_0_init_microcode": {"id": "sdma_v5_0_init_microcode", "ground_truth": 0, "function": "sdma_v5_0_init_microcode", "description": "Loads SDMA v5 microcode image from disk to driver. Returns success/error."}, "cachefiles_get_security_ID": {"id": "cachefiles_get_security_ID", "ground_truth": 1, "function": "cachefiles_get_security_ID", "description": "Determines cache access security context in kernel."}, "ixgbe_reset_cs4227": {"id": "ixgbe_reset_cs4227", "ground_truth": 0, "function": "ixgbe_reset_cs4227", "description": "Resets cs4227 using port expander, assumes semaphore acquired."}, "xdr_encode_current_server_time": {"id": "xdr_encode_current_server_time", "ground_truth": 1, "function": "xdr_encode_current_server_time", "description": "Encode server time with permission check for NFS touch program."}, "doc_write_page_putbytes": {"id": "doc_write_page_putbytes", "ground_truth": 0, "function": "doc_write_page_putbytes", "description": "Writes byte into prepared page"}, "fwcap_to_fwspeed": {"id": "fwcap_to_fwspeed", "ground_truth": 0, "function": "fwcap_to_fwspeed", "description": "Returns highest port speed from advertised capability."}, "tomoyo_poll_control": {"id": "tomoyo_poll_control", "ground_truth": 0, "function": "tomoyo_poll_control", "description": "Polls for sys kernel security using tomoyo interface, returns epoll events if ready to read/write, otherwise epollout."}, "sb_permission": {"id": "sb_permission", "ground_truth": 1, "function": "sb_permission", "description": "Superblock level permission check for file system and inode specific permission check separation."}, "hash_for_each_possible_rcu_notrace": {"id": "hash_for_each_possible_rcu_notrace", "ground_truth": 0, "function": "hash_for_each_possible_rcu_notrace", "description": "Hash for possible objects in RCU hashtable without debugging/tracing"}, "file_lookup": {"id": "file_lookup", "ground_truth": 0, "function": "file_lookup", "description": "Lookup file in list and add if not present"}, "fdt_del_mem_rsv": {"id": "fdt_del_mem_rsv", "ground_truth": 0, "function": "fdt_del_mem_rsv", "description": "Remove memory reserve map entry, delete data from reservation table, change index of some entry."}, "iput_final": {"id": "iput_final", "ground_truth": 0, "function": "iput_final", "description": "Finalize inode eviction and cache retention based on file status"}, "system_trusted_keyring_init": {"id": "system_trusted_keyring_init", "ground_truth": 0, "function": "system_trusted_keyring_init", "description": "Creates trusted keyrings for system."}, "user_describe": {"id": "user_describe", "ground_truth": 0, "function": "user_describe", "description": "User key description function"}, "regulator_map_voltage_linear": {"id": "regulator_map_voltage_linear", "ground_truth": 0, "function": "regulator_map_voltage_linear", "description": "Maps voltage linearly with minimum and step values for regulator description."}, "iavf_is_non_eop": {"id": "iavf_is_non_eop", "ground_truth": 0, "function": "iavf_is_non_eop", "description": "Updates buffer status, returns true for non-eop."}, "ixgbe_start_mac_link_82599": {"id": "ixgbe_start_mac_link_82599", "ground_truth": 0, "function": "ixgbe_start_mac_link_82599", "description": "Starts and sets up MAC link for ixgbe 82599."}, "__nla_put_64bit": {"id": "__nla_put_64bit", "ground_truth": 0, "function": "__nla_put_64bit", "description": "nla_put_64bit adds netlink attribute to skb"}, "dfs_cache_add_vol": {"id": "dfs_cache_add_vol", "ground_truth": 0, "function": "dfs_cache_add_vol", "description": "Add CIFS volume to DFS cache for refresh worker, return 0 if successful."}, "has_capability": {"id": "has_capability", "ground_truth": 1, "function": "has_capability", "description": "Check task's capability for initial user namespace"}, "lpfc_move_xri_pbl_to_pvt": {"id": "lpfc_move_xri_pbl_to_pvt", "ground_truth": 0, "function": "lpfc_move_xri_pbl_to_pvt", "description": "Moves XRI from public to private pool, searches for free common buffers in public pool with round robin method, moves batch of free common buffers to private pool on HWQID, may move less than count XRI if not enough in public pool."}, "vmw_user_bo_verify_access": {"id": "vmw_user_bo_verify_access", "ground_truth": 1, "function": "vmw_user_bo_verify_access", "description": "Verifies access permission on buffer object for VMW user."}, "bdx_rx_init": {"id": "bdx_rx_init", "ground_truth": 0, "function": "bdx_rx_init", "description": "Initialize RX resources, create FIFOs, preallocate skb, assume disabled HW RX, grouped funcs for cache, smaller rxd FIFO, dropped packets cheaper for high load"}, "dce_v6_0_hpd_fini": {"id": "dce_v6_0_hpd_fini", "ground_truth": 0, "function": "dce_v6_0_hpd_fini", "description": "HPD teardown callback function for DCE v6.0"}, "tomoyo_mount_acl": {"id": "tomoyo_mount_acl", "ground_truth": 1, "function": "tomoyo_mount_acl", "description": "Permission check for mount operation, returns negative value on failure, requires tomoyo read lock"}, "bdx_open": {"id": "bdx_open", "ground_truth": 0, "function": "bdx_open", "description": "bdx_open: called on network interface activation, returns success/negative value on failure. Allocates resources for transmit/receive, registers interrupt handler, starts watchdog timer, notifies stack of readiness."}, "brcms_c_rateset_filter": {"id": "brcms_c_rateset_filter", "ground_truth": 0, "function": "brcms_c_rateset_filter", "description": "Copy and filter rateset, select basic/cck/ofdm rates, copy rate with mask."}, "port_init_cnt": {"id": "port_init_cnt", "ground_truth": 0, "function": "port_init_cnt", "description": "Initializes MIB counter to zero if hardware cannot after reset."}, "tomoyo_execute_permission": {"id": "tomoyo_execute_permission", "ground_truth": 1, "function": "tomoyo_execute_permission", "description": "Permission check for execute operation, returns negative value on failure, requires tomoyo read lock"}, "clk_bulk_get_optional": {"id": "clk_bulk_get_optional", "ground_truth": 0, "function": "clk_bulk_get_optional", "description": "Obtains optional clock references, returns null for undetermined producers"}, "NBPF_SLAVE_RQ_HIGH": {"id": "NBPF_SLAVE_RQ_HIGH", "ground_truth": 0, "function": "NBPF_SLAVE_RQ_HIGH", "description": "nbpf slave rq high cell, second int defines dma flag"}, "smack_unix_may_send": {"id": "smack_unix_may_send", "ground_truth": 0, "function": "smack_unix_may_send", "description": "Checks if subject with sock's smack can access object with other's smack."}, "map_winctx_mmio_bars": {"id": "map_winctx_mmio_bars", "ground_truth": 0, "function": "map_winctx_mmio_bars", "description": "Maps MMIO bars for hypervisor and user window contexts, saving mapped kernel address in window."}, "amdtp_domain_init": {"id": "amdtp_domain_init", "ground_truth": 0, "function": "amdtp_domain_init", "description": "Initialize amdtp domain structure"}, "ocrdma_build_ud_hdr": {"id": "ocrdma_build_ud_hdr", "ground_truth": 0, "function": "ocrdma_build_ud_hdr", "description": "Builds UD header for unprivileged verb."}, "ice_force_phys_link_state": {"id": "ice_force_phys_link_state", "ground_truth": 0, "function": "ice_force_phys_link_state", "description": "Force physical link state based on hardware capability, trigger link event, return success or failure"}, "tomoyo_socket_bind": {"id": "tomoyo_socket_bind", "ground_truth": 1, "function": "tomoyo_socket_bind", "description": "Permission check for socket bind, returns negative value on failure"}, "igc_configure_rx_ring": {"id": "igc_configure_rx_ring", "ground_truth": 0, "function": "igc_configure_rx_ring", "description": "Configure receive ring for MAC after reset"}, "cmdq_ceq_handler": {"id": "cmdq_ceq_handler", "ground_truth": 0, "function": "cmdq_ceq_handler", "description": "cmdq completion event handler"}, "__nla_reserve_64bit": {"id": "__nla_reserve_64bit", "ground_truth": 0, "function": "__nla_reserve_64bit", "description": "Reserves 64-bit space for attribute on skb, adds header to socket buffer, ensures bit-aligned nla data area, caller responsible for tailroom."}, "r100_hpd_init": {"id": "r100_hpd_init", "ground_truth": 0, "function": "r100_hpd_init", "description": "Initialize HPD pin for R100/R4XX card with polarity and interrupt"}, "hash_for_each_safe": {"id": "hash_for_each_safe", "ground_truth": 0, "function": "hash_for_each_safe", "description": "Iterate safely over a hashtable, protecting against removal of entries."}, "scsw_cmd_is_valid_pfch": {"id": "scsw_cmd_is_valid_pfch", "ground_truth": 0, "function": "scsw_cmd_is_valid_pfch", "description": "Check validity of scsw cmd pfch field, return non-zero if valid"}, "xprt_get": {"id": "xprt_get", "ground_truth": 0, "function": "xprt_get", "description": "Returns reference to RPC transport."}, "tvp514x_s_frame_interval": {"id": "tvp514x_s_frame_interval", "ground_truth": 0, "function": "tvp514x_s_frame_interval", "description": "Configures tvp514x frame interval with input parameter or returns error code."}, "mpt3sas_device_remove_by_sas_address": {"id": "mpt3sas_device_remove_by_sas_address", "ground_truth": 0, "function": "mpt3sas_device_remove_by_sas_address", "description": "Remove device object by SAS address"}, "tomoyo_environ": {"id": "tomoyo_environ", "ground_truth": 1, "function": "tomoyo_environ", "description": "Permission check for env variable name, returns negative value on failure."}, "reset_control_reset": {"id": "reset_control_reset", "ground_truth": 0, "function": "reset_control_reset", "description": "Reset controlled device on shared line, one-time pulse, null optional"}, "set_segfault": {"id": "set_segfault", "ground_truth": 0, "function": "set_segfault", "description": "Process info set to signal segfault on access error"}, "mei_me_cl_ver": {"id": "mei_me_cl_ver", "ground_truth": 0, "function": "mei_me_cl_ver", "description": "Returns client protocol version for MEI ME CL VER."}, "procmpt_destroy": {"id": "procmpt_destroy", "ground_truth": 0, "function": "procmpt_destroy", "description": "Destroys procmpt and tears down mpt procfs entry."}, "qib_7322_init_hwerrors": {"id": "qib_7322_init_hwerrors", "ground_truth": 0, "function": "qib_7322_init_hwerrors", "description": "Enables hardware error after initialization and clearing error bits."}, "sync_Arb_IDs": {"id": "sync_Arb_IDs", "ground_truth": 0, "function": "sync_Arb_IDs", "description": "Synchronizes APIC bus arbitration ID."}, "parport_unregister_device": {"id": "parport_unregister_device", "ground_truth": 0, "function": "parport_unregister_device", "description": "Deregisters device on parallel port"}, "clear_nlink": {"id": "clear_nlink", "ground_truth": 0, "function": "clear_nlink", "description": "Clears nlink to zero for an inode, a low-level filesystem helper."}, "gobj_to_pad": {"id": "gobj_to_pad", "ground_truth": 0, "function": "gobj_to_pad", "description": "Converts gobj to medium pad pointer."}, "sk_net_capable": {"id": "sk_net_capable", "ground_truth": 1, "function": "sk_net_capable", "description": "Test socket opener's and current process's network namespace capability for sk_net_capable function."}, "snd_dma_alloc_pages_fallback": {"id": "snd_dma_alloc_pages_fallback", "ground_truth": 0, "function": "snd_dma_alloc_pages_fallback", "description": "Allocates buffer with fallback, reduces size if necessary."}, "iowait_get_tid_work": {"id": "iowait_get_tid_work", "ground_truth": 0, "function": "iowait_get_tid_work", "description": "Returns iowait work for specified tid."}, "napi_rx_handler": {"id": "napi_rx_handler", "ground_truth": 0, "function": "napi_rx_handler", "description": "napi rx handler for rx processing"}, "img_ir_decoder_preprocess": {"id": "img_ir_decoder_preprocess", "ground_truth": 0, "function": "img_ir_decoder_preprocess", "description": "Preprocesses img ir decoder timing and validates symbol range"}, "ns_capable": {"id": "ns_capable", "ground_truth": 1, "function": "ns_capable", "description": "Determines if current task has superior capability, returns true if available, false if not. Sets superpriv on task if capability available."}, "lpfc_bg_setup_bpl_prot": {"id": "lpfc_bg_setup_bpl_prot", "ground_truth": 0, "function": "lpfc_bg_setup_bpl_prot", "description": "Sets up blockguard BPL with protection data for LPFC PG type DIF. Creates BPL buffer list for protection group, separating DIFs from data. HBA can place DIFs in outgoing stream for read operation. Buffer list consists of one or more protection groups. Returns number of BDEs added to BPL."}, "avc_has_perm": {"id": "avc_has_perm", "ground_truth": 1, "function": "avc_has_perm", "description": "Check permission and audit based on sid pair, tclass, and cache. Return granted or denied permission, or error."}, "i2c_smbus_write_byte": {"id": "i2c_smbus_write_byte", "ground_truth": 0, "function": "i2c_smbus_write_byte", "description": "SMBus write byte protocol execution, returns errno or success"}, "keyctl_get_keyring_ID": {"id": "keyctl_get_keyring_ID", "ground_truth": 1, "function": "keyctl_get_keyring_ID", "description": "Returns ID of specified process keyring with search permission."}, "radeon_fence_seq_signaled": {"id": "radeon_fence_seq_signaled", "ground_truth": 0, "function": "radeon_fence_seq_signaled", "description": "Check if fence sequence has signaled, return true or false."}, "async_gen_syndrome": {"id": "async_gen_syndrome", "ground_truth": 0, "function": "async_gen_syndrome", "description": "Asynchronously calculates RAID6 syndrome, assumes GF field with primitive polynomial and generator, caller can omit either block or disk, uses temporary buffer of page size, accounts for both destination and source buffer, replaces null buffer with RAID6 zero page."}, "fsl_dma_free_descriptor": {"id": "fsl_dma_free_descriptor", "ground_truth": 0, "function": "fsl_dma_free_descriptor", "description": "Free DMA descriptor from channel's pool"}, "tep_find_field": {"id": "tep_find_field", "ground_truth": 0, "function": "tep_find_field", "description": "Find non-common field by name, exclude common fields."}, "rio_pw_enable": {"id": "rio_pw_enable", "ground_truth": 0, "function": "rio_pw_enable", "description": "Enables/disables port write handling by master port."}, "sys_rt_sigtimedwait": {"id": "sys_rt_sigtimedwait", "ground_truth": 0, "function": "sys_rt_sigtimedwait", "description": "Synchronous wait for queued signal in uthese"}, "hfi1_get_rc_ohdr": {"id": "hfi1_get_rc_ohdr", "ground_truth": 0, "function": "hfi1_get_rc_ohdr", "description": "Retrieve extended header from OPA header using hfi1_get_rc_ohdr."}, "simple_strtol": {"id": "simple_strtol", "ground_truth": 0, "function": "simple_strtol", "description": "Converts string to signed long, use kstrtol instead."}, "__ppc440spe_adma_slot_cleanup": {"id": "__ppc440spe_adma_slot_cleanup", "ground_truth": 0, "function": "__ppc440spe_adma_slot_cleanup", "description": "ppc440spe adma slot cleanup, clean up routine, channel cdbs list, descriptor processing, callback, slot freed"}, "mpc52xx_lpbfifo_bcom_irq": {"id": "mpc52xx_lpbfifo_bcom_irq", "ground_truth": 0, "function": "mpc52xx_lpbfifo_bcom_irq", "description": "IRQ handler for receiving data in MPC52xx LPBFIFO BCOM task."}, "ice_unicast_mac_exists": {"id": "ice_unicast_mac_exists", "ground_truth": 0, "function": "ice_unicast_mac_exists", "description": "Check if unicast MAC exists on switch, return true on first match, else false."}, "tomoyo_check_env_acl": {"id": "tomoyo_check_env_acl", "ground_truth": 1, "function": "tomoyo_check_env_acl", "description": "Check environment variable ACL permission, return true if granted, false otherwise."}, "do_unhandled": {"id": "do_unhandled", "ground_truth": 0, "function": "do_unhandled", "description": "Unhandled exception kills task/panics in kernel"}, "i40e_tx_timeout": {"id": "i40e_tx_timeout", "ground_truth": 0, "function": "i40e_tx_timeout", "description": "Responds to i40e tx timeout, initiates full device reset."}, "ixgbe_dma_sync_frag": {"id": "ixgbe_dma_sync_frag", "ground_truth": 0, "function": "ixgbe_dma_sync_frag", "description": "Performs DMA sync for first skb frag. Basic sync for first frag. First frag cannot be unmapped until end of packet descriptor."}, "iscsi_sw_tcp_xmit_qlen": {"id": "iscsi_sw_tcp_xmit_qlen", "ground_truth": 0, "function": "iscsi_sw_tcp_xmit_qlen", "description": "Returns queued bytes for iSCSI TCP xmit"}, "may_delete": {"id": "may_delete", "ground_truth": 1, "function": "may_delete", "description": "Function checks if link can be deleted from directory"}, "usb_control_msg_recv": {"id": "usb_control_msg_recv", "ground_truth": 0, "function": "usb_control_msg_recv", "description": "Sends USB control message, waits for completion, don't use in interrupt context, use USB submit urb for async messages, data pointer can be on stack, whole message must be properly received for success."}, "read_outbnd_queue_table": {"id": "read_outbnd_queue_table", "ground_truth": 0, "function": "read_outbnd_queue_table", "description": "Reads and saves outbound queue table."}, "overlay_get_target_phandle": {"id": "overlay_get_target_phandle", "ground_truth": 0, "function": "overlay_get_target_phandle", "description": "Retrieves target phandle of overlay fragment using phandle target property."}, "check_mode": {"id": "check_mode", "ground_truth": 1, "function": "check_mode", "description": "Verify tuner support for requested mode, return einval if not supported. Needed for separate radio tuner boards."}, "acl_permission_check": {"id": "acl_permission_check", "ground_truth": 1, "function": "acl_permission_check", "description": "Checks Unix permissions and POSIX ACLs, including may not block bit for RCU walking."}, "iavf_print_link_message": {"id": "iavf_print_link_message", "ground_truth": 0, "function": "iavf_print_link_message", "description": "Prints link status log message for link up/down."}, "gaudi_init_security": {"id": "gaudi_init_security", "ground_truth": 1, "function": "gaudi_init_security", "description": "Initialize security model with range and protection per register"}, "ice_fltr_remove_vlan_list": {"id": "ice_fltr_remove_vlan_list", "ground_truth": 0, "function": "ice_fltr_remove_vlan_list", "description": "Remove list of VLAN filter in ICE filter"}, "blk_queue_flag_test_and_set": {"id": "blk_queue_flag_test_and_set", "ground_truth": 0, "function": "blk_queue_flag_test_and_set", "description": "Atomic test and set for queue flag, returns previous value."}, "igb_set_fc_watermarks": {"id": "igb_set_fc_watermarks", "ground_truth": 0, "function": "igb_set_fc_watermarks", "description": "Sets flow control high and low watermarks in igb."}, "mei_cl_bus_rescan": {"id": "mei_cl_bus_rescan", "ground_truth": 0, "function": "mei_cl_bus_rescan", "description": "Scan and add eligible clients to device list in MEI CL bus rescan."}, "mpt3sas_transport_port_add": {"id": "mpt3sas_transport_port_add", "ground_truth": 0, "function": "mpt3sas_transport_port_add", "description": "Inserts new port object to sa node's port list"}, "kauditd_printk_skb": {"id": "kauditd_printk_skb", "ground_truth": 0, "function": "kauditd_printk_skb", "description": "Print audit record to ring buffer via printk if connection fails."}, "nfs3_decode_dirent": {"id": "nfs3_decode_dirent", "ground_truth": 0, "function": "nfs3_decode_dirent", "description": "Decode nfsv3 directory entry, return 0 if successful, negative errno if not. Not used during readdir reply decoding, invoked on getdents system call."}, "mpt3sas_base_initialize_callback_handler": {"id": "mpt3sas_base_initialize_callback_handler", "ground_truth": 0, "function": "mpt3sas_base_initialize_callback_handler", "description": "Initializes interrupt callback handler in mpt3sas."}, "hibernate_quiet_exec": {"id": "hibernate_quiet_exec", "ground_truth": 0, "function": "hibernate_quiet_exec", "description": "Executes hibernate quietly with frozen device, returns value or error code."}, "rt2x00queue_free_skb": {"id": "rt2x00queue_free_skb", "ground_truth": 0, "function": "rt2x00queue_free_skb", "description": "Function summary: Free skb in rt2x00queue."}, "xs_udp_data_read_skb": {"id": "xs_udp_data_read_skb", "ground_truth": 0, "function": "xs_udp_data_read_skb", "description": "UDP data read callback for socket"}, "clear_bit_unlock": {"id": "clear_bit_unlock", "ground_truth": 0, "function": "clear_bit_unlock", "description": "Atomic memory barrier for unlocking by clearing bit in memory"}, "list_next_entry": {"id": "list_next_entry", "ground_truth": 0, "function": "list_next_entry", "description": "Get next element in list"}, "tomoyo_path_permission": {"id": "tomoyo_path_permission", "ground_truth": 1, "function": "tomoyo_path_permission", "description": "Permission check for single path operation, returns negative value on failure, requires tomoyo read lock."}, "nfs_pgio_prepare": {"id": "nfs_pgio_prepare", "ground_truth": 0, "function": "nfs_pgio_prepare", "description": "Prepares pageio header for network transmission."}, "stm32_adc_conf_scan_seq": {"id": "stm32_adc_conf_scan_seq", "ground_truth": 0, "function": "stm32_adc_conf_scan_seq", "description": "Configures ADC scan sequence for selected channels, applies sampling time, and programs sequence length."}, "ia64_flush_fph": {"id": "ia64_flush_fph", "ground_truth": 0, "function": "ia64_flush_fph", "description": "Flushes modified fph data back to task thread in IA64 architecture."}, "ishtp_get_hid_descriptor": {"id": "ishtp_get_hid_descriptor", "ground_truth": 0, "function": "ishtp_get_hid_descriptor", "description": "Helper function to get HID descriptor from firmware"}, "spmi_command_reset": {"id": "spmi_command_reset", "ground_truth": 0, "function": "spmi_command_reset", "description": "Sends reset command to specified slave, initializes and resets registers, enters startup state."}, "ixgbe_watchdog_link_is_down": {"id": "ixgbe_watchdog_link_is_down", "ground_truth": 0, "function": "ixgbe_watchdog_link_is_down", "description": "Update netif carrier status and print link down message"}, "ne_enclave_ioctl": {"id": "ne_enclave_ioctl", "ground_truth": 0, "function": "ne_enclave_ioctl", "description": "Enclave file provides ne_enclave_ioctl ioctl function."}, "nvec_tx_completed": {"id": "nvec_tx_completed", "ground_truth": 0, "function": "nvec_tx_completed", "description": "Completes current transfer upon receiving end trans on tx transfer."}, "tomoyo_socket_connect": {"id": "tomoyo_socket_connect", "ground_truth": 1, "function": "tomoyo_socket_connect", "description": "Permission check for socket connect, returns negative value on failure."}, "ftrace_graph_get_ret_stack": {"id": "ftrace_graph_get_ret_stack", "ground_truth": 0, "function": "ftrace_graph_get_ret_stack", "description": "Returns shadow stack entry for call graph index"}, "check_entry": {"id": "check_entry", "ground_truth": 1, "function": "check_entry", "description": "Permission check for Tomoyo ACL entry"}, "wl3501_reset": {"id": "wl3501_reset", "ground_truth": 0, "function": "wl3501_reset", "description": "Resets wl3501, similar to open/close but avoids freeing IRQ while driver is running. (19 tokens)"}, "parport_write": {"id": "parport_write", "ground_truth": 0, "function": "parport_write", "description": "Write block of data to parallel port"}, "ima_appraise_signature": {"id": "ima_appraise_signature", "ground_truth": 0, "function": "ima_appraise_signature", "description": "IMA appraises signature for trusted keys to prevent loading of additional keys"}, "sht15_temp_show": {"id": "sht15_temp_show", "ground_truth": 0, "function": "sht15_temp_show", "description": "Displays SHT15 temperature measurement in sysfs on read access. Returns byte count written to buffer or negative errno on error."}, "fc_lport_config": {"id": "fc_lport_config", "ground_truth": 0, "function": "fc_lport_config", "description": "Configure FC LPort using fc_lport_config."}, "smack_privileged_cred": {"id": "smack_privileged_cred", "ground_truth": 1, "function": "smack_privileged_cred", "description": "Checks if task is allowed to be privileged based on privilege requirements and onlycap rule"}, "set_key_size_aes": {"id": "set_key_size_aes", "ground_truth": 0, "function": "set_key_size_aes", "description": "Set AES key size for encryption"}, "drm_ioctl_flags": {"id": "drm_ioctl_flags", "ground_truth": 1, "function": "drm_ioctl_flags", "description": "drm ioctl flag check for core ioctl, used only by vmwgfx driver, not for any other driver"}, "drm_prime_gem_destroy": {"id": "drm_prime_gem_destroy", "ground_truth": 0, "function": "drm_prime_gem_destroy", "description": "Function to clean up imported gem object after use in DRM prime gem import, used for image overlay on display pipeline. Plane specifies image cropping, scaling, and placement on visible area, with additional properties like rotation or position stored in drm plane state. Driver should provide one primary plane per crtc."}, "mtk_thermal_put_bank": {"id": "mtk_thermal_put_bank", "ground_truth": 0, "function": "mtk_thermal_put_bank", "description": "Release previously taken thermal bank with mtk_thermal_get_bank."}, "nand_check_erased_ecc_chunk": {"id": "nand_check_erased_ecc_chunk", "ground_truth": 0, "function": "nand_check_erased_ecc_chunk", "description": "Checks if an ECC chunk is erased, returns bitflips or error code, works on pre-defined block size, checks associated ECC data, optional extra OOB data."}, "xfs_ioctl_setattr_get_trans": {"id": "xfs_ioctl_setattr_get_trans", "ground_truth": 1, "function": "xfs_ioctl_setattr_get_trans", "description": "Sets up transaction structure for setattr operation, checks permission, returns clean transaction and locked inode on success, error on failure."}, "do_early_param": {"id": "do_early_param", "ground_truth": 0, "function": "do_early_param", "description": "Early parameter check for function parameters"}, "igc_ptp_get_ts_config": {"id": "igc_ptp_get_ts_config", "ground_truth": 0, "function": "igc_ptp_get_ts_config", "description": "Returns hardware time stamping config setting to user."}, "alarm_cancel": {"id": "alarm_cancel", "ground_truth": 0, "function": "alarm_cancel", "description": "Cancel alarm timer spin until done, return if canceled or not active."}, "common_perm_dir_dentry": {"id": "common_perm_dir_dentry", "ground_truth": 1, "function": "common_perm_dir_dentry", "description": "Wrapper for directory dentry's common permission."}, "spufs_coredump_extra_notes_write": {"id": "spufs_coredump_extra_notes_write", "ground_truth": 0, "function": "spufs_coredump_extra_notes_write", "description": "Writes SPU ELF note in coredump callback."}, "btrfs_may_delete": {"id": "btrfs_may_delete", "ground_truth": 1, "function": "btrfs_may_delete", "description": "Checks permissions and conditions before deleting files in btrfs"}, "scsi_device_resume": {"id": "scsi_device_resume", "ground_truth": 0, "function": "scsi_device_resume", "description": "Restart user command on quiesced SCSI device"}, "pch_gbe_tx_queue": {"id": "pch_gbe_tx_queue", "ground_truth": 0, "function": "pch_gbe_tx_queue", "description": "Transmission data queuing function for PCH GBE"}, "iort_dev_find_its_id": {"id": "iort_dev_find_its_id", "ground_truth": 0, "function": "iort_dev_find_its_id", "description": "Finds device ID for IORT device."}, "lpfc_sli4_nvmet_xri_aborted": {"id": "lpfc_sli4_nvmet_xri_aborted", "ground_truth": 0, "function": "lpfc_sli4_nvmet_xri_aborted", "description": "Fast path process for NVMET XRI abort in LPFC SLI4"}, "tomoyo_socket_bind_permission": {"id": "tomoyo_socket_bind_permission", "ground_truth": 1, "function": "tomoyo_socket_bind_permission", "description": "Permission check for socket bind, returns negative value on failure"}, "kvm_pgtable_stage2_is_young": {"id": "kvm_pgtable_stage2_is_young", "ground_truth": 0, "function": "kvm_pgtable_stage2_is_young", "description": "kvm pgtable stage2 access flag test, ignores offset within page"}, "pnp_remove_card_device": {"id": "pnp_remove_card_device", "ground_truth": 0, "function": "pnp_remove_card_device", "description": "Remove device from specified card using pnp"}, "of_map_id": {"id": "of_map_id", "ground_truth": 0, "function": "of_map_id", "description": "Translate ID through downstream mapping, find platform/target device based on IOMMU and MSI map binding. Null values allowed for either target or ID. Matches only target device node if non-null, else first matching target phandle."}, "ssb_extif_gpio_out": {"id": "ssb_extif_gpio_out", "ground_truth": 0, "function": "ssb_extif_gpio_out", "description": "Access SSB extif GPIO pins."}, "sk_assign_eexist": {"id": "sk_assign_eexist", "ground_truth": 0, "function": "sk_assign_eexist", "description": "Check if socket already selected, return eexist."}, "proc_tid_comm_permission": {"id": "proc_tid_comm_permission", "ground_truth": 1, "function": "proc_tid_comm_permission", "description": "Allows access to proc task comm for same thread group."}, "ubifs_return_leb": {"id": "ubifs_return_leb", "ground_truth": 0, "function": "ubifs_return_leb", "description": "Returns logical eraseblock to lprops, clears taken flag, returns 0 on success and negative error code on failure."}, "update_nodemask": {"id": "update_nodemask", "ground_truth": 0, "function": "update_nodemask", "description": "Update nodemask for memory placement change request, validate and update cpusets mem allowed, rebind task mempolicy and vma mempolicies, migrate task page if marked amemory, with mutex and callback lock, scan tasklist and rebind mempolicies for tasks in cpuset."}, "usb_interrupt_msg": {"id": "usb_interrupt_msg", "ground_truth": 0, "function": "usb_interrupt_msg", "description": "Builds and sends USB interrupt message, waits for completion or timeout. Not for use in interrupt context. Use USB submit urb for asynchronous or interrupt context messages. Disconnect method must wait for completion. Cannot cancel request."}, "dwc3_event_buffers_setup": {"id": "dwc3_event_buffers_setup", "ground_truth": 0, "function": "dwc3_event_buffers_setup", "description": "Setup allocated event buffer, return success or negative errno."}, "netlbl_calipso_remove_cb": {"id": "netlbl_calipso_remove_cb", "ground_truth": 0, "function": "netlbl_calipso_remove_cb", "description": "Callback function to remove LSM domain map entry associated with Calipso DOI. Returns 0 on success, negative value on failure."}, "gru_ktest": {"id": "gru_ktest", "ground_truth": 0, "function": "gru_ktest", "description": "Debugging hook for kernel test of GRU driver"}, "cap_ptrace_access_check": {"id": "cap_ptrace_access_check", "ground_truth": 1, "function": "cap_ptrace_access_check", "description": "Determines if process can access another process, grants or denies permission."}, "pte_exec": {"id": "pte_exec", "ground_truth": 0, "function": "pte_exec", "description": "pte exec is marked executable"}, "nla_get_in_addr": {"id": "nla_get_in_addr", "ground_truth": 0, "function": "nla_get_in_addr", "description": "Returns IPv4 address attribute payload."}, "security_context_to_sid": {"id": "security_context_to_sid", "ground_truth": 1, "function": "security_context_to_sid", "description": "Obtain SID for security context, return errors or success"}, "ipa_mem_zero_modem": {"id": "ipa_mem_zero_modem", "ground_truth": 0, "function": "ipa_mem_zero_modem", "description": "Zeroes modem-owned IPA local memory regions after modem restart"}, "vti6_tnl_change": {"id": "vti6_tnl_change", "ground_truth": 0, "function": "vti6_tnl_change", "description": "Updates VTI6 tunnel parameter."}, "ice_init_check_adminq": {"id": "ice_init_check_adminq", "ground_truth": 0, "function": "ice_init_check_adminq", "description": "Checks admin queue version to ensure it's active."}, "xprt_release": {"id": "xprt_release", "ground_truth": 0, "function": "xprt_release", "description": "RPC request slot released by xprt_release function"}, "nfp_net_irqs_alloc": {"id": "nfp_net_irqs_alloc", "ground_truth": 0, "function": "nfp_net_irqs_alloc", "description": "nfp net irqs allocates msi irqs"}, "snd_hdac_power_down": {"id": "snd_hdac_power_down", "ground_truth": 0, "function": "snd_hdac_power_down", "description": "Power down codec, return 0 if successful or negative error code."}, "snd_hda_ctls_clear": {"id": "snd_hda_ctls_clear", "ground_truth": 0, "function": "snd_hda_ctls_clear", "description": "Clears all assigned controls for a codec."}, "debugfs_create_size_t": {"id": "debugfs_create_size_t", "ground_truth": 0, "function": "debugfs_create_size_t", "description": "Creates debugfs file for reading/writing size value."}, "security_change_sid": {"id": "security_change_sid", "ground_truth": 1, "function": "security_change_sid", "description": "Compute SID for object relabeling based on SID pair"}, "mwifiex_fill_cap_info": {"id": "mwifiex_fill_cap_info", "ground_truth": 0, "function": "mwifiex_fill_cap_info", "description": "Retrieves and fills various fields for HT capability information in mwifiex, including AMPDU parameter and supported MC set, using cfg80211 stack."}, "dce_v10_0_program_watermarks": {"id": "dce_v10_0_program_watermarks", "ground_truth": 0, "function": "dce_v10_0_program_watermarks", "description": "Program display watermark for selected display controller in DCE v10."}, "security_ib_endport_sid": {"id": "security_ib_endport_sid", "ground_truth": 1, "function": "security_ib_endport_sid", "description": "Obtain SID for subnet management interface"}, "ubifs_wbuf_init": {"id": "ubifs_wbuf_init", "ground_truth": 0, "function": "ubifs_wbuf_init", "description": "Initializes write buffer for UBIFS, returns success or failure."}, "batadv_v_gw_dump": {"id": "batadv_v_gw_dump", "ground_truth": 0, "function": "batadv_v_gw_dump", "description": "Dump gateway into message using batadv_v_gw_dump."}, "of_dev_hwmod_lookup": {"id": "of_dev_hwmod_lookup", "ground_truth": 0, "function": "of_dev_hwmod_lookup", "description": "Lookup hwmod from dt blob recursively"}, "zynqmp_pm_is_shutdown_scope_valid": {"id": "zynqmp_pm_is_shutdown_scope_valid", "ground_truth": 0, "function": "zynqmp_pm_is_shutdown_scope_valid", "description": "Validates ZynqMP PM shutdown scope string"}, "rt_mutex_proxy_unlock": {"id": "rt_mutex_proxy_unlock", "ground_truth": 0, "function": "rt_mutex_proxy_unlock", "description": "Release lock on behalf of owner, no concurrent operation possible, special API for pi futex support."}, "first_dirty_cnode": {"id": "first_dirty_cnode", "ground_truth": 0, "function": "first_dirty_cnode", "description": "Find first dirty cnode, return null if none"}, "debugfs_locked_down": {"id": "debugfs_locked_down", "ground_truth": 1, "function": "debugfs_locked_down", "description": "Restricted debugfs access during kernel lockdown"}, "batadv_tt_global_dump": {"id": "batadv_tt_global_dump", "ground_truth": 0, "function": "batadv_tt_global_dump", "description": "Dump global TT entry into message"}, "v4l2_async_notifier_add_devname_subdev": {"id": "v4l2_async_notifier_add_devname_subdev", "ground_truth": 0, "function": "v4l2_async_notifier_add_devname_subdev", "description": "Allocate and add device name async subdev to notifier"}, "ecryptfs_privileged_open": {"id": "ecryptfs_privileged_open", "ground_truth": 1, "function": "ecryptfs_privileged_open", "description": "Open lower dentry file, return 0 on success"}, "btt_init": {"id": "btt_init", "ground_truth": 0, "function": "btt_init", "description": "Initialize block translation table for device with atomicity"}, "ide_acpi_exec_tfs": {"id": "ide_acpi_exec_tfs", "ground_truth": 0, "function": "ide_acpi_exec_tfs", "description": "Executes taskfile settings based on ACPI spec after STM evaluation."}, "acpi_device_wakeup_disable": {"id": "acpi_device_wakeup_disable", "ground_truth": 0, "function": "acpi_device_wakeup_disable", "description": "Disable ACPI device wakeup functionality and associated GPE"}, "ibmvscsi_send_srp_event": {"id": "ibmvscsi_send_srp_event", "ground_truth": 0, "function": "ibmvscsi_send_srp_event", "description": "Transforms event to u64 array and sends CRQ, assumes host lock held"}, "list_add_tail": {"id": "list_add_tail", "ground_truth": 0, "function": "list_add_tail", "description": "Inserts new entry before specified head for queue implementation."}, "drm_atomic_commit": {"id": "drm_atomic_commit", "ground_truth": 0, "function": "drm_atomic_commit", "description": "Atomic commit of DRM configuration, may return deadlock error, caller must release reference with state put."}, "v4l2_spi_new_subdev": {"id": "v4l2_spi_new_subdev", "ground_truth": 0, "function": "v4l2_spi_new_subdev", "description": "Load spi module, return initialized v4l2 subdev pointer"}, "find_source_device": {"id": "find_source_device", "ground_truth": 0, "function": "find_source_device", "description": "Searches device hierarchy for source device, returns true if found. Invoked by dpc on error detection at root port. Caller sets id, severity, and multi error valid of struct aer err info. Function fills info error dev num and info dev based on given information."}, "vcn_v2_5_enable_clock_gating": {"id": "vcn_v2_5_enable_clock_gating", "ground_truth": 0, "function": "vcn_v2_5_enable_clock_gating", "description": "Enables clock gating for VCN block in VCN v2.5."}, "aac_fib_init": {"id": "aac_fib_init", "ground_truth": 0, "function": "aac_fib_init", "description": "AAC FIB init initializes FIB."}, "db8500_prcmu_system_reset": {"id": "db8500_prcmu_system_reset", "ground_truth": 0, "function": "db8500_prcmu_system_reset", "description": "Resets system, saves reason code, sets ape softrst register to fire interrupt to fw."}, "sw_setup": {"id": "sw_setup", "ground_truth": 0, "function": "sw_setup", "description": "Hardware switch engine setup for default operation"}, "drm_core_check_all_features": {"id": "drm_core_check_all_features", "ground_truth": 0, "function": "drm_core_check_all_features", "description": "Check driver feature flag mask for all supported features"}, "intel_uncore_forcewake_user_get": {"id": "intel_uncore_forcewake_user_get", "ground_truth": 0, "function": "intel_uncore_forcewake_user_get", "description": "Wrapper function for acquiring GT powerwell and disabling debugging to claim forcewake on behalf of userspace."}, "hdlcdev_ioctl": {"id": "hdlcdev_ioctl", "ground_truth": 0, "function": "hdlcdev_ioctl", "description": "Network layer calls hdlcdev_ioctl for ioctl on device"}, "drm_mode_equal": {"id": "drm_mode_equal", "ground_truth": 0, "function": "drm_mode_equal", "description": "Checks if two DRM modes are equivalent."}, "acpi_fadt_sanity_check": {"id": "acpi_fadt_sanity_check", "ground_truth": 0, "function": "acpi_fadt_sanity_check", "description": "ACPI FADT presence and sanity check function"}, "decrypt_pki_encrypted_session_key": {"id": "decrypt_pki_encrypted_session_key", "ground_truth": 0, "function": "decrypt_pki_encrypted_session_key", "description": "Decrypt PKI session key with auth token, return 0 on success"}, "alloc_set_pte": {"id": "alloc_set_pte", "ground_truth": 0, "function": "alloc_set_pte", "description": "Allocate and set up new PTE entry, add reverse page mapping if needed. Handles page table and unlocking VMF PTL. Target user is page handler, implements VM ops map page."}, "cipso_v4_cache_add": {"id": "cipso_v4_cache_add", "ground_truth": 0, "function": "cipso_v4_cache_add", "description": "Add entry to cipso cache, remove last if full, no duplicate key check"}, "cryp_wait_until_done": {"id": "cryp_wait_until_done", "ground_truth": 0, "function": "cryp_wait_until_done", "description": "Function waits for cryptographic operation to complete"}, "ca8210_stop": {"id": "ca8210_stop", "ground_truth": 0, "function": "ca8210_stop", "description": "Network driver stopped by ca8210_stop"}, "ipcctl_obtain_check": {"id": "ipcctl_obtain_check", "ground_truth": 1, "function": "ipcctl_obtain_check", "description": "ipc object retrieval and permission check for ipc xxx cmd"}, "smk_access": {"id": "smk_access", "ground_truth": 1, "function": "smk_access", "description": "Access control check for subject-object pair in rule list. Returns permit/non-permit. Smack labels shared on list."}, "tomoyo_check_inet_address": {"id": "tomoyo_check_inet_address", "ground_truth": 1, "function": "tomoyo_check_inet_address", "description": "Permission check for inet domain socket operation"}, "setid_policy_lookup": {"id": "setid_policy_lookup", "ground_truth": 0, "function": "setid_policy_lookup", "description": "Compute decision for transition under active policy"}, "usb_ifnum_to_if": {"id": "usb_ifnum_to_if", "ground_truth": 0, "function": "usb_ifnum_to_if", "description": "Convert USB interface number to interface object"}, "sk_capable": {"id": "sk_capable", "ground_truth": 1, "function": "sk_capable", "description": "Socket global capability test for opener and current process"}, "security_sid_to_context": {"id": "security_sid_to_context", "ground_truth": 1, "function": "security_sid_to_context", "description": "Convert security SID to context and allocate string."}, "irq_migrate_all_off_this_cpu": {"id": "irq_migrate_all_off_this_cpu", "ground_truth": 0, "function": "irq_migrate_all_off_this_cpu", "description": "Migrates IRQs from offline CPU to available CPU, including chained interrupts."}, "ice_cfg_dflt_vsi": {"id": "ice_cfg_dflt_vsi", "ground_truth": 0, "function": "ice_cfg_dflt_vsi", "description": "Sets default VSI state, adds filter rule, assigns default VSI for switch."}, "nf_tproxy_handle_time_wait6": {"id": "nf_tproxy_handle_time_wait6", "ground_truth": 0, "function": "nf_tproxy_handle_time_wait6", "description": "Handles IPv6 TCP time wait reopen redirections, redirects new connection to proxy if listener socket present. Consumes socket reference, returns listener socket or time wait socket if no listener found or null if TCP header incomplete."}, "kcsan_set_access_mask": {"id": "kcsan_set_access_mask", "ground_truth": 0, "function": "kcsan_set_access_mask", "description": "Sets access mask for current context, reports only changed bits."}, "security_ib_pkey_sid": {"id": "security_ib_pkey_sid", "ground_truth": 1, "function": "security_ib_pkey_sid", "description": "Obtain SID for PKEY in security"}, "sysfs_remove_file_self": {"id": "sysfs_remove_file_self", "ground_truth": 0, "function": "sysfs_remove_file_self", "description": "Remove object attribute from own method in sysfs"}, "megasas_complete_int_cmd": {"id": "megasas_complete_int_cmd", "ground_truth": 0, "function": "megasas_complete_int_cmd", "description": "Completes internal command, wakes up waiting routine."}, "dpni_get_link_state": {"id": "dpni_get_link_state", "ground_truth": 0, "function": "dpni_get_link_state", "description": "Returns link state (up/down) for dpni."}, "i40iw_handle_syn_pkt": {"id": "i40iw_handle_syn_pkt", "ground_truth": 0, "function": "i40iw_handle_syn_pkt", "description": "Passive SYN packet handling in i40iw."}, "unlazy_child": {"id": "unlazy_child", "ground_truth": 0, "function": "unlazy_child", "description": "Switches child to ref walk mode, legitimizes path, must be called from rcu walk context."}, "load_powerpc_certs": {"id": "load_powerpc_certs", "ground_truth": 0, "function": "load_powerpc_certs", "description": "Loads powerpc cert into trusted and blacklist keyrings."}, "ixgbevf_ipsec_set_pf_sa": {"id": "ixgbevf_ipsec_set_pf_sa", "ground_truth": 0, "function": "ixgbevf_ipsec_set_pf_sa", "description": "Set up SA with ixgbevf ipsec pf"}, "page_counter_set_max": {"id": "page_counter_set_max", "ground_truth": 0, "function": "page_counter_set_max", "description": "Sets max page count, returns success or ebusy if limit exceeded, requires serialization."}, "ishtp_cl_connect": {"id": "ishtp_cl_connect", "ground_truth": 0, "function": "ishtp_cl_connect", "description": "Connects client to firmware with ring buffer"}, "mock_drm_getfile": {"id": "mock_drm_getfile", "ground_truth": 0, "function": "mock_drm_getfile", "description": "Create new file for DRM device, mimicking user operation"}, "sev_platform_status": {"id": "sev_platform_status", "ground_truth": 0, "function": "sev_platform_status", "description": "Perform SEV platform status command"}, "vga_switcheroo_unregister_client": {"id": "vga_switcheroo_unregister_client", "ground_truth": 0, "function": "vga_switcheroo_unregister_client", "description": "Unregister VGA switcheroo client to disable GPU."}, "clear_one_vid": {"id": "clear_one_vid", "ground_truth": 0, "function": "clear_one_vid", "description": "Clears VLAN filter bitmap for a single VID."}, "memory_map_bottom_up": {"id": "memory_map_bottom_up", "ground_truth": 0, "function": "memory_map_bottom_up", "description": "Memory mapping for range in bottom up allocation"}, "lpfc_host_attrib_init": {"id": "lpfc_host_attrib_init", "ground_truth": 0, "function": "lpfc_host_attrib_init", "description": "Initializes SCSI host attribute on FC port for physical or virtual port."}, "srpt_set_cmd_state": {"id": "srpt_set_cmd_state", "ground_truth": 0, "function": "srpt_set_cmd_state", "description": "Sets SCSI command state, excludes aborted commands, returns previous state."}, "genwqe_reset_interrupt_capability": {"id": "genwqe_reset_interrupt_capability", "ground_truth": 0, "function": "genwqe_reset_interrupt_capability", "description": "Reset interrupt capability for genwqe."}, "drm_atomic_helper_connector_destroy_state": {"id": "drm_atomic_helper_connector_destroy_state", "ground_truth": 0, "function": "drm_atomic_helper_connector_destroy_state", "description": "Default hook for destroying connector state in DRM atomic helper."}, "r600_get_allowed_info_register": {"id": "r600_get_allowed_info_register", "ground_truth": 0, "function": "r600_get_allowed_info_register", "description": "Fetches allowed info register for ioctl, returns success or einval for invalid register."}, "af_alg_get_rsgl": {"id": "af_alg_get_rsgl", "ground_truth": 0, "function": "af_alg_get_rsgl", "description": "Creates RX SGL for crypto output data from SK socket to user space."}, "read3X4": {"id": "read3X4", "ground_truth": 0, "function": "read3X4", "description": "Hardware access function for reading 3x4 data"}, "hinic_read_wqe": {"id": "hinic_read_wqe", "ground_truth": 0, "function": "hinic_read_wqe", "description": "Reads WQE pointer in current CI and returns it."}, "gasket_mmap_has_permissions": {"id": "gasket_mmap_has_permissions", "ground_truth": 1, "function": "gasket_mmap_has_permissions", "description": "Verifies user permission & descriptor size for mmap."}, "genwqe_write_vreg": {"id": "genwqe_write_vreg", "ground_truth": 0, "function": "genwqe_write_vreg", "description": "Write virtual register accessible only to PF"}, "hdspm_write": {"id": "hdspm_write", "ground_truth": 0, "function": "hdspm_write", "description": "Write to HDSPM with byte addresses, limited to 32-bit writes."}, "spu2_ctx_max_payload": {"id": "spu2_ctx_max_payload", "ground_truth": 0, "function": "spu2_ctx_max_payload", "description": "Determines max payload length for spu message with given cipher and hash alg context. Hardware ignores payloadlen field in ctrl3 of fmd. Max payload is infinite except for aes ccm."}, "numa_enforce_memory_limit": {"id": "numa_enforce_memory_limit", "ground_truth": 0, "function": "numa_enforce_memory_limit", "description": "Enforces memory limit and modifies region if necessary."}, "i40iw_vf_capable": {"id": "i40iw_vf_capable", "ground_truth": 1, "function": "i40iw_vf_capable", "description": "Check if VF capable, return availability or RDMA enabled."}, "xilinx_dpdma_chan_free_sw_desc": {"id": "xilinx_dpdma_chan_free_sw_desc", "ground_truth": 0, "function": "xilinx_dpdma_chan_free_sw_desc", "description": "Free software descriptor from Xilinx DPDMA channel"}, "snd_pcm_hw_param_first": {"id": "snd_pcm_hw_param_first", "ground_truth": 0, "function": "snd_pcm_hw_param_first", "description": "Refines config space, returns minimum value, reduces space."}, "dma_resv_get_list": {"id": "dma_resv_get_list", "ground_truth": 0, "function": "dma_resv_get_list", "description": "Get shared fence list for DMA reservation object with lock"}, "fuse_permission": {"id": "fuse_permission", "ground_truth": 1, "function": "fuse_permission", "description": "Fuse permission checks local and remote access, based on file mode and server responsibility, with exception for sys access."}, "apparmor_socket_recvmsg": {"id": "apparmor_socket_recvmsg", "ground_truth": 1, "function": "apparmor_socket_recvmsg", "description": "Socket recvmsg permission check before message receive."}, "instruction_is_store": {"id": "instruction_is_store", "ground_truth": 0, "function": "instruction_is_store", "description": "Quickly identifies load/store instruction type"}, "s3c_fb_align_word": {"id": "s3c_fb_align_word", "ground_truth": 0, "function": "s3c_fb_align_word", "description": "Aligns pixel count to 32-bit word boundary."}, "setup_address_map": {"id": "setup_address_map", "ground_truth": 0, "function": "setup_address_map", "description": "Sets address map using addrmap register query."}, "get_instantiation_keyring": {"id": "get_instantiation_keyring", "ground_truth": 1, "function": "get_instantiation_keyring", "description": "Instantiation keyring check for write permission"}, "alloc_idx_lebs": {"id": "alloc_idx_lebs", "ground_truth": 0, "function": "alloc_idx_lebs", "description": "Allocate empty LEBs for function, return error if insufficient space"}, "nilfs_sufile_set_error": {"id": "nilfs_sufile_set_error", "ground_truth": 0, "function": "nilfs_sufile_set_error", "description": "Sets error mark on specified segment in NILFS sufile"}, "spider_net_free_rx_chain_contents": {"id": "spider_net_free_rx_chain_contents", "ground_truth": 0, "function": "spider_net_free_rx_chain_contents", "description": "Free RX chain content in SpiderNet, return success/failure."}, "late_param_cb": {"id": "late_param_cb", "ground_truth": 0, "function": "late_param_cb", "description": "Callback for module cmdline parameter evaluation before late initcall level"}, "ib_create_wq": {"id": "ib_create_wq", "ground_truth": 0, "function": "ib_create_wq", "description": "Creates WQ with specified attributes, returns actual allocated size."}, "security_genfs_sid": {"id": "security_genfs_sid", "ground_truth": 1, "function": "security_genfs_sid", "description": "Obtain SID for file in filesystem with policy RW lock."}, "dce110_opp_set_clamping": {"id": "dce110_opp_set_clamping", "ground_truth": 0, "function": "dce110_opp_set_clamping", "description": "Sets clamping format based on bpc for limited range"}, "i40iw_finish_del_sd_reg": {"id": "i40iw_finish_del_sd_reg", "ground_truth": 0, "function": "i40iw_finish_del_sd_reg", "description": "Deletes SD entry for object."}, "default_suspend_ok": {"id": "default_suspend_ok", "ground_truth": 0, "function": "default_suspend_ok", "description": "Default suspend routine for device governor."}, "oslec_free": {"id": "oslec_free", "ground_truth": 0, "function": "oslec_free", "description": "Free voice echo canceller context for oslec."}, "tuner_probe": {"id": "tuner_probe", "ground_truth": 0, "function": "tuner_probe", "description": "Probes tuner on i2c bus, identifies type, completes callback"}, "tep_test_flag": {"id": "tep_test_flag", "ground_truth": 0, "function": "tep_test_flag", "description": "Checks state of requested TEP flag and returns it."}, "regmap_reinit_cache": {"id": "regmap_reinit_cache", "ground_truth": 0, "function": "regmap_reinit_cache", "description": "Reinitializes register cache, discards existing cache, updates configuration, no explicit locking."}, "bond_3ad_initialize": {"id": "bond_3ad_initialize", "ground_truth": 0, "function": "bond_3ad_initialize", "description": "Initialize bond 3ad with set MAC address"}, "qla82xx_pci_mem_bound_check": {"id": "qla82xx_pci_mem_bound_check", "ground_truth": 0, "function": "qla82xx_pci_mem_bound_check", "description": "PCI memory boundary check for QLA82xx, supports DDR access only."}, "mem_cgroup_try_charge_swap": {"id": "mem_cgroup_try_charge_swap", "ground_truth": 0, "function": "mem_cgroup_try_charge_swap", "description": "Try charging swap space for page in memcg, return success or enomem on failure."}, "trace_seq_bprintf": {"id": "trace_seq_bprintf", "ground_truth": 0, "function": "trace_seq_bprintf", "description": "Convert binary arguments to ASCII string in buffer for fast path printf recording."}, "phy_validate": {"id": "phy_validate", "ground_truth": 0, "function": "phy_validate", "description": "Parameter validation for PHY implementation, no configuration changes, no side effects"}, "do_splice_direct": {"id": "do_splice_direct", "ground_truth": 0, "function": "do_splice_direct", "description": "Splice data directly between files for sendfile emulation."}, "amdgpu_gmc_filter_faults": {"id": "amdgpu_gmc_filter_faults", "ground_truth": 0, "function": "amdgpu_gmc_filter_faults", "description": "Filter AMDGPU GMC VM faults."}, "i7300_process_error_global": {"id": "i7300_process_error_global", "ground_truth": 0, "function": "i7300_process_error_global", "description": "Retrieves hardware error info from global register and logs to dmesg."}, "cgroup_update_dfl_csses": {"id": "cgroup_update_dfl_csses", "ground_truth": 0, "function": "cgroup_update_dfl_csses", "description": "Updates default cgroup subtree's control mask and CS association. Migrates tasks to updated CS set."}, "quirk_intel_brickland_xeon_ras_cap": {"id": "quirk_intel_brickland_xeon_ras_cap", "ground_truth": 0, "function": "quirk_intel_brickland_xeon_ras_cap", "description": "Intel Xeon processors with Ivy Bridge, Haswell, and Broadwell architectures."}, "security_member_sid": {"id": "security_member_sid", "ground_truth": 1, "function": "security_member_sid", "description": "Compute SID for member selection based on SID pair, return errors if invalid or insufficient memory."}, "security_load_policy": {"id": "security_load_policy", "ground_truth": 1, "function": "security_load_policy", "description": "Load and validate new security policy configuration data, convert SID table, and flush access vector cache."}, "omap_hwmod_lookup": {"id": "omap_hwmod_lookup", "ground_truth": 0, "function": "omap_hwmod_lookup", "description": "Lookup registered omap hwmod by name, return pointer or null"}, "pci_clear_master": {"id": "pci_clear_master", "ground_truth": 0, "function": "pci_clear_master", "description": "Disables bus mastering for device dev."}, "file_ns_capable": {"id": "file_ns_capable", "ground_truth": 1, "function": "file_ns_capable", "description": "Determines if file opener had capability in effect."}, "genwqe_pci_setup": {"id": "genwqe_pci_setup", "ground_truth": 0, "function": "genwqe_pci_setup", "description": "Allocate PCIe resources for Genwqe card"}, "msgdma_desc_config_eod": {"id": "msgdma_desc_config_eod", "ground_truth": 0, "function": "msgdma_desc_config_eod", "description": "Marks descriptor as end descriptor."}, "ad_clear_agg": {"id": "ad_clear_agg", "ground_truth": 0, "function": "ad_clear_agg", "description": "Clears given aggregator parameter in ad."}, "nlm_decode_oh": {"id": "nlm_decode_oh", "ground_truth": 0, "function": "nlm_decode_oh", "description": "Decode owner handle using NLM."}, "sdma_v4_0_gfx_resume": {"id": "sdma_v4_0_gfx_resume", "ground_truth": 0, "function": "sdma_v4_0_gfx_resume", "description": "Async DMA engine setup and start, enable gfx DMA ring buffer for SDMA v4 gfx resume on Vega10"}, "gmap_pte_op_end": {"id": "gmap_pte_op_end", "ground_truth": 0, "function": "gmap_pte_op_end", "description": "Release page table lock in gmap PTE operation"}, "nfs_fattr_init_names": {"id": "nfs_fattr_init_names", "ground_truth": 0, "function": "nfs_fattr_init_names", "description": "Initializes NFS fattr owner and group name fields."}, "verity_handle_err": {"id": "verity_handle_err", "ground_truth": 0, "function": "verity_handle_err", "description": "Verifies and handles errors during verification."}, "cpufreq_cooling_unregister": {"id": "cpufreq_cooling_unregister", "ground_truth": 0, "function": "cpufreq_cooling_unregister", "description": "Unregister thermal cpufreq cooling device. (8 tokens)"}, "i915_gem_mmap_gtt_version": {"id": "i915_gem_mmap_gtt_version", "ground_truth": 0, "function": "i915_gem_mmap_gtt_version", "description": "Reports feature set for gtt mmaps, handles page fault of doom, creates view for large objects, supports multiple fault handlers, restricts snoopable object access, synchronizes rendering on new page fault, revokes mappings on device suspend, handles fence register contention, may generate sigbus on memory shortage."}, "copy_oldmem_page": {"id": "copy_oldmem_page", "ground_truth": 0, "function": "copy_oldmem_page", "description": "Copy oldmem page to user space in non-atomic context"}, "hns_get_channels": {"id": "hns_get_channels", "ground_truth": 0, "function": "hns_get_channels", "description": "Retrieves information about channels in HN."}, "amdgpu_verify_access": {"id": "amdgpu_verify_access", "ground_truth": 1, "function": "amdgpu_verify_access", "description": "Access verification for mmap call by ttm bo"}, "cec_queue_pin_cec_event": {"id": "cec_queue_pin_cec_event", "ground_truth": 0, "function": "cec_queue_pin_cec_event", "description": "Pin CEC event with timestamp in CEC queue"}, "e1000e_update_nvm_checksum_generic": {"id": "e1000e_update_nvm_checksum_generic", "ground_truth": 0, "function": "e1000e_update_nvm_checksum_generic", "description": "Updates e1000e NVM checksum and EEPROM checksum."}, "inqstrcpy": {"id": "inqstrcpy", "ground_truth": 0, "function": "inqstrcpy", "description": "Copies and merges strings using inqstrcpy."}, "sym_print_xerr": {"id": "sym_print_xerr", "ground_truth": 0, "function": "sym_print_xerr", "description": "Prints extended error information"}, "get_vm_area": {"id": "get_vm_area", "ground_truth": 0, "function": "get_vm_area", "description": "Reserve contiguous kernel virtual area, return descriptor on success or null on failure."}, "dvb_ringbuffer_write_user": {"id": "dvb_ringbuffer_write_user", "ground_truth": 0, "function": "dvb_ringbuffer_write_user", "description": "Writes user buffer to ringbuffer using copy from user"}, "tomoyo_socket_sendmsg_permission": {"id": "tomoyo_socket_sendmsg_permission", "ground_truth": 1, "function": "tomoyo_socket_sendmsg_permission", "description": "Permission check for sending datagram via socket"}, "tipc_named_publish": {"id": "tipc_named_publish", "ground_truth": 0, "function": "tipc_named_publish", "description": "Publishes new node publication to other nodes."}, "tomoyo_check_open_permission": {"id": "tomoyo_check_open_permission", "ground_truth": 1, "function": "tomoyo_check_open_permission", "description": "Permission check for read/write, returns negative value on failure."}, "ppc440spe_test_callback": {"id": "ppc440spe_test_callback", "ground_truth": 0, "function": "ppc440spe_test_callback", "description": "Callback for ppc440spe test completion"}, "avc_has_perm_noaudit": {"id": "avc_has_perm_noaudit", "ground_truth": 1, "function": "avc_has_perm_noaudit", "description": "Checks permission without auditing, returns decision copy."}, "zfcp_erp_notify": {"id": "zfcp_erp_notify", "ground_truth": 0, "function": "zfcp_erp_notify", "description": "Triggers ERP action for zfcp."}, "i40e_get_ethtool_fdir_entry": {"id": "i40e_get_ethtool_fdir_entry", "ground_truth": 0, "function": "i40e_get_ethtool_fdir_entry", "description": "Lookup and fill flow spec info for rx flow filter, return success or einval if not found."}, "ubi_get_device": {"id": "ubi_get_device", "ground_truth": 0, "function": "ubi_get_device", "description": "Returns UBI device object for given number, increases reference count to prevent removal."}, "zpodd_disable_run_wake": {"id": "zpodd_disable_run_wake", "ground_truth": 0, "function": "zpodd_disable_run_wake", "description": "Disable runtime wake capability if enabled"}, "update_backup_region_phdr": {"id": "update_backup_region_phdr", "ground_truth": 0, "function": "update_backup_region_phdr", "description": "Updates backup region program header offset in ELF header."}, "print_link_info": {"id": "print_link_info", "ground_truth": 0, "function": "print_link_info", "description": "Prints information about a link."}, "_drm_lease_held_master": {"id": "_drm_lease_held_master", "ground_truth": 0, "function": "_drm_lease_held_master", "description": "Checks if master holds lease on object, returns true if yes, false if no."}, "regulator_unlock": {"id": "regulator_unlock", "ground_truth": 0, "function": "regulator_unlock", "description": "Unlock regulator mutex when reference counter is reached."}, "d_backing_inode": {"id": "d_backing_inode", "ground_truth": 0, "function": "d_backing_inode", "description": "Helper function to get backing inode for dentry"}, "_scsih_check_pcie_access_status": {"id": "_scsih_check_pcie_access_status", "ground_truth": 1, "function": "_scsih_check_pcie_access_status", "description": "Checks PCIe access status flag in scsih."}, "sys_membarrier": {"id": "sys_membarrier", "ground_truth": 0, "function": "sys_membarrier", "description": "sys_membarrier: issue memory barrier on threads, returns enosys/einval/enomem, guarantees consistent return until reboot, orders memory access with compiler and explicit barriers"}, "inode_permission": {"id": "inode_permission", "ground_truth": 1, "function": "inode_permission", "description": "Checks inode permission for read, write, execute using f ug id, allowing arbitrary permission without changing normal uids."}, "e1000_poll_for_ack": {"id": "e1000_poll_for_ack", "ground_truth": 0, "function": "e1000_poll_for_ack", "description": "Polls for ack and waits for acknowledgment."}, "security_sid_to_context_inval": {"id": "security_sid_to_context_inval", "ground_truth": 1, "function": "security_sid_to_context_inval", "description": "Converts security SID to context, writes string representation if invalid, dynamically allocated string."}, "destroy_journal": {"id": "destroy_journal", "ground_truth": 0, "function": "destroy_journal", "description": "Destroys journal data structure, including recovery-created ones."}, "cpuset_task_status_allowed": {"id": "cpuset_task_status_allowed", "ground_truth": 0, "function": "cpuset_task_status_allowed", "description": "Check task status and memory allowance in proc status file"}, "ishtp_hbm_cl_flow_control_req": {"id": "ishtp_hbm_cl_flow_control_req", "ground_truth": 0, "function": "ishtp_hbm_cl_flow_control_req", "description": "Sends flow control request in ISHTP HBM CL."}, "i40e_ddp_flash": {"id": "i40e_ddp_flash", "ground_truth": 0, "function": "i40e_ddp_flash", "description": "Callback for loading/unloading DDP profile in i40e driver."}, "sugov_iowait_reset": {"id": "sugov_iowait_reset", "ground_truth": 0, "function": "sugov_iowait_reset", "description": "Reset CPU's io boost status, disable io wait boost after tick, enable boost if requested after tick, improves energy efficiency."}, "__test_and_set_bit": {"id": "__test_and_set_bit", "ground_truth": 0, "function": "__test_and_set_bit", "description": "Non-atomic bit setting with potential race conditions, requires locking for multiple access protection."}, "i40e_hmc_get_object_va": {"id": "i40e_hmc_get_object_va", "ground_truth": 0, "function": "i40e_hmc_get_object_va", "description": "Retrieves virtual address of object from base pointer for LAN queue context."}, "llc_pdu_init_as_rej_rsp": {"id": "llc_pdu_init_as_rej_rsp", "ground_truth": 0, "function": "llc_pdu_init_as_rej_rsp", "description": "llc_pdu_init_as_rej_rsp: Build rejection response PDU."}, "adfs_notify_change": {"id": "adfs_notify_change", "ground_truth": 0, "function": "adfs_notify_change", "description": "Validate and convert access mode time, write to directory later"}, "i40e_vsi_setup": {"id": "i40e_vsi_setup", "ground_truth": 0, "function": "i40e_vsi_setup", "description": "Sets up i40e VSI by type, allocates sw structure and queue resource, returns pointer on success or null on failure."}, "dev_pm_opp_find_level_exact": {"id": "dev_pm_opp_find_level_exact", "ground_truth": 0, "function": "dev_pm_opp_find_level_exact", "description": "Searches for exact level and requires put after use."}, "axienet_ethtools_get_pauseparam": {"id": "axienet_ethtools_get_pauseparam", "ground_truth": 0, "function": "axienet_ethtools_get_pauseparam", "description": "Get pause parameter setting for AXI Ethernet using ethtool command."}, "batadv_tp_init_recv": {"id": "batadv_tp_init_recv", "ground_truth": 0, "function": "batadv_tp_init_recv", "description": "Create or return matching receiver tp var in batadv tp init recv."}, "tty_unthrottle": {"id": "tty_unthrottle", "ground_truth": 0, "function": "tty_unthrottle", "description": "Flow control unthrottling for TTY"}, "r600_dma_fini": {"id": "r600_dma_fini", "ground_truth": 0, "function": "r600_dma_fini", "description": "Async DMA engine teardown and ring R6xx freeing in r600_dma_fini."}, "__kcsan_check_read_write": {"id": "__kcsan_check_read_write", "ground_truth": 1, "function": "__kcsan_check_read_write", "description": "Regular read/write access checked for race"}, "parport_release": {"id": "parport_release", "ground_truth": 0, "function": "parport_release", "description": "Release parallel port device access"}, "unx_lookup_cred": {"id": "unx_lookup_cred", "ground_truth": 0, "function": "unx_lookup_cred", "description": "Lookup Unix credentials for current process authentication."}, "stm32h7_adc_restore_selfcalib": {"id": "stm32h7_adc_restore_selfcalib", "ground_truth": 0, "function": "stm32h7_adc_restore_selfcalib", "description": "Restores saved self calibration for STM32H7 ADC."}, "genradix_ptr_alloc": {"id": "genradix_ptr_alloc", "ground_truth": 0, "function": "genradix_ptr_alloc", "description": "Allocate genradix entry pointer, return null on failure."}, "octeon_cf_tf_load16": {"id": "octeon_cf_tf_load16", "ground_truth": 0, "function": "octeon_cf_tf_load16", "description": "Loads 16-bit data from device address in Octeon CF, only for true IDE."}}}