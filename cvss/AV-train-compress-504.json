{
    "AV": {
        "unuse_pte": {
            "ground_truth": "0",
            "function": "unuse_pte",
            "description": "Unuse page table entry, handle COW and permissions."
        },
        "inet_release": {
            "ground_truth": "1",
            "function": "inet_release",
            "description": "Release IPv4 socket, set peer to null."
        },
        "ieee80211_csa_is_complete": {
            "ground_truth": "2",
            "function": "ieee80211_csa_is_complete",
            "description": "Check if channel switch counter reached zero."
        },
        "iwctl_giwfrag": {
            "ground_truth": "2",
            "function": "iwctl_giwfrag",
            "description": "Wireless handler gets fragment threshold: iwctl_giwfrag."
        },
        "sk_filter_release_rcu": {
            "ground_truth": "1",
            "function": "sk_filter_release_rcu",
            "description": "Release socket filter using RCU head struct."
        },
        "igc_check_downshift": {
            "ground_truth": "1",
            "function": "igc_check_downshift",
            "description": "Check ethernet downshift using igc driver and phy link health."
        },
        "inet_ioctl": {
            "ground_truth": "1",
            "function": "inet_ioctl",
            "description": "Description: IPv4 socket ioctl for device configuration."
        },
        "snd_device_free_all": {
            "ground_truth": "3",
            "function": "snd_device_free_all",
            "description": "Free all sound devices on card from init."
        },
        "port_is_suspended": {
            "ground_truth": "3",
            "function": "port_is_suspended",
            "description": "Check if USB port is suspended or in U3 state."
        },
        "hwm_rx_frag": {
            "ground_truth": "1",
            "function": "hwm_rx_frag",
            "description": "Prepare hardware for DMA transfer with fragment info."
        },
        "tcp_out_of_resources": {
            "ground_truth": "1",
            "function": "tcp_out_of_resources",
            "description": "TCP function: close socket if out of resources, send reset flag to prevent DoS attack. Kill socket if orphaned limit exceeded, memory pressure or net namespace exiting."
        },
        "reg_process_pending_hints": {
            "ground_truth": "2",
            "function": "reg_process_pending_hints",
            "description": "Process wireless regulatory hints atomically on first-come-first-serve basis."
        },
        "atalk_create": {
            "ground_truth": "1",
            "function": "atalk_create",
            "description": "Create AppleTalk socket, initialize, set state, blank address."
        },
        "ieee80211_get_hdrlen": {
            "ground_truth": "2",
            "function": "ieee80211_get_hdrlen",
            "description": "Get header length for IEEE80211 protocol."
        },
        "rpm_suspend": {
            "ground_truth": "3",
            "function": "rpm_suspend",
            "description": "Function: rpm_suspend - driver suspends device runtime, checks status, cancels idle notification, suspends device, waits if necessary, and schedules autosuspend."
        },
        "nf_tproxy_handle_time_wait4": {
            "ground_truth": "1",
            "function": "nf_tproxy_handle_time_wait4",
            "description": "Handle TCP time wait, redirect to proxy if listener present."
        },
        "iwctl_giwretry": {
            "ground_truth": "2",
            "function": "iwctl_giwretry",
            "description": "Wireless handler retry threshold getter."
        },
        "memblocks_present": {
            "ground_truth": "0",
            "function": "memblocks_present",
            "description": "Mark all memblocks present using memory present."
        },
        "arch_get_unmapped_area_topdown": {
            "ground_truth": "0",
            "function": "arch_get_unmapped_area_topdown",
            "description": "Allocate top-down new area for PowerPC architecture."
        },
        "__vma_address": {
            "ground_truth": "0",
            "function": "__vma_address",
            "description": "Returns user virtual address for expected page in vma."
        },
        "memmap_init_zone": {
            "ground_truth": "0",
            "function": "memmap_init_zone",
            "description": "Initialize memory zone with movable pages, non-atomically."
        },
        "usb_deauthorize_device": {
            "ground_truth": "3",
            "function": "usb_deauthorize_device",
            "description": "Deauthorize USB device, disable interface, move to basic state."
        },
        "udp_poll": {
            "ground_truth": "1",
            "function": "udp_poll",
            "description": "UDP poll for IPv4, wait for event, handle blocking sockets."
        },
        "__find_buddy_pfn": {
            "ground_truth": "0",
            "function": "__find_buddy_pfn",
            "description": "Locates matching buddy page and its twin."
        },
        "udp4_hwcsum": {
            "ground_truth": "1",
            "function": "udp4_hwcsum",
            "description": "UDP IPv4 hw checksum for outgoing packets."
        },
        "access_process_vm": {
            "ground_truth": "0",
            "function": "access_process_vm",
            "description": "Access another process's memory from kernel space."
        },
        "free_area_init_core_hotplug": {
            "ground_truth": "0",
            "function": "free_area_init_core_hotplug",
            "description": "Initialize memory zones during hotplug."
        },
        "__zone_watermark_ok": {
            "ground_truth": "0",
            "function": "__zone_watermark_ok",
            "description": "Check if free pages meet watermark for allocation."
        },
        "page_lock_anon_vma_read": {
            "ground_truth": "0",
            "function": "page_lock_anon_vma_read",
            "description": "Locks anon vma for fast atomic op, falls back to mutex."
        },
        "pccard_validate_cis": {
            "ground_truth": "0",
            "function": "pccard_validate_cis",
            "description": "Validate PCMCIA card CIS tuple information."
        },
        "mem_cgroup_write": {
            "ground_truth": "0",
            "function": "mem_cgroup_write",
            "description": "- Memcontrol"
        },
        "free_vmap_area_noflush": {
            "ground_truth": "0",
            "function": "free_vmap_area_noflush",
            "description": "Free vmap area, unmap and flush cache."
        },
        "netdev_register_kobject": {
            "ground_truth": "1",
            "function": "netdev_register_kobject",
            "description": "Register network device in sysfs."
        },
        "slab_alloc_node": {
            "ground_truth": "0",
            "function": "slab_alloc_node",
            "description": "Fast slab allocation with lockless freelist for kmalloc and kmem cache."
        },
        "dec_cluster_info_page": {
            "ground_truth": "0",
            "function": "dec_cluster_info_page",
            "description": "Decrease cluster usage, discard if unused."
        },
        "skb_dequeue_tail": {
            "ground_truth": "1",
            "function": "skb_dequeue_tail",
            "description": "Remove tail item from locked skbuff queue list safely."
        },
        "nfc_stop_poll": {
            "ground_truth": "2",
            "function": "nfc_stop_poll",
            "description": "Stop NFC polling for target device on specified NFC device."
        },
        "reg_process_hint_driver": {
            "ground_truth": "2",
            "function": "reg_process_hint_driver",
            "description": "Process wireless driver's regulatory request for net subsystem."
        },
        "mempool_kmalloc": {
            "ground_truth": "0",
            "function": "mempool_kmalloc",
            "description": "Allocates and frees memory using kmalloc in mempool."
        },
        "pci_raw_set_power_state": {
            "ground_truth": "3",
            "function": "pci_raw_set_power_state",
            "description": "PCI device power state setter using PM register."
        },
        "set_page_refcounted": {
            "ground_truth": "0",
            "function": "set_page_refcounted",
            "description": "Convert non-refcounted page to refcounted with count 1."
        },
        "page_huge_active": {
            "ground_truth": "0",
            "function": "page_huge_active",
            "description": "Test hugepage active, linked to activelist, not for tail pages."
        },
        "make_black_object": {
            "ground_truth": "0",
            "function": "make_black_object",
            "description": "Make object black to ignore scan/reporting."
        },
        "zone_reclaimable_pages": {
            "ground_truth": "0",
            "function": "zone_reclaimable_pages",
            "description": "Description: Reclaims isolated pages to save counter."
        },
        "clear_page_mlock": {
            "ground_truth": "0",
            "function": "clear_page_mlock",
            "description": "Clears pagemlocked page from pagecache on truncation or freeing."
        },
        "device_is_dependent": {
            "ground_truth": "3",
            "function": "device_is_dependent",
            "description": "Check device dependency, return true/false."
        },
        "bfa_fcs_vport_lookup": {
            "ground_truth": "3",
            "function": "bfa_fcs_vport_lookup",
            "description": "SCSI driver lookup virtual port, exclude base port."
        },
        "dst_input": {
            "ground_truth": "1",
            "function": "dst_input",
            "description": "Receive network packet for transport layer."
        },
        "get_valid_first_slab": {
            "ground_truth": "0",
            "function": "get_valid_first_slab",
            "description": "Find valid first slab, avoid pfmemalloc."
        },
        "__alloc_contig_migrate_range": {
            "ground_truth": "0",
            "function": "__alloc_contig_migrate_range",
            "description": "Allocate contiguous memory within a single zone."
        },
        "sock_setsockopt": {
            "ground_truth": "1",
            "function": "sock_setsockopt",
            "description": "Generic socket protocol configuration for .NET Core."
        },
        "rt2800_get_tkip_seq": {
            "ground_truth": "2",
            "function": "rt2800_get_tkip_seq",
            "description": "Callback for ieee80211 stack, get tkip seq."
        },
        "count_swap_pages": {
            "ground_truth": "0",
            "function": "count_swap_pages",
            "description": "Count swap/free pages for software suspend."
        },
        "migrate_huge_page_move_mapping": {
            "ground_truth": "0",
            "function": "migrate_huge_page_move_mapping",
            "description": "Migrate huge page mapping with expected reference count."
        },
        "usb_serial_deregister_drivers": {
            "ground_truth": "3",
            "function": "usb_serial_deregister_drivers",
            "description": "Deregisters USB serial drivers and frees struct USB driver."
        },
        "ibmvfc_set_tgt_action": {
            "ground_truth": "3",
            "function": "ibmvfc_set_tgt_action",
            "description": "Set target action for IBM VFC SCSI driver."
        },
        "nfc_start_poll": {
            "ground_truth": "2",
            "function": "nfc_start_poll",
            "description": "Starts NFC target polling until found or stopped."
        },
        "extract_key_parameters": {
            "ground_truth": "0",
            "function": "extract_key_parameters",
            "description": "Parse TPM key structure, extract key parameters."
        },
        "get_size_class_index": {
            "ground_truth": "0",
            "function": "get_size_class_index",
            "description": "Return index of size class for given allocation size."
        },
        "usb_probe_interface": {
            "ground_truth": "3",
            "function": "usb_probe_interface",
            "description": "USB driver probed by core with locked device."
        },
        "__shuffle_zone": {
            "ground_truth": "0",
            "function": "__shuffle_zone",
            "description": "Randomly shuffle array to improve security."
        },
        "move_pfn_range_to_zone": {
            "ground_truth": "0",
            "function": "move_pfn_range_to_zone",
            "description": "Associate pfn range with zone, initialize memmaps, resize pgdat, reserve pages, initialize pageblocks."
        },
        "extfrag_for_order": {
            "ground_truth": "0",
            "function": "extfrag_for_order",
            "description": "Calculate ext. frag. for given order in mm vmstat."
        },
        "return_unused_surplus_pages": {
            "ground_truth": "0",
            "function": "return_unused_surplus_pages",
            "description": "Free unused huge pages, adjust reservation count."
        },
        "pcpu_region_overlap": {
            "ground_truth": "0",
            "function": "pcpu_region_overlap",
            "description": "Check if two regions overlap in percpu memory."
        },
        "__cmpxchg_double_slab": {
            "ground_truth": "0",
            "function": "__cmpxchg_double_slab",
            "description": "Disable mm slub interrupt for cmpxchg_double_slab fallback."
        },
        "object_no_scan": {
            "ground_truth": "0",
            "function": "object_no_scan",
            "description": "Set object no scan flag for kmemleak, skip scanning."
        },
        "alloc_surplus_huge_page": {
            "ground_truth": "0",
            "function": "alloc_surplus_huge_page",
            "description": "Allocate surplus huge page from page allocator."
        },
        "____cache_alloc_node": {
            "ground_truth": "0",
            "function": "____cache_alloc_node",
            "description": "Cache allocation on specific node."
        },
        "vm_normal_page": {
            "ground_truth": "0",
            "function": "vm_normal_page",
            "description": "Function: vm_normal_page - Get struct page for normal memory mapping. Special mappings may not have associated struct page. Null is returned in such cases. COWed pages of vm_pfnmap are always normal. COWed pages are recognized through remap_pfn_range rule. Arbitrary mapping is allowed for non-COW mappings. VM_mixedmap allows non-linear mapping and refcounting of pages."
        },
        "scan_swap_map_try_ssd_cluster": {
            "ground_truth": "0",
            "function": "scan_swap_map_try_ssd_cluster",
            "description": "Try to get swap entry, allocate new cluster if needed."
        },
        "shm_get_stat": {
            "ground_truth": "0",
            "function": "shm_get_stat",
            "description": "shm_get_stat: get stats for shared memory (reader lock held)"
        },
        "apply_to_page_range": {
            "ground_truth": "0",
            "function": "apply_to_page_range",
            "description": "Apply function to virtual memory page range."
        },
        "_rtl8723e_rate_mapping": {
            "ground_truth": "2",
            "function": "_rtl8723e_rate_mapping",
            "description": "Function: _rtl8723e_rate_mapping - Map rate indices for 2.4GHz and 5GHz bands."
        },
        "shmem_unuse_swap_entries": {
            "ground_truth": "0",
            "function": "shmem_unuse_swap_entries",
            "description": "Move swapped page to cache, return count or error."
        },
        "brcmf_count_20mhz_channels": {
            "ground_truth": "2",
            "function": "brcmf_count_20mhz_channels",
            "description": "Filter firmware channels for 20MHz, flag for higher bandwidth."
        },
        "delete_nommu_region": {
            "ground_truth": "0",
            "function": "delete_nommu_region",
            "description": "Delete region from global tree."
        },
        "insert_zspage": {
            "ground_truth": "0",
            "function": "insert_zspage",
            "description": "Insert zspage into appropriate freelist based on live objects."
        },
        "hw_atl_tdm_tx_desc_dca_en_set": {
            "ground_truth": "1",
            "function": "hw_atl_tdm_tx_desc_dca_en_set",
            "description": "Set Ethernet TX descriptor DCA enable in Aquantia Atlantic driver."
        },
        "unmap_and_move_huge_page": {
            "ground_truth": "0",
            "function": "unmap_and_move_huge_page",
            "description": "Unmap and move huge page, no wait for completion, no race, direct migration, subpages counted, no data corruption, wait for migration swap entry."
        },
        "madvise_inject_error": {
            "ground_truth": "0",
            "function": "madvise_inject_error",
            "description": "Inject memory errors for error handling."
        },
        "undo_isolate_page_range": {
            "ground_truth": "0",
            "function": "undo_isolate_page_range",
            "description": "Undo page range isolation, make page available."
        },
        "wireless_nlevent_process": {
            "ground_truth": "2",
            "function": "wireless_nlevent_process",
            "description": "Process wireless events from driver or wireless layer."
        },
        "madvise_remove": {
            "ground_truth": "0",
            "function": "madvise_remove",
            "description": "Free page, punch hole in file."
        },
        "set_pageblock_order": {
            "ground_truth": "0",
            "function": "set_pageblock_order",
            "description": "Description: Initialize page block order with allocated pages."
        },
        "SetPageHugeObject": {
            "ground_truth": "0",
            "function": "SetPageHugeObject",
            "description": "Set huge object page with zsmalloc."
        },
        "__pm_runtime_resume": {
            "ground_truth": "3",
            "function": "__pm_runtime_resume",
            "description": "Description: Linux function for resuming device runtime with flags."
        },
        "migrate_misplaced_transhuge_page": {
            "ground_truth": "0",
            "function": "migrate_misplaced_transhuge_page",
            "description": "Migrates thp to target node, page locked/unlocked."
        },
        "bus_find_device": {
            "ground_truth": "3",
            "function": "bus_find_device",
            "description": "Locate device using driver base bus iterator, match callback."
        },
        "__mlock_posix_error_return": {
            "ground_truth": "0",
            "function": "__mlock_posix_error_return",
            "description": "Converts user page return to mlock error"
        },
        "shrink_all_memory": {
            "ground_truth": "0",
            "function": "shrink_all_memory",
            "description": "Free memory system-wide, preserve LRU order, prefer inactive."
        },
        "free_block": {
            "ground_truth": "0",
            "function": "free_block",
            "description": "Free detached slabs from kmem cache list."
        },
        "set_init_arg": {
            "ground_truth": "0",
            "function": "set_init_arg",
            "description": "Description: Init main, pass anything to init."
        },
        "set_send_length": {
            "ground_truth": "0",
            "function": "set_send_length",
            "description": "Description: Set Infiniband send length limit for HFI1 chip."
        },
        "usb_serial_register_drivers": {
            "ground_truth": "3",
            "function": "usb_serial_register_drivers",
            "description": "Registers USB serial drivers for devices."
        },
        "update_checksum": {
            "ground_truth": "0",
            "function": "update_checksum",
            "description": "Description: Update object checksum, return true if modified."
        },
        "shm_lock": {
            "ground_truth": "0",
            "function": "shm_lock",
            "description": "Check shm lock without rwsem held."
        },
        "drain_local_pages": {
            "ground_truth": "0",
            "function": "drain_local_pages",
            "description": "Drains local pages back to buddy allocator, per CPU."
        },
        "rtw_indicate_connect": {
            "ground_truth": "3",
            "function": "rtw_indicate_connect",
            "description": "Indicate connection caller lock pmlmepriv lock."
        },
        "get_kernel_page": {
            "ground_truth": "0",
            "function": "get_kernel_page",
            "description": "Get kernel page, pin in memory, return page pointer."
        },
        "drm_gem_handle_create": {
            "ground_truth": "3",
            "function": "drm_gem_handle_create",
            "description": "Create handle for DRM GEM object, add reference count."
        },
        "aa_lookupn_profile": {
            "ground_truth": "0",
            "function": "aa_lookupn_profile",
            "description": "Lookup AppArmor profile by name in given namespace."
        },
        "iscsi_sw_tcp_recv": {
            "ground_truth": "1",
            "function": "iscsi_sw_tcp_recv",
            "description": "Receive iSCSI TCP data using sendfile-like method."
        },
        "lpfc_issue_init_vpi": {
            "ground_truth": "3",
            "function": "lpfc_issue_init_vpi",
            "description": "Init VPI for LPFC SCSI driver using mailbox command."
        },
        "__device_release_driver": {
            "ground_truth": "3",
            "function": "__device_release_driver",
            "description": "Release driver for device with USB interface."
        },
        "__audit_log_capset": {
            "ground_truth": "0",
            "function": "__audit_log_capset",
            "description": "Audit capset syscall arguments for printing later."
        },
        "count_mm_mlocked_page_nr": {
            "ground_truth": "0",
            "function": "count_mm_mlocked_page_nr",
            "description": "Sum mlocked page size in VMA area."
        },
        "offset_il_node": {
            "ground_truth": "0",
            "function": "offset_il_node",
            "description": "Static interleaving with offset, return nth node."
        },
        "kasan_free_nondeferred_pages": {
            "ground_truth": "0",
            "function": "kasan_free_nondeferred_pages",
            "description": "Description: Free non-deferred pages after KASAN init."
        },
        "adjust_pool_surplus": {
            "ground_truth": "0",
            "function": "adjust_pool_surplus",
            "description": "Adjusts node-specific huge page surplus counter in round-robin fashion."
        },
        "madvise_free_huge_pmd": {
            "ground_truth": "0",
            "function": "madvise_free_huge_pmd",
            "description": "Free huge memory page with madvise, return success or failure."
        },
        "nal_h264_read_pps": {
            "ground_truth": "3",
            "function": "nal_h264_read_pps",
            "description": "Compressed: H.264 PPS read from RBSP data."
        },
        "init_freelist_randomization": {
            "ground_truth": "0",
            "function": "init_freelist_randomization",
            "description": "Init random freelist per cache in mm slub."
        },
        "opa_vnic_vema_report_event": {
            "ground_truth": "0",
            "function": "opa_vnic_vema_report_event",
            "description": "Send trap for specified event using VEMA API."
        },
        "build_detached_freelist": {
            "ground_truth": "0",
            "function": "build_detached_freelist",
            "description": "Build detached freelist for slub memory manager."
        },
        "ft_prli_locked": {
            "ground_truth": "3",
            "function": "ft_prli_locked",
            "description": "Session-based driver operation with locking."
        },
        "shmem_initxattrs": {
            "ground_truth": "0",
            "function": "shmem_initxattrs",
            "description": "Init security xattrs for shmem inode."
        },
        "inet_create": {
            "ground_truth": "1",
            "function": "inet_create",
            "description": "Create IPv4 socket for internet protocol."
        },
        "__vma_link_list": {
            "ground_truth": "0",
            "function": "__vma_link_list",
            "description": "Function: __vma_link_list - mm util mm util"
        },
        "can_split_huge_page": {
            "ground_truth": "0",
            "function": "can_split_huge_page",
            "description": "Check if huge page can be split in Linux MM."
        },
        "madvise_willneed": {
            "ground_truth": "0",
            "function": "madvise_willneed",
            "description": "Schedule ops, don't wait for completion - madvise_willneed."
        },
        "node_states_check_changes_offline": {
            "ground_truth": "0",
            "function": "node_states_check_changes_offline",
            "description": "Compressed: Node state check on offline memory."
        },
        "fip_timeout_deleted_fcf": {
            "ground_truth": "0",
            "function": "fip_timeout_deleted_fcf",
            "description": "Delete FCoE FCF on devloss timer fire."
        },
        "gup_fast_permitted": {
            "ground_truth": "0",
            "function": "gup_fast_permitted",
            "description": "Check user page access, use fast/slow version."
        },
        "prism2mgmt_pstr2bytearea": {
            "ground_truth": "2",
            "function": "prism2mgmt_pstr2bytearea",
            "description": "Converts between WLAN and Prism2 data types."
        },
        "kmemleak_seq_stop": {
            "ground_truth": "0",
            "function": "kmemleak_seq_stop",
            "description": "Decrement use count of last kmemleak object."
        },
        "kswapd_run": {
            "ground_truth": "0",
            "function": "kswapd_run",
            "description": "Kswapd runs vmscan for memory management on hot-added CPUs."
        },
        "wait_on_page_writeback": {
            "ground_truth": "0",
            "function": "wait_on_page_writeback",
            "description": "Wait for page writeback to complete."
        },
        "break_down_buddy_pages": {
            "ground_truth": "0",
            "function": "break_down_buddy_pages",
            "description": "Breaks down pages, avoids buddy allocator for target."
        },
        "deferred_free_pages": {
            "ground_truth": "0",
            "function": "deferred_free_pages",
            "description": "Free allocated pages to buddy allocator after use."
        },
        "arch_has_descending_max_zone_pfns": {
            "ground_truth": "0",
            "function": "arch_has_descending_max_zone_pfns",
            "description": "Architectures may have descending max zone PFNs."
        },
        "get_net_ns": {
            "ground_truth": "1",
            "function": "get_net_ns",
            "description": "Increments refcount of network namespace and returns it."
        },
        "remove_stable_node": {
            "ground_truth": "0",
            "function": "remove_stable_node",
            "description": "Remove stable node via sysfs interface."
        },
        "tcp_v4_do_rcv": {
            "ground_truth": "1",
            "function": "tcp_v4_do_rcv",
            "description": "TCP IPv4 socket receive function with locking scheme."
        },
        "mempolicy_slab_node": {
            "ground_truth": "0",
            "function": "mempolicy_slab_node",
            "description": "Allocate slab entry based on memory policy node."
        },
        "calculate_sizes": {
            "ground_truth": "0",
            "function": "calculate_sizes",
            "description": "Calculate data order and distribution in slab object."
        },
        "disable_swap_slots_cache_lock": {
            "ground_truth": "0",
            "function": "disable_swap_slots_cache_lock",
            "description": "Disable cache lock for MM swap slot."
        },
        "cma_bitmap_aligned_offset": {
            "ground_truth": "0",
            "function": "cma_bitmap_aligned_offset",
            "description": "Find CMA bitmap offset with aligned PFN order."
        },
        "r8712_free_recvframe": {
            "ground_truth": "3",
            "function": "r8712_free_recvframe",
            "description": "Get free recv frame from queue in rtl8712 driver."
        },
        "hugepage_subpool_put_pages": {
            "ground_truth": "0",
            "function": "hugepage_subpool_put_pages",
            "description": "Free hugepage subpool, adjust global reservation, maintain minimum size."
        },
        "mem_pool_free": {
            "ground_truth": "0",
            "function": "mem_pool_free",
            "description": "Free memory object to allocator or pool."
        },
        "overlaps": {
            "ground_truth": "0",
            "function": "overlaps",
            "description": "Check if ptr overlaps with low/high."
        },
        "add_reservation_in_range": {
            "ground_truth": "0",
            "function": "add_reservation_in_range",
            "description": "Description: Add reservation in range with file region count."
        },
        "usbnet_status_stop": {
            "ground_truth": "3",
            "function": "usbnet_status_stop",
            "description": "Stop USB network driver, kill interrupt urb if requested."
        },
        "munlock_vma_pages_range": {
            "ground_truth": "0",
            "function": "munlock_vma_pages_range",
            "description": "munlock vma page range for mremap, munmap, and exit."
        },
        "try_to_free_swap": {
            "ground_truth": "0",
            "function": "try_to_free_swap",
            "description": "Free up Linux swap space when full or unmapped."
        },
        "autosuspend_check": {
            "ground_truth": "3",
            "function": "autosuspend_check",
            "description": "Check if device can autosuspend - USB driver routine."
        },
        "zero_global_numa_counters": {
            "ground_truth": "0",
            "function": "zero_global_numa_counters",
            "description": "Reset global NUMA counters in memory management."
        },
        "async_free_zspage": {
            "ground_truth": "0",
            "function": "async_free_zspage",
            "description": "Description: Free zspage asynchronously, requires page locks."
        },
        "snd_asihpi_proc_read": {
            "ground_truth": "0",
            "function": "snd_asihpi_proc_read",
            "description": "Sound PCI ASIHPi proc interface read function."
        },
        "ieee80211_iterate_active_interfaces": {
            "ground_truth": "2",
            "function": "ieee80211_iterate_active_interfaces",
            "description": "Iterate active interfaces for given hardware, call callback, allow sleep, atomic option, iteration flag, call iterator function with arguments."
        },
        "hotadd_new_pgdat": {
            "ground_truth": "0",
            "function": "hotadd_new_pgdat",
            "description": "Hotadd new memory page data for memory hotplug."
        },
        "reg_process_hint_country_ie": {
            "ground_truth": "2",
            "function": "reg_process_hint_country_ie",
            "description": "Process wireless regulatory request from country IE."
        },
        "write_zsdata": {
            "ground_truth": "2",
            "function": "write_zsdata",
            "description": "Write data to Z8530 channel control register and data register."
        },
        "a2mp_command_rej": {
            "ground_truth": "2",
            "function": "a2mp_command_rej",
            "description": "Bluetooth A2MP message processing function."
        },
        "__mpol_dup": {
            "ground_truth": "0",
            "function": "__mpol_dup",
            "description": "Duplicate mempolicy slowly with __mpol_dup."
        },
        "slob_alloc": {
            "ground_truth": "0",
            "function": "slob_alloc",
            "description": "Allocate memory using slob allocator."
        },
        "shm_open": {
            "ground_truth": "0",
            "function": "shm_open",
            "description": "Tokenized: shm_open, fork, shm attach."
        },
        "kmemleak_seq_next": {
            "ground_truth": "0",
            "function": "kmemleak_seq_next",
            "description": "Return next object in kmemleak list, adjust use count."
        },
        "get_scan_count": {
            "ground_truth": "0",
            "function": "get_scan_count",
            "description": "Description: Determines scan count for anon and file LRU lists."
        },
        "transfer_objects": {
            "ground_truth": "0",
            "function": "transfer_objects",
            "description": "Transfer objects between arrays, handle locking, return entries transferred."
        },
        "device_link_remove": {
            "ground_truth": "3",
            "function": "device_link_remove",
            "description": "Remove device link between two devices."
        },
        "buddy_merge_likely": {
            "ground_truth": "0",
            "function": "buddy_merge_likely",
            "description": "Merge likely if buddy free, add to list for coalesce."
        },
        "usb_reset_configuration": {
            "ground_truth": "3",
            "function": "usb_reset_configuration",
            "description": "Description: Reset USB device configuration, clearing most state, except interface altsettings and endpoint state."
        },
        "freelist_dereference": {
            "ground_truth": "0",
            "function": "freelist_dereference",
            "description": "Return freelist pointer from ptr addr in mm slub."
        },
        "usb_deregister": {
            "ground_truth": "3",
            "function": "usb_deregister",
            "description": "Unregister USB driver interface, unlink from list, sleepable."
        },
        "gup_get_pte": {
            "ground_truth": "0",
            "function": "gup_get_pte",
            "description": "Get user page fast implementation, gup_get_pte function, loads pointer atomically, sets ptes from not present to present, and vice versa, ensuring present bit is set only for present ptes."
        },
        "shmem_free_swap": {
            "ground_truth": "0",
            "function": "shmem_free_swap",
            "description": "Free swap entry and page cache in shmem."
        },
        "fallback_migrate_page": {
            "ground_truth": "0",
            "function": "fallback_migrate_page",
            "description": "Fallback for missing migration function in filesystem."
        },
        "constrained_alloc": {
            "ground_truth": "0",
            "function": "constrained_alloc",
            "description": "Allocate memory with constraint type determination."
        },
        "default_rootfs": {
            "ground_truth": "0",
            "function": "default_rootfs",
            "description": "Create simple rootfs similar to initramfs, noinitramfs."
        },
        "ipa_cmd_register_write_valid": {
            "ground_truth": "1",
            "function": "ipa_cmd_register_write_valid",
            "description": "Check valid IPA register write offset in driver."
        },
        "tcp_acceptable_seq": {
            "ground_truth": "1",
            "function": "tcp_acceptable_seq",
            "description": "Acceptable TCP sequence with window scaling and precision loss."
        },
        "__remove_mapping": {
            "ground_truth": "0",
            "function": "__remove_mapping",
            "description": "Remove mapping with refcount return for removed page."
        },
        "retransmits_timed_out": {
            "ground_truth": "1",
            "function": "retransmits_timed_out",
            "description": "IPv4 TCP retransmission timer function with custom timeout."
        },
        "__handle_mm_fault": {
            "ground_truth": "0",
            "function": "__handle_mm_fault",
            "description": "Description: Handle memory fault, acquire locks, retry if needed."
        },
        " init_dummy_netdev": {
            "ground_truth": "1",
            "function": " init_dummy_netdev",
            "description": "Initialize dummy netdev for NAPI poll scheduler."
        },
        "__mcopy_atomic_hugetlb": {
            "ground_truth": "0",
            "function": "__mcopy_atomic_hugetlb",
            "description": "Copy huge pages atomically with userfaultfd and mmap lock."
        },
        "pcpu_stats_area_alloc": {
            "ground_truth": "0",
            "function": "pcpu_stats_area_alloc",
            "description": "Allocate percpu stats area with size and location."
        },
        "cmdline_parse_kernelcore": {
            "ground_truth": "0",
            "function": "cmdline_parse_kernelcore",
            "description": "Parse kernelcore cmdline, set fixed memory allocation size."
        },
        "print_ipv4_arg": {
            "ground_truth": "0",
            "function": "print_ipv4_arg",
            "description": "Print IP address with various formats and port."
        },
        "region_add": {
            "ground_truth": "0",
            "function": "region_add",
            "description": "Add huge page range to reserve map, allocate if needed."
        },
        "usb_enumerate_device": {
            "ground_truth": "3",
            "function": "usb_enumerate_device",
            "description": "10 tokens: USB enumeration function for driver core."
        },
        "smp_snoop": {
            "ground_truth": "0",
            "function": "smp_snoop",
            "description": "Snoop function for Infiniband HW to synthesize events."
        },
        "ice_rem_prof_id_vsig": {
            "ground_truth": "1",
            "function": "ice_rem_prof_id_vsig",
            "description": "Remove specific profile from vsig struct in Intel Ethernet driver."
        },
        "synchronous_wake_function": {
            "ground_truth": "0",
            "function": "synchronous_wake_function",
            "description": "Unconditional wake function for shared memory wait queue."
        },
        "vmalloc_to_page": {
            "ground_truth": "0",
            "function": "vmalloc_to_page",
            "description": "Map vmalloc address to page struct."
        },
        "try_context_readahead": {
            "ground_truth": "0",
            "function": "try_context_readahead",
            "description": "Context-based read-ahead from page cache."
        },
        "pageset_update": {
            "ground_truth": "0",
            "function": "pageset_update",
            "description": "Update related page allocation values safely without locking."
        },
        "migrate_balanced_pgdat": {
            "ground_truth": "0",
            "function": "migrate_balanced_pgdat",
            "description": "Check if safe migration target for misplaced numa page."
        },
        "ioctl_standard_call": {
            "ground_truth": "2",
            "function": "ioctl_standard_call",
            "description": "15 tokens: Wrapper for wireless extension handler with data transfer."
        },
        "cvmx_pip_config_vlan_qos": {
            "ground_truth": "0",
            "function": "cvmx_pip_config_vlan_qos",
            "description": "Configures VLAN priority and QoS queue for packet matching."
        },
        "free_pages_and_swap_cache": {
            "ground_truth": "0",
            "function": "free_pages_and_swap_cache",
            "description": "Free pages and swap cache, remove from LRU, release."
        },
        "page_mapping_file": {
            "ground_truth": "0",
            "function": "page_mapping_file",
            "description": "Map file pages, return address space or null."
        },
        "lru_add_drain_cpu": {
            "ground_truth": "0",
            "function": "lru_add_drain_cpu",
            "description": "LRU add drain CPU: swap page out, preemption disabled, hot unplug."
        },
        "__alloc_pages_direct_compact": {
            "ground_truth": "0",
            "function": "__alloc_pages_direct_compact",
            "description": "Allocate pages, compact memory for high order allocation."
        },
        "upd60620_read_status": {
            "ground_truth": "1",
            "function": "upd60620_read_status",
            "description": "Reads status of UPD60620 PHY driver from common register."
        },
        "get_slabinfo": {
            "ground_truth": "0",
            "function": "get_slabinfo",
            "description": "Function: get_slabinfo - mm slub proc slabinfo abi"
        },
        "try_to_merge_one_page": {
            "ground_truth": "0",
            "function": "try_to_merge_one_page",
            "description": "Merge two pages or return null, replace page with kpage."
        },
        "skb_panic": {
            "ground_truth": "1",
            "function": "skb_panic",
            "description": "skb_panic: private function for out-of-line skb support."
        },
        "__zswap_param_set": {
            "ground_truth": "0",
            "function": "__zswap_param_set",
            "description": "Set zswap parameter with null-terminated string."
        },
        "memcg_write_event_control": {
            "ground_truth": "0",
            "function": "memcg_write_event_control",
            "description": "Manage memory control events in cgroups."
        },
        "nfc_deactivate_target": {
            "ground_truth": "2",
            "function": "nfc_deactivate_target",
            "description": "Deactivate NFC target on specified device."
        },
        "alloc_block": {
            "ground_truth": "0",
            "function": "alloc_block",
            "description": "Allocate memory block and update slab list."
        },
        "rpm_callback": {
            "ground_truth": "3",
            "function": "rpm_callback",
            "description": "Run runtime PM callback for given device."
        },
        "nci_register_device": {
            "ground_truth": "2",
            "function": "nci_register_device",
            "description": "Register NCI device in NFC subsystem."
        },
        "lib80211_wep_encrypt": {
            "ground_truth": "2",
            "function": "lib80211_wep_encrypt",
            "description": "Encrypt wireless data using WEP algorithm with IV and ICV."
        },
        "whc_start": {
            "ground_truth": "2",
            "function": "whc_start",
            "description": "Start wireless host controller, set parameters, run device notification."
        },
        "free_unmap_vmap_area": {
            "ground_truth": "0",
            "function": "free_unmap_vmap_area",
            "description": "Free and unmap vmap area using mm and vmalloc."
        },
        "sock_common_setsockopt": {
            "ground_truth": "1",
            "function": "sock_common_setsockopt",
            "description": "Set socket option for inet socket in .NET Core."
        },
        "iwctl_giwpower": {
            "ground_truth": "2",
            "function": "iwctl_giwpower",
            "description": "Wireless power mode handler function."
        },
        "get_next_pkmap_nr": {
            "ground_truth": "0",
            "function": "get_next_pkmap_nr",
            "description": "Get next index for pkmap region mapping."
        },
        "atl1e_free_ring_resources": {
            "ground_truth": "1",
            "function": "atl1e_free_ring_resources",
            "description": "Free Atheros Ethernet resources in ATL1E driver."
        },
        "iwctl_giwscan": {
            "ground_truth": "2",
            "function": "iwctl_giwscan",
            "description": "Get wireless scan results with iwctl_giwscan."
        },
        "__do_kmalloc_node": {
            "ground_truth": "0",
            "function": "__do_kmalloc_node",
            "description": "Allocate memory using kmalloc and kmem cache."
        },
        "on_freelist": {
            "ground_truth": "0",
            "function": "on_freelist",
            "description": "Check object on freelist, need slab lock for consistency."
        },
        "build_zonelists": {
            "ground_truth": "0",
            "function": "build_zonelists",
            "description": "Build ordered zonelists for memory allocation, conserving DMA zone."
        },
        "add_to_kill": {
            "ground_truth": "0",
            "function": "add_to_kill",
            "description": "Description: Add process to kill list to avoid memory recursion."
        },
        "mminit_validate_memmodel_limits": {
            "ground_truth": "0",
            "function": "mminit_validate_memmodel_limits",
            "description": "Validate physical addressing limits of memory model."
        },
        "__next_mem_pfn_range": {
            "ground_truth": "0",
            "function": "__next_mem_pfn_range",
            "description": "Iterates over mem pfn ranges in mm and memblock."
        },
        "find_mergeable_anon_vma": {
            "ground_truth": "0",
            "function": "find_mergeable_anon_vma",
            "description": "Description: Check neighbouring vmas for mergeable anon vma."
        },
        "free_zbud_page": {
            "ground_truth": "0",
            "function": "free_zbud_page",
            "description": "Free zbud page, reset struct field."
        },
        "ksm_test_exit": {
            "ground_truth": "0",
            "function": "ksm_test_exit",
            "description": "Exit function for ksm test and cleanup."
        },
        "delete_from_swap_cache": {
            "ground_truth": "0",
            "function": "delete_from_swap_cache",
            "description": "Delete verified locked swap cache page, no free list."
        },
        "iwctl_siwfrag": {
            "ground_truth": "2",
            "function": "iwctl_siwfrag",
            "description": "Wireless handler sets fragment threshold."
        },
        "set_page_huge_active": {
            "ground_truth": "0",
            "function": "set_page_huge_active",
            "description": "Activate huge page for tail, mm hugetlb unused."
        },
        "__vma_adjust": {
            "ground_truth": "0",
            "function": "__vma_adjust",
            "description": "Adjust VMA start, end, pgoff in mmap tree."
        },
        "ieee80211_data_from_8023": {
            "ground_truth": "2",
            "function": "ieee80211_data_from_8023",
            "description": "Convert 802.3 frame to IEEE80211 data."
        },
        "device_link_add": {
            "ground_truth": "3",
            "function": "device_link_add",
            "description": "Create link between two devices. Caller synchronizes link creation with runtime pm. Setting dl flag pm runtime causes runtime pm framework to take link into account. If dl flag rpm active is set, supplier device is forced into active metastate and reference counted upon link creation. If dl flag pm runtime is not set, dl flag rpm active will be ignored. If dl flag stateless is set, caller is expected to release link directly with device link del or device link remove. If dl flag autoremove consumer or supplier is set, driver core can safely delete link after unbinding driver from device. If dl flag autoprobe consumer is set, driver core will automatically probe for consumer driver after binding driver to supplier device. Combination of dl flag stateless and one of dl flag autoremove consumer, dl flag autoremove supplier, or dl flag autoprobe consumer is invalid and will cause null to be returned. If device link between consumer and supplier pair exists already, existing link will be returned regardless of its current type and status. Side effect of link creation is reordering of dpm list and device kset list. Supplier device must be registered when function is called, and null will be returned if it is not. Consumer device need not be registered."
        },
        "__pmd_alloc": {
            "ground_truth": "0",
            "function": "__pmd_alloc",
            "description": "Allocate page middle directory in Linux MM."
        },
        "invalidate_inode_page": {
            "ground_truth": "0",
            "function": "invalidate_inode_page",
            "description": "Invalidate a page from pagecache mapping safely."
        },
        "fm10k_fifo_head_len": {
            "ground_truth": "1",
            "function": "fm10k_fifo_head_len",
            "description": "Returns size of first message in FM10K FIFO."
        },
        "aa_label_next_in_merge": {
            "ground_truth": "0",
            "function": "aa_label_next_in_merge",
            "description": "Security label iterator for AppArmor profile merging."
        },
        "tower_check_for_read_packet": {
            "ground_truth": "0",
            "function": "tower_check_for_read_packet",
            "description": "Check USB tower for incoming packets with non-blocking semantics."
        },
        "iwctl_siwessid": {
            "ground_truth": "2",
            "function": "iwctl_siwessid",
            "description": "Set wireless ESSID using iwctl."
        },
        "tegra20_das_connect_dap_to_dap": {
            "ground_truth": "0",
            "function": "tegra20_das_connect_dap_to_dap",
            "description": "Connects two DAPs in Tegra20 SoC."
        },
        "do_tune_cpucache": {
            "ground_truth": "0",
            "function": "do_tune_cpucache",
            "description": "Optimize CPU cache with mutex-locked mm slab."
        },
        "shmem_unuse_inode": {
            "ground_truth": "0",
            "function": "shmem_unuse_inode",
            "description": "Free swap and move page from swapcache to filecache."
        },
        "get_pageblock_bitmap": {
            "ground_truth": "0",
            "function": "get_pageblock_bitmap",
            "description": "Get bitmap for page block allocation."
        },
        "parse_acl_data": {
            "ground_truth": "2",
            "function": "parse_acl_data",
            "description": "Parse ACL data, allocate memory, return buffer."
        },
        "pin_user_pages_locked": {
            "ground_truth": "0",
            "function": "pin_user_pages_locked",
            "description": "Pin user pages with locked behavior and reject get."
        },
        "putback_movable_page": {
            "ground_truth": "0",
            "function": "putback_movable_page",
            "description": "Put movable page back on pg."
        },
        "put_object": {
            "ground_truth": "0",
            "function": "put_object",
            "description": "Decrements object use count, frees using RCU callback."
        },
        "get_pkmap_wait_queue_head": {
            "ground_truth": "0",
            "function": "get_pkmap_wait_queue_head",
            "description": "Get wait queue head for pkmap entry of given color."
        },
        "init_cma_reserved_pageblock": {
            "ground_truth": "0",
            "function": "init_cma_reserved_pageblock",
            "description": "Allocate and set CMA migration type for pageblock."
        },
        "__wb_writeout_inc": {
            "ground_truth": "0",
            "function": "__wb_writeout_inc",
            "description": "Function: Increment writeout completion count for page writeback."
        },
        "deferred_grow_zone": {
            "ground_truth": "0",
            "function": "deferred_grow_zone",
            "description": "Grow zone by initializing deferred pages, return true/false."
        },
        "__rmqueue_pcplist": {
            "ground_truth": "0",
            "function": "__rmqueue_pcplist",
            "description": "Remove page from per-cpu list, protect list, mm alloc."
        },
        "cmdline_parse_movablecore": {
            "ground_truth": "0",
            "function": "cmdline_parse_movablecore",
            "description": "Parse movablecore allocation for memory migration."
        },
        "__swap_duplicate": {
            "ground_truth": "0",
            "function": "__swap_duplicate",
            "description": "Verify and increment swap map count, return error code on failure."
        },
        "__page_file_mapping": {
            "ground_truth": "0",
            "function": "__page_file_mapping",
            "description": "Page file mapping: out-of-line method to avoid includes."
        },
        "stargate2_reset_bluetooth": {
            "ground_truth": "2",
            "function": "stargate2_reset_bluetooth",
            "description": "Reset Bluetooth on Stargate2 ARM PXA."
        },
        "get_descriptor_addr": {
            "ground_truth": "3",
            "function": "get_descriptor_addr",
            "description": "Read i2c descriptor header by type."
        },
        "tcp_make_synack": {
            "ground_truth": "1",
            "function": "tcp_make_synack",
            "description": "Allocate, build, and prepare TCP SYNACK packet."
        },
        "zswap_free_entry": {
            "ground_truth": "0",
            "function": "zswap_free_entry",
            "description": "Free zswap entry, decrement stored pages."
        },
        "fold_diff": {
            "ground_truth": "0",
            "function": "fold_diff",
            "description": "Fold differential, update global counter, return updated count."
        },
        "writeback_set_ratelimit": {
            "ground_truth": "0",
            "function": "writeback_set_ratelimit",
            "description": "Set page writeback ratelimit to avoid dirty data overload."
        },
        "free_tx_buffers": {
            "ground_truth": "1",
            "function": "free_tx_buffers",
            "description": "Free queued tx buffers in Neterion S2IO Ethernet driver."
        },
        "free_unref_page": {
            "ground_truth": "0",
            "function": "free_unref_page",
            "description": "Free unused memory pages."
        },
        "__cdns3_gadget_ep_queue": {
            "ground_truth": "0",
            "function": "__cdns3_gadget_ep_queue",
            "description": "Driver for USB CDNS3 gadget, queues endpoint requests."
        },
        "__udp4_lib_err_encap": {
            "ground_truth": "1",
            "function": "__udp4_lib_err_encap",
            "description": "Description: Match UDP tunnel with ICMP error, handle exceptions."
        },
        "node_page_state_pages": {
            "ground_truth": "0",
            "function": "node_page_state_pages",
            "description": "Node page state pages: mm vmstat per node stat item."
        },
        "zswap_frontswap_load": {
            "ground_truth": "0",
            "function": "zswap_frontswap_load",
            "description": "Zswap decompresses page, returns success or error."
        },
        "iwctl_giwrate": {
            "ground_truth": "2",
            "function": "iwctl_giwrate",
            "description": "Wireless handler gets data rate: iwctl_giwrate."
        },
        "me_unknown": {
            "ground_truth": "0",
            "function": "me_unknown",
            "description": "Unknown memory failure, do nothing."
        },
        "rmap_walk_file": {
            "ground_truth": "0",
            "function": "rmap_walk_file",
            "description": "Walk file pages using rmap method, handle page with control."
        },
        "shmem_add_to_page_cache": {
            "ground_truth": "0",
            "function": "shmem_add_to_page_cache",
            "description": "Add shmem page to cache, lock, error if item gone."
        },
        "do_anonymous_page": {
            "ground_truth": "0",
            "function": "do_anonymous_page",
            "description": "Map memory page with concurrent fault and unlocked PTE."
        },
        "add_page_for_migration": {
            "ground_truth": "0",
            "function": "add_page_for_migration",
            "description": "Description: Add page for migration, isolate from LRU, return error if not found."
        },
        "kmem_cache_free_bulk": {
            "ground_truth": "0",
            "function": "kmem_cache_free_bulk",
            "description": "Free memory in bulk with enabled interrupts."
        },
        "dualshock4_set_operational_bt": {
            "ground_truth": "2",
            "function": "dualshock4_set_operational_bt",
            "description": "Set BT mode, request feature report, send full input report."
        },
        "wusbhc_mmcie_set": {
            "ground_truth": "2",
            "function": "wusbhc_mmcie_set",
            "description": "Add/replace MMC wireless USB IE, allocated in kmalloc buffer. Caller owns pointer, no free on remove. Find first free spot in wusbhc mmcie array. Overwrite if already present. Use special ordering rule. Access wusbhc wa descr without locking."
        },
        "lock_zspage": {
            "ground_truth": "0",
            "function": "lock_zspage",
            "description": "Locks zsmalloc to prevent zspage destruction during migration."
        },
        "remap_pte_range": {
            "ground_truth": "0",
            "function": "remap_pte_range",
            "description": "Remap physical memory range, copy on access."
        },
        "dev_get_stats": {
            "ground_truth": "1",
            "function": "dev_get_stats",
            "description": "Get network device statistics from device driver or internal structure."
        },
        "free_pcp_prepare": {
            "ground_truth": "0",
            "function": "free_pcp_prepare",
            "description": "Debugs and allocates pages for PCP and free list."
        },
        "free_partial": {
            "ground_truth": "0",
            "function": "free_partial",
            "description": "Free partial slabs on node during kmem cache shutdown."
        },
        "fc_invoke_resp": {
            "ground_truth": "3",
            "function": "fc_invoke_resp",
            "description": "fc_invoke_resp: Driver function to modify SCSI response."
        },
        "bfa_ioc_recover": {
            "ground_truth": "0",
            "function": "bfa_ioc_recover",
            "description": "Recover BFA IOC firmware failure on Brocade BNA Ethernet driver."
        },
        "obj_offset": {
            "ground_truth": "0",
            "function": "obj_offset",
            "description": "Offset object in memory layout with padding and redzone."
        },
        "smack_key_free": {
            "ground_truth": "0",
            "function": "smack_key_free",
            "description": "Clear security key and blob object pointer."
        },
        "special_mapping_close": {
            "ground_truth": "0",
            "function": "special_mapping_close",
            "description": "Close hook prevents VMA merging, flag independent."
        },
        "chunk_map_stats": {
            "ground_truth": "0",
            "function": "chunk_map_stats",
            "description": "Print chunk stats for memory fragmentation in bytes."
        },
        "usb_enable_interface": {
            "ground_truth": "3",
            "function": "usb_enable_interface",
            "description": "Enables USB interface and resets endpoint state."
        },
        "calculate_totalreserve_pages": {
            "ground_truth": "0",
            "function": "calculate_totalreserve_pages",
            "description": "Calculate total reserve pages on low memory change."
        },
        "_base_get_chain_buffer_dma_to_chain_buffer": {
            "ground_truth": "3",
            "function": "_base_get_chain_buffer_dma_to_chain_buffer",
            "description": "Iterates chain lookup list, provides chain buffer address for DMA."
        },
        "handle_pte_fault": {
            "ground_truth": "0",
            "function": "handle_pte_fault",
            "description": "Handle page fault, update MMU cache, mark dirty/accessed."
        },
        "record_hugetlb_cgroup_uncharge_info": {
            "ground_truth": "0",
            "function": "record_hugetlb_cgroup_uncharge_info",
            "description": "Record hugetlb cgroup uncharge info in mm helper."
        },
        "usb_forced_unbind_intf": {
            "ground_truth": "3",
            "function": "usb_forced_unbind_intf",
            "description": "Force unbind USB interface driver, supports reset and suspend."
        },
        "get_map": {
            "ground_truth": "0",
            "function": "get_map",
            "description": "Function: get_map - Determine object map on page."
        },
        "get_file_region_entry_from_cache": {
            "ground_truth": "0",
            "function": "get_file_region_entry_from_cache",
            "description": "Get file region entry from cache for mm hugetlb helper."
        },
        "config_tsf_mode": {
            "ground_truth": "0",
            "function": "config_tsf_mode",
            "description": "Configures store-and-forward mode for RX and TX."
        },
        "snd_card_free": {
            "ground_truth": "3",
            "function": "snd_card_free",
            "description": "Free soundcard structure and associated devices automatically."
        },
        "alloc_buddy_huge_page_with_mpol": {
            "ground_truth": "0",
            "function": "alloc_buddy_huge_page_with_mpol",
            "description": "Allocate huge page with vma mpolicy using buddy."
        },
        "device_link_add_missing_supplier_links": {
            "ground_truth": "3",
            "function": "device_link_add_missing_supplier_links",
            "description": "Add supplier links to consumer devices on waitlist."
        },
        "print_block": {
            "ground_truth": "0",
            "function": "print_block",
            "description": "Print block mode, first to last, in ReiserFS."
        },
        "usb_free_coherent": {
            "ground_truth": "3",
            "function": "usb_free_coherent",
            "description": "Free USB memory allocated with matching parameters for reuse."
        },
        "usb_driver_release_interface": {
            "ground_truth": "3",
            "function": "usb_driver_release_interface",
            "description": "Unbinds USB driver from interface, synchronous, device lock required."
        },
        "split_vma": {
            "ground_truth": "0",
            "function": "split_vma",
            "description": "Split VMA at address, allocate new VMA for part."
        },
        "hugetlb_total_pages": {
            "ground_truth": "0",
            "function": "hugetlb_total_pages",
            "description": "Returns physical memory pages in page size unit."
        },
        "__sys_socketpair": {
            "ground_truth": "1",
            "function": "__sys_socketpair",
            "description": "Create connected socket pair."
        },
        "hmm_vma_handle_pmd": {
            "ground_truth": "0",
            "function": "hmm_vma_handle_pmd",
            "description": "Stub for compiling HMM VMA code."
        },
        "refresh_zone_stat_thresholds": {
            "ground_truth": "0",
            "function": "refresh_zone_stat_thresholds",
            "description": "Refresh zone thresholds using Linux VMstat."
        },
        "handle_channel": {
            "ground_truth": "2",
            "function": "handle_channel",
            "description": "Handle wireless channel bandwidth assumption for primary and extension."
        },
        "drain_all_pages": {
            "ground_truth": "0",
            "function": "drain_all_pages",
            "description": "Drains all pages from CPUs to buddy allocator, slow."
        },
        "_deferred_grow_zone": {
            "ground_truth": "0",
            "function": "_deferred_grow_zone",
            "description": "Deferred grow zone for early boot page allocation."
        },
        "page_frag_free": {
            "ground_truth": "0",
            "function": "page_frag_free",
            "description": "Free allocated page fragments from compound or order page."
        },
        "cpu_vm_stats_fold": {
            "ground_truth": "0",
            "function": "cpu_vm_stats_fold",
            "description": "Fold CPU VM stats into global array for offline CPU."
        },
        "set_primary_fwnode": {
            "ground_truth": "3",
            "function": "set_primary_fwnode",
            "description": "Description: Set primary firmware node for device in driver base core."
        },
        "wireless_send_event": {
            "ground_truth": "2",
            "function": "wireless_send_event",
            "description": "Send wireless event to user space."
        },
        "cvmx_spi4000_check_speed": {
            "ground_truth": "0",
            "function": "cvmx_spi4000_check_speed",
            "description": "Check SPI4000 port status on Octeon interface."
        },
        "__save_stack_trace": {
            "ground_truth": "0",
            "function": "__save_stack_trace",
            "description": "Save stack trace to array with max size."
        },
        "wusbhc_rh_create": {
            "ground_truth": "2",
            "function": "wusbhc_rh_create",
            "description": "wusbhc_rh_create: wireless USB fake root hub."
        },
        "driver_deferred_probe_check_state": {
            "ground_truth": "3",
            "function": "driver_deferred_probe_check_state",
            "description": "Check deferred probe state for driver or subsystem."
        },
        "swap_free_obj": {
            "ground_truth": "0",
            "function": "swap_free_obj",
            "description": "Swap free list entries in memory management slab."
        },
        "iwctl_giwname": {
            "ground_truth": "2",
            "function": "iwctl_giwname",
            "description": "Wireless protocol name retrieval function: iwctl_giwname."
        },
        "count_history_pages": {
            "ground_truth": "0",
            "function": "count_history_pages",
            "description": "Count cached pages from index to max index."
        },
        "packet_create": {
            "ground_truth": "1",
            "function": "packet_create",
            "description": "Create network packet of specified type."
        },
        "add_swap_count_continuation": {
            "ground_truth": "0",
            "function": "add_swap_count_continuation",
            "description": "Description: Linux function to add swap count continuation for duplicated swap count beyond max. Allocates new page and links to original swap map entry. Rarely referenced. Can be called with page table lock."
        },
        "usb_autosuspend_device": {
            "ground_truth": "3",
            "function": "usb_autosuspend_device",
            "description": "USB device autosuspend driver for core subsystem."
        },
        "add_full": {
            "ground_truth": "0",
            "function": "add_full",
            "description": "Add full slab tracking for debugging."
        },
        "__try_to_reclaim_swap": {
            "ground_truth": "0",
            "function": "__try_to_reclaim_swap",
            "description": "Check if swap entry is freed, return."
        },
        "__skb_fill_page_desc": {
            "ground_truth": "0",
            "function": "__skb_fill_page_desc",
            "description": "Initializes paged fragment in skb with given page, offset, and size."
        },
        "kmem_cache_debug_flags": {
            "ground_truth": "0",
            "function": "kmem_cache_debug_flags",
            "description": "Cache debug flags for slub with static key."
        },
        "accountable_mapping": {
            "ground_truth": "0",
            "function": "accountable_mapping",
            "description": "Map memory, account for private writeable, not hugepages."
        },
        "get_pcppage_migratetype": {
            "ground_truth": "0",
            "function": "get_pcppage_migratetype",
            "description": "Get page migratetype for pcplist caching."
        },
        "inet_autobind": {
            "ground_truth": "1",
            "function": "inet_autobind",
            "description": "Auto-bind IPv4 socket in AF_INET."
        },
        "fault_around_bytes_set": {
            "ground_truth": "0",
            "function": "fault_around_bytes_set",
            "description": "Fault around bytes set: round down to page order."
        },
        "fcoe_vport_create": {
            "ground_truth": "3",
            "function": "fcoe_vport_create",
            "description": "Create FCoE vPort for FC host, start disabled by default."
        },
        "__do_fault": {
            "ground_truth": "0",
            "function": "__do_fault",
            "description": "Description: Memory mmap lock, filemap fault, lock page retry."
        },
        "__late_set_fixmap": {
            "ground_truth": "0",
            "function": "__late_set_fixmap",
            "description": "Early ioremap for architecture with late set/clear fixmap."
        },
        "mincore_page": {
            "ground_truth": "0",
            "function": "mincore_page",
            "description": "Description: Check if page is in cache and up-to-date."
        },
        "kmem_cache_size": {
            "ground_truth": "0",
            "function": "kmem_cache_size",
            "description": "Determine slab object size in mm."
        },
        "mesh_path_discard_frame": {
            "ground_truth": "2",
            "function": "mesh_path_discard_frame",
            "description": "Discard unresolved mesh path frames in net/mac80211."
        },
        "ip6_tlvopt_unknown": {
            "ground_truth": "1",
            "function": "ip6_tlvopt_unknown",
            "description": "IPv6 exthdr unknown option handling."
        },
        "usb_release_dev": {
            "ground_truth": "3",
            "function": "usb_release_dev",
            "description": "Release USB device when disconnected by core."
        },
        "remove_migration_ptes": {
            "ground_truth": "0",
            "function": "remove_migration_ptes",
            "description": "Remove migration entries, replace with page reference."
        },
        "shm_add_rss_swap": {
            "ground_truth": "0",
            "function": "shm_add_rss_swap",
            "description": "Calculate and add shm r/swap page with rwsem reader."
        },
        "aa_label_alloc": {
            "ground_truth": "0",
            "function": "aa_label_alloc",
            "description": "Allocate security label with profile vector and proxy."
        },
        "find_next_to_unuse": {
            "ground_truth": "0",
            "function": "find_next_to_unuse",
            "description": "Find next unused entry in map using swap or frontswap."
        },
        "lpfc_sli4_config": {
            "ground_truth": "3",
            "function": "lpfc_sli4_config",
            "description": "Initialize lpfc_sli4_config mailbox command for lpfc driver."
        },
        "swap_shmem_alloc": {
            "ground_truth": "0",
            "function": "swap_shmem_alloc",
            "description": "Swap shmem allocation with reference count check."
        },
        "snd_request_card": {
            "ground_truth": "3",
            "function": "snd_request_card",
            "description": "Load sound card module via request for given card number."
        },
        "ieee80211_radiotap_iterator_init": {
            "ground_truth": "2",
            "function": "ieee80211_radiotap_iterator_init",
            "description": "Init opaque iterator struct to visit every radiotap arg in header. Handles extended present header. Call ieee80211_radiotap_iterator_init to init semi-opaque iterator struct. Loop calling ieee80211_radiotap_iterator_next until enoent or einval. Member pointers point to current arg and index. Take care with alignment when dereferencing."
        },
        "do_page_mkwrite": {
            "ground_truth": "0",
            "function": "do_page_mkwrite",
            "description": "Notify address space of writable page, sleep if needed."
        },
        "wp_clean_pre_vma": {
            "ground_truth": "0",
            "function": "wp_clean_pre_vma",
            "description": "Clean dirty pages, flush cache and TLB, notify MMU."
        },
        "device_remove_file_self": {
            "ground_truth": "3",
            "function": "device_remove_file_self",
            "description": "Remove sysfs file from device driver's own method."
        },
        "calculate_alignment": {
            "ground_truth": "0",
            "function": "calculate_alignment",
            "description": "Alignment calculation for user-specified object size."
        },
        "shmem_reconfigure": {
            "ground_truth": "0",
            "function": "shmem_reconfigure",
            "description": "Reconfigure shmem filesystem, limit change while in use."
        },
        "find_vma_prev": {
            "ground_truth": "0",
            "function": "find_vma_prev",
            "description": "Find previous vma pointer in find_vma."
        },
        "__sys_listen": {
            "ground_truth": "1",
            "function": "__sys_listen",
            "description": "Listen for protocol and mark socket ready."
        },
        "tcp_parse_options": {
            "ground_truth": "1",
            "function": "tcp_parse_options",
            "description": "Parse TCP options in IPv4 packets."
        },
        "build_all_zonelists": {
            "ground_truth": "0",
            "function": "build_all_zonelists",
            "description": "Builds zonelists during system booting with memory allocation."
        },
        "__pud_alloc": {
            "ground_truth": "0",
            "function": "__pud_alloc",
            "description": "Allocate page in Linux MM directory."
        },
        "parse_slub_debug_flags": {
            "ground_truth": "0",
            "function": "parse_slub_debug_flags",
            "description": "Description: Parse slub debug flags and return start of next block."
        },
        "snd_device_disconnect": {
            "ground_truth": "3",
            "function": "snd_device_disconnect",
            "description": "Disconnect sound core device, invoke callback, return success/error code."
        },
        "w1_netlink_send_error": {
            "ground_truth": "1",
            "function": "w1_netlink_send_error",
            "description": "Sends w1 netlink error message with cn msg."
        },
        "early_kmem_cache_node_alloc": {
            "ground_truth": "0",
            "function": "early_kmem_cache_node_alloc",
            "description": "Allocate memory for new node without slab structure."
        },
        "pageset_set_batch": {
            "ground_truth": "0",
            "function": "pageset_set_batch",
            "description": "Allocate pages in high memory using batch processing."
        },
        "__perform_reclaim": {
            "ground_truth": "0",
            "function": "__perform_reclaim",
            "description": "Reclaim pages synchronously using direct allocation."
        },
        "swap_cgroup_prepare": {
            "ground_truth": "0",
            "function": "swap_cgroup_prepare",
            "description": "Allocate buffer for swap cgroup in mm."
        },
        "chipio_8051_write_direct": {
            "ground_truth": "0",
            "function": "chipio_8051_write_direct",
            "description": "Directly write to internal address space, bypassing special function register."
        },
        "swap_writepage": {
            "ground_truth": "0",
            "function": "swap_writepage",
            "description": "Swap cache cleanup and write finalization."
        },
        "lpfc_ns_cmd": {
            "ground_truth": "3",
            "function": "lpfc_ns_cmd",
            "description": "Issue SCSI command to NameServer with lpfc driver."
        },
        "buddy_order": {
            "ground_truth": "0",
            "function": "buddy_order",
            "description": "Returns order of free page in buddy system."
        },
        "has_unmovable_pages": {
            "ground_truth": "0",
            "function": "has_unmovable_pages",
            "description": "Check for unmovable pages in page block without locking."
        },
        "shmem_swapin_page": {
            "ground_truth": "0",
            "function": "shmem_swapin_page",
            "description": "Swap in shmem page, return valid page or error."
        },
        "put_swap_page": {
            "ground_truth": "0",
            "function": "put_swap_page",
            "description": "Decrease swap entry refcnt after dropping swapcache."
        },
        "__rmqueue_smallest": {
            "ground_truth": "0",
            "function": "__rmqueue_smallest",
            "description": "Remove smallest page from free list for given migratetype."
        },
        "get_fullness_group": {
            "ground_truth": "0",
            "function": "get_fullness_group",
            "description": "Get fullness status of zspage groups for zsmalloc."
        },
        "set_up_node": {
            "ground_truth": "0",
            "function": "set_up_node",
            "description": "Description: Set up kmem cache node with mm slab."
        },
        "mem_cgroup_flush_foreign": {
            "ground_truth": "0",
            "function": "mem_cgroup_flush_foreign",
            "description": "Flush foreign dirtying events in Linux memcontrol."
        },
        "swap_cluster_schedule_discard": {
            "ground_truth": "0",
            "function": "swap_cluster_schedule_discard",
            "description": "Swap and discard cluster schedule."
        },
        "__sys_setsockopt": {
            "ground_truth": "1",
            "function": "__sys_setsockopt",
            "description": "Set socket option with user mode parameter for protocol."
        },
        "__soft_offline_page": {
            "ground_truth": "0",
            "function": "__soft_offline_page",
            "description": "Soft offline page handle for memory failure."
        },
        "read3byte": {
            "ground_truth": "0",
            "function": "read3byte",
            "description": "Reads 3 bytes from a file system inode."
        },
        "__shmem_file_setup": {
            "ground_truth": "0",
            "function": "__shmem_file_setup",
            "description": "Setup shared memory file in common code."
        },
        "sparse_init_nid": {
            "ground_truth": "0",
            "function": "sparse_init_nid",
            "description": "Initialize sparse on specific node with node span, section count."
        },
        "CARDbStartQuiet": {
            "ground_truth": "2",
            "function": "CARDbStartQuiet",
            "description": "Quiet start for CARDb, no spinlock parameter needed."
        },
        "buf_assign": {
            "ground_truth": "0",
            "function": "buf_assign",
            "description": "Assign buffer, test tool, consume data, return pointer or null."
        },
        "move_to_free_list": {
            "ground_truth": "0",
            "function": "move_to_free_list",
            "description": "Move allocated page to free list for memory optimization."
        },
        "reg_process_hint_user": {
            "ground_truth": "2",
            "function": "reg_process_hint_user",
            "description": "Wireless regulatory request processing for user initiated requests."
        },
        "ptep_set_access_flags": {
            "ground_truth": "0",
            "function": "ptep_set_access_flags",
            "description": "10 tokens: Set access flags for page table entry."
        },
        "refill_stock": {
            "ground_truth": "0",
            "function": "refill_stock",
            "description": "Refill stock cache with local CPU memory."
        },
        "__pageblock_pfn_to_page": {
            "ground_truth": "0",
            "function": "__pageblock_pfn_to_page",
            "description": "Check pageblock validity, return page or null."
        },
        "deferred_pfn_valid": {
            "ground_truth": "0",
            "function": "deferred_pfn_valid",
            "description": "Check if page needs initialization or freeing from buddy allocator."
        },
        "mpol_free_shared_policy": {
            "ground_truth": "0",
            "function": "mpol_free_shared_policy",
            "description": "Free shared policy on inode delete."
        },
        "zs_stat_inc": {
            "ground_truth": "0",
            "function": "zs_stat_inc",
            "description": "Description: Increment zsmalloc z stat or fullness group."
        },
        "check_new_page": {
            "ground_truth": "0",
            "function": "check_new_page",
            "description": "Check new page: MM page alloc, return from allocator."
        },
        "tb_ring_alloc_rx": {
            "ground_truth": "3",
            "function": "tb_ring_alloc_rx",
            "description": "Allocate Thunderbolt DMA receive ring for NHI driver."
        },
        "nr_hugepages_mempolicy_show": {
            "ground_truth": "0",
            "function": "nr_hugepages_mempolicy_show",
            "description": "Show mempolicy constraint on huge page allocation."
        },
        "device_bind_driver": {
            "ground_truth": "3",
            "function": "device_bind_driver",
            "description": "Bind driver to device, manual attachment, device lock held."
        },
        "device_release_driver": {
            "ground_truth": "3",
            "function": "device_release_driver",
            "description": "Manually detach device from driver, requires parent lock."
        },
        "mempool_alloc_pages": {
            "ground_truth": "0",
            "function": "mempool_alloc_pages",
            "description": "Allocate pages of specified order using mempool."
        },
        "__early_pfn_to_nid": {
            "ground_truth": "0",
            "function": "__early_pfn_to_nid",
            "description": "Convert PFN to NUMA node on IA64 architecture."
        },
        "zswap_entry_find_get": {
            "ground_truth": "0",
            "function": "zswap_entry_find_get",
            "description": "Find and get zswap entry with tree lock held."
        },
        "device_set_of_node_from_dev": {
            "ground_truth": "3",
            "function": "device_set_of_node_from_dev",
            "description": "Set device tree node, reuse from another device."
        },
        "mm_find_pmd": {
            "ground_truth": "0",
            "function": "mm_find_pmd",
            "description": "Find PMD in MM RMAP using MM RMAP."
        },
        "deferred_init_memmap": {
            "ground_truth": "0",
            "function": "deferred_init_memmap",
            "description": "Init memmap, alloc mm page, node memory."
        },
        "subsys_dev_iter_init": {
            "ground_truth": "3",
            "function": "subsys_dev_iter_init",
            "description": "Iterate over subsys devices, starting at specified device."
        },
        "usb_bus_notify": {
            "ground_truth": "3",
            "function": "usb_bus_notify",
            "description": "Notify USB driver of device/interface registration."
        },
        "create_kmalloc_caches": {
            "ground_truth": "0",
            "function": "create_kmalloc_caches",
            "description": "Description: Create kmalloc caches for memory allocation."
        },
        "dvbv3_set_delivery_system": {
            "ground_truth": "3",
            "function": "dvbv3_set_delivery_system",
            "description": "Description: Set delivery system for DVBv3 API call, limited backward compatibility, default to first supported system, compatible with frontends supporting one system."
        },
        "sock_register": {
            "ground_truth": "1",
            "function": "sock_register",
            "description": "Registers socket protocol handler for socket interface."
        },
        "__offline_isolated_pages": {
            "ground_truth": "0",
            "function": "__offline_isolated_pages",
            "description": "Allocate contiguous isolated pages in single zone."
        },
        "__gup_longterm_locked": {
            "ground_truth": "0",
            "function": "__gup_longterm_locked",
            "description": "Wrapper for get user page locked with longterm flag processing."
        },
        "__munlock_pagevec_fill": {
            "ground_truth": "0",
            "function": "__munlock_pagevec_fill",
            "description": "Description: Fill pagevec for munlock using pte walk."
        },
        "remove_vma_list": {
            "ground_truth": "0",
            "function": "remove_vma_list",
            "description": "Free memory area on vma list, update with mm semaphore."
        },
        "find_smallest_section_pfn": {
            "ground_truth": "0",
            "function": "find_smallest_section_pfn",
            "description": "Find smallest valid pfn in memory range."
        },
        "__kmem_cache_alloc_bulk": {
            "ground_truth": "0",
            "function": "__kmem_cache_alloc_bulk",
            "description": "Allocates multiple objects in bulk for generic memory management."
        },
        "swapcache_prepare": {
            "ground_truth": "0",
            "function": "swapcache_prepare",
            "description": "Prepare swap cache allocation for existing entry, return error/success."
        },
        "__frontswap_shrink": {
            "ground_truth": "0",
            "function": "__frontswap_shrink",
            "description": "Check, unuse, shrink page with frontswap. Error code if needed."
        },
        "ieee80211_radiotap_iterator_next": {
            "ground_truth": "2",
            "function": "ieee80211_radiotap_iterator_next",
            "description": "Iterate wireless radiotap args, handle alignment, return next."
        },
        "kswapd": {
            "ground_truth": "0",
            "function": "kswapd",
            "description": "Background pageout daemon trickles out pages for free memory."
        },
        "device_unblock_probing": {
            "ground_truth": "3",
            "function": "device_unblock_probing",
            "description": "Unblock device probing, restore behavior, trigger re-probing."
        },
        "unknown_bootoption": {
            "ground_truth": "0",
            "function": "unknown_bootoption",
            "description": "Init gets unknown boot option from proc cmdline."
        },
        "do_pages_stat_array": {
            "ground_truth": "0",
            "function": "do_pages_stat_array",
            "description": "Node of page array stored in status array."
        },
        "rxrpc_kernel_end_call": {
            "ground_truth": "0",
            "function": "rxrpc_kernel_end_call",
            "description": "Description: End kernel call on socket and call."
        },
        "__device_links_queue_sync_state": {
            "ground_truth": "3",
            "function": "__device_links_queue_sync_state",
            "description": "Sync state callback for device links queue with device struct."
        },
        "device_driver_detach": {
            "ground_truth": "3",
            "function": "device_driver_detach",
            "description": "Detach driver from specific device, acquire locks if needed."
        },
        "usb_alloc_coherent": {
            "ground_truth": "3",
            "function": "usb_alloc_coherent",
            "description": "Allocate USB DMA buffer for URB with consistent DMA mapping, free with USB free coherent."
        },
        "do_set_mempolicy": {
            "ground_truth": "0",
            "function": "do_set_mempolicy",
            "description": "Set process memory policy in do_set_mempolicy."
        },
        "init_zero_pfn": {
            "ground_truth": "0",
            "function": "init_zero_pfn",
            "description": "Initialize zero page in paging for memory configuration."
        },
        "create_object": {
            "ground_truth": "0",
            "function": "create_object",
            "description": "Description: Create metadata for allocated memory block and add to list."
        },
        "kasan_poison_shadow": {
            "ground_truth": "0",
            "function": "kasan_poison_shadow",
            "description": "Kasan poison shadow memory for aligned memory address."
        },
        "alloc_slab_page": {
            "ground_truth": "0",
            "function": "alloc_slab_page",
            "description": "Allocate and free memory using mm slub slab."
        },
        "drain_pages": {
            "ground_truth": "0",
            "function": "drain_pages",
            "description": "Drains pages from specified processor's zones."
        },
        "section_deactivate": {
            "ground_truth": "0",
            "function": "section_deactivate",
            "description": "Deactivate memory region, handle cases, sparsemem, vmemmap, partial, complete, subsection, free, unified."
        },
        "bt_to_errno": {
            "ground_truth": "2",
            "function": "bt_to_errno",
            "description": "Map Bluetooth error to Unix errno."
        },
        "freeptr_outside_object": {
            "ground_truth": "0",
            "function": "freeptr_outside_object",
            "description": "Free memory outside object in mm slub."
        },
        "set_selection_user": {
            "ground_truth": "3",
            "function": "set_selection_user",
            "description": "Description: Set user selection for console tty."
        },
        "__build_skb": {
            "ground_truth": "1",
            "function": "__build_skb",
            "description": "Allocate network buffer with head and data space."
        },
        "reset_vma_resv_huge_pages": {
            "ground_truth": "0",
            "function": "reset_vma_resv_huge_pages",
            "description": "Reset VMA huge page reservation counter and clear flags."
        },
        "free_pool_huge_page": {
            "ground_truth": "0",
            "function": "free_pool_huge_page",
            "description": "Free huge page from pool, balance over nodes."
        },
        "__add_pages": {
            "ground_truth": "0",
            "function": "__add_pages",
            "description": "Add memory pages to zone with hotplug support."
        },
        "iwctl_siwretry": {
            "ground_truth": "2",
            "function": "iwctl_siwretry",
            "description": "Wireless handler sets retry threshold."
        },
        "atalk_rcv": {
            "ground_truth": "1",
            "function": "atalk_rcv",
            "description": "Receive AppleTalk packet from network device."
        },
        "prism2mib_excludeunencrypted": {
            "ground_truth": "2",
            "function": "prism2mib_excludeunencrypted",
            "description": "Exclude unencrypted flag for Prism2 MIB record."
        },
        "sp_lookup": {
            "ground_truth": "0",
            "function": "sp_lookup",
            "description": "Lookup element with SP lock, read/write, start/end intersection."
        },
        "__next_zones_zonelist": {
            "ground_truth": "0",
            "function": "__next_zones_zonelist",
            "description": "Return next zone below highest in zonelist."
        },
        "emac_set_features": {
            "ground_truth": "1",
            "function": "emac_set_features",
            "description": "Configure Ethernet driver for Qualcomm EMAC with VLAN tagging."
        },
        "mem_map_offset": {
            "ground_truth": "0",
            "function": "mem_map_offset",
            "description": "Map offset subpage in max aligned page, handle discontiguity."
        },
        "try_purge_vmap_area_lazy": {
            "ground_truth": "0",
            "function": "try_purge_vmap_area_lazy",
            "description": "Purge lazy vmap area, avoid duplicate purging."
        },
        "tpacpi_driver_bluetooth_emulstate_show": {
            "ground_truth": "2",
            "function": "tpacpi_driver_bluetooth_emulstate_show",
            "description": "Show Bluetooth emulation state."
        },
        "tty_dev_name_to_number": {
            "ground_truth": "3",
            "function": "tty_dev_name_to_number",
            "description": "Converts device name to dev number in Linux."
        },
        "slub_cpu_dead": {
            "ground_truth": "0",
            "function": "slub_cpu_dead",
            "description": "Flush CPU slabs with mm slub and notifier."
        },
        "iwctl_giwap": {
            "ground_truth": "2",
            "function": "iwctl_giwap",
            "description": "Get wireless AP MAC address handler."
        },
        "device_initialize": {
            "ground_truth": "3",
            "function": "device_initialize",
            "description": "Initialize device driver structure for use by other layers."
        },
        "xgbe_alloc_pdata": {
            "ground_truth": "1",
            "function": "xgbe_alloc_pdata",
            "description": "Allocate XGBE driver's main function prototype."
        },
        "fcoe_ctlr_vn_lookup": {
            "ground_truth": "0",
            "function": "fcoe_ctlr_vn_lookup",
            "description": "Lookup VN node using FCoE controller and MAC address."
        },
        "process_join_error": {
            "ground_truth": "0",
            "function": "process_join_error",
            "description": "Join error handling for Infiniband multicast."
        },
        "upd60620_config_init": {
            "ground_truth": "1",
            "function": "upd60620_config_init",
            "description": "Initialize UPD60620 network driver and PHY."
        },
        "rpc_cmp_addr": {
            "ground_truth": "0",
            "function": "rpc_cmp_addr",
            "description": "Compares two sockaddrs, ignoring port and comparing scope."
        },
        "nfc_alloc_send_skb": {
            "ground_truth": "2",
            "function": "nfc_alloc_send_skb",
            "description": "Allocate skb for data exchange response in net nfc core."
        },
        "pcpu_next_hint": {
            "ground_truth": "0",
            "function": "pcpu_next_hint",
            "description": "Selects hint for allocation based on scan and contig hints."
        },
        "recv_skb": {
            "ground_truth": "0",
            "function": "recv_skb",
            "description": "Receive data packet for pseudowire session with sequence number."
        },
        "usb_disconnect": {
            "ground_truth": "3",
            "function": "usb_disconnect",
            "description": "Disconnect USB device, remove all child devices, synchronous."
        },
        "usb_for_each_dev": {
            "ground_truth": "3",
            "function": "usb_for_each_dev",
            "description": "Iterate over USB devices, call callback for each."
        },
        "__check_heap_object": {
            "ground_truth": "0",
            "function": "__check_heap_object",
            "description": "Check heap object, reject incorrect size, usercopy region, return error."
        },
        "slob_next": {
            "ground_truth": "0",
            "function": "slob_next",
            "description": "Returns next free slob block pointer after current."
        },
        "bprm_caps_from_vfs_caps": {
            "ground_truth": "0",
            "function": "bprm_caps_from_vfs_caps",
            "description": "Security cap calculation from file cap set."
        },
        "dev_set_name": {
            "ground_truth": "3",
            "function": "dev_set_name",
            "description": "Set device name for driver base core."
        },
        "shm_destroy": {
            "ground_truth": "0",
            "function": "shm_destroy",
            "description": "Free and destroy shmid kernel struct with shp."
        },
        "free_pgd_range": {
            "ground_truth": "0",
            "function": "free_pgd_range",
            "description": "Free user page table of process in memory."
        },
        "fake_get_phy": {
            "ground_truth": "3",
            "function": "fake_get_phy",
            "description": "Returns WPAN phy object for device, incrementing reference counter."
        },
        "netdev_unregister_kobject": {
            "ground_truth": "1",
            "function": "netdev_unregister_kobject",
            "description": "Unregister netdev kobject after netdev references are gone."
        },
        "__alloc_skb": {
            "ground_truth": "1",
            "function": "__alloc_skb",
            "description": "Description: Allocate network buffer with size, mask, flag, and node."
        },
        "zswap_pool_find_get": {
            "ground_truth": "0",
            "function": "zswap_pool_find_get",
            "description": "Find and get zswap pool with null terminated type and compressor."
        },
        "cmp_and_merge_page": {
            "ground_truth": "0",
            "function": "cmp_and_merge_page",
            "description": "Compare and merge page, stable/unstable tree, checksum, rmap item."
        },
        "try_online_node": {
            "ground_truth": "0",
            "function": "try_online_node",
            "description": "Online Linux node registration with memory hotplug."
        },
        "__alloc_vmap_area": {
            "ground_truth": "0",
            "function": "__alloc_vmap_area",
            "description": "Allocate virtual memory area using vmalloc."
        },
        "dump_object_info": {
            "ground_truth": "0",
            "function": "dump_object_info",
            "description": "Debugging function for kmemleak object info."
        },
        "tcp_should_autocork": {
            "ground_truth": "1",
            "function": "tcp_should_autocork",
            "description": "TCP auto-corking to coalesce data packets for efficient transmission."
        },
        "hub_port_connect_change": {
            "ground_truth": "3",
            "function": "hub_port_connect_change",
            "description": "USB hub port connection change event handler."
        },
        "nfp_cpp_writeq": {
            "ground_truth": "1",
            "function": "nfp_cpp_writeq",
            "description": "Write u64 word to NFP CPP location."
        },
        "intel_pt_ff_cb": {
            "ground_truth": "0",
            "function": "intel_pt_ff_cb",
            "description": "Fast-forward callback for Intel PT decoder in perf util tool."
        },
        "iwctl_giwfreq": {
            "ground_truth": "2",
            "function": "iwctl_giwfreq",
            "description": "Get wireless frequency/channel with iwctl_giwfreq."
        },
        "crypto_akcipher_encrypt": {
            "ground_truth": "0",
            "function": "crypto_akcipher_encrypt",
            "description": "Encrypts data using public key algorithm."
        },
        "baycom_ser_fdx_setup": {
            "ground_truth": "1",
            "function": "baycom_ser_fdx_setup",
            "description": "Baycom serial full-duplex setup for ham radio network."
        },
        "__remove_object": {
            "ground_truth": "0",
            "function": "__remove_object",
            "description": "Remove object from tree and list with kmemleak lock."
        },
        "online_mem_sections": {
            "ground_truth": "0",
            "function": "online_mem_sections",
            "description": "Mark memory sections online within PFN range."
        },
        "shmem_reserve_inode": {
            "ground_truth": "0",
            "function": "shmem_reserve_inode",
            "description": "Reserves shmem inode, produces new ino, handles hard links."
        },
        "vma_set_page_prot": {
            "ground_truth": "0",
            "function": "vma_set_page_prot",
            "description": "Update VMA page protection based on VMA flags."
        },
        "__vm_enough_memory": {
            "ground_truth": "0",
            "function": "__vm_enough_memory",
            "description": "Check process memory for virtual mapping allocation."
        },
        "of_find_net_device_by_node": {
            "ground_truth": "1",
            "function": "of_find_net_device_by_node",
            "description": "Lookup net device by device node in sysfs."
        },
        "atalk_getname": {
            "ground_truth": "1",
            "function": "atalk_getname",
            "description": "Get Appletalk socket name from DDP."
        },
        "nfc_dev_up": {
            "ground_truth": "2",
            "function": "nfc_dev_up",
            "description": "Turn on NFC device until dev down called."
        },
        "wp_clean_pmd_entry": {
            "ground_truth": "0",
            "function": "wp_clean_pmd_entry",
            "description": "Clean dirty page table entries, avoid splitting huge pages."
        },
        "pageout": {
            "ground_truth": "0",
            "function": "pageout",
            "description": "mm vmscan pageout for dirty page write."
        },
        "unfreeze_partials": {
            "ground_truth": "0",
            "function": "unfreeze_partials",
            "description": "Unfreeze CPU partial slabs, disable interrupts, prevent concurrent access."
        },
        "enable_cpucache": {
            "ground_truth": "0",
            "function": "enable_cpucache",
            "description": "Enables CPU cache for MM slab mutex."
        },
        "section_mark_present": {
            "ground_truth": "0",
            "function": "section_mark_present",
            "description": "Check section presence, optimize large loops."
        },
        "inet_listen": {
            "ground_truth": "1",
            "function": "inet_listen",
            "description": "Listen for IPv4 connections on a socket."
        },
        "verify_signature": {
            "ground_truth": "0",
            "function": "verify_signature",
            "description": "Verify signature using asymmetric key and public key."
        },
        "drm_gem_handle_create_tail": {
            "ground_truth": "3",
            "function": "drm_gem_handle_create_tail",
            "description": "Create handle for DRM GEM GPU driver function."
        },
        "__sys_getsockname": {
            "ground_truth": "1",
            "function": "__sys_getsockname",
            "description": "Get socket's local address and move to user space."
        },
        "free_page_and_swap_cache": {
            "ground_truth": "0",
            "function": "free_page_and_swap_cache",
            "description": "Free page and associated swap cache."
        },
        "ethtool_rxfh_indir_default": {
            "ground_truth": "0",
            "function": "ethtool_rxfh_indir_default",
            "description": "Get default rx flow hash indirection policy for ethtool."
        },
        "do_brk_flags": {
            "ground_truth": "0",
            "function": "do_brk_flags",
            "description": "Handle anonymous mmap, simplified brk accounting."
        },
        "dvb_frontend_sleep_until": {
            "ground_truth": "3",
            "function": "dvb_frontend_sleep_until",
            "description": "Function: dvb_frontend_sleep_until - Sleeps for given time in microseconds. Used to measure time for fe dishnetwork send legacy cmd ioctl. Precise timing affects detection of dish tone command. Used internally by dvb frontend core to emulate fe dishnetwork send legacy cmd using dvb frontend ops set voltage callback. Should not be used at driver level except in case of hardware bugs. Takes ktime waketime pointer and u32 add usec as parameters."
        },
        "shake_page": {
            "ground_truth": "0",
            "function": "shake_page",
            "description": "Shake page\" - recover memory by draining buffers."
        },
        "nfc_unregister_device": {
            "ground_truth": "2",
            "function": "nfc_unregister_device",
            "description": "Unregister NFC device from subsystem."
        },
        "nfsdfs_remove_file": {
            "ground_truth": "0",
            "function": "nfsdfs_remove_file",
            "description": "Remove file from NFS server using RPC."
        },
        "usb_autopm_put_interface": {
            "ground_truth": "3",
            "function": "usb_autopm_put_interface",
            "description": "Decrement USB interface PM usage counter for autosuspend."
        }
    }
}