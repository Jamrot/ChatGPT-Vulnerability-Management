{
    "Derby": {
        "3634": {
            "ground_truth": "0",
            "bug_report": "Cannot use row_number() in ORDER BY clause\nThe following query works correctly:select abs(a)  row_number() over ()from twhere a &gt; 100 and a &lt; 111order by abs(a)I expected the following query to also work  but it raised an exception:select abs(a)  row_number() over ()from twhere a &gt; 100 and a &lt; 111order by row_number() over ()This is the error I saw: 'ERROR 42X01: Syntax error: Encountered 'over' at line 5  column 23'.Here are the reasons why I think that this syntax is supposed to be supported:According to my reading of the 2003 SQL spec  the ORDER BY clause should be able to sort on any expression in the SELECT list. That includes OLAP expressions. I believe this is so because  according to part 2  section 10.10 (&lt;sort specification&gt;)  a &lt;sort key&gt; can be any &lt;value expression&gt; and if you follow the grammar for &lt;value expression&gt;  it can resolve to be a &lt;value expression primary&gt; (see section 6.3)  which can in turn resolve to be a &lt;window function&gt;. This reasoning is supported by tracing the hotlinks on the following page which lays out the SQL 2003 BNF: http://savage.net.au/SQL/sql-2003-2.bnf.html This interpretation is further supported by the example of an ORDER BY clause referencing an OLAP expression which is provided on page 23 of the introduction to OLAP written by Fred Zemke  Krishna Kulkarni  Andy Witkowski  and Bob Lyle: www.cse.iitb.ac.in/dbms/Data/Papers-Other/SQL1999/OLAP-99-154r2.pdf",
            "id": "3634"
        },
        "3652": {
            "ground_truth": "0",
            "bug_report": "Derby does not follow the SQL Standard when trying to map SQL routines to Java methods.\nI have only tested this in the 10.5 trunk. However  I suspect that this affects all previous releases of Derby as well.In resolving method signatures for function/procedure invocations  the SQL standard makes the following definitions in part 13  section 4.5 (parameter mapping). These definitions  in turn  refer to tables B-1 and B-3 in JDBC 3.0 Specification  Final Release  October 2001 (&#91;JDBC&#93;). Simply mappable - This refers to the correspondence of SQL and Java types described in &#91;JDBC&#93; table B-1. This is the table which defines the mapping of SQL types to Java primitives. Object mappable - This refers to the correspondence of SQL and Java types described in &#91;JDBC&#93; table B-3. This is the table which defines the mapping of SQL types to Java wrapper objects. Output mappable - For OUT and INOUT parameters  this refers to a single element array whose cell is simply mappable or object mappable. E.g. Integer[] or float[]. Mappable - This means simply  object  or output mappable. Result set mappable - This means a single element array whose cell is a type which implements either java.sql.ResultSet or sqlj.runtime.ResultSetIterator.Putting all of this together  section 4.5 continues: 'A Java method with M parameters is mappable (to SQL) if and only if  for some N  0 (zero) &lt;= N &lt;= M  the data types of the first N parameters are mappable  the last M - N parameters are result set mappable  and the result type is either simply mappable  object mappable  or void.'Section 8.6 gives more detailed rules  but they are hard to follow. According to section 8.6  when resolving a routine invocation  Derby should expect to find one and only one static mappable method with the expected external name (Java class + method name).I believe that this is a fair description of the rules. This  at least  is what some other databases appear to do. See  for instance  http://infocenter.sybase.com/help/index.jsp?topic=/com.sybase.help.ase_15.0.java/html/java/java126.htm and http://www.service-architecture.com/database/articles/mapping_sql_and_java_data_types.htmlWe do not have a regression test which verifies that Derby applies the SQL standard resolution rules. There may be several divergences from the standard. This JIRA is a place to track those discrepancies. Here is one that I have noticed:The following SQL signature( a int ) returns intshould be mappable to any of the following Java signaturespublic static int f( int a )public static int f( Integer a )public static Integer f( int a )public static Integer f( Integer a )However  I observe that Derby is only able to resolve the first and third signatures (the ones with primitive arguments). I will attach a test case showing this problem.I will also attach an html table summarizing the simply and object mappable rules.",
            "id": "3652"
        },
        "3655": {
            "ground_truth": "0",
            "bug_report": "errror in nightly regression test: LobStreamsTest:encryptedjunit.framework.AssertionFailedError: f:/jartest/JarResults.2008-04-29/ibm16_suites.All/system/singleUse/oneuse1e/tmp/lob6165.tmp\nThere was 1 failure:1) LobStreamsTest:encryptedjunit.framework.AssertionFailedError: f:/jartest/JarResults.2008-04-29/ibm16_suites.All/system/singleUse/oneuse1e/tmp/lob6165.tmp at org.apache.derbyTesting.junit.DropDatabaseSetup.removeDir(DropDatabaseSetup.java:130) at org.apache.derbyTesting.junit.DropDatabaseSetup.removeDir(DropDatabaseSetup.java:128) at org.apache.derbyTesting.junit.DropDatabaseSetup.access$000(DropDatabaseSetup.java:35) at org.apache.derbyTesting.junit.DropDatabaseSetup$1.run(DropDatabaseSetup.java:105) at java.security.AccessController.doPrivileged(AccessController.java:202) at org.apache.derbyTesting.junit.DropDatabaseSetup.removeDirectory(DropDatabaseSetup.java:102) at org.apache.derbyTesting.junit.DropDatabaseSetup.removeDirectory(DropDatabaseSetup.java:98) at org.apache.derbyTesting.junit.DropDatabaseSetup.removeDatabase(DropDatabaseSetup.java:91) at org.apache.derbyTesting.junit.DropDatabaseSetup.tearDown(DropDatabaseSetup.java:77) at junit.extensions.TestSetup$1.protect(TestSetup.java:20) at junit.extensions.TestSetup.run(TestSetup.java:23) at org.apache.derbyTesting.junit.BaseTestSetup.run(BaseTestSetup.java:57) at junit.extensions.TestDecorator.basicRun(TestDecorator.java:22) at junit.extensions.TestSetup$1.protect(TestSetup.java:19) at junit.extensions.TestSetup.run(TestSetup.java:23)",
            "id": "3655"
        },
        "3657": {
            "ground_truth": "1",
            "bug_report": "Comment in template security policy incorrectly says that JMX is not enabled by default\nThe template policy located at $DERBY_HOME/demo/templates/server.policy (release distributions) and $trunk/java/drda/org/apache/derby/drda/template.policy (source tree) contains a comment relating to JMX permissions which says:// JMX management of Derby is NOT enabled by default; see also DERBY-1387.This was no longer true after DERBY-3429 was fixed  which includes the 10.4.1.3 release. JMX monitoring and management is enabled by default given that the JVM includes the required APIs  and that the security policy allows JMX features to come up. The comment should have been removed  but this has not happened. The same applies to the default server policy  server.policy  which also should be corrected (this policy's comments are however not exposed to users in the same way as the template).Note that no code or actual permissions need to change as a result of this; it is merely an outdated comment that needs to be removed in order not to give users a false impression.",
            "id": "3657"
        },
        "3658": {
            "ground_truth": "0",
            "bug_report": "LOBStateTracker should not use SYSIBM.CLOBRELEASELOCATOR when the database is soft-upgraded from 10.2\nReported by Daniel Noll on derby-user: http://thread.gmane.org/gmane.comp.apache.db.derby.user/9107To reproduce: 1. Create a database with Derby 10.2.2.0 2. Create a table with a clob column and insert some data 3. Access that database with client+server at version 10.4.1.3 and iterate through the rows in the tableYou'll see an error message like this:ERROR 42Y03: 'SYSIBM.CLOBRELEASELOCATOR' is not recognized as a function or procedure.",
            "id": "3658"
        },
        "3674": {
            "ground_truth": "0",
            "bug_report": "'ALTER TABLE' is not allowed on the System table ''SYSCS_DIAG'.'TRANSACTION_TABLE'' in derbyall - store/TransactionTable.sql\nSee e.g. http://dbtg.thresher.com/derby/test/tinderbox_trunk16/jvm1.6/testing/testlog/SunOS-5.10_i86pc-i386/655989-derbyall_diff.txt&lt;method&gt;store/TransactionTable.sql&lt;/method&gt;&lt;signature&gt;268 del&lt; 0 rows inserted/updated/deleted268a268 269&gt; ERROR 38000: The exception 'java.sql.SQLException: 'ALTER TABLE' is not allowed on the System table ''SY/SCS_DIAG'.'TRANSACTION_TABLE''.' was thrown while evaluating an expression.&gt; ERROR X0Y56: 'ALTER TABLE' is not allowed on the System table ''SYSCS_DIAG'.'TRANSACTION_TABLE''.&lt;/signature&gt;",
            "id": "3674"
        },
        "3682": {
            "ground_truth": "0",
            "bug_report": "SYSCS_BULK_INSERT doesn't quote identifiers or strings properly\nDiscovered by Mamta A. Satoor in DERBY-1062.SYSCS_BULK_INSERT builds an insert statement in which it doesn't quote the schema name or the table name. It also takes string parameters that are inserted into the statement text with single quotes around them  but that won't work if those strings contain single quote characters.",
            "id": "3682"
        },
        "3695": {
            "ground_truth": "1",
            "bug_report": "NullPointerException when invoking statement event listeners if one of the listeners is null\nIf PooledConnection.addStatementEventListener() is called with a null argument  the client driver throws a NullPointerException when the listeners are invoked. Embedded does not throw an exception.",
            "id": "3695"
        },
        "3704": {
            "ground_truth": "0",
            "bug_report": "If an IOException is encountered during establishment of the connection  Network Server should print the root exception to the console instead of a generic message\nIn working on DERBY-3701  I noticed that when the FileNotFound exception caused the connection to fail it just printed out a generic exception  not the IOException that caused the error.That is because of this code in ClientThread. catch (IOException ioe) { // IOException causes this thread to stop. No // console error message if this was caused by a // shutdown synchronized (parent.getShutdownSync()) { if (!parent.getShutdown()) { parent.consolePropertyMessage('DRDA_UnableToAccept.S'); } }In the event of an unexpected IOException the actual exception should print and the client socket should be closed if it has been established.",
            "id": "3704"
        },
        "3705": {
            "ground_truth": "0",
            "bug_report": "In Net Client mode  negative values for stream length are accepted without an exception for PreparedStatement.setAsciiStream()\nThis is related to Cloudscape bug 4250.Pass negative length as the stream length for various setXXXStream methods should throw an exception. But in Net Client mode  passing a negative value as stream length to PreparedStatement.setAsciiStream() doesn't throw an exception.e.g. //from store/StreamingColumnPreparedStatement ps = prepareStatement('insert into ' + 'testLongVarCharInvalidStreamLength11 values(?  ?  ?)'); ps.setInt(1  100); try { println('===&gt; testing using setAsciiStream with -2 as length'); ps.setAsciiStream(2  fileIn  -2); // should throw exception here but doesn't. }This issue has been fixed for embedded mode  but not for client mode.",
            "id": "3705"
        },
        "3708": {
            "ground_truth": "0",
            "bug_report": "setting tracedirectory from the command line does not work\nI triedjava org.apache.derby.drda.NetworkServerControl tracedirectory /tmpand got:Trace directory changed to /tmp.java org.apache.derby.drda.NetworkServerControl trace onTrace turned on for all sessions.Trace turned on for all sessions.And the trace output was not redirected to the /tmp directory. The tracedirectory command seemed to be ignored.Setting tracedirectory with the system property derby.drda.traceDirectory or with the NetworkServerControl api seems to work ok.",
            "id": "3708"
        },
        "3718": {
            "ground_truth": "1",
            "bug_report": "NPE when firing a trigger\nNullPointerException raised when firing a trigger. Originally reported by Thiyagu P on the Derby user list: http://www.nabble.com/Trigger-function-broken-in-10.4.1.3--td17760208.html#a17760208 Thiyagu reports that the same script works fine in 10.3.3.0. Here's the script:CREATE TABLE TRADE( ID INT PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY (START WITH 1000)  BUYID INT NOT NULL  QTY FLOAT(2) NOT NULL ); CREATE TABLE TOTAL(BUYID INT NOT NULL  TOTALQTY FLOAT(2) NOT NULL); CREATE TRIGGER TRADE_INSERT AFTER INSERT ON TRADE REFERENCING NEW AS NEWROW FOR EACH ROW MODE DB2SQL UPDATE TOTAL SET TOTALQTY = NEWROW.QTY WHERE BUYID = NEWROW.BUYID; INSERT INTO TOTAL VALUES (1  0); INSERT INTO TRADE VALUES(1  1  10);Here's the stack trace:java.lang.NullPointerException at org.apache.derby.iapi.types.DataTypeDescriptor.getNull(DataTypeDescriptor.java:1008) at org.apache.derby.iapi.types.DataTypeDescriptor.normalize(DataTypeDescriptor.java:645) at org.apache.derby.impl.sql.execute.NormalizeResultSet.normalizeRow(NormalizeResultSet.java:329) at org.apache.derby.impl.sql.execute.NormalizeResultSet.getNextRowCore(NormalizeResultSet.java:189) at org.apache.derby.impl.sql.execute.DMLWriteResultSet.getNextRowCore(DMLWriteResultSet.java:127) at org.apache.derby.impl.sql.execute.UpdateResultSet.collectAffectedRows(UpdateResultSet.java:424) at org.apache.derby.impl.sql.execute.UpdateResultSet.open(UpdateResultSet.java:246) at org.apache.derby.impl.sql.GenericPreparedStatement.execute(GenericPreparedStatement.java:384) at org.apache.derby.impl.sql.execute.GenericTriggerExecutor.executeSPS(GenericTriggerExecutor.java:159) at org.apache.derby.impl.sql.execute.RowTriggerExecutor.fireTrigger(RowTriggerExecutor.java:111) at org.apache.derby.impl.sql.execute.TriggerEventActivator.notifyEvent(TriggerEventActivator.java:269) at org.apache.derby.impl.sql.execute.InsertResultSet.normalInsertCore(InsertResultSet.java:1150) at org.apache.derby.impl.sql.execute.InsertResultSet.open(InsertResultSet.java:487) at org.apache.derby.impl.sql.GenericPreparedStatement.execute(GenericPreparedStatement.java:384) at org.apache.derby.impl.jdbc.EmbedStatement.executeStatement(EmbedStatement.java:1235) at org.apache.derby.impl.jdbc.EmbedStatement.execute(EmbedStatement.java:625) at org.apache.derby.impl.jdbc.EmbedStatement.execute(EmbedStatement.java:555) at org.apache.derby.impl.tools.ij.ij.executeImmediate(ij.java:329) at org.apache.derby.impl.tools.ij.utilMain.doCatch(utilMain.java:508) at org.apache.derby.impl.tools.ij.utilMain.runScriptGuts(utilMain.java:350) at org.apache.derby.impl.tools.ij.utilMain.go(utilMain.java:248) at org.apache.derby.impl.tools.ij.Main.go(Main.java:215) at org.apache.derby.impl.tools.ij.Main.mainCore(Main.java:181) at org.apache.derby.impl.tools.ij.Main.main(Main.java:73) at org.apache.derby.tools.ij.main(ij.java:59)",
            "id": "3718"
        },
        "3719": {
            "ground_truth": "0",
            "bug_report": "'...replication.buffer.LogBufferFullException' causes failover to fail w/ 'XRE07  SQLERRMC: Could not perform operation because the database is not in replication master mode.'\nWith the patch for DERBY-3709  derby-3709_p1-v2.diff.txt  I was able to provoke this error twice in 30 test runs on this platform (On another platform I saw none in 100 test runs.)I will upload the full test run log dir.'Summary':1) testReplication_Local_StateTest_part2(org.apache.derbyTesting.functionTests.tests.replicationTests.ReplicationRun_Local_StateTest_part2)junit.framework.ComparisonFailure: Unexpected SQL state. expected:&lt;XRE&#91;20&#93;&gt; but was:&lt;XRE&#91;07&#93;&gt;Master derby.log:--------------------------------------------- BEGIN REPLICATION ERROR MESSAGE (6/10/08 4:08 PM) ----Exception occurred during log shipping.org.apache.derby.impl.store.replication.buffer.LogBufferFullException at org.apache.derby.impl.store.replication.buffer.ReplicationLogBuffer.switchDirtyBuffer(ReplicationLogBuffer.java:357) at org.apache.derby.impl.store.replication.buffer.ReplicationLogBuffer.appendLog(ReplicationLogBuffer.java:146) at org.apache.derby.impl.store.replication.master.MasterController.appendLog(MasterController.java:428) at org.apache.derby.impl.store.raw.log.LogAccessFile.writeToLog(LogAccessFile.java:787) at org.apache.derby.impl.store.raw.log.LogAccessFile.flushDirtyBuffers(LogAccessFile.java:534) at org.apache.derby.impl.store.raw.log.LogAccessFile.flushLogAccessFile(LogAccessFile.java:574) at org.apache.derby.impl.store.raw.log.LogAccessFile.writeLogRecord(LogAccessFile.java:332) at org.apache.derby.impl.store.raw.log.LogToFile.appendLogRecord(LogToFile.java:3759) at org.apache.derby.impl.store.raw.log.FileLogger.logAndDo(FileLogger.java:370) at org.apache.derby.impl.store.raw.xact.Xact.logAndDo(Xact.java:1193) at org.apache.derby.impl.store.raw.data.LoggableActions.doAction(LoggableActions.java:221) at org.apache.derby.impl.store.raw.data.LoggableActions.actionUpdate(LoggableActions.java:85) at org.apache.derby.impl.store.raw.data.StoredPage.doUpdateAtSlot(StoredPage.java:8463) at org.apache.derby.impl.store.raw.data.StoredPage.updateOverflowDetails(StoredPage.java:8336) at org.apache.derby.impl.store.raw.data.StoredPage.updateOverflowDetails(StoredPage.java:8319) at org.apache.derby.impl.store.raw.data.BasePage.insertAllowOverflow(BasePage.java:808) at org.apache.derby.impl.store.raw.data.BasePage.insert(BasePage.java:653) at org.apache.derby.impl.store.access.heap.HeapController.doInsert(HeapController.java:307) at org.apache.derby.impl.store.access.heap.HeapController.insert(HeapController.java:575) at org.apache.derby.impl.sql.execute.RowChangerImpl.insertRow(RowChangerImpl.java:457) at org.apache.derby.impl.sql.execute.InsertResultSet.normalInsertCore(InsertResultSet.java:1011) at org.apache.derby.impl.sql.execute.InsertResultSet.open(InsertResultSet.java:487) at org.apache.derby.impl.sql.GenericPreparedStatement.execute(GenericPreparedStatement.java:384) at org.apache.derby.impl.jdbc.EmbedStatement.executeStatement(EmbedStatement.java:1235) at org.apache.derby.impl.jdbc.EmbedPreparedStatement.executeStatement(EmbedPreparedStatement.java:1652) at org.apache.derby.impl.jdbc.EmbedPreparedStatement.execute(EmbedPreparedStatement.java:1307) at org.apache.derby.impl.drda.DRDAStatement.execute(DRDAStatement.java:672) at org.apache.derby.impl.drda.DRDAConnThread.parseEXCSQLSTTobjects(DRDAConnThread.java:4197) at org.apache.derby.impl.drda.DRDAConnThread.parseEXCSQLSTT(DRDAConnThread.java:4001) at org.apache.derby.impl.drda.DRDAConnThread.processCommands(DRDAConnThread.java:991) at org.apache.derby.impl.drda.DRDAConnThread.run(DRDAConnThread.java:278)-------------------- END REPLICATION ERROR MESSAGE ---------------------Slave derby.log:-------------------------------------------------------------------------------------------2008-06-10 14:05:56.408 GMT Thread&#91;DRDAConnThread_3 5 main&#93; (DATABASE = /export/home/tmp/os136789/testingInMyDerbySandbox/12/db_slave/wombat)  (DRDAID = {2})  Replication slave mode started successfully for database '/export/home/tmp/os136789/testingInMyDerbySandbox/12/db_slave/wombat'. Connection refused because the database is in replication slave mode. Replication slave role was stopped for database '/export/home/tmp/os136789/testingInMyDerbySandbox/12/db_slave/wombat'.------------ BEGIN SHUTDOWN ERROR STACK -------------ERROR XSLA7: Cannot redo operation null in the log. at org.apache.derby.iapi.error.StandardException.newException(StandardException.java:296) at org.apache.derby.impl.store.raw.log.FileLogger.redo(FileLogger.java:1525) at org.apache.derby.impl.store.raw.log.LogToFile.recover(LogToFile.java:920) at org.apache.derby.impl.store.raw.RawStore.boot(RawStore.java:334) at org.apache.derby.impl.services.monitor.BaseMonitor.boot(BaseMonitor.java:1999) at org.apache.derby.impl.services.monitor.TopService.bootModule(TopService.java:291) at org.apache.derby.impl.services.monitor.BaseMonitor.startModule(BaseMonitor.java:553) at org.apache.derby.iapi.services.monitor.Monitor.bootServiceModule(Monitor.java:427) at org.apache.derby.impl.store.access.RAMAccessManager.boot(RAMAccessManager.java:1019) at org.apache.derby.impl.services.monitor.BaseMonitor.boot(BaseMonitor.java:1999) at org.apache.derby.impl.services.monitor.TopService.bootModule(TopService.java:291) at org.apache.derby.impl.services.monitor.BaseMonitor.startModule(BaseMonitor.java:553) at org.apache.derby.iapi.services.monitor.Monitor.bootServiceModule(Monitor.java:427) at org.apache.derby.impl.db.BasicDatabase.bootStore(BasicDatabase.java:780) at org.apache.derby.impl.db.BasicDatabase.boot(BasicDatabase.java:196) at org.apache.derby.impl.db.SlaveDatabase.bootBasicDatabase(SlaveDatabase.java:424) at org.apache.derby.impl.db.SlaveDatabase.access$000(SlaveDatabase.java:70) at org.apache.derby.impl.db.SlaveDatabase$SlaveDatabaseBootThread.run(SlaveDatabase.java:311) at java.lang.Thread.run(Thread.java:619)Caused by: ERROR 08006: Database '{0}' shutdown. at org.apache.derby.iapi.error.StandardException.newException(StandardException.java:276) at org.apache.derby.impl.store.raw.log.LogToFile.stopReplicationSlaveRole(LogToFile.java:5142) at org.apache.derby.impl.store.replication.slave.SlaveController.stopSlave(SlaveController.java:266) at org.apache.derby.impl.store.replication.slave.SlaveController.access$500(SlaveController.java:64) at org.apache.derby.impl.store.replication.slave.SlaveController$SlaveLogReceiverThread.run(SlaveController.java:531)============= begin nested exception  level (1) ===========ERROR 08006: Database '{0}' shutdown. at org.apache.derby.iapi.error.StandardException.newException(StandardException.java:276) at org.apache.derby.impl.store.raw.log.LogToFile.stopReplicationSlaveRole(LogToFile.java:5142) at org.apache.derby.impl.store.replication.slave.SlaveController.stopSlave(SlaveController.java:266) at org.apache.derby.impl.store.replication.slave.SlaveController.access$500(SlaveController.java:64) at org.apache.derby.impl.store.replication.slave.SlaveController$SlaveLogReceiverThread.run(SlaveController.java:531)============= end nested exception  level (1) ===========------------ END SHUTDOWN ERROR STACK -------------",
            "id": "3719"
        },
        "3726": {
            "ground_truth": "0",
            "bug_report": "Don't call RAFContainer.padFile() from instances of RAFContainer4\nIn this thread on derby-dev  http://mail-archives.apache.org/mod_mbox/db-derby-dev/200806.mbox/%3c48530848.3020501@sbcglobal.net%3e it was mentioned that RAFContainer4 calls padFile() when creating a container. Since padFile() uses old I/O calls and the rest of RAFContainer4 uses NIO  it could possibly cause similar issues as those seen in DERBY-3347. Although we haven't verified that this is a problem  we should try to avoid mixing old I/O and NIO to be on the safe side.",
            "id": "3726"
        },
        "3727": {
            "ground_truth": "0",
            "bug_report": "Improve error information reported when encountering 'ERROR XSDB3: Container information cannot change once written: was 103  now 80'\nImprove the text associated with ERROR XSDB3: Container information cannot change once written: was 103  now 80. It would be nice to know whichdatabase and container at least  and possibly any other info that may have changed. Maybe page/hex dumps to track down overlapping I/O errors on page 0.Here is a stack trace reported as part of DERBY-3607  as encountered by a back ground thread:2008-06-12 08:53:12.421 GMT Thread&#91;derby.rawStoreDaemon 5 derby.daemons&#93; Cleanup action starting^MERROR XSDB3: Container information cannot change once written: was 103  now 80^M at org.apache.derby.iapi.error.StandardException.newException(Unknown Source)^M at org.apache.derby.impl.store.raw.data.AllocPage.WriteContainerInfo(Unknown Source)^M at org.apache.derby.impl.store.raw.data.FileContainer.writeHeader(Unknown Source)^M at org.apache.derby.impl.store.raw.data.RAFContainer.writeRAFHeader(Unknown Source)^M at org.apache.derby.impl.store.raw.data.RAFContainer.clean(Unknown Source)^M at org.apache.derby.impl.services.cache.ConcurrentCache.cleanAndUnkeepEntry(Unknown Source)^M at org.apache.derby.impl.services.cache.ConcurrentCache.cleanEntry(Unknown Source)^M at org.apache.derby.impl.services.cache.BackgroundCleaner.performWork(Unknown Source)^M at org.apache.derby.impl.services.daemon.BasicDaemon.serviceClient(Unknown Source)^M at org.apache.derby.impl.services.daemon.BasicDaemon.work(Unknown Source)^M at org.apache.derby.impl.services.daemon.BasicDaemon.run(Unknown Source)^M at java.lang.Thread.run(Unknown Source)^M",
            "id": "3727"
        },
        "3728": {
            "ground_truth": "0",
            "bug_report": "Fix error handling in PrivilegedFileOpsForTests\nThe exception handling in this utility class is unclear and can in some cases cause ClassCastException to be thrown.Note that SecurityException is a runtime exception.Potential issues to be fixed: 1) Avoid possibility of ClassCastException in 'getFileInputStream' 2) Don't include SecurityException in the signature (throws clause) 3) Document SecurityException in JavaDoc.Points 2 and 3 leads to the option of not catching SecurityException  which allows the code to be written more concisely and we can use PrivilegedAction instead of PrivilegedExceptionAction in some cases.There is also a missing character in the class name in the header  and an invalid JavaDoc tag in the class JavaDoc.",
            "id": "3728"
        },
        "3731": {
            "ground_truth": "0",
            "bug_report": "Improve calculation of refSize in ClassSize.java\njava/engine/org/apache/derby/iapi/services/cache/ClassSize.java has a static code block which calculates the size of a reference for the architecture. This code could be improved by adding garbage collection before measuring memory  to give a consistent reading. Also there have been suggestions that we use os.arch or sun.arch.data.model to make the measurement more reliable  especially on 64bit machines.",
            "id": "3731"
        },
        "3732": {
            "ground_truth": "1",
            "bug_report": "SQL Length function materializes BLOB  into memory\nCurrently the SQL length function materializes the entire lob into memory. In SQLBinary.getLength() we have public final int getLength() throws StandardException { if (stream != null) { if (streamValueLength != -1) return streamValueLength; } return (getBytes() == null) ? 0 : getBytes().length; }Which actually is doubly bad because we call getBytes twice and materialize it twice.It would be good to read the length from the stream if available and otherwise stream the value to get the length  rather than materializing it into memory.To reproduce  run the attached repro.java -Xmx16M LengthLargeLobIt gives an out of memory exceptionCaused by: java.lang.OutOfMemoryError: Java heap space at org.apache.derby.iapi.types.SQLBinary.readFromStream(SQLBinary.java:415) at org.apache.derby.iapi.types.SQLBinary.readExternal(SQLBinary.java:318) at org.apache.derby.iapi.types.SQLBinary.getValue(SQLBinary.java:220) at org.apache.derby.iapi.types.SQLBinary.getBytes(SQLBinary.java:210) at org.apache.derby.iapi.types.SQLBinary.getLength(SQLBinary.java:250) at org.apache.derby.impl.sql.execute.BaseActivation.getDB2Length(BaseActivation.java:1684) at org.apache.derby.exe.acf81e0010x011axa317x5db8x0000003d9dc81.e1(Unknown Source) at org.apache.derby.impl.services.reflect.DirectCall.invoke(ReflectGeneratedClass.java:141) at org.apache.derby.impl.sql.execute.ProjectRestrictResultSet.doProjection(ProjectRestrictResultSet.java:497) at org.apache.derby.impl.sql.execute.ProjectRestrictResultSet.getNextRowCore(ProjectRestrictResultSet.java:291) at org.apache.derby.impl.sql.execute.BasicNoPutResultSetImpl.getNextRow(BasicNoPutResultSetImpl.java:460) at org.apache.derby.impl.jdbc.EmbedResultSet.movePosition(EmbedResultSet.java:423) ... 2 more[",
            "id": "3732"
        },
        "3735": {
            "ground_truth": "0",
            "bug_report": "Incorrect position calculation in PositionedStoreStream with read(byte[] ...)\nA bug in the methods 'read(byte[])' and 'read(byte[] int int)' in PositionedStoreStream can cause the position variable to be set to an incorrect value.The bug is only triggered if one of the two read methods is invoked after EOF of the underlying stream has been reached.If the bug is triggered  the position will be decreased by one because the underlying stream returns -1. Subsequent reads will further decrease the position. This can cause EOF-exceptions (during repositioning) or incorrect data being returned in subsequent calls.",
            "id": "3735"
        },
        "3736": {
            "ground_truth": "1",
            "bug_report": "Revoking a column level privilege from a user  a prepared statement relying on that privilege can still be executed\nWhen a table level SELECT privilege is revoked  a dependent prepared statement is invalidated and can no longer be executed  but in the case of a column level privilegeSELECT privilege  the dependent prepared statement can still be executed.This works as expected in 10.2  but does not work in all 10.3 and 10.4 releases.",
            "id": "3736"
        },
        "3738": {
            "ground_truth": "0",
            "bug_report": "Add more tests for legal/illegal commands in the different replication states\nAdding new replication state tests: ... testReplication_Local_3_p1_StateNegativeTests  testReplication_Local_3_p2_StateTests_bigInsert_immediateStopMaster  testReplication_Local_3_p2_StateTests_smallInsert_immediateStopMaster_DISABLED (Due to DERBY-3617) testReplication_Local_3_p2_StateTests_bigInsert_sleepBeforeStopMaster testReplication_Local_3_p2_StateTests_smallInsert_sleepBeforeStopMaster testReplication_Local_3_p3_StateNegativeTests  testReplication_Local_3_p4_StateNegativeTestsplus refactoring and cleanup.",
            "id": "3738"
        },
        "3743": {
            "ground_truth": "1",
            "bug_report": "Revoking EXECUTE privilege on a function if used in a CHECK constraint: implementation problem\nThe docs say that REVOKE EXECUTE ... RESTRICT should fail if there is a dependent constraint:'The RESTRICT clause specifies that the EXECUTE privilege cannot be revoked if the specified routine is used in a view  trigger  or constraint  and the privilege is being revoked from the owner of the view  trigger  or constraint.' Revoking the privilege will be correctly restricted  but possibly for the wrong reason.",
            "id": "3743"
        },
        "3745": {
            "ground_truth": "1",
            "bug_report": "Derby can leak classloaders in an app server environment\nA user reported potential class loader leaks in Derby...The first one looks like Derby created a long-runningthread and copying the context class loader. To fix  thecontext class loader should be saved/set/restored around thecreation of the new thread so that it copies some benign classloader instead (e.g.  null or getClass().getClassLoader()): 0x42278e58 java/lang/Thread@302e302e &#91;truncating at running thread LEAK&#93;Object: 0x42278e58 java/lang/Thread@302e302eChildren: 0x42278ee0 java/lang/String@303f303f 0x4226e558 java/lang/ThreadGroup@6f2e6f2e 0x42278e40org/apache/derby/impl/services/monitor/AntiGC@603a603a 0x419cfac0The second is another long running thread. The same applies: 0x426fe7a0 java/lang/Thread@19901990 &#91;truncating at running thread LEAK&#93;Object: 0x426fe7a0 java/lang/Thread@19901990Parents: 0x4226e5a8 [Ljava/lang/Thread;@6f386f38 0x426fe548org/apache/derby/iapi/services/context/ContextManager@19421942Children: 0x426fe838 java/lang/String@19a319a3 0x4226e558 java/lang/ThreadGroup@6f2e6f2e 0x426fe4f8org/apache/derby/impl/services/daemon/BasicDaemon@19381938 0x419cfac0The third is a TimerThread owneed   which is created when aTimer is created. The same applies: 0x425ac538 java/util/Timer$TimerImpl@6b8a6b8a &#91;truncating at running thread LEAK&#93;Object: 0x425ac538 java/util/Timer$TimerImpl@6b8a6b8aParents: 0x41faaf58 [Ljava/lang/Thread;@3c583c58Object: 0x425ac510 java/util/Timer@6b856b85Parents: 0x425ac500org/apache/derby/impl/services/timer/SingletonTimerFactory@56e256e2For more info  see thread at:http://www.nabble.com/ClassLoader-leaks--td18121374.html",
            "id": "3745"
        },
        "3763": {
            "ground_truth": "0",
            "bug_report": "Rename BaseJDBCTestCase.usingDerbyNet\nThe names of the methods 'usingDerbyNet' and 'usingDerbyNetClient' in BaseJDBCTestCase are confusing.I propose we change the one used to tell if we are using the DB2 client driver (JCC).",
            "id": "3763"
        },
        "3770": {
            "ground_truth": "0",
            "bug_report": "Create a utility class for skipping data in an InputStream\nThe contract of InputStream.skip is somewhat difficult  some would even say broken.See http://java.sun.com/javase/6/docs/api/java/io/InputStream.html#skip(long))A utility class should be created to ensure that we use the same skip procedure throughout the Derby code base.Suggested functionality: long skipFully(InputStream) : skips until EOF  returns number of bytes skipped void skipFully(InputStream long) : skips requested number of bytes  throws EOFException if there is too few bytes in the streamI know of two different approaches  both skipping in a loop: a) Verify EOF with a read call when skip returns zero. b) Throw EOFException if skip returns zero before requested number of bytes have been skipped.There's related code in iapi.util.UTF8Util. Maybe this class  say StreamUtil  could be put in the same package?",
            "id": "3770"
        },
        "3773": {
            "ground_truth": "0",
            "bug_report": "ImportExportLobTest failed on Zos  Clobs differ at index 1 expected: but was:\ntestImportDataExportQueryLobsInExtFile(org.apache.derbyTesting.functionTests.tests.tools.ImportExportLobTest)junit.framework.AssertionFailedError: Clobs differ at index 1 expected:&lt;99&gt; but was:&lt;196&gt; at org.apache.derbyTesting.junit.BaseJDBCTestCase.assertEquals(BaseJDBCTestCase.java:693) at org.apache.derbyTesting.junit.JDBC.assertSameContents(JDBC.java:1139) at org.apache.derbyTesting.functionTests.tests.tools.ImportExportLobTest.verifyData(ImportExportLobTest.java:534) at org.apache.derbyTesting.functionTests.tests.tools.ImportExportLobTest.testImportDataExportQueryLobsInExtFile(ImportExportLobTest.java:341) at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:59) at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:39) at org.apache.derbyTesting.junit.BaseTestCase.runBare(BaseTestCase.java:101) at junit.extensions.TestDecorator.basicRun(TestDecorator.java:22) at junit.extensions.TestSetup$1.protect(TestSetup.java:19) at junit.extensions.TestSetup.run(TestSetup.java:23) at junit.extensions.TestDecorator.basicRun(TestDecorator.java:22) at junit.extensions.TestSetup$1.protect(TestSetup.java:19) at junit.extensions.TestSetup.run(TestSetup.java:23)I ran on Windows with -Dfile.encoding='UTF-16' and got a different error.1) testImportDataExportQueryLobsInExtFile(org.apache.derbyTesting.functionTests.tests.tools.ImportExportLobTest)java.sql.SQLException: The exception 'java.sql.SQLException: Column 'COLUMN4' is either not in any table in the FROM list or appears within a join specification and is outside the scope of the join specification or appears in a HAVING clause and is not in the GROUP BY list. If this is a CREATE or ALTER TABLE statement then 'COLUMN4' is not a column in the target table.' was thrown while evaluating an expression. at org.apache.derby.impl.jdbc.SQLExceptionFactory40.getSQLException(SQLExceptionFactory40.java:95) at org.apache.derby.impl.jdbc.Util.newEmbedSQLException(Util.java:87) at org.apache.derby.impl.jdbc.Util.seeNextException(Util.java:223) at org.apache.derby.impl.jdbc.TransactionResourceImpl.wrapInSQLException(TransactionResourceImpl.java:398) at org.apache.derby.impl.jdbc.TransactionResourceImpl.handleException(TransactionResourceImpl.java:346) at org.apache.derby.impl.jdbc.EmbedConnection.handleException(EmbedConnection.java:2183) at org.apache.derby.impl.jdbc.ConnectionChild.handleException(ConnectionChild.java:81) at org.apache.derby.impl.jdbc.EmbedStatement.executeStatement(EmbedStatement.java:1325) at org.apache.derby.impl.jdbc.EmbedPreparedStatement.executeStatement(EmbedPreparedStatement.java:1652) at org.apache.derby.impl.jdbc.EmbedPreparedStatement.execute(EmbedPreparedStatement.java:1307) at org.apache.derbyTesting.functionTests.tests.tools.ImportExportBaseTest.doImportDataLobsFromExtFile(ImportExportBaseTest.java:258) at org.apache.derbyTesting.functionTests.tests.tools.ImportExportLobTest.testImportDataExportQueryLobsInExtFile(ImportExportLobTest.java:339) at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39) at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25) at org.apache.derbyTesting.junit.BaseTestCase.runBare(BaseTestCase.java:104) at junit.extensions.TestDecorator.basicRun(TestDecorator.java:22) at junit.extensions.TestSetup$1.protect(TestSetup.java:19) at junit.extensions.TestSetup.run(TestSetup.java:23) at junit.extensions.TestDecorator.basicRun(TestDecorator.java:22) at junit.extensions.TestSetup$1.protect(TestSetup.java:19) at junit.extensions.TestSetup.run(TestSetup.java:23) at org.apache.derbyTesting.junit.BaseTestSetup.run(BaseTestSetup.java:57)Caused by: java.sql.SQLException: The exception 'java.sql.SQLException: Column 'COLUMN4' is either not in any table in the FROM list or appears within a join specification and is outside the scope of the join specification or appears in a HAVING clause and is not in the GROUP BY list. If this is a CREATE or ALTER TABLE statement then 'COLUMN4' is not a column in the target table.' was thrown while evaluating an expression. at org.apache.derby.impl.jdbc.SQLExceptionFactory.getSQLException(SQLExceptionFactory.java:45) at org.apache.derby.impl.jdbc.SQLExceptionFactory40.wrapArgsForTransportAcrossDRDA(SQLExceptionFactory40.java:119) at org.apache.derby.impl.jdbc.SQLExceptionFactory40.getSQLException(SQLExceptionFactory40.java:70) ... 36 moreCaused by: java.sql.SQLException: Column 'COLUMN4' is either not in any table in the FROM list or appears within a joinspecification and is outside the scope of the join specification or appears in a HAVING clause and is not in the GROUP BY list. If this is a CREATE or ALTER TABLE statement then 'COLUMN4' is not a column in the target table. at org.apache.derby.impl.jdbc.SQLExceptionFactory.getSQLException(SQLExceptionFactory.java:45) at org.apache.derby.impl.jdbc.SQLExceptionFactory40.wrapArgsForTransportAcrossDRDA(SQLExceptionFactory40.java:119) at org.apache.derby.impl.jdbc.SQLExceptionFactory40.getSQLException(SQLExceptionFactory40.java:70) at org.apache.derby.impl.jdbc.Util.generateCsSQLException(Util.java:201) at org.apache.derby.impl.jdbc.TransactionResourceImpl.wrapInSQLException(TransactionResourceImpl.java:391) at org.apache.derby.impl.jdbc.TransactionResourceImpl.handleException(TransactionResourceImpl.java:346) at org.apache.derby.impl.jdbc.EmbedConnection.handleException(EmbedConnection.java:2183) at org.apache.derby.impl.jdbc.ConnectionChild.handleException(ConnectionChild.java:81) at org.apache.derby.impl.jdbc.EmbedPreparedStatement.&lt;init&gt;(EmbedPreparedStatement.java:146) at org.apache.derby.impl.jdbc.EmbedPreparedStatement20.&lt;init&gt;(EmbedPreparedStatement20.java:82) at org.apache.derby.impl.jdbc.EmbedPreparedStatement30.&lt;init&gt;(EmbedPreparedStatement30.java:63) at org.apache.derby.impl.jdbc.EmbedPreparedStatement40.&lt;init&gt;(EmbedPreparedStatement40.java:40) at org.apache.derby.jdbc.Driver40.newEmbedPreparedStatement(Driver40.java:105) at org.apache.derby.impl.jdbc.EmbedConnection.prepareStatement(EmbedConnection.java:1533) at org.apache.derby.impl.jdbc.EmbedConnection.prepareStatement(EmbedConnection.java:1361) at org.apache.derby.impl.load.Import.performImport(Import.java:274) at org.apache.derby.impl.load.Import.importData(Import.java:166) at org.apache.derby.catalog.SystemProcedures.SYSCS_IMPORT_DATA_LOBS_FROM_EXTFILE(SystemProcedures.java:1538) at org.apache.derby.exe.acaa7ac093x011bx0970x9cd2x00003dcd3cb42.g0(Unknown Source) at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39) at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25) at org.apache.derby.impl.services.reflect.ReflectMethod.invoke(ReflectMethod.java:46) at org.apache.derby.impl.sql.execute.CallStatementResultSet.open(CallStatementResultSet.java:76) at org.apache.derby.impl.sql.GenericPreparedStatement.execute(GenericPreparedStatement.java:384) at org.apache.derby.impl.jdbc.EmbedStatement.executeStatement(EmbedStatement.java:1235) ... 29 moreCaused by: ERROR 42X04: Column 'COLUMN4' is either not in any table in the FROM list or appears within a join specification and is outside the scope of the join specification or appears in a HAVING clause and is not in the GROUP BY list. If this is a CREATE or ALTER TABLE statement then 'COLUMN4' is not a column in the target table. at org.apache.derby.iapi.error.StandardException.newException(StandardException.java:286) at org.apache.derby.impl.sql.compile.ColumnReference.bindExpression(ColumnReference.java:354) at org.apache.derby.impl.sql.compile.ResultColumn.bindExpression(ResultColumn.java:588) at org.apache.derby.impl.sql.compile.ResultColumnList.bindExpressions(ResultColumnList.java:693) at org.apache.derby.impl.sql.compile.SelectNode.bindExpressions(SelectNode.java:443) at org.apache.derby.impl.sql.compile.SelectNode.bindExpressionsWithTables(SelectNode.java:578) at org.apache.derby.impl.sql.compile.DMLStatementNode.bindExpressionsWithTables(DMLStatementNode.java:251) at org.apache.derby.impl.sql.compile.DMLStatementNode.bindResultSetsWithTables(DMLStatementNode.java:175) at org.apache.derby.impl.sql.compile.InsertNode.bindStatement(InsertNode.java:242) at org.apache.derby.impl.sql.GenericStatement.prepMinion(GenericStatement.java:314) at org.apache.derby.impl.sql.GenericStatement.prepare(GenericStatement.java:88) at org.apache.derby.impl.sql.conn.GenericLanguageConnectionContext.prepareInternalStatement(GenericLanguageConnectionContext.java:794) at org.apache.derby.impl.jdbc.EmbedPreparedStatement.&lt;init&gt;(EmbedPreparedStatement.java:128) ... 47 more2) testImportDataExportQueryLobsInExtFile(org.apache.derbyTesting.functionTests.tests.tools.ImportExportLobTest)java.sql.SQLException: The exception 'java.sql.SQLException: Column 'COLUMN4' is either not in any table in the FROM list or appears within a join specification and is outside the scope of the join specification or appears in a HAVING clause and is not in the GROUP BY list. If this is a CREATE or ALTER TABLE statement then 'COLUMN4' is not a column in the target table.' was thrown while evaluating an expression. at org.apache.derby.client.am.SQLExceptionFactory40.getSQLException(SQLExceptionFactory40.java:96) at org.apache.derby.client.am.SqlException.getSQLException(SqlException.java:362) at org.apache.derby.client.am.PreparedStatement.execute(PreparedStatement.java:1588) at org.apache.derbyTesting.functionTests.tests.tools.ImportExportBaseTest.doImportDataLobsFromExtFile(ImportExportBaseTest.java:258) at org.apache.derbyTesting.functionTests.tests.tools.ImportExportLobTest.testImportDataExportQueryLobsInExtFile(ImportExportLobTest.java:339) at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39) at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25) at org.apache.derbyTesting.junit.BaseTestCase.runBare(BaseTestCase.java:104) at junit.extensions.TestDecorator.basicRun(TestDecorator.java:22) at junit.extensions.TestSetup$1.protect(TestSetup.java:19) at junit.extensions.TestSetup.run(TestSetup.java:23) at org.apache.derbyTesting.junit.BaseTestSetup.run(BaseTestSetup.java:57) at junit.extensions.TestDecorator.basicRun(TestDecorator.java:22) at junit.extensions.TestSetup$1.protect(TestSetup.java:19) at junit.extensions.TestSetup.run(TestSetup.java:23) at junit.extensions.TestDecorator.basicRun(TestDecorator.java:22) at junit.extensions.TestSetup$1.protect(TestSetup.java:19) at junit.extensions.TestSetup.run(TestSetup.java:23) at junit.extensions.TestDecorator.basicRun(TestDecorator.java:22) at junit.extensions.TestSetup$1.protect(TestSetup.java:19) at junit.extensions.TestSetup.run(TestSetup.java:23) at org.apache.derbyTesting.junit.BaseTestSetup.run(BaseTestSetup.java:57)Caused by: org.apache.derby.client.am.SqlException: The exception 'java.sql.SQLException: Column 'COLUMN4' is either not in any table in the FROM list or appears within a join specification and is outside the scope of the join specification or appears in a HAVING clause and is not in the GROUP BY list. If this is a CREATE or ALTER TABLE statement then 'COLUMN4' is not a column in the target table.' was thrown while evaluating an expression. at org.apache.derby.client.am.Statement.completeExecute(Statement.java:1601) at org.apache.derby.client.net.NetStatementReply.parseEXCSQLSTTreply(NetStatementReply.java:322) at org.apache.derby.client.net.NetStatementReply.readExecuteCall(NetStatementReply.java:106) at org.apache.derby.client.net.StatementReply.readExecuteCall(StatementReply.java:75) at org.apache.derby.client.net.NetStatement.readExecuteCall_(NetStatement.java:179) at org.apache.derby.client.am.Statement.readExecuteCall(Statement.java:1567) at org.apache.derby.client.am.PreparedStatement.flowExecute(PreparedStatement.java:2151) at org.apache.derby.client.am.PreparedStatement.executeX(PreparedStatement.java:1594) at org.apache.derby.client.am.PreparedStatement.execute(PreparedStatement.java:1579) ... 38 moreCaused by: org.apache.derby.client.am.SqlException: Column 'COLUMN4' is either not in any table in the FROM list or appears within a join specification and is outside the scope of the join specification or appears in a HAVING clause and isnot in the GROUP BY list. If this is a CREATE or ALTER TABLE statement then 'COLUMN4' is not a column in the target table. ... 47 more",
            "id": "3773"
        },
        "3774": {
            "ground_truth": "0",
            "bug_report": "jdbc4/ClobTest fails on Zos with AssertionFailedError: Streams differ at index 0 expected: but was:\ntestGetAsciiStreamCreateClob(org.apache.derbyTesting.functionTests.tests.jdbc4.ClobTest)junit.framework.AssertionFailedError: Streams differ at index 0 expected:&lt;200&gt; but was:&lt;72&gt; at org.apache.derbyTesting.junit.BaseTestCase.assertEquals(BaseTestCase.java:341) at org.apache.derbyTesting.functionTests.tests.jdbc4.ClobTest.testGetAsciiStreamCreateClob(ClobTest.java:575) at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:59) at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:39) at org.apache.derbyTesting.junit.BaseTestCase.runBare(BaseTestCase.java:101) at junit.extensions.TestDecorator.basicRun(TestDecorator.java:22) at junit.extensions.TestSetup$1.protect(TestSetup.java:19) at junit.extensions.TestSetup.run(TestSetup.java:23) at org.apache.derbyTesting.junit.BaseTestSetup.run(BaseTestSetup.java:57) at junit.extensions.TestDecorator.basicRun(TestDecorator.java:22) at junit.extensions.TestSetup$1.protect(TestSetup.java:19) at junit.extensions.TestSetup.run(TestSetup.java:23) at junit.extensions.TestDecorator.basicRun(TestDecorator.java:22) at junit.extensions.TestSetup$1.protect(TestSetup.java:19) at junit.extensions.TestSetup.run(TestSetup.java:23) at org.apache.derbyTesting.junit.BaseTestSetup.run(BaseTestSetup.java:57) at junit.extensions.TestDecorator.basicRun(TestDecorator.java:22) at junit.extensions.TestSetup$1.protect(TestSetup.java:19) at junit.extensions.TestSetup.run(TestSetup.java:23) at org.apache.derbyTesting.junit.BaseTestSetup.run(BaseTestSetup.java:57)I was able to reproduce this on Windows with slightly different errors running with -Dfile.encoding='UTF-16'There were 2 errors:) testGetCharacterStreamClobUpdates(org.apache.derbyTesting.functionTests.tests.jdbc4.ClobTest)java.sql.SQLException: Te position argument '53' exceeds the size of the BLOB/CLOB. at org.apache.derby.impl.jdbc.SQLExceptionFactory40.getSQLException(SQLExceptionFactory40.java:95) at org.apache.derby.impl.jdbc.Util.newEmbedSQLException(Util.java:87) at org.apache.derby.impl.jdbc.Util.newEmbedSQLException(Util.java:93) at org.apache.derby.impl.jdbc.Util.generateCsSQLException(Util.java:172) at org.apache.derby.impl.jdbc.EmbedClob.setString(EmbedClob.java:559) at org.apache.derby.impl.jdbc.EmbedClob.setString(EmbedClob.java:525) at org.apache.derbyTesting.functionTests.tests.jdbc4.ClobTest.testGetCharacterStreamClobUpdates(ClobTest.java:69) at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39) at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25) at org.apache.derbyTesting.junit.BaseTestCase.runBare(BaseTestCase.java:104) at junit.extensions.TestDecorator.basicRun(TestDecorator.java:22) at junit.extensions.TestSetup$1.protect(TestSetup.java:19) at junit.extensions.TestSetup.run(TestSetup.java:23) at org.apache.derbyTesting.junit.BaseTestSetup.run(BaseTestSetup.java:57) at junit.extensions.TestDecorator.basicRun(TestDecorator.java:22) at junit.extensions.TestSetup$1.protect(TestSetup.java:19) at junit.extensions.TestSetup.run(TestSetup.java:23) at org.apache.derbyTesting.junit.BaseTestSetup.run(BaseTestSetup.java:57)aused by: java.sql.SQLException: The position argument '53' exceeds the size of the BLOB/CLOB. at org.apache.derby.impl.jdbc.SQLExceptionFactory.getSQLException(SQLExceptionFactory.java:45) at org.apache.derby.impl.jdbc.SQLExceptionFactory40.wrapArgsForTransportAcrossDRDA(SQLExceptionFactory40.java:11) at org.apache.derby.impl.jdbc.SQLExceptionFactory40.getSQLException(SQLExceptionFactory40.java:70) ... 34 more) testGetCharacterStreamClobUpdates(org.apache.derbyTesting.functionTests.tests.jdbc4.ClobTest)java.sql.SQLException: Te position argument '53' exceeds the size of the BLOB/CLOB. at org.apache.derby.client.am.SQLExceptionFactory40.getSQLException(SQLExceptionFactory40.java:96) at org.apache.derby.client.am.SqlException.getSQLException(SqlException.java:362) at org.apache.derby.client.am.Clob.setString(Clob.java:588) at org.apache.derbyTesting.functionTests.tests.jdbc4.ClobTest.testGetCharacterStreamClobUpdates(ClobTest.java:69) at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39) at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25) at org.apache.derbyTesting.junit.BaseTestCase.runBare(BaseTestCase.java:104) at junit.extensions.TestDecorator.basicRun(TestDecorator.java:22) at junit.extensions.TestSetup$1.protect(TestSetup.java:19) at junit.extensions.TestSetup.run(TestSetup.java:23) at org.apache.derbyTesting.junit.BaseTestSetup.run(BaseTestSetup.java:57) at junit.extensions.TestDecorator.basicRun(TestDecorator.java:22) at junit.extensions.TestSetup$1.protect(TestSetup.java:19) at junit.extensions.TestSetup.run(TestSetup.java:23) at junit.extensions.TestDecorator.basicRun(TestDecorator.java:22) at junit.extensions.TestSetup$1.protect(TestSetup.java:19) at junit.extensions.TestSetup.run(TestSetup.java:23) at org.apache.derbyTesting.junit.BaseTestSetup.run(BaseTestSetup.java:57) at junit.extensions.TestDecorator.basicRun(TestDecorator.java:22) at junit.extensions.TestSetup$1.protect(TestSetup.java:19) at junit.extensions.TestSetup.run(TestSetup.java:23) at org.apache.derbyTesting.junit.BaseTestSetup.run(BaseTestSetup.java:57)aused by: org.apache.derby.client.am.SqlException: The position argument '53' exceeds the size of the BLOB/CLOB. at org.apache.derby.client.am.Clob.setStringX(Clob.java:624) at org.apache.derby.client.am.Clob.setString(Clob.java:579) ... 38 morehere were 2 failures:) testGetAsciiStreamCreateClob(org.apache.derbyTesting.functionTests.tests.jdbc4.ClobTest)junit.framework.AssertionFaildError: Streams differ at index 0 expected:&lt;254&gt; but was:&lt;72&gt; at org.apache.derbyTesting.junit.BaseTestCase.assertEquals(BaseTestCase.java:343) at org.apache.derbyTesting.functionTests.tests.jdbc4.ClobTest.testGetAsciiStreamCreateClob(ClobTest.java:575) at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39) at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25) at org.apache.derbyTesting.junit.BaseTestCase.runBare(BaseTestCase.java:104) at junit.extensions.TestDecorator.basicRun(TestDecorator.java:22) at junit.extensions.TestSetup$1.protect(TestSetup.java:19) at junit.extensions.TestSetup.run(TestSetup.java:23) at org.apache.derbyTesting.junit.BaseTestSetup.run(BaseTestSetup.java:57) at junit.extensions.TestDecorator.basicRun(TestDecorator.java:22) at junit.extensions.TestSetup$1.protect(TestSetup.java:19) at junit.extensions.TestSetup.run(TestSetup.java:23) at org.apache.derbyTesting.junit.BaseTestSetup.run(BaseTestSetup.java:57)) testGetAsciiStreamCreateClob(org.apache.derbyTesting.functionTests.tests.jdbc4.ClobTest)junit.framework.AssertionFaildError: Streams differ at index 0 expected:&lt;254&gt; but was:&lt;72&gt; at org.apache.derbyTesting.junit.BaseTestCase.assertEquals(BaseTestCase.java:343) at org.apache.derbyTesting.functionTests.tests.jdbc4.ClobTest.testGetAsciiStreamCreateClob(ClobTest.java:575) at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39) at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25) at org.apache.derbyTesting.junit.BaseTestCase.runBare(BaseTestCase.java:104) at junit.extensions.TestDecorator.basicRun(TestDecorator.java:22) at junit.extensions.TestSetup$1.protect(TestSetup.java:19) at junit.extensions.TestSetup.run(TestSetup.java:23) at org.apache.derbyTesting.junit.BaseTestSetup.run(BaseTestSetup.java:57) at junit.extensions.TestDecorator.basicRun(TestDecorator.java:22) at junit.extensions.TestSetup$1.protect(TestSetup.java:19) at junit.extensions.TestSetup.run(TestSetup.java:23) at junit.extensions.TestDecorator.basicRun(TestDecorator.java:22) at junit.extensions.TestSetup$1.protect(TestSetup.java:19) at junit.extensions.TestSetup.run(TestSetup.java:23) at org.apache.derbyTesting.junit.BaseTestSetup.run(BaseTestSetup.java:57) at junit.extensions.TestDecorator.basicRun(TestDecorator.java:22) at junit.extensions.TestSetup$1.protect(TestSetup.java:19) at junit.extensions.TestSetup.run(TestSetup.java:23) at org.apache.derbyTesting.junit.BaseTestSetup.run(BaseTestSetup.java:57)FAILURES!!!Tests run: 22  Failures: 2  Errors: 2",
            "id": "3774"
        },
        "3777": {
            "ground_truth": "1",
            "bug_report": "SecureServerTest  SSLTest are failed on Zos with exit code 143 starting network server\nSecureServerTest  SSLTest are failed on Zos with exit code 143 starting network server",
            "id": "3777"
        },
        "3781": {
            "ground_truth": "0",
            "bug_report": "PositionedStoreStream.reposition(pos) with pos greater than length leaves the stream object in an inconsistent state\nPositionedStoreStream.reposition(pos) with pos greater than the stream length leaves the stream object in an inconsistent state  causing subsequent calls to fail or the state to remain inconsistent (which can cause the wrong data to be returned).The problem is that the position variable gets out of sync with the underlying stream.There are at least two ways to fix this (assuming the positioned store stream does not know the length of the underlying stream): a) Reset stream to position zero. b) Let the stream be positioned at EOF and update the internal position variable.Option b) leaves the stream in an unusable state  and the next request will cause option a) to be performed. It also require a slight rewrite of 'PositionedStoreStream.skipFully' and 'PositionedStoreStream.reposition' to be able to determine the position of the stream (the length in this case).Option a) will cause the first page of the stream to be read into the cache (if not already there)  but taken the reason for doing this is an error condition it seems acceptable.A correct value of the position variable is required for correct/valid operation of PositionedStoreStream.",
            "id": "3781"
        },
        "3782": {
            "ground_truth": "0",
            "bug_report": "Client Configuration.java imports engine class  org.apache.derby.iapi.services.info.JVMInfo\nThe client code (org.apache.derby.client.am.Configuration) imports the engine class org.apache.derby.iapi.services.info.JVMInfo.This will make two copies of the class in derby.jar and derbyclient.jar which can cause problems if mixed version jars are used and I think may cause jar sealing issues as well.Until we have a good framework for sharing code between engine and client  the client shouldn't import engine classes.",
            "id": "3782"
        },
        "3783": {
            "ground_truth": "0",
            "bug_report": "LOBStreamControl shouldn't throw SQLException\nLOBStreamControl throws three types of exceptions: IOException  SQLException and StandardException.All the SQLException are generated/thrown from the code in LOBStreamControl.At this level of the code  SQLException should not be thrown  as it is more tedious to handle both SQLException and StandardException at higher levels.I propose to replace SQLException with StandardException in LOBStreamControl. The purpose of this change is consistency  and also results it slightly less code at higher levels.",
            "id": "3783"
        },
        "3784": {
            "ground_truth": "0",
            "bug_report": "ImportExportTest doesn't detect lack of expected errors\nI observed that ImportExportTest contains many test cases which do try/catch/assertSQLException  but none of them call fail() at the end of the try block. Example: public void testEarlyEndOfFile() throws Exception { Connection c = getConnection(); try { doImportFromFile(c  'extin/EndOfFile.txt'   'T4'   null   null   null  0); } catch (SQLException e) { assertSQLState('XIE0E'  e); } }I think this means that if the expected exception isn't thrown the test still passes.",
            "id": "3784"
        },
        "3799": {
            "ground_truth": "1",
            "bug_report": "NullPointerException when accessing a clob through a pooled connection\nAfter returning a pooled connection to the pool and getting it again a NullPointerException is thrown when a clob field is accessed again. This may be related to the following post: http://mail-archives.apache.org/mod_mbox/db-derby-user/200803.mbox/%3C47CD3431.5020205@sun.com%3EHere is the stack trace:java.lang.NullPointerException at org.apache.derby.client.am.PreparedStatement.setIntX(Unknown Source) at org.apache.derby.client.am.CallableLocatorProcedures.clobGetLength(Unknown Source) at org.apache.derby.client.am.Clob.getLocatorLength(Unknown Source) at org.apache.derby.client.am.Lob.sqlLength(Unknown Source) at org.apache.derby.client.am.Clob.length(Unknown Source) at org.apache.derby.client.am.Cursor.getString(Unknown Source) at org.apache.derby.client.am.ResultSet.getString(Unknown Source) at derbyerr.Main.main(Main.java:65)Here is the code to reproduce the problem:package derbyerr;import java.sql.Connection;import java.sql.PreparedStatement;import java.sql.ResultSet;import java.sql.SQLException;import javax.sql.PooledConnection;import org.apache.derby.jdbc.ClientConnectionPoolDataSource;public class Main { public static void main (String[] args) { org.apache.derby.tools.sysinfo.main (args) ; ClientConnectionPoolDataSource creator = new ClientConnectionPoolDataSource () ; // There should be an empty db named testdb creator.setDatabaseName ('testdb') ; try { PooledConnection pc = creator.getPooledConnection () ; Connection c = pc.getConnection () ; PreparedStatement ps ; ResultSet rs ; String s ; // Drop the table 'test'  if it exsists try { ps = c.prepareStatement ('drop table test') ; ps.execute () ; ps.close () ; } catch (Exception e) { } // Create a test table with a clob field ps = c.prepareStatement ('create table test (pkey varchar(255) not null primary key  value clob)') ; ps.execute () ; ps.close () ; // Insert a record ps = c.prepareStatement ('insert into test values ('123'  'abc')') ; ps.execute () ; ps.close () ; // Query the record and... ps = c.prepareStatement ('select * from test') ; rs = ps.executeQuery () ; rs.next () ; // ...access the clob field - this works s = rs.getString (2) ; assert s.equals ('abc') ; rs.close () ; ps.close () ; // Simulate connection pooling: close the connection and get it again c.close () ; c = pc.getConnection () ; // Now again query the record... ps = c.prepareStatement ('select * from test') ; rs = ps.executeQuery () ; rs.next () ; // ...and access the clob - this fails s = rs.getString (2) ; assert s.equals ('abc') ; rs.close () ; ps.close () ; } catch (Exception e) { e.printStackTrace () ; } }}",
            "id": "3799"
        },
        "3809": {
            "ground_truth": "0",
            "bug_report": "Add a SHOW FUNCTIONS command to ij\nCurrently  the ij SHOW command can give you information on a number of schema objects  including procedures. It should be fairly easy to add SHOW FUNCTIONS as well. This request surfaced on the user list: http://www.nabble.com/How-can-i-see-my-self-defined-functions--td18773980.html#a18773980",
            "id": "3809"
        },
        "3823": {
            "ground_truth": "1",
            "bug_report": "NullPointerException in stress.multi test\nI saw the following NPE in stress.multi running on 10.3 with derbyclient.java.lang.NullPointerException at org.apache.derby.impl.jdbc.EmbedPreparedStatement.getMetaData(Unknown Source) at org.apache.derby.impl.drda.DRDAConnThread.writeSQLDARD(Unknown Source) at org.apache.derby.impl.drda.DRDAConnThread.processCommands(Unknown Source) at org.apache.derby.impl.drda.DRDAConnThread.run(Unknown Source)Cleanup action completed",
            "id": "3823"
        },
        "3825": {
            "ground_truth": "0",
            "bug_report": "StoreStreamClob.getReader(charPos) performs poorly\nStoreStreamClob.getReader(charPos) performs poorly because it resets the underlying stream and skips data until it reached the requested character position. Not only does the data has to be skipped  it also has to be decoded (UTF-8).The problem is exposed through EmbedClob.getSubString  which causes extremely bad performance for the client driver because the locator based Clob implementation uses this method.For the record  there is another read buffer size issue that exaggerates the problem (it will probably be handled under DERBY-3769  and also DERBY-3818).",
            "id": "3825"
        },
        "3829": {
            "ground_truth": "0",
            "bug_report": "Convert derbynet/sysinfo and derbynet/sysinfo_with_properties to JUnit\nI'm guessing these two can be combined into one file",
            "id": "3829"
        },
        "3837": {
            "ground_truth": "0",
            "bug_report": "need to test getting appropriate error message when os files are read-only\nWe don't currently have a way to test what happens when a database is on read-only media (e.g. a cd  floppy).Without user involvement (i.e. inserting a disk somewhere etc) it's hard to fully test  but a test that simulates this by making the files on the OS read-only would give some coverage.",
            "id": "3837"
        },
        "3840": {
            "ground_truth": "0",
            "bug_report": "The test code executes java processes by just executing java instead of using a full path. This may cause the wrong java to be picked up.\nThere are places in the code where we execute a java process. e.g. BaseTestCase.assertExecJavaCmdAsExpected where we execcute a java process and just call 'java'. In windows at least the new shell created for the exec'ed process does not share the parent process path but rather picks up the path from the Windows System variables. This can cause the wrong java to be picked up. Also the method does not work for j9 because it calls 'java' instead of the actual executable name. Perhaps we should have a method: public static final String getJavaExecutableName() { String vmname = getSystemProperty('com.ibm.oti.vm.exe'); if (vmname == null) vmname = getSystemProperty('java.home') + File.pathSeparator + 'java'; return vmname; }There are also issues with this in NetworkServerControlApiTest. NetworkServerTestSetup and the replication tests and maybe others as well.",
            "id": "3840"
        },
        "3853": {
            "ground_truth": "0",
            "bug_report": "Behaviour of setTypeMap() differs between embedded and client\nOn the embedded driver  Connection.setTypeMap() behaves like this (when the connection is not closed): if the map argument is null  throw an SQLException with SQLState XJ081 if the map is not null and not empty  throw an SQLException with SQLState 0A000 if the map is not null and empty  do nothingThe behaviour on the client driver is this: always throw an SQLException with SQLState 0A000We should try to make the two drivers behave the same way when setTypeMap() is called. (This would also allow us to simplify some of the tests in J2EEDataSourceTest).",
            "id": "3853"
        },
        "3856": {
            "ground_truth": "0",
            "bug_report": "difference between Embedded vs DerbyNetClient in format of return from timestamp(cast(? as varchar(32)))\nThere is a slight difference in how Embedded vs. DerbyNetClient return a specific cast.This showed up during conversion of the test lang/datetime.sql which before was only run with Embedded...The following sql: prepare dateTimePS as 'values( date(cast(? as integer)) timestamp(cast(? as varchar(32))))';execute dateTimePS using 'values(cast(1 as integer)  ''2003-03-05-17.05.43.111111'')';gives: 1 |2  -------------------------------------Embedded: 1970-01-01|2003-03-05-17.05.43.111111DerbyNetClient: 1970-01-01|2003-03-05 17:05:43.111111(in Embedded there's a '-' between date and time part  with DerbyNetClient a space; with Embedded the separator between time elements is .  with DerbyNetClient :. Embedded reflects the data as passed in  with DerbyNetClient it seems to be the default timestamp format).I am not sure which is correct at this point  but I confirmed the behavior is like this in latest builds of trunk and 10.3 and 10.4 branches.",
            "id": "3856"
        },
        "3857": {
            "ground_truth": "0",
            "bug_report": "tools/ide is not included in the source tarball\nThe tools/ide directory is not part of the source tarball (checked the 10.4.1.3 release and the 10.4.2.0 release candidate). It should be included to make it easier for people to open the source code in an IDE.",
            "id": "3857"
        },
        "3865": {
            "ground_truth": "1",
            "bug_report": "NPE in testSemantics(.....lang.RolesTest) on JavaME / CVM\nSee http://dbtg.thresher.com/derby/test/Daily/javaME/testing/testlog/ubuntu/691643-suitesAll_diff.txt1) testSemantics(org.apache.derbyTesting.functionTests.tests.lang.RolesTest)junit.framework.AssertionFailedError: java.lang.NullPointerException:  at org.apache.derbyTesting.junit.JDBCDataSource.getDataSourceObject(Ljava/lang/String;Ljava/util/HashMap;)Ljava/lang/Object;(JDBCDataSource.java:176) at org.apache.derbyTesting.junit.J2EEDataSource.getConnectionPoolDataSource(Lorg/apache/derbyTesting/junit/TestConfiguration;Ljava/util/HashMap;)Ljavax/sql/ConnectionPoolDataSource;(J2EEDataSource.java:58) at org.apache.derbyTesting.junit.J2EEDataSource.getConnectionPoolDataSource()Ljavax/sql/ConnectionPoolDataSource;(J2EEDataSource.java:42) at org.apache.derbyTesting.functionTests.tests.lang.RolesTest.testCurrentRoleIsReset()V(RolesTest.java:711) at org.apache.derbyTesting.functionTests.tests.lang.RolesTest.testSemantics()V(RolesTest.java:647) at org.apache.derbyTesting.junit.BaseTestCase.runBare()V(BaseTestCase.java:104) at junit.extensions.TestDecorator.basicRun(Ljunit/framework/TestResult;)V(TestDecorator.java:24) at junit.extensions.TestSetup$1.protect()V(TestSetup.java:21) at junit.extensions.TestSetup.run(Ljunit/framework/TestResult;)V(TestSetup.java:25) at junit.extensions.TestDecorator.basicRun(Ljunit/framework/TestResult;)V(TestDecorator.java:24) at junit.extensions.TestSetup$1.protect()V(TestSetup.java:21) at junit.extensions.TestSetup.run(Ljunit/framework/TestResult;)V(TestSetup.java:25) at org.apache.derbyTesting.junit.BaseTestSetup.run(Ljunit/framework/TestResult;)V(BaseTestSetup.java:57) at junit.extensions.TestDecorator.basicRun(Ljunit/framework/TestResult;)V(TestDecorator.java:24) at junit.extensions.TestSetup$1.protect()V(TestSetup.java:21) at junit.extensions.TestSetup.run(Ljunit/framework/TestResult;)V(TestSetup.java:25) at junit.extensions.TestDecorator.basicRun(Ljunit/framework/TestResult;)V(TestDecorator.java:24) at junit.extensions.TestSetup$1.protect()V(TestSetup.java:21) at junit.extensions.TestSetup.run(Ljunit/framework/TestResult;)V(TestSetup.java:25) at org.apache.derbyTesting.junit.BaseTestSetup.run(Ljunit/framework/TestResult;)V(BaseTestSetup.java:57) at junit.extensions.TestDecorator.basicRun(Ljunit/framework/TestResult;)V(TestDecorator.java:24) at junit.extensions.TestSetup$1.protect()V(TestSetup.java:21) at junit.extensions.TestSetup.run(Ljunit/framework/TestResult;)V(TestSetup.java:25) at org.apache.derbyTesting.junit.BaseTestSetup.run(Ljunit/framework/TestResult;)V(BaseTestSetup.java:57) at junit.extensions.TestDecorator.basicRun(Ljunit/framework/TestResult;)V(TestDecorator.java:24) at junit.extensions.TestSetup$1.protect()V(TestSetup.java:21) at junit.extensions.TestSetup.run(Ljunit/framework/TestResult;)V(TestSetup.java:25) at junit.extensions.TestDecorator.basicRun(Ljunit/framework/TestResult;)V(TestDecorator.java:24) at junit.extensions.TestSetup$1.protect()V(TestSetup.java:21) at junit.extensions.TestSetup.run(Ljunit/framework/TestResult;)V(TestSetup.java:25) at sun.misc.CVM.runMain()V(CVM.java:514)",
            "id": "3865"
        },
        "3869": {
            "ground_truth": "0",
            "bug_report": "intermittent hang pinging  server on Linux\nam looking at a intermittent hang with IBM 1.6 on Linux with the ping command. I am not entirely sure it is a jvm issue  but I have not been able to reproduce the hang with other jvms. The trace is3XMTHREADINFO 'main' TID:0x08072500  j9thread_t:0x08057AF4  state:R  prio=53XMTHREADINFO1 (native thread ID:0x1E05  native priority:0x5  native policy:UNKNOWN)4XESTACKTRACE at java/net/SocketInputStream.socketRead0(Native Method)4XESTACKTRACE at java/net/SocketInputStream.read(SocketInputStream.java:140)4XESTACKTRACE at java/net/SocketInputStream.read(SocketInputStream.java:101)4XESTACKTRACE at org/apache/derby/impl/drda/NetworkServerControlImpl.fillReplyBuffer(NetworkServerControlImpl.java:2764)4XESTACKTRACE at org/apache/derby/impl/drda/NetworkServerControlImpl.readResult(NetworkServerControlImpl.java:2708)4XESTACKTRACE at org/apache/derby/impl/drda/NetworkServerControlImpl.pingWithNoOpen(NetworkServerControlImpl.java:1169)4XESTACKTRACE at org/apache/derby/impl/drda/NetworkServerControlImpl.ping(NetworkServerControlImpl.java:1144(Compiled Code))4XESTACKTRACE at org/apache/derby/drda/NetworkServerControl.ping(NetworkServerControl.java:395(Compiled Code))4XESTACKTRACE at Repro.pingForServerUp(Repro.java:38(Compiled Code))4XESTACKTRACE at Repro.startAndShutdown(Repro.java:20)The client has sent the ping  but there is no corresponding session on the server side to process thecommand. The full thread dump is in.javacore.20080903.183815.7684.0001.txtThe program Repro.java shows the problem. It repeatedly starts the server  pings until it comes up  and then shuts down.In the derby.log I see a startup error  that the address is already in use  so presumably the shutdown is not complete before we start the server and then perhaps it shuts down mid ping causing the hang?2008-09-04 01:37:51.048 GMT : Could not listen on port 1527 on host 127.0.0.1: java.net.BindException: Address already in useAn exception was thrown during network server startup. DRDA_ListenPort.S:Could not listen on port 1527 on host 127.0.0.1: java.net.BindException: Address already in usejava.lang.reflect.InvocationTargetException at sun.reflect.GeneratedMethodAccessor3.invoke(Unknown Source) at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:37) at java.lang.reflect.Method.invoke(Method.java:599) at org.apache.derby.iapi.jdbc.DRDAServerStarter.run(DRDAServerStarter.java:236) at java.lang.Thread.run(Thread.java:735)Caused by: java.lang.Exception: DRDA_ListenPort.S:Could not listen on port 1527 on host 127.0.0.1: java.net.BindException: Address already in use at java.lang.Throwable.&lt;init&gt;(Throwable.java:67) at org.apache.derby.impl.drda.NetworkServerControlImpl.consolePropertyMessageWork(NetworkServerControlImpl.java:3179) at org.apache.derby.impl.drda.NetworkServerControlImpl.consolePropertyMessage(NetworkServerControlImpl.java:1861) at org.apache.derby.impl.drda.NetworkServerControlImpl.blockingStart(NetworkServerControlImpl.java:731) ... 5 moreFull log is attached as derby.log",
            "id": "3869"
        },
        "3870": {
            "ground_truth": "0",
            "bug_report": "Concurrent Inserts of rows with XML data results in an exception\nWe insert rows into a table using the following prepared statement (through JDBC):INSERT INTO USER1.PSTORE values(? ?  XMLPARSE(document CAST (? AS CLOB) preserve whitespace))where each of the ?'s are replaced with a string.One thread runs fine. Two or more result in the following exception: org.apache.derby.client.am.SqlException: Java exception: 'FWK005 parse may not be called while parsing.: org.xml.sax.SAXException'. at org.apache.derby.client.am.SqlException.&lt;init&gt;(Unknown Source) at org.apache.derby.client.am.SqlException.&lt;init&gt;(Unknown Source)We believe that this comes from the dBuilder.parse(InputSource) method.",
            "id": "3870"
        },
        "3878": {
            "ground_truth": "0",
            "bug_report": "Replication: stopSlave does not close serversocket when master has crashed.\nThe stopSlave command (connection URL attribute) fails to close the ServerSocket when called after master database has crashed. Because of this  the same Derby instance cannot later start a slave on the same port. The problem is in ReplicationMessageReceive#tearDown and SocketConnection#tearDown:SC#tearDown:When objOutputStream is closed  the stream's flush method is called. Flush throws an exception  and socket.close is not called.RMR#tearDown:When socketCon.teardown throws an exception  serverSocket.close is not called.Suggested fix: add try/catch/finally blocks so that vital code (socket.close and serverSocket.close) is always called.Note that the stop slave command can also come from the master (if stopMaster connection URL is called)  in which case this bug will not materialize.",
            "id": "3878"
        },
        "3883": {
            "ground_truth": "0",
            "bug_report": "LOBStreamControl.replaceBytes() leaves temporary files open\nI haven't seen any problems as a result of this  but the code that closes and deletes the old temporary file in LOBStreamControl.replaceBytes() looks wrong to me.When replaceBytes() is called on a lob that has been materialized into a temporary file  it will create a new file and copy the relevant parts from the old file. But the old file is only closed and deleted if the block that is replaced ends before the last byte of the lob. I believe that the old file should be closed and deleted also when we replace a block that ends at or after the last byte of the original lob.",
            "id": "3883"
        },
        "3887": {
            "ground_truth": "0",
            "bug_report": "Embedded Derby fails under JBoss because of JMX-related conflicts\nI'm trying to use embedded Derby as datasource for JBoss and found that it fails with error.See stacktrace below.It looks like JMX module in Derby conflicts with JBoss JMX.After I have disabled Derby JMX removing 'derby.module.mgmt.jmx=org.apache.derby.impl.services.jmx.JMXManagementService' line from org/apache/derby/modules.properties file in derby.jar JAR  the bug disappears.How to reproduce the issue:1). Install JBoss2). Copy jboss/docs/examples/varia/derby-plugin.jar into jboss/server/default/lib3). Copy Derby JAR (derby.jar) into jboss/server/default/lib4). Copy datasource file into jboss/server/default/lib5). Start JBoss using bin/run.batDatasource file (zzzzz-ds.xml):==={{{&lt;?xml version='1.0' encoding='UTF-8'?&gt;&lt;!DOCTYPE datasources PUBLIC '-//JBoss//DTD JBOSS JCA Config 1.5//EN' 'http://www.jboss.org/j2ee/dtd/jboss-ds_1_5.dtd'&gt;&lt;datasources&gt; &lt;local-tx-datasource&gt; &lt;jndi-name&gt;zzzzzDatasource&lt;/jndi-name&gt; &lt;driver-class&gt;org.apache.derby.jdbc.EmbeddedDriver&lt;/driver-class&gt; &lt;!--connection-url&gt;jdbc:derby:${jboss.server.data.dir}{/}derby{/}zzzzz;create=true&lt;/connection-url--&gt; &lt;connection-url&gt;jdbc:derby:IGNORED&lt;/connection-url&gt; &lt;user-name&gt;IGNORED&lt;/user-name&gt; &lt;password&gt;IGNORED&lt;/password&gt; &lt;min-pool-size&gt;5&lt;/min-pool-size&gt; &lt;max-pool-size&gt;20&lt;/max-pool-size&gt; &lt;idle-timeout-minutes&gt;5&lt;/idle-timeout-minutes&gt; &lt;track-statements/&gt; &lt;depends&gt;jboss:service=zzzzzDerbyDB&lt;/depends&gt; &lt;/local-tx-datasource&gt; &lt;!-- Don't forget to install derby-plugin.jar and derby*.jar into jboss/server/default/lib --&gt; &lt;mbean code='org.jboss.jdbc.DerbyDatabase' name='jboss:service=zzzzzDerbyDB'&gt; &lt;attribute name='Database'&gt;zzzzz&lt;/attribute&gt; &lt;attribute name='User'&gt;sa&lt;/attribute&gt; &lt;attribute name='Password'&gt;&lt;/attribute&gt; &lt;/mbean&gt;&lt;/datasources&gt;===}}}Part of JBoss log with error and stacktrace:==={{{02:40:28 031 INFO &#91;DerbyDatabase&#93; starting derby jdbc:derby:C:/opt/jboss-4.2.3.GA/server/default/data/derby/zzzzz;create=true02:40:28 468 WARN &#91;ServiceController&#93; Problem starting service jboss:service=zzzzzDerbyDBjava.lang.ExceptionInInitializerError at java.lang.Class.forName0(Native Method) at java.lang.Class.forName(Class.java:247) at org.jboss.jdbc.DerbyDatabase.getConnection(DerbyDatabase.java:222) at org.jboss.jdbc.DerbyDatabase.startService(DerbyDatabase.java:189) at org.jboss.system.ServiceMBeanSupport.jbossInternalStart(ServiceMBeanSupport.java:289) at org.jboss.system.ServiceMBeanSupport.jbossInternalLifecycle(ServiceMBeanSupport.java:245) at sun.reflect.GeneratedMethodAccessor3.invoke(Unknown Source) at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25) at java.lang.reflect.Method.invoke(Method.java:597) at org.jboss.mx.interceptor.ReflectedDispatcher.invoke(ReflectedDispatcher.java:155) at org.jboss.mx.server.Invocation.dispatch(Invocation.java:94) at org.jboss.mx.server.Invocation.invoke(Invocation.java:86) at org.jboss.mx.server.AbstractMBeanInvoker.invoke(AbstractMBeanInvoker.java:264) at org.jboss.mx.server.MBeanServerImpl.invoke(MBeanServerImpl.java:659) at org.jboss.system.ServiceController$ServiceProxy.invoke(ServiceController.java:978) at $Proxy0.start(Unknown Source) at org.jboss.system.ServiceController.start(ServiceController.java:417) at sun.reflect.GeneratedMethodAccessor9.invoke(Unknown Source) at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25) at java.lang.reflect.Method.invoke(Method.java:597) at org.jboss.mx.interceptor.ReflectedDispatcher.invoke(ReflectedDispatcher.java:155) at org.jboss.mx.server.Invocation.dispatch(Invocation.java:94) at org.jboss.mx.server.Invocation.invoke(Invocation.java:86) at org.jboss.mx.server.AbstractMBeanInvoker.invoke(AbstractMBeanInvoker.java:264) at org.jboss.mx.server.MBeanServerImpl.invoke(MBeanServerImpl.java:659) at org.jboss.mx.util.MBeanProxyExt.invoke(MBeanProxyExt.java:210) at $Proxy4.start(Unknown Source) at org.jboss.deployment.SARDeployer.start(SARDeployer.java:304) at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39) at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25) at java.lang.reflect.Method.invoke(Method.java:597) at org.jboss.mx.interceptor.ReflectedDispatcher.invoke(ReflectedDispatcher.java:155) at org.jboss.mx.server.Invocation.dispatch(Invocation.java:94) at org.jboss.mx.interceptor.AbstractInterceptor.invoke(AbstractInterceptor.java:133) at org.jboss.mx.server.Invocation.invoke(Invocation.java:88) at org.jboss.mx.interceptor.ModelMBeanOperationInterceptor.invoke(ModelMBeanOperationInterceptor.java:142) at org.jboss.mx.server.Invocation.invoke(Invocation.java:88) at org.jboss.mx.server.AbstractMBeanInvoker.invoke(AbstractMBeanInvoker.java:264) at org.jboss.mx.server.MBeanServerImpl.invoke(MBeanServerImpl.java:659) at org.jboss.mx.util.MBeanProxyExt.invoke(MBeanProxyExt.java:210) at $Proxy42.start(Unknown Source) at org.jboss.deployment.XSLSubDeployer.start(XSLSubDeployer.java:197) at org.jboss.deployment.MainDeployer.start(MainDeployer.java:1025) at org.jboss.deployment.MainDeployer.deploy(MainDeployer.java:819) at org.jboss.deployment.MainDeployer.deploy(MainDeployer.java:782) at sun.reflect.GeneratedMethodAccessor21.invoke(Unknown Source) at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25) at java.lang.reflect.Method.invoke(Method.java:597) at org.jboss.mx.interceptor.ReflectedDispatcher.invoke(ReflectedDispatcher.java:155) at org.jboss.mx.server.Invocation.dispatch(Invocation.java:94) at org.jboss.mx.interceptor.AbstractInterceptor.invoke(AbstractInterceptor.java:133) at org.jboss.mx.server.Invocation.invoke(Invocation.java:88) at org.jboss.mx.interceptor.ModelMBeanOperationInterceptor.invoke(ModelMBeanOperationInterceptor.java:142) at org.jboss.mx.server.Invocation.invoke(Invocation.java:88) at org.jboss.mx.server.AbstractMBeanInvoker.invoke(AbstractMBeanInvoker.java:264) at org.jboss.mx.server.MBeanServerImpl.invoke(MBeanServerImpl.java:659) at org.jboss.mx.util.MBeanProxyExt.invoke(MBeanProxyExt.java:210) at $Proxy9.deploy(Unknown Source) at org.jboss.deployment.scanner.URLDeploymentScanner.deploy(URLDeploymentScanner.java:421) at org.jboss.deployment.scanner.URLDeploymentScanner.scan(URLDeploymentScanner.java:634) at org.jboss.deployment.scanner.AbstractDeploymentScanner$ScannerThread.doScan(AbstractDeploymentScanner.java:263) at org.jboss.deployment.scanner.AbstractDeploymentScanner.startService(AbstractDeploymentScanner.java:336) at org.jboss.system.ServiceMBeanSupport.jbossInternalStart(ServiceMBeanSupport.java:289) at org.jboss.system.ServiceMBeanSupport.jbossInternalLifecycle(ServiceMBeanSupport.java:245) at sun.reflect.GeneratedMethodAccessor3.invoke(Unknown Source) at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25) at java.lang.reflect.Method.invoke(Method.java:597) at org.jboss.mx.interceptor.ReflectedDispatcher.invoke(ReflectedDispatcher.java:155) at org.jboss.mx.server.Invocation.dispatch(Invocation.java:94) at org.jboss.mx.server.Invocation.invoke(Invocation.java:86) at org.jboss.mx.server.AbstractMBeanInvoker.invoke(AbstractMBeanInvoker.java:264) at org.jboss.mx.server.MBeanServerImpl.invoke(MBeanServerImpl.java:659) at org.jboss.system.ServiceController$ServiceProxy.invoke(ServiceController.java:978) at $Proxy0.start(Unknown Source) at org.jboss.system.ServiceController.start(ServiceController.java:417) at sun.reflect.GeneratedMethodAccessor9.invoke(Unknown Source) at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25) at java.lang.reflect.Method.invoke(Method.java:597) at org.jboss.mx.interceptor.ReflectedDispatcher.invoke(ReflectedDispatcher.java:155) at org.jboss.mx.server.Invocation.dispatch(Invocation.java:94) at org.jboss.mx.server.Invocation.invoke(Invocation.java:86) at org.jboss.mx.server.AbstractMBeanInvoker.invoke(AbstractMBeanInvoker.java:264) at org.jboss.mx.server.MBeanServerImpl.invoke(MBeanServerImpl.java:659) at org.jboss.mx.util.MBeanProxyExt.invoke(MBeanProxyExt.java:210) at $Proxy4.start(Unknown Source) at org.jboss.deployment.SARDeployer.start(SARDeployer.java:304) at org.jboss.deployment.MainDeployer.start(MainDeployer.java:1025) at org.jboss.deployment.MainDeployer.deploy(MainDeployer.java:819) at org.jboss.deployment.MainDeployer.deploy(MainDeployer.java:782) at org.jboss.deployment.MainDeployer.deploy(MainDeployer.java:766) at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39) at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25) at java.lang.reflect.Method.invoke(Method.java:597) at org.jboss.mx.interceptor.ReflectedDispatcher.invoke(ReflectedDispatcher.java:155) at org.jboss.mx.server.Invocation.dispatch(Invocation.java:94) at org.jboss.mx.interceptor.AbstractInterceptor.invoke(AbstractInterceptor.java:133) at org.jboss.mx.server.Invocation.invoke(Invocation.java:88) at org.jboss.mx.interceptor.ModelMBeanOperationInterceptor.invoke(ModelMBeanOperationInterceptor.java:142) at org.jboss.mx.server.Invocation.invoke(Invocation.java:88) at org.jboss.mx.server.AbstractMBeanInvoker.invoke(AbstractMBeanInvoker.java:264) at org.jboss.mx.server.MBeanServerImpl.invoke(MBeanServerImpl.java:659) at org.jboss.mx.util.MBeanProxyExt.invoke(MBeanProxyExt.java:210) at $Proxy5.deploy(Unknown Source) at org.jboss.system.server.ServerImpl.doStart(ServerImpl.java:482) at org.jboss.system.server.ServerImpl.start(ServerImpl.java:362) at org.jboss.Main.boot(Main.java:200) at org.jboss.Main$1.run(Main.java:508) at java.lang.Thread.run(Thread.java:619)Caused by: javax.management.JMRuntimeException: Failed to load MBeanServerBuilder class org.jboss.mx.server.MBeanServerBuilderImpl: java.lang.ClassNotFoundException: org/jboss/mx/server/MBeanServerBuilderImpl at javax.management.MBeanServerFactory.checkMBeanServerBuilder(MBeanServerFactory.java:480) at javax.management.MBeanServerFactory.getNewMBeanServerBuilder(MBeanServerFactory.java:511) at javax.management.MBeanServerFactory.newMBeanServer(MBeanServerFactory.java:298) at javax.management.MBeanServerFactory.createMBeanServer(MBeanServerFactory.java:213) at javax.management.MBeanServerFactory.createMBeanServer(MBeanServerFactory.java:174) at sun.management.ManagementFactory.createPlatformMBeanServer(ManagementFactory.java:302) at java.lang.management.ManagementFactory.getPlatformMBeanServer(ManagementFactory.java:504) at org.apache.derby.impl.services.jmx.JMXManagementService$3.run(Unknown Source) at org.apache.derby.impl.services.jmx.JMXManagementService$3.run(Unknown Source) at java.security.AccessController.doPrivileged(Native Method) at org.apache.derby.impl.services.jmx.JMXManagementService.findServer(Unknown Source) at org.apache.derby.impl.services.jmx.JMXManagementService.boot(Unknown Source) at org.apache.derby.impl.services.monitor.BaseMonitor.boot(Unknown Source) at org.apache.derby.impl.services.monitor.TopService.bootModule(Unknown Source) at org.apache.derby.impl.services.monitor.BaseMonitor.startModule(Unknown Source) at org.apache.derby.iapi.services.monitor.Monitor.startSystemModule(Unknown Source) at org.apache.derby.impl.services.monitor.BaseMonitor.runWithState(Unknown Source) at org.apache.derby.impl.services.monitor.FileMonitor.&lt;init&gt;(Unknown Source) at org.apache.derby.iapi.services.monitor.Monitor.startMonitor(Unknown Source) at org.apache.derby.iapi.jdbc.JDBCBoot.boot(Unknown Source) at org.apache.derby.jdbc.EmbeddedDriver.boot(Unknown Source) at org.apache.derby.jdbc.EmbeddedDriver.&lt;clinit&gt;(Unknown Source) ... 110 moreCaused by: java.lang.ClassNotFoundException: org/jboss/mx/server/MBeanServerBuilderImpl at java.lang.Class.forName0(Native Method) at java.lang.Class.forName(Class.java:169) at javax.management.MBeanServerFactory.loadBuilderClass(MBeanServerFactory.java:427) at javax.management.MBeanServerFactory.checkMBeanServerBuilder(MBeanServerFactory.java:465) ... 131 more02:40:29 250 INFO &#91;ConnectionFactoryBindingService&#93; Bound ConnectionManager 'jboss.jca:service=DataSourceBinding name=DefaultDS' to JNDI name 'java:DefaultDS'02:40:29 562 INFO &#91;A&#93; Bound to JNDI name: queue/A02:40:29 562 INFO &#91;B&#93; Bound to JNDI name: queue/B02:40:29 562 INFO &#91;C&#93; Bound to JNDI name: queue/C02:40:29 562 INFO &#91;D&#93; Bound to JNDI name: queue/D02:40:29 578 INFO &#91;ex&#93; Bound to JNDI name: queue/ex02:40:29 593 INFO &#91;testTopic&#93; Bound to JNDI name: topic/testTopic02:40:29 593 INFO &#91;securedTopic&#93; Bound to JNDI name: topic/securedTopic02:40:29 609 INFO &#91;testDurableTopic&#93; Bound to JNDI name: topic/testDurableTopic02:40:29 609 INFO &#91;testQueue&#93; Bound to JNDI name: queue/testQueue02:40:29 656 INFO &#91;UILServerILService&#93; JBossMQ UIL service available at : /127.0.0.1:809302:40:29 703 INFO &#91;DLQ&#93; Bound to JNDI name: queue/DLQ02:40:29 875 INFO &#91;ConnectionFactoryBindingService&#93; Bound ConnectionManager 'jboss.jca:service=ConnectionFactoryBinding name=JmsXA' to JNDI name 'java:JmsXA'02:40:30 093 INFO &#91;TomcatDeployer&#93; deploy  ctxPath=/jmx-console  warUrl=.../deploy/jmx-console.war/02:40:30 250 ERROR &#91;URLDeploymentScanner&#93; Incomplete Deployment listing:&#8212; MBeans waiting for other MBeans &#8212;ObjectName: jboss:service=zzzzzDerbyDB State: FAILED Reason: java.lang.ExceptionInInitializerError Depends On Me: jboss.jca:service=ManagedConnectionFactory name=zzzzzDatasource&#8212; MBEANS THAT ARE THE ROOT CAUSE OF THE PROBLEM &#8212;ObjectName: jboss:service=zzzzzDerbyDB State: FAILED Reason: java.lang.ExceptionInInitializerError Depends On Me: jboss.jca:service=ManagedConnectionFactory name=zzzzzDatasource02:40:30 656 INFO &#91;Http11AprProtocol&#93; Starting Coyote HTTP/1.1 on http-127.0.0.1-808002:40:30 687 INFO &#91;AjpAprProtocol&#93; Starting Coyote AJP/1.3 on ajp-127.0.0.1-800902:40:30 703 INFO &#91;Server&#93; JBoss (MX MicroKernel) &#91;4.2.3.GA (build: SVNTag=JBoss_4_2_3_GA date=200807181439)&#93; Started in 23s:375ms",
            "id": "3887"
        },
        "3889": {
            "ground_truth": "0",
            "bug_report": "LOBStreamControl.truncate() doesn't delete temporary files\nIf LOBStreamControl.truncate() reduces the size of the lob so that it fits in the internal buffer  it closes the temporary file  but it doesn't remove it. See the attached Java class (TruncateClob.java) which fills the tmp directory with temporary lob files  even if each lob is explicitly freed.",
            "id": "3889"
        },
        "3897": {
            "ground_truth": "0",
            "bug_report": "SQLSessionContext not correctly initialized in some non-method call nested contexts\nIn some contexts  beside calling stored routines containing SQL  Derbyuses nested execution contexts  wehere we have two nested activations but no nested connections.In such cases  currently a new SQLSessionContext is constructed  butnot initialized correctly. This leads to the session variablesCURRENT_ROLE/CURRENT_SCHEMA not being set correctly in these contexts(they should inherited from the parent context  cf DERBY-3327).For method calls  this is being handled by generating a call tolcc.setupNestedSessionContext (seeStaticMethodCallNode#generateSetupNestedSessionContext)In some of these nested contexts  one or both of the session variablesCURRENT_ROLE/CURRENT_SCHEMA can be referenced  in othersnot. Obviously  if they can  this will lead to errors. The followingcontexts will have this problem: ALTER TABLE ADD COLUMN &lt;colname&gt; &lt;coltype&gt; DEFAULT CURRENT_ROLE In the AlterTableConstantAction  a nested UPDATE statement is used to give existing rows the new column its default value. This execution context is nested  cf. AlterTableConstantAction#executeUpdate TRIGGER body execution may reference CURRENT_ROLE/CURRENT_SCHEMA. The body executes in a nested context  cf. GenericTriggerExecutor#executeSPS.In other cases  the session variables can not be referenced  so thisnot a problem:  CHECK constraint execution when executed as part of an ALTER TABLE EmbedResultSet.insertRow  .deleteRow  .updateRowThe session context should not be changed (pushed) for these nestedexecutions  since there is no nested connection (SQL 2003  4.37.1: 'AnSQL-session is associated with an SQL-connection.')",
            "id": "3897"
        },
        "3898": {
            "ground_truth": "1",
            "bug_report": "Blob.setBytes differs between embedded and client driver when the specified length is invalid\nBlob.setBytes behaves differently with the embedded driver and the client driver.Assume a 1 byte array and a specified length of 2: Blob.setBytes(1  new byte[] {0x69}  0  2)Embedded: IndexOutOfBoundsException (from java.io.RandomAccessFile.writeBytes or System.arraycopy)Client: succeeds  returns insertion count 1The behavior should be made consistent  but what is the correct behavior?From the Blob.setBytes JavaDoc:'Writes all or part of the given byte array to the BLOB value that this Blob object represents and returns the number of bytes written. Writing starts at position pos in the BLOB value; len bytes from the given byte array are written. The array of bytes will overwrite the existing bytes in the Blob object starting at the position pos. If the end of the Blob value is reached while writing the array of bytes  then the length of the Blob value will be increased to accomodate the extra bytes.'",
            "id": "3898"
        },
        "3902": {
            "ground_truth": "0",
            "bug_report": "some messages are referenced but never used - MessageBundleTest output\nMessageBundleTest was taken out of derbyall because it only ran with classes  not with jars  and it was decided that it would be better to make this into a build check rather than a test...However  the build check - DERBY-1458 - was never implemented  and so  the test has not been run.When I ran  I got the following output:testSQLStateOrphanedIds ERROR: Message id 22003.S.4 in SQLState.java was not found in messages_en.propertiesERROR: Message id XCL32.S in SQLState.java was not found in messages_en.propertiesERROR: Message id X0RQ3.C in SQLState.java was not found in messages_en.propertiesERROR: Message id XSAX1 in SQLState.java was not found in messages_en.propertiesused 188 ms .testMessageIdOrphanedIds used 0 ms .testMessageBundleOrphanedMessages WARNING: Message id 22004.S.4 in messages_en.properties is not referenced in either SQLState.java or MessageId.javaWARNING: Message id J106 in messages_en.properties is not referenced in either SQLState.java or MessageId.javaWARNING: Message id J107 in messages_en.properties is not referenced in either SQLState.java or MessageId.javaWARNING: Message id J108 in messages_en.properties is not referenced in either SQLState.java or MessageId.javaWARNING: Message id J109 in messages_en.properties is not referenced in either SQLState.java or MessageId.javaWARNING: Message id 08000.S.1 in messages_en.properties is not referenced in either SQLState.java or MessageId.javaWARNING: Message id XCL17.S in messages_en.properties is not referenced in either SQLState.java or MessageId.javaWARNING: Message id XJ102.S in messages_en.properties is not referenced in either SQLState.java or MessageId.javaused 0 ms Some of these are known issues  e.g. XCL32 - it's been in MessageBundleTest.out for a long time...XSAX1 looks like a assumption mismatch in MessageBundleTest  see DERBY-1413....But others need some minor code changes/cleanup  for instance  looks like the need for J106 was removed during DERBY-2692  see http://svn.apache.org/viewvc?view=rev&amp;revision=543428  and should probably get removed from messages_en.properties/messages.xml.Needs further checking.",
            "id": "3902"
        },
        "3905": {
            "ground_truth": "0",
            "bug_report": "Failed tests should save the database off to the fail directory\nCurrently failed tests save the derby.log to the fail directory for that test. It would be useful to save the database as well.",
            "id": "3905"
        },
        "3913": {
            "ground_truth": "0",
            "bug_report": "mismatch between error XCL30 and 22003.S.4 and parameters in usage\nI found a script  trunk/tools/testing/i18nTestGenerator/generateClientMessageTest.sh  intended to create a test to verify correctness of client error messages(trunk/java/testing/org/apache/derbyTesting/functionTests/tests/i18n/TestClientMessages.java ). The script is broken (see DERBY-1567) but after fixing up the resulting test and running it  it did show two messages which look a little odd in their usage (plus some messages for which the usage looked fine):XCL30 - LANG_STREAMING_COLUMN_I_O_EXCEPTION: messages.xml:  &lt;msg&gt; &lt;name&gt;XCL30.S&lt;/name&gt; &lt;text&gt;An IOException was thrown when reading a '{0}' from an InputStream.&lt;/text&gt; &lt;arg&gt;value&lt;/arg&gt; &lt;/msg&gt;apparently correct number of parameters  but odd...doesn't look like ioe fits the usage in the message text.EmbedBlob: } catch (IOException ioe) { throw StandardException.newException( SQLState.LANG_STREAMING_COLUMN_I_O_EXCEPTION  ioe); }has a second parameter:client.am.Lob: throw new SqlException(null  new ClientMessageId( SQLState.LANG_STREAMING_COLUMN_I_O_EXCEPTION)  typeDesc  ioe );looks like second parameter fits the {0}:SQLBinary:  throw StandardException. newException(SQLState.LANG_STREAMING_COLUMN_I_O_EXCEPTION  ioe  getTypeName());SQLChar: throw StandardException. newException(SQLState.LANG_STREAMING_COLUMN_I_O_EXCEPTION  ioe  getTypeName()); throw StandardException.newException( SQLState.LANG_STREAMING_COLUMN_I_O_EXCEPTION   ioe   'java.sql.String');--------------------------------------------------------------22003.S.4 - CLIENT_LENGTH_OUTSIDE_RANGE_FOR_DATATYPE &lt;msg&gt; &lt;name&gt;22003.S.4&lt;/name&gt; &lt;text&gt;The length ({0}) exceeds the maximum length for the data type ({1}).&lt;/text&gt; &lt;arg&gt;number&lt;/arg&gt; &lt;arg&gt;datatypeName&lt;/arg&gt; &lt;/msg&gt;correct number of parameters  but new Integer(Integer.MAX_VALUE) returns a number  not a datatype name: client.am.PreparedStatement: throw new SqlException( agent_.logWriter_  new ClientMessageId( SQLState.CLIENT_LENGTH_OUTSIDE_RANGE_FOR_DATATYPE)  new Long(length)  new Integer(Integer.MAX_VALUE) ).getSQLException();client.am.ResultSet: throw new SqlException(agent_.logWriter_  new ClientMessageId(SQLState.CLIENT_LENGTH_OUTSIDE_RANGE_FOR_DATATYPE)  new Long(length)  new Integer(Integer.MAX_VALUE)).getSQLException(); throw new SqlException(agent_.logWriter_  new ClientMessageId(SQLState.CLIENT_LENGTH_OUTSIDE_RANGE_FOR_DATATYPE)  new Long(length)  new Integer(Integer.MAX_VALUE)).getSQLException();  throw new SqlException(agent_.logWriter_  new ClientMessageId(SQLState.CLIENT_LENGTH_OUTSIDE_RANGE_FOR_DATATYPE)  new Long(length)  new Integer(Integer.MAX_VALUE)).getSQLException();-------------------------------------------",
            "id": "3913"
        },
        "3925": {
            "ground_truth": "0",
            "bug_report": "testMetaDataQueryRunInSYScompilationSchema(.....upgradeTests.Changes10_4) fails on CVM/phoneME\nSeen since ~svn r703509. See e.g. http://dbtg.thresher.com/derby/test/Daily/javaME/testing/Limited/testSummary-708609.htmlhttp://dbtg.thresher.com/derby/test/Daily/javaME/testing/testlog/ubuntu/708609-suitesAll_diff.txt4) testMetaDataQueryRunInSYScompilationSchema(org.apache.derbyTesting.functionTests.tests.upgradeTests.Changes10_4)java.sql.SQLException: Failed to create database 'singleUse/oneuse2d'  see the next exception for details. at org.apache.derby.impl.jdbc.SQLExceptionFactory.getSQLException(Ljava/lang/String;Ljava/lang/String;Ljava/sql/SQLException;ILjava/lang/Throwable;[Ljava/lang/Object;)Ljava/sql/SQLException;(Unknown Source) at org.apache.derby.impl.jdbc.Util.newEmbedSQLException(Ljava/lang/String;[Ljava/lang/Object;Ljava/sql/SQLException;ILjava/lang/Throwable;)Ljava/sql/SQLException;(Unknown Source) at org.apache.derby.impl.jdbc.Util.seeNextException(Ljava/lang/String;[Ljava/lang/Object;Ljava/sql/SQLException;)Ljava/sql/SQLException;(Unknown Source) at org.apache.derby.impl.jdbc.EmbedConnection.createDatabase(Ljava/lang/String;Ljava/util/Properties;)Lorg/apache/derby/iapi/db/Database;(Unknown Source) at org.apache.derby.impl.jdbc.EmbedConnection.&lt;init&gt;(Lorg/apache/derby/jdbc/InternalDriver;Ljava/lang/String;Ljava/util/Properties;)V(Unknown Source) at org.apache.derby.impl.jdbc.EmbedConnection30.&lt;init&gt;(Lorg/apache/derby/jdbc/InternalDriver;Ljava/lang/String;Ljava/util/Properties;)V(Unknown Source) at org.apache.derby.jdbc.Driver169.getNewEmbedConnection(Ljava/lang/String;Ljava/util/Properties;)Lorg/apache/derby/impl/jdbc/EmbedConnection;(Unknown Source) at org.apache.derby.jdbc.InternalDriver.connect(Ljava/lang/String;Ljava/util/Properties;)Ljava/sql/Connection;(Unknown Source) at org.apache.derby.jdbc.EmbeddedSimpleDataSource.getConnection(Ljava/lang/String;Ljava/lang/String;)Ljava/sql/Connection;(Unknown Source) at org.apache.derby.jdbc.EmbeddedSimpleDataSource.getConnection()Ljava/sql/Connection;(Unknown Source) at org.apache.derbyTesting.functionTests.tests.upgradeTests.Changes10_4.testMetaDataQueryRunInSYScompilationSchema()V(Changes10_4.java:113) at org.apache.derbyTesting.junit.BaseTestCase.runBare()V(BaseTestCase.java:105) at junit.extensions.TestDecorator.basicRun(Ljunit/framework/TestResult;)V(TestDecorator.java:24) at junit.extensions.TestSetup$1.protect()V(TestSetup.java:21) at junit.extensions.TestSetup.run(Ljunit/framework/TestResult;)V(TestSetup.java:25) at junit.extensions.TestDecorator.basicRun(Ljunit/framework/TestResult;)V(TestDecorator.java:24) at junit.extensions.TestSetup$1.protect()V(TestSetup.java:21) at junit.extensions.TestSetup.run(Ljunit/framework/TestResult;)V(TestSetup.java:25) at junit.extensions.TestDecorator.basicRun(Ljunit/framework/TestResult;)V(TestDecorator.java:24) at junit.extensions.TestSetup$1.protect()V(TestSetup.java:21) at junit.extensions.TestSetup.run(Ljunit/framework/TestResult;)V(TestSetup.java:25) at org.apache.derbyTesting.junit.BaseTestSetup.run(Ljunit/framework/TestResult;)V(BaseTestSetup.java:57) at junit.extensions.TestDecorator.basicRun(Ljunit/framework/TestResult;)V(TestDecorator.java:24) at junit.extensions.TestSetup$1.protect()V(TestSetup.java:21) at junit.extensions.TestSetup.run(Ljunit/framework/TestResult;)V(TestSetup.java:25) at org.apache.derbyTesting.junit.BaseTestSetup.run(Ljunit/framework/TestResult;)V(BaseTestSetup.java:57) at junit.extensions.TestDecorator.basicRun(Ljunit/framework/TestResult;)V(TestDecorator.java:24) at junit.extensions.TestSetup$1.protect()V(TestSetup.java:21) at junit.extensions.TestSetup.run(Ljunit/framework/TestResult;)V(TestSetup.java:25) at junit.extensions.TestDecorator.basicRun(Ljunit/framework/TestResult;)V(TestDecorator.java:24) at junit.extensions.TestSetup$1.protect()V(TestSetup.java:21) at junit.extensions.TestSetup.run(Ljunit/framework/TestResult;)V(TestSetup.java:25) at org.apache.derbyTesting.junit.BaseTestSetup.run(Ljunit/framework/TestResult;)V(BaseTestSetup.java:57) at junit.extensions.TestDecorator.basicRun(Ljunit/framework/TestResult;)V(TestDecorator.java:24) at junit.extensions.TestSetup$1.protect()V(TestSetup.java:21) at junit.extensions.TestSetup.run(Ljunit/framework/TestResult;)V(TestSetup.java:25) at junit.extensions.TestDecorator.basicRun(Ljunit/framework/TestResult;)V(TestDecorator.java:24) at junit.extensions.TestSetup$1.protect()V(TestSetup.java:21) at junit.extensions.TestSetup.run(Ljunit/framework/TestResult;)V(TestSetup.java:25) at org.apache.derbyTesting.junit.BaseTestSetup.run(Ljunit/framework/TestResult;)V(BaseTestSetup.java:57) at junit.extensions.TestDecorator.basicRun(Ljunit/framework/TestResult;)V(TestDecorator.java:24) at junit.extensions.TestSetup$1.protect()V(TestSetup.java:21) at junit.extensions.TestSetup.run(Ljunit/framework/TestResult;)V(TestSetup.java:25) at junit.extensions.TestDecorator.basicRun(Ljunit/framework/TestResult;)V(TestDecorator.java:24) at junit.extensions.TestSetup$1.protect()V(TestSetup.java:21) at junit.extensions.TestSetup.run(Ljunit/framework/TestResult;)V(TestSetup.java:25) at org.apache.derbyTesting.junit.BaseTestSetup.run(Ljunit/framework/TestResult;)V(BaseTestSetup.java:57) at junit.extensions.TestDecorator.basicRun(Ljunit/framework/TestResult;)V(TestDecorator.java:24) at junit.extensions.TestSetup$1.protect()V(TestSetup.java:21) at junit.extensions.TestSetup.run(Ljunit/framework/TestResult;)V(TestSetup.java:25) at junit.extensions.TestDecorator.basicRun(Ljunit/framework/TestResult;)V(TestDecorator.java:24) at junit.extensions.TestSetup$1.protect()V(TestSetup.java:21) at junit.extensions.TestSetup.run(Ljunit/framework/TestResult;)V(TestSetup.java:25) at org.apache.derbyTesting.junit.BaseTestSetup.run(Ljunit/framework/TestResult;)V(BaseTestSetup.java:57) at junit.extensions.TestDecorator.basicRun(Ljunit/framework/TestResult;)V(TestDecorator.java:24) at junit.extensions.TestSetup$1.protect()V(TestSetup.java:21) at junit.extensions.TestSetup.run(Ljunit/framework/TestResult;)V(TestSetup.java:25) at junit.extensions.TestDecorator.basicRun(Ljunit/framework/TestResult;)V(TestDecorator.java:24) at junit.extensions.TestSetup$1.protect()V(TestSetup.java:21) at junit.extensions.TestSetup.run(Ljunit/framework/TestResult;)V(TestSetup.java:25) at junit.extensions.TestDecorator.basicRun(Ljunit/framework/TestResult;)V(TestDecorator.java:24) at junit.extensions.TestSetup$1.protect()V(TestSetup.java:21) at junit.extensions.TestSetup.run(Ljunit/framework/TestResult;)V(TestSetup.java:25) at sun.misc.CVM.runMain()V(CVM.java:514)Caused by: java.sql.SQLException: Collator support not available from the JVM for the database's locale 'no'. at org.apache.derby.impl.jdbc.SQLExceptionFactory.getSQLException(Ljava/lang/String;Ljava/lang/String;Ljava/sql/SQLException;ILjava/lang/Throwable;[Ljava/lang/Object;)Ljava/sql/SQLException;(Unknown Source) at org.apache.derby.impl.jdbc.Util.generateCsSQLException(Lorg/apache/derby/iapi/error/StandardException;)Ljava/sql/SQLException;(Unknown Source) at org.apache.derby.impl.jdbc.TransactionResourceImpl.wrapInSQLException(Ljava/lang/Throwable;)Ljava/sql/SQLException;(Unknown Source) at org.apache.derby.impl.jdbc.TransactionResourceImpl.handleException(Ljava/lang/Throwable;ZZ)Ljava/sql/SQLException;(Unknown Source) at org.apache.derby.impl.jdbc.EmbedConnection.handleException(Ljava/lang/Throwable;)Ljava/sql/SQLException;(Unknown Source) ... 99 moreCaused by: ERROR XBM04: Collator support not available from the JVM for the database's locale 'no'. at org.apache.derby.iapi.error.StandardException.newException(Ljava/lang/String;Ljava/lang/Object;)Lorg/apache/derby/iapi/error/StandardException;(Unknown Source) at org.apache.derby.iapi.types.DataValueFactoryImpl.verifyCollatorSupport()Ljava/text/RuleBasedCollator;(Unknown Source) at org.apache.derby.iapi.types.DataValueFactoryImpl.boot(ZLjava/util/Properties;)V(Unknown Source) at org.apache.derby.impl.services.monitor.BaseMonitor.boot(Ljava/lang/Object;ZLjava/util/Properties;)V(Unknown Source) at org.apache.derby.impl.services.monitor.TopService.bootModule(ZLjava/lang/Object;Lorg/apache/derby/impl/services/monitor/ProtocolKey;Ljava/util/Properties;)Ljava/lang/Object;(Unknown Source) at org.apache.derby.impl.services.monitor.BaseMonitor.startModule(ZLjava/lang/Object;Ljava/lang/String;Ljava/lang/String;Ljava/util/Properties;)Ljava/lang/Object;(Unknown Source) at org.apache.derby.iapi.services.monitor.Monitor.bootServiceModule(ZLjava/lang/Object;Ljava/lang/String;Ljava/util/Properties;)Ljava/lang/Object;(Unknown Source) at org.apache.derby.impl.db.BasicDatabase.boot(ZLjava/util/Properties;)V(Unknown Source) at org.apache.derby.impl.services.monitor.BaseMonitor.boot(Ljava/lang/Object;ZLjava/util/Properties;)V(Unknown Source) at org.apache.derby.impl.services.monitor.TopService.bootModule(ZLjava/lang/Object;Lorg/apache/derby/impl/services/monitor/ProtocolKey;Ljava/util/Properties;)Ljava/lang/Object;(Unknown Source) at org.apache.derby.impl.services.monitor.BaseMonitor.bootService(Lorg/apache/derby/iapi/services/monitor/PersistentService;Ljava/lang/String;Ljava/lang/String;Ljava/util/Properties;Z)Ljava/lang/Object;(Unknown Source) at org.apache.derby.impl.services.monitor.BaseMonitor.createPersistentService(Ljava/lang/String;Ljava/lang/String;Ljava/util/Properties;)Ljava/lang/Object;(Unknown Source) at org.apache.derby.iapi.services.monitor.Monitor.createPersistentService(Ljava/lang/String;Ljava/lang/String;Ljava/util/Properties;)Ljava/lang/Object;(Unknown Source) ... 99 more",
            "id": "3925"
        },
        "3926": {
            "ground_truth": "0",
            "bug_report": "Incorrect ORDER BY caused by index\nI think I found a bug in Derby that is triggered by an index on a large column: VARCHAR(1024). I know it is generally not a good idea to have an index on such a large column.I have a table (table2) with a column 'value'  my query orders on this column but the result is not sorted. It is sorted if I remove the index on that column.The output of the attached script is as follows (results should be ordered on the middle column):ID |VALUE |VALUE----------------------------------------------2147483653 |000002 |218572147483654 |000003 |218574294967297 |000001 |21857While I would expect:ID |VALUE |VALUE----------------------------------------------4294967297 |000001 |218572147483653 |000002 |218572147483654 |000003 |21857This is the definition:CREATE TABLE table1 (id BIGINT NOT NULL  PRIMARY KEY(id));CREATE INDEX key1 ON table1(id);CREATE TABLE table2 (id BIGINT NOT NULL  name VARCHAR(40) NOT NULL  value VARCHAR(1024)  PRIMARY KEY(id  name));CREATE UNIQUE INDEX key2 ON table2(id  name);CREATE INDEX key3 ON table2(value);This is the query:SELECT table1.id  m0.value  m1.valueFROM table1  table2 m0  table2 m1WHERE table1.id=m0.idAND m0.name='PageSequenceId'AND table1.id=m1.idAND m1.name='PostComponentId'AND m1.value='21857'ORDER BY m0.value;The bug can be reproduced by just executing the attached script with the ij-tool.Note that the result of the query becomes correct when enough data is changed. This prevented me from creating a smaller example.See the attached file 'derby-reproduce.zip' for sysinfo  derby.log and script.sql.Michael Segel pointed out:'It looks like its hitting the index ordering on id name from table 2 and is ignoring the order by clause.'",
            "id": "3926"
        },
        "3931": {
            "ground_truth": "0",
            "bug_report": "GeneratedColumnsTest fails with ''F_MINUS' is not recognized as a function or procedure.' on cvm/phoneME\nSee http://dbtg.thresher.com/derby/test/Daily/javaME/testing/Limited/testSummary-708941.html / http://dbtg.thresher.com/derby/test/Daily/javaME/testing/testlog/ubuntu/708941-suitesAll_diff.txt3) test_008_basicForeignKeys(org.apache.derbyTesting.functionTests.tests.lang.GeneratedColumnsTest)java.sql.SQLException: 'F_MINUS' is not recognized as a function or procedure. at org.apache.derby.impl.jdbc.SQLExceptionFactory.getSQLException(Ljava/lang/String;Ljava/lang/String;Ljava/sql/SQLException;ILjava/lang/Throwable;[Ljava/lang/Object;)Ljava/sql/SQLException;(Unknown Source) at org.apache.derby.impl.jdbc.Util.generateCsSQLException(Lorg/apache/derby/iapi/error/StandardException;)Ljava/sql/SQLException;(Unknown Source) at org.apache.derby.impl.jdbc.TransactionResourceImpl.wrapInSQLException(Ljava/lang/Throwable;)Ljava/sql/SQLException;(Unknown Source) at org.apache.derby.impl.jdbc.TransactionResourceImpl.handleException(Ljava/lang/Throwable;ZZ)Ljava/sql/SQLException;(Unknown Source) at org.apache.derby.impl.jdbc.EmbedConnection.handleException(Ljava/lang/Throwable;)Ljava/sql/SQLException;(Unknown Source) at org.apache.derby.impl.jdbc.ConnectionChild.handleException(Ljava/lang/Throwable;)Ljava/sql/SQLException;(Unknown Source) at org.apache.derby.impl.jdbc.EmbedPreparedStatement.&lt;init&gt;(Lorg/apache/derby/impl/jdbc/EmbedConnection;Ljava/lang/String;ZIIII[I[Ljava/lang/String;)V(Unknown Source) at org.apache.derby.impl.jdbc.EmbedPreparedStatement169.&lt;init&gt;(Lorg/apache/derby/impl/jdbc/EmbedConnection;Ljava/lang/String;ZIIII[I[Ljava/lang/String;)V(Unknown Source) at org.apache.derby.jdbc.Driver169.newEmbedPreparedStatement(Lorg/apache/derby/impl/jdbc/EmbedConnection;Ljava/lang/String;ZIIII[I[Ljava/lang/String;)Ljava/sql/PreparedStatement;(Unknown Source) at org.apache.derby.impl.jdbc.EmbedConnection.prepareStatement(Ljava/lang/String;IIII[I[Ljava/lang/String;)Ljava/sql/PreparedStatement;(Unknown Source) at org.apache.derby.impl.jdbc.EmbedConnection.prepareStatement(Ljava/lang/String;)Ljava/sql/PreparedStatement;(Unknown Source) at org.apache.derbyTesting.functionTests.tests.lang.GeneratedColumnsTest.chattyPrepare(Ljava/sql/Connection;Ljava/lang/String;)Ljava/sql/PreparedStatement;(GeneratedColumnsTest.java:991) at org.apache.derbyTesting.functionTests.tests.lang.GeneratedColumnsTest.goodStatement(Ljava/sql/Connection;Ljava/lang/String;)V(GeneratedColumnsTest.java:977) at org.apache.derbyTesting.functionTests.tests.lang.GeneratedColumnsTest.test_008_basicForeignKeys()V(GeneratedColumnsTest.java:834) at org.apache.derbyTesting.junit.BaseTestCase.runBare()V(BaseTestCase.java:105) at junit.extensions.TestDecorator.basicRun(Ljunit/framework/TestResult;)V(TestDecorator.java:24) at junit.extensions.TestSetup$1.protect()V(TestSetup.java:21) at junit.extensions.TestSetup.run(Ljunit/framework/TestResult;)V(TestSetup.java:25) at org.apache.derbyTesting.junit.BaseTestSetup.run(Ljunit/framework/TestResult;)V(BaseTestSetup.java:57) at sun.misc.CVM.runMain()V(CVM.java:514)Caused by: ERROR 42Y03: 'F_MINUS' is not recognized as a function or procedure. at org.apache.derby.iapi.error.StandardException.newException(Ljava/lang/String;Ljava/lang/Object;)Lorg/apache/derby/iapi/error/StandardException;(Unknown Source) at org.apache.derby.impl.sql.compile.StaticMethodCallNode.bindExpression(Lorg/apache/derby/impl/sql/compile/FromList;Lorg/apache/derby/impl/sql/compile/SubqueryList;Ljava/util/Vector;)Lorg/apache/derby/impl/sql/compile/JavaValueNode;(Unknown Source) at org.apache.derby.impl.sql.compile.JavaToSQLValueNode.bindExpression(Lorg/apache/derby/impl/sql/compile/FromList;Lorg/apache/derby/impl/sql/compile/SubqueryList;Ljava/util/Vector;)Lorg/apache/derby/impl/sql/compile/ValueNode;(Unknown Source) at org.apache.derby.impl.sql.compile.GenerationClauseNode.bindExpression(Lorg/apache/derby/impl/sql/compile/FromList;Lorg/apache/derby/impl/sql/compile/SubqueryList;Ljava/util/Vector;)Lorg/apache/derby/impl/sql/compile/ValueNode;(Unknown Source) at org.apache.derby.impl.sql.compile.TableElementList.bindAndValidateGenerationClauses(Lorg/apache/derby/impl/sql/compile/FromList;)V(Unknown Source) at org.apache.derby.impl.sql.compile.CreateTableNode.bindStatement()V(Unknown Source) at org.apache.derby.impl.sql.GenericStatement.prepMinion(Lorg/apache/derby/iapi/sql/conn/LanguageConnectionContext;Z[Ljava/lang/Object;Lorg/apache/derby/iapi/sql/dictionary/SchemaDescriptor;Z)Lorg/apache/derby/iapi/sql/PreparedStatement;(Unknown Source) at org.apache.derby.impl.sql.GenericStatement.prepare(Lorg/apache/derby/iapi/sql/conn/LanguageConnectionContext;Z)Lorg/apache/derby/iapi/sql/PreparedStatement;(Unknown Source) at org.apache.derby.impl.sql.conn.GenericLanguageConnectionContext.prepareInternalStatement(Lorg/apache/derby/iapi/sql/dictionary/SchemaDescriptor;Ljava/lang/String;ZZ)Lorg/apache/derby/iapi/sql/PreparedStatement;(Unknown Source) ... 32 more4) test_007_basicTriggers(org.apache.derbyTesting.functionTests.tests.lang.GeneratedColumnsTest)java.sql.SQLException: 'F_MINUS' is not recognized as a function or procedure. at org.apache.derby.impl.jdbc.SQLExceptionFactory.getSQLException(Ljava/lang/String;Ljava/lang/String;Ljava/sql/SQLException;ILjava/lang/Throwable;[Ljava/lang/Object;)Ljava/sql/SQLException;(Unknown Source) at org.apache.derby.impl.jdbc.Util.generateCsSQLException(Lorg/apache/derby/iapi/error/StandardException;)Ljava/sql/SQLException;(Unknown Source) at org.apache.derby.impl.jdbc.TransactionResourceImpl.wrapInSQLException(Ljava/lang/Throwable;)Ljava/sql/SQLException;(Unknown Source) at org.apache.derby.impl.jdbc.TransactionResourceImpl.handleException(Ljava/lang/Throwable;ZZ)Ljava/sql/SQLException;(Unknown Source) at org.apache.derby.impl.jdbc.EmbedConnection.handleException(Ljava/lang/Throwable;)Ljava/sql/SQLException;(Unknown Source) at org.apache.derby.impl.jdbc.ConnectionChild.handleException(Ljava/lang/Throwable;)Ljava/sql/SQLException;(Unknown Source) at org.apache.derby.impl.jdbc.EmbedPreparedStatement.&lt;init&gt;(Lorg/apache/derby/impl/jdbc/EmbedConnection;Ljava/lang/String;ZIIII[I[Ljava/lang/String;)V(Unknown Source) at org.apache.derby.impl.jdbc.EmbedPreparedStatement169.&lt;init&gt;(Lorg/apache/derby/impl/jdbc/EmbedConnection;Ljava/lang/String;ZIIII[I[Ljava/lang/String;)V(Unknown Source) at org.apache.derby.jdbc.Driver169.newEmbedPreparedStatement(Lorg/apache/derby/impl/jdbc/EmbedConnection;Ljava/lang/String;ZIIII[I[Ljava/lang/String;)Ljava/sql/PreparedStatement;(Unknown Source) at org.apache.derby.impl.jdbc.EmbedConnection.prepareStatement(Ljava/lang/String;IIII[I[Ljava/lang/String;)Ljava/sql/PreparedStatement;(Unknown Source) at org.apache.derby.impl.jdbc.EmbedConnection.prepareStatement(Ljava/lang/String;)Ljava/sql/PreparedStatement;(Unknown Source) at org.apache.derbyTesting.functionTests.tests.lang.GeneratedColumnsTest.chattyPrepare(Ljava/sql/Connection;Ljava/lang/String;)Ljava/sql/PreparedStatement;(GeneratedColumnsTest.java:991) at org.apache.derbyTesting.functionTests.tests.lang.GeneratedColumnsTest.goodStatement(Ljava/sql/Connection;Ljava/lang/String;)V(GeneratedColumnsTest.java:977) at org.apache.derbyTesting.functionTests.tests.lang.GeneratedColumnsTest.test_007_basicTriggers()V(GeneratedColumnsTest.java:661) at org.apache.derbyTesting.junit.BaseTestCase.runBare()V(BaseTestCase.java:105) at junit.extensions.TestDecorator.basicRun(Ljunit/framework/TestResult;)V(TestDecorator.java:24) at junit.extensions.TestSetup$1.protect()V(TestSetup.java:21) at junit.extensions.TestSetup.run(Ljunit/framework/TestResult;)V(TestSetup.java:25) at org.apache.derbyTesting.junit.BaseTestSetup.run(Ljunit/framework/TestResult;)V(BaseTestSetup.java:57) at sun.misc.CVM.runMain()V(CVM.java:514)Caused by: ERROR 42Y03: 'F_MINUS' is not recognized as a function or procedure. at org.apache.derby.iapi.error.StandardException.newException(Ljava/lang/String;Ljava/lang/Object;)Lorg/apache/derby/iapi/error/StandardException;(Unknown Source) at org.apache.derby.impl.sql.compile.StaticMethodCallNode.bindExpression(Lorg/apache/derby/impl/sql/compile/FromList;Lorg/apache/derby/impl/sql/compile/SubqueryList;Ljava/util/Vector;)Lorg/apache/derby/impl/sql/compile/JavaValueNode;(Unknown Source) at org.apache.derby.impl.sql.compile.JavaToSQLValueNode.bindExpression(Lorg/apache/derby/impl/sql/compile/FromList;Lorg/apache/derby/impl/sql/compile/SubqueryList;Ljava/util/Vector;)Lorg/apache/derby/impl/sql/compile/ValueNode;(Unknown Source) at org.apache.derby.impl.sql.compile.GenerationClauseNode.bindExpression(Lorg/apache/derby/impl/sql/compile/FromList;Lorg/apache/derby/impl/sql/compile/SubqueryList;Ljava/util/Vector;)Lorg/apache/derby/impl/sql/compile/ValueNode;(Unknown Source) at org.apache.derby.impl.sql.compile.TableElementList.bindAndValidateGenerationClauses(Lorg/apache/derby/impl/sql/compile/FromList;)V(Unknown Source) at org.apache.derby.impl.sql.compile.CreateTableNode.bindStatement()V(Unknown Source) at org.apache.derby.impl.sql.GenericStatement.prepMinion(Lorg/apache/derby/iapi/sql/conn/LanguageConnectionContext;Z[Ljava/lang/Object;Lorg/apache/derby/iapi/sql/dictionary/SchemaDescriptor;Z)Lorg/apache/derby/iapi/sql/PreparedStatement;(Unknown Source) at org.apache.derby.impl.sql.GenericStatement.prepare(Lorg/apache/derby/iapi/sql/conn/LanguageConnectionContext;Z)Lorg/apache/derby/iapi/sql/PreparedStatement;(Unknown Source) at org.apache.derby.impl.sql.conn.GenericLanguageConnectionContext.prepareInternalStatement(Lorg/apache/derby/iapi/sql/dictionary/SchemaDescriptor;Ljava/lang/String;ZZ)Lorg/apache/derby/iapi/sql/PreparedStatement;(Unknown Source) ... 32 more",
            "id": "3931"
        },
        "3932": {
            "ground_truth": "0",
            "bug_report": "Add tests of generated columns when sql authorization is turned on\nAdd tests of generated columns under sql authorization. For instance  we need to verify the current_role cannot appear in generation clauses.",
            "id": "3932"
        },
        "3934": {
            "ground_truth": "0",
            "bug_report": "Improve performance of reading modified Clobs\nThe performance of reading modified Clobs is poor  which is demonstrated by running a test program selecting a 10 MB Clob and then getting the contents using getSubString: unmodified Clob (StoreStreamClob) : ~1 300 ms modified Clob (TemporaryClob): ~156 000 msIn this case  the Clob was modified by changing the first character.A number of subtasks will be created to handle the various issues  which will be related to both performance and code cleanup.For a brief overview  see http://www.nabble.com/Suggestion-for-improving-ClobUpdatableReader-and-related-code-to20308303.html",
            "id": "3934"
        },
        "3945": {
            "ground_truth": "0",
            "bug_report": "Generation clauses which mention user-coded functions may produce different resuls depending on who performs the triggering INSERT/UPDATE\nThis is similar to DERBY-3944. The compiler uses the current schema in order to resolve unqualifed function names when preparing INSERT/UPDATE statement. This means that a generation clause may evaluate differently depending on who invokes the triggering INSERT/UPDATE statement. This violates the requirement that generation clause should be deterministic (see part 2 of the ANSI/ISO standard  section 4.16.Hopefully  the same patch will fix both DERBY-3944 and this issue.",
            "id": "3945"
        },
        "3947": {
            "ground_truth": "0",
            "bug_report": "Cannot insert 994 character long string into indexed column\nInserting a 994 character string into a varchar(1000) column with an index fails.These steps1. 'create table t (x varchar(1000) primary key)'2. 'insert into t values ' where ? holds a 994 character stringproduce the following error:ERROR XSCB6: Limitation: Record of a btree secondary index cannot be updated or inserted due to lack of space on the page. Use the parameters derby.storage.pageSize and/or derby.storage.pageReservedSpace to work around this limitation. at org.apache.derby.iapi.error.StandardException.newException(StandardException.java:276) at org.apache.derby.impl.store.access.btree.BTreeController.doIns(BTreeController.java:845) at org.apache.derby.impl.store.access.btree.BTreeController.insert(BTreeController.java:1264) at org.apache.derby.impl.store.access.btree.index.B2IController.insert(B2IController.java:210) at org.apache.derby.impl.sql.execute.IndexChanger.insertAndCheckDups(IndexChanger.java:439) at org.apache.derby.impl.sql.execute.IndexChanger.doInsert(IndexChanger.java:383) at org.apache.derby.impl.sql.execute.IndexChanger.insert(IndexChanger.java:589) at org.apache.derby.impl.sql.execute.IndexSetChanger.insert(IndexSetChanger.java:268) at org.apache.derby.impl.sql.execute.RowChangerImpl.insertRow(RowChangerImpl.java:453) at org.apache.derby.impl.sql.execute.InsertResultSet.normalInsertCore(InsertResultSet.java:1011) at org.apache.derby.impl.sql.execute.InsertResultSet.open(InsertResultSet.java:487) at org.apache.derby.impl.sql.GenericPreparedStatement.execute(GenericPreparedStatement.java:372) at org.apache.derby.impl.jdbc.EmbedStatement.executeStatement(EmbedStatement.java:1235)The page size should be set sufficiently high at index creation time to hold columns with the specified maximum size.",
            "id": "3947"
        },
        "3948": {
            "ground_truth": "0",
            "bug_report": "Don't allow references to generated columns in the NEW transition variables of triggered actions of BEFORE triggers\nThanks to Dag for finding this restriction in the SQL Standard  part 2  section 11.39  SR 12 c) I see this provision: 12) If BEFORE is specified  then: : c) The &lt;triggered action&gt; shall not contain a &lt;field reference&gt; that references a field in the new transition variable corresponding to a generated column of T.",
            "id": "3948"
        },
        "3970": {
            "ground_truth": "0",
            "bug_report": "PositionedStoreStream doesn't initialize itself properly\nWhen a PositionedStoreStream is created on top of a stream from store  it must properly initialize itself.Proper initialization consists of initializing and resetting the stream to make sure the states of the streams are in sync.A case of out of sync stream states was detected in a test where the Clob reference wasn't kept  but a new Clob object was created for each operation  i.e: rs.getClob(1).length(); rs.getClob(1).getSubString(...);A symptom of out of sync stream states is EOFException on a valid request.I don't think the access style above is supposed to work  but the proper initialization should be performed anyway.",
            "id": "3970"
        },
        "3978": {
            "ground_truth": "0",
            "bug_report": "Clob.truncate(long) in the client driver doesn't update the cached Clob length\nThe client driver caches the Clob length  but doesn't update it when Clob.truncate is called.I will attach a few regression tests  where one of them demonstrates the issue. The fix is also very simple; update the cached length.",
            "id": "3978"
        },
        "3982": {
            "ground_truth": "0",
            "bug_report": "Add a facility to override the default set of old versions to be tested in the upgrade tests.\nIn my testing I have seen a need for performing upgrade testing from local/internal non-public 'versions' of Derby.That is  having local/internal changes to some older branch and allowing upgrade testing from this (not yet public) version.One solution is to locally modify the 'VERSIONS' table of the upgradetests '_Suite'  but this means modifying the source for each such case.A more flexible solution is to override the default versions (given in 'VERSIONS') by using a property giving a file which lists the versions to test upgrade from. The location to local version jars can currently be given by the 'derbyTesting.oldReleasePath' property. The list of versions could be given by a property 'derbyTesting.oldVersionsPath'.This will also easily allow us to skip testing upgrade from a specific version. (This can already be done by not having the version jars available.)The list of versions given via the property should be used whether versions (jars) are available locally (as given by the 'derbyTesting.oldReleasePath' property or fetched from the Apache Derby svn repository ('http://svn.apache.org/repos/asf/db/derby/jars').I have a patch for this which I will submit for review.",
            "id": "3982"
        },
        "3990": {
            "ground_truth": "0",
            "bug_report": "ResultSetStreamTest fails on case sensitive file systems  and isn't run as part of any suite\nResultSetStreamTest fails on case sensitive file systems  and it isn't run as part of any suite.I believe this should be easy to fix  and can be a nice issue to work on for people wanting to get more familiar with the basics of the Derby test framework (including JUnit).Assuming the test works once the first obstacle has been removed",
            "id": "3990"
        },
        "3993": {
            "ground_truth": "0",
            "bug_report": "With IBM 1.6 T_RawStoreFactory fails with There should be 0 observers  but we still have 1 observers on Win 2K\nOn Win2K T_RawStoreFactory fails consistently with java version '1.6.0'Java(TM) SE Runtime Environment (build pwi3260sr3-20081106_07(SR3))IBM J9 VM (build 2.4  J2RE 1.6.0 IBM J9 2.4 Windows XP x86-32 jvmwi3260-20081105_25433 (JIT enabled  AOT enabled)J9VM - 20081105_025433_lHdSMrJIT - r9_20081031_1330GC - 20081027_AB)JCL - 20081106_01     Start: T_RawStoreFactory jdk1.6.0 2008-12-17 09:37:49 ***2 del&lt; &#8211; Unit Test T_RawStoreFactory finished2 add&gt; There should be 0 observers  but we still have 1 observers.&gt; Shutting down due to unit test failure.Test Failed.    I have seen the same failure on Linux and Windows XP intermittently with IBM 1.6.",
            "id": "3993"
        },
        "3997": {
            "ground_truth": "0",
            "bug_report": "ORDER BY causes column to be returned\nThe ORDER BY is causing the ordered column to be retrieved even though it is not part of the SELECT clause. Here is a script to create a table  insert a row  and perform the select:CREATE TABLE 'REVIEWS'.'GEOFF_REVIEWS_REVIEW'( PK INTEGER PRIMARY KEY not null  numstars BIGINT  body VARCHAR(32672)  title VARCHAR(32672)  authoremail VARCHAR(32672));INSERT INTO 'REVIEWS'.'GEOFF_REVIEWS_REVIEW' (PK numstars body title authoremail) VALUES (0 /not nullable/ 0 's' 's' 's');SELECT 'review'.'numstars'FROM 'GEOFF_REVIEWS_REVIEW' AS 'review'WHERE 'review'.'PK' = 1ORDER BY 'review'.PK",
            "id": "3997"
        },
        "4006": {
            "ground_truth": "0",
            "bug_report": "ALTER COLUMN ... WITH DEFAULT NULL does not change the default\nReported on derby-user.http://mail-archives.apache.org/mod_mbox/db-derby-user/200901.mbox/%3c21349727.post@talk.nabble.com%3eij&gt; create table t (x varchar(5) default 'abc');0 rows inserted/updated/deletedij&gt; alter table t alter column x with default null;0 rows inserted/updated/deletedij&gt; insert into t values default;1 row inserted/updated/deletedij&gt; select * from t;X abc 1 row selected",
            "id": "4006"
        },
        "4018": {
            "ground_truth": "1",
            "bug_report": "ArrayIndexOutOfBoundsException in TopService.inService under heavy multithreaded use of EmbeddedDriver\nI have created a test program that reproduces this issue. The program pounds on Derby by running jobs on a pool of 10 threads. Each job creates a new Derby database  a schema  a table  and an index. Then it shuts down the database and finishes. The program runs until an error occurs or until 1000 jobs have finished.The problem is very intermittent  and related I think to multithreaded access of a vector 'moduleInstances' in TopService.java. I am seeing the error on my machine about half the time I run the test program. Sometimes it happens after 100 or 200 jobs...but sometimes not until 500 or more  or not at all.I am using the 10.4.2 derby.jar downloaded from http://db.apache.org/derby/releases/release-10.4.2.0.cgi  without any modifications on my part.I will attach the test program plus output from a run that failed with the ArrayIndexOutOfBoundsException. (The actual exception thrown to the application from Derby is SQLException  but the underlying cause is an ArrayIndexOutOfBoundsException.) BE AWARE that if you run this test program it can use up a GByte or more of disk space in your Java tmp directory.",
            "id": "4018"
        },
        "4022": {
            "ground_truth": "0",
            "bug_report": "Remove dependency of junit targets on deprecated jdk16 variable\nThe junit target for running the jdbc4 tests depends on the jdk16 variable being set in your ant.properties. For the build  this variable has been deprecated. We should be able to make the jdbc4 tests depend on whether the environment is Java 6 instead.",
            "id": "4022"
        },
        "4023": {
            "ground_truth": "0",
            "bug_report": "Improve length caching in TemporaryClob\nTemporaryClob doesn't save the known length of the Clob in all situations.The following places in the code should be improved (some easier than others): a) TemporaryClob(String ConChild) b) copyClobContent(InternalClob long) (non-static) c) copyClobContent(InternalClob) (non-static)There might be additional places to fix too.",
            "id": "4023"
        },
        "4024": {
            "ground_truth": "0",
            "bug_report": "Replace felix.jar file with the felix sources\nIn order to bundle Derby with popular linux distributions like Debian and Ubuntu  it must be possible to build Derby from sources and existing linux components. By replacing Felix jar with the corresponding sources  we move another step closer to being able to bundle Derby with linux distributions.",
            "id": "4024"
        },
        "4027": {
            "ground_truth": "0",
            "bug_report": "An attempt was made to access an out of range slot on a page\nWhen running our application we get the following error message:An attempt was made to access an out of range slot on a page:INSERT INTO orders (operation  receptacle  vehicle_id  iata_origin  icao_origin  sta  eta  ata  pta  onb  arr_stand_id  arr_gate  arr_flight_no  arr_remarks  flight_no  icao_flight_no  icao_callsign  iata_destination  icao_destination  std  etd  atd  ofb  stand_id  pit_code  gate  aircraft_subtype_code  aircraft_registration  fuel_request  canceled  delay_ind  remarks  ptd  slot_request_code  slot_request  slot_granted  terminal  customer_name  customer_type  supplier_id  carnet_no  carnet_expiry  contract_id  authorization_reference  service_level  standby_at  started_at  completed_at  status  comment  meter1_start_volume_automatic  meter1_start_volume_manual  meter1_stop_volume_automatic  meter1_stop_volume_manual  meter2_start_volume_automatic  meter2_start_volume_manual  meter2_stop_volume_automatic  meter2_stop_volume_manual  temperature  density  created_at  updated_at  fuel_on_board  id) VALUES('FUELLING'  NULL  NULL  NULL  NULL  '2009-01-22 07:25:00'  '2009-01-22 07:30:00'  '2009-01-22 07:27:00'  '2009-01-22 07:27:00'  '2009-01-22 07:29:46'  'anAEBO3yqr3zaaabxfoB_Q'  NULL  'DY 0201'  NULL  'DY 0242'  'NAX0242'  'NAX242'  'TOS'  'ENTC'  '2009-01-22 07:50:00'  NULL  '2009-01-22 08:13:00'  '2009-01-22 08:06:08'  'anAEBO3yqr3zaaabxfoB_Q'  NULL  '18'  '733'  'LNKHA'  7200  0  'X'  NULL  '2009-01-22 08:13:00'  NULL  NULL  NULL  '1'  NULL  NULL  NULL  NULL  NULL  NULL  NULL  NULL  NULL  NULL  NULL  NULL  NULL  NULL  NULL  NULL  NULL  NULL  NULL  NULL  NULL  NULL  NULL  '2009-01-21 08:04:54'  '2009-01-22 13:24:59'  0  'aV9HYQ55ir3B9DabxfoB_Q')The error occurs several times per day on different systems. It started yesterday",
            "id": "4027"
        },
        "4038": {
            "ground_truth": "1",
            "bug_report": "On Z/OS store/access.sql fails with encryptionAES and encryptionDES\nOn Z/OS access.sql fails for encryptionAES and encryptionDES. The diff is big but I can't quite make out what the problem is. Maybe just a change of query plans.",
            "id": "4038"
        },
        "4042": {
            "ground_truth": "0",
            "bug_report": "org.apache.derby.impl.load.Import needs to escape single quotes\nThe code that builds the SQL statement that invokes the Import VTI doesn't properly escape single quotes. This causes problems for users  see: http://mail-archives.apache.org/mod_mbox/db-derby-user/200901.mbox/%3c21754463.post@talk.nabble.com%3eImport.performImport() is the method that needs to be fixed.",
            "id": "4042"
        },
        "4044": {
            "ground_truth": "0",
            "bug_report": "Use helper methods from IdUtil to quote SQL identifiers in EmbedResultSet\nEmbedResultSet has two methods quoteSqlIdentifier() and getFullBaseTableName() which should be replaced with IdUtil.normalToDelimited() and IdUtil.mkQualifiedName()  respectively.",
            "id": "4044"
        },
        "4050": {
            "ground_truth": "0",
            "bug_report": "Multithreaded clob update causes growth in table that does not get reclaimed\nDoing a multithreaded update of a Clob table causes table growth that does not get reclaimed except by compressing the table. The reproduction has a table with two threads. One thread updates row 1 repeatedly with 33 000 character clob. The other thread updates row 2 with a small clob  'hello'. The problem occurs back to 10.2 but seems much worse on trunk than 10.2. The trunk database grew to 273MB on trunk after 10000 updates of each row. The 10.2 database grew only to 25MB. If the update is synchronized there is no growth.I will attach the repro.",
            "id": "4050"
        },
        "4061": {
            "ground_truth": "0",
            "bug_report": "InputStream returned from Blob.getBinaryStream(long  long) terminates the stream by returning 0  should return -1\nTake the following code to copy a sub-stream from a BLOB:Blob blob = rs.getBlob(1);InputStream stream = blob.getBinaryStream(1000  2000);try { IOUtils.copy(stream  out);} finally { stream.close();}This will loop forever in IOUtils.copy  as the InputStream is returning 0 at end of stream instead of -1. It probably should return -1 to comply with the Javadoc for InputStream.Notes:I have not yet checked Blob.getBinaryStream()  or any of the Clob methods  or the client driver. So some of these may have a similar issue.",
            "id": "4061"
        },
        "4067": {
            "ground_truth": "0",
            "bug_report": "ClientConnectionPoolDataSource.getPooledConnection and ClientXADataSource.getXAConnection ignore connection attributes\nThe methods CCPDS.getPooledConnection and CXADS.getXAConnection fail to pick up attributes set with setConnectionAttributes(String).The current regression tests fail to detect this  because they obtain a connection using getConnection(). I'm not sure if this method should be present in a XADataSource at all  but this problem should be addressed by a separate issue.",
            "id": "4067"
        },
        "4072": {
            "ground_truth": "1",
            "bug_report": "shutdown with incorrect permission on log files shows java.lang.NullPointerException  at org.apache.derby.impl.store.raw.log.LogToFile.flush(LogToFile.java:3964).  Should give bettter message.\nI recently saw case where a user was seeing the following error in the derby.log when trying to shutdown their database.New exception raised during cleanup nulljava.lang.NullPointerException at org.apache.derby.impl.store.raw.log.LogToFile.flush(LogToFile.java:3964) at org.apache.derby.impl.store.raw.log.LogToFile.flush(LogToFile.java:1781) at org.apache.derby.impl.store.raw.data.BaseDataFileFactory.flush(BaseDataFileFa at org.apache.derby.impl.store.raw.data.CachedPage.writePage(CachedPage.java:761 at org.apache.derby.impl.store.raw.data.CachedPage.clean(CachedPage.java:610) at org.apache.derby.impl.services.cache.ConcurrentCache.cleanAndUnkeepEntry(Conc at org.apache.derby.impl.services.cache.ConcurrentCache.cleanCache(ConcurrentCac at org.apache.derby.impl.services.cache.ConcurrentCache.cleanAll(ConcurrentCache at org.apache.derby.impl.services.cache.ConcurrentCache.shutdown(ConcurrentCache at org.apache.derby.impl.store.raw.data.BaseDataFileFactory.stop(BaseDataFileFac at org.apache.derby.impl.services.monitor.TopService.stop(TopService.java:405) at org.apache.derby.impl.services.monitor.TopService.shutdown(TopService.java:34 at org.apache.derby.impl.services.monitor.BaseMonitor.shutdown(BaseMonitor.java: at org.apache.derby.impl.db.DatabaseContextImpl.cleanupOnError(DatabaseContextIm at org.apache.derby.iapi.services.context.ContextManager.cleanupOnError(ContextM at org.apache.derby.impl.jdbc.TransactionResourceImpl.cleanupOnError(Transaction at org.apache.derby.impl.jdbc.EmbedConnection.&lt;init&gt;(EmbedConnection.java:584) at org.apache.derby.jdbc.Driver40.getNewEmbedConnection(Driver40.java:68) at org.apache.derby.jdbc.InternalDriver.connect(InternalDriver.java:238) at org.apache.derby.jdbc.AutoloadedDriver.connect(AutoloadedDriver.java:119) at java.sql.DriverManager.getConnection(DriverManager.java:316) at java.sql.DriverManager.getConnection(DriverManager.java:273)It ended up that some of the log files did not have proper write permissions because some operation on the database had been performed by root. They had subsequently deleted their db.lck file so the database did not boot READ ONLY as it would if the root owned db.lck file still existed and the symptom was that they got this error on shutdown.Clearly this was user error  but it would have been good if we gave a better error message. To reproduce on Linux:As a user with umask 0022  run the program java MakeDBthis will make the databases wombat and create a table.su rootwith umask 0022  run the program to insert data and remove the db.lck file:java InsertALotrm wombat/db.lckgo back to the original userrun the program:java ConnectAndShutdownThe application gets the normal shutdown exception but if you look in derby.log you will see the exception.java.lang.NullPointerException at org.apache.derby.impl.store.raw.log.LogToFile.flush(LogToFile.java:3964) ...I will attach the files.",
            "id": "4072"
        },
        "4081": {
            "ground_truth": "0",
            "bug_report": "BTreeController.comparePreviousRecord() may fail to release latch on left-most leaf\nIf comparePreviousRecord() is called on some other leaf page than the left-most leaf  and all the rows to the left of the current position are deleted so that the position is moved all the way to slot 0 on the left-most leaf  comparePreviousRecord() will return without releasing the latch on the left-most leaf. Only the leaf on which comparePreviousRecord() is called should be latched when the method returns.Since comparePreviousRecord() currently fails to continue after finding a deleted row  this bug is not possible to expose until DERBY-4028 is fixed.",
            "id": "4081"
        },
        "4083": {
            "ground_truth": "1",
            "bug_report": "BTreeScan.delete() throws AM_RECORD_NOT_FOUND if record is found\nThe code below is from BTreeScan.delete(). If the call to reposition() manages to position on the row  an exception is raised indicating that the row could not be found. If the row is not found  no exception is raised  but code later in the method will probably throw a NullPointerException because scan_position.current_leaf is set to null by reposition(). I believe that 'if (reposition(...))' should be changed to 'if (!reposition(...))'. According to the test coverage reports  this code is not exercised by any of the existing tests. if (latch_released) { // lost latch on page in order to wait for row lock. // Because we have scan lock on page  we need only // call reposition() which will use the saved record // handle to reposition to the same spot on the page. // We don't have to search the // tree again  as we have the a scan lock on the page // which means the current_rh is valid to reposition on. if (reposition(scan_position  false)) { throw StandardException.newException( SQLState.AM_RECORD_NOT_FOUND  new Long(err_containerid)  new Long(scan_position.current_rh.getId())); } } }",
            "id": "4083"
        },
        "4089": {
            "ground_truth": "0",
            "bug_report": "It should be possible to run unit tests right after 'ant all'\nRight now  the property 'derby.junit.classpath' is empty by default. There should be an ant target which sets the correct classpath to run all tests after an initial checkout and 'ant all'.The current situation is very confusing to beginners and people who try to build Derby for the first time. For example  when running the tests  I got this exception:java.lang.ClassNotFoundException: org.apache.derbyTesting.junit.EnvTestbut that class was there  the file was there  everything was correct. Googling for the error didn't turn anything up  either. It took me a while to believe that build.xml just wouldn't try to setup a classpath for the tests.",
            "id": "4089"
        },
        "4095": {
            "ground_truth": "0",
            "bug_report": "Trigger  fails with ERROR 38000: The exception 'java.sql.SQLException: ResultSet not open  during VTIResultSet.getNextRowCore()\nI don't have a reproduction without the user database yet  but it seems that recompiling the trigger stored prepared statements on upgrade is causing a result set to get closed and is causing the following error when firing a trigger in a global transaction. The holdability in an XA transaction is CLOSE_CURSORS_AT_COMMIT so it may be that there is a commit occurring as part of the process that is causing the problem. I haven't tried yet with a regular transaction and using default holdability CLOSE_CURSORS_AT_COMMIT. The error comes on a delete which fires an after delete statement trigger to insert some values into another table.Here is the stack trace:2009-03-13 14:10:49.375 GMT Thread&#91;main 5 main&#93; (XID = 1853834)  (SESSIONID = 1)  (DATABASE = derby/wpsdb)  (DRDAID = null)  Cleanup action starting2009-03-13 14:10:49.375 GMT Thread&#91;main 5 main&#93; (XID = 1853834)  (SESSIONID = 1)  (DATABASE = derby/wpsdb)  (DRDAID = null)  Failed Statement is: DELETE FROM XXX WHERE WSID=9ERROR 38000: The exception 'java.sql.SQLException: ResultSet not open. Operation 'next' not permitted. Verify that autocommit is OFF.' was thrown while evaluating an expression. at org.apache.derby.iapi.error.StandardException.newException(StandardException.java:294) at org.apache.derby.iapi.error.StandardException.unexpectedUserException(StandardException.java:554) at org.apache.derby.impl.sql.execute.VTIResultSet.getNextRowCore(VTIResultSet.java:326) at org.apache.derby.impl.sql.execute.ProjectRestrictResultSet.getNextRowCore(ProjectRestrictResultSet.java:255) at org.apache.derby.impl.sql.execute.NestedLoopJoinResultSet.getNextRowCore(NestedLoopJoinResultSet.java:116) at org.apache.derby.impl.sql.execute.ProjectRestrictResultSet.getNextRowCore(ProjectRestrictResultSet.java:255) at org.apache.derby.impl.sql.execute.NormalizeResultSet.getNextRowCore(NormalizeResultSet.java:186) at org.apache.derby.impl.sql.execute.DMLWriteResultSet.getNextRowCore(DMLWriteResultSet.java:127) at org.apache.derby.impl.sql.execute.InsertResultSet.open(InsertResultSet.java:496) at org.apache.derby.impl.sql.GenericPreparedStatement.execute(GenericPreparedStatement.java:370) at org.apache.derby.impl.sql.execute.GenericTriggerExecutor.executeSPS(GenericTriggerExecutor.java:173) at org.apache.derby.impl.sql.execute.StatementTriggerExecutor.fireTrigger(StatementTriggerExecutor.java:80) at org.apache.derby.impl.sql.execute.TriggerEventActivator.notifyEvent(TriggerEventActivator.java:278) at org.apache.derby.impl.sql.execute.DeleteResultSet.fireAfterTriggers(DeleteResultSet.java:479) at org.apache.derby.impl.sql.execute.DeleteResultSet.open(DeleteResultSet.java:167) at org.apache.derby.impl.sql.GenericPreparedStatement.execute(GenericPreparedStatement.java:370) at org.apache.derby.impl.jdbc.EmbedStatement.executeStatement(EmbedStatement.java:1203) at org.apache.derby.impl.jdbc.EmbedStatement.execute(EmbedStatement.java:596) at org.apache.derby.impl.jdbc.EmbedStatement.executeUpdate(EmbedStatement.java:176) at org.apache.derby.iapi.jdbc.BrokeredStatement.executeUpdate(BrokeredStatement.java:113) at ReproRSClosed.main(ReproRSClosed.java:20)Caused by: java.sql.SQLException: ResultSet not open. Operation 'next' not permitted. Verify that autocommit is OFF. at org.apache.derby.impl.jdbc.SQLExceptionFactory40.getSQLException(SQLExceptionFactory40.java:95) at org.apache.derby.impl.jdbc.Util.newEmbedSQLException(Util.java:88) at org.apache.derby.impl.jdbc.Util.newEmbedSQLException(Util.java:94) at org.apache.derby.impl.jdbc.Util.generateCsSQLException(Util.java:173) at org.apache.derby.impl.jdbc.EmbedConnection.newSQLException(EmbedConnection.java:2244) at org.apache.derby.impl.jdbc.ConnectionChild.newSQLException(ConnectionChild.java:151) at org.apache.derby.impl.jdbc.EmbedResultSet.checkIfClosed(EmbedResultSet.java:4280) at org.apache.derby.impl.jdbc.EmbedResultSet.checkExecIfClosed(EmbedResultSet.java:4292) at org.apache.derby.impl.jdbc.EmbedResultSet.movePosition(EmbedResultSet.java:404) at org.apache.derby.impl.jdbc.EmbedResultSet.next(EmbedResultSet.java:388) at org.apache.derby.impl.sql.execute.VTIResultSet.getNextRowCore(VTIResultSet.java:308) ... 18 moreCaused by: java.sql.SQLException: ResultSet not open. Operation 'next' not permitted. Verify that autocommit is OFF. at org.apache.derby.impl.jdbc.SQLExceptionFactory.getSQLException(SQLExceptionFactory.java:45) at org.apache.derby.impl.jdbc.SQLExceptionFactory40.wrapArgsForTransportAcrossDRDA(SQLExceptionFactory40.java:135) at org.apache.derby.impl.jdbc.SQLExceptionFactory40.getSQLException(SQLExceptionFactory40.java:70) ... 28 more============= begin nested exception  level (1) ===========java.sql.SQLException: ResultSet not open. Operation 'next' not permitted. Verify that autocommit is OFF. at org.apache.derby.impl.jdbc.SQLExceptionFactory40.getSQLException(SQLExceptionFactory40.java:95) at org.apache.derby.impl.jdbc.Util.newEmbedSQLException(Util.java:88) at org.apache.derby.impl.jdbc.Util.newEmbedSQLException(Util.java:94) at org.apache.derby.impl.jdbc.Util.generateCsSQLException(Util.java:173) at org.apache.derby.impl.jdbc.EmbedConnection.newSQLException(EmbedConnection.java:2244) at org.apache.derby.impl.jdbc.ConnectionChild.newSQLException(ConnectionChild.java:151) at org.apache.derby.impl.jdbc.EmbedResultSet.checkIfClosed(EmbedResultSet.java:4280) at org.apache.derby.impl.jdbc.EmbedResultSet.checkExecIfClosed(EmbedResultSet.java:4292) at org.apache.derby.impl.jdbc.EmbedResultSet.movePosition(EmbedResultSet.java:404) at org.apache.derby.impl.jdbc.EmbedResultSet.next(EmbedResultSet.java:388) at org.apache.derby.impl.sql.execute.VTIResultSet.getNextRowCore(VTIResultSet.java:308) at org.apache.derby.impl.sql.execute.ProjectRestrictResultSet.getNextRowCore(ProjectRestrictResultSet.java:255) at org.apache.derby.impl.sql.execute.NestedLoopJoinResultSet.getNextRowCore(NestedLoopJoinResultSet.java:116) at org.apache.derby.impl.sql.execute.ProjectRestrictResultSet.getNextRowCore(ProjectRestrictResultSet.java:255) at org.apache.derby.impl.sql.execute.NormalizeResultSet.getNextRowCore(NormalizeResultSet.java:186) at org.apache.derby.impl.sql.execute.DMLWriteResultSet.getNextRowCore(DMLWriteResultSet.java:127) at org.apache.derby.impl.sql.execute.InsertResultSet.open(InsertResultSet.java:496) at org.apache.derby.impl.sql.GenericPreparedStatement.execute(GenericPreparedStatement.java:370) at org.apache.derby.impl.sql.execute.GenericTriggerExecutor.executeSPS(GenericTriggerExecutor.java:173) at org.apache.derby.impl.sql.execute.StatementTriggerExecutor.fireTrigger(StatementTriggerExecutor.java:80) at org.apache.derby.impl.sql.execute.TriggerEventActivator.notifyEvent(TriggerEventActivator.java:278) at org.apache.derby.impl.sql.execute.DeleteResultSet.fireAfterTriggers(DeleteResultSet.java:479) at org.apache.derby.impl.sql.execute.DeleteResultSet.open(DeleteResultSet.java:167) at org.apache.derby.impl.sql.GenericPreparedStatement.execute(GenericPreparedStatement.java:370) at org.apache.derby.impl.jdbc.EmbedStatement.executeStatement(EmbedStatement.java:1203) at org.apache.derby.impl.jdbc.EmbedStatement.execute(EmbedStatement.java:596) at org.apache.derby.impl.jdbc.EmbedStatement.executeUpdate(EmbedStatement.java:176) at org.apache.derby.iapi.jdbc.BrokeredStatement.executeUpdate(BrokeredStatement.java:113) at ReproRSClosed.main(ReproRSClosed.java:20)Caused by: java.sql.SQLException: ResultSet not open. Operation 'next' not permitted. Verify that autocommit is OFF. at org.apache.derby.impl.jdbc.SQLExceptionFactory.getSQLException(SQLExceptionFactory.java:45) at org.apache.derby.impl.jdbc.SQLExceptionFactory40.wrapArgsForTransportAcrossDRDA(SQLExceptionFactory40.java:135) at org.apache.derby.impl.jdbc.SQLExceptionFactory40.getSQLException(SQLExceptionFactory40.java:70) ... 28 more============= end nested exception  level (1) ======================== begin nested exception  level (2) ===========java.sql.SQLException: ResultSet not open. Operation 'next' not permitted. Verify that autocommit is OFF. at org.apache.derby.impl.jdbc.SQLExceptionFactory.getSQLException(SQLExceptionFactory.java:45) at org.apache.derby.impl.jdbc.SQLExceptionFactory40.wrapArgsForTransportAcrossDRDA(SQLExceptionFactory40.java:135) at org.apache.derby.impl.jdbc.SQLExceptionFactory40.getSQLException(SQLExceptionFactory40.java:70) at org.apache.derby.impl.jdbc.Util.newEmbedSQLException(Util.java:88) at org.apache.derby.impl.jdbc.Util.newEmbedSQLException(Util.java:94) at org.apache.derby.impl.jdbc.Util.generateCsSQLException(Util.java:173) at org.apache.derby.impl.jdbc.EmbedConnection.newSQLException(EmbedConnection.java:2244) at org.apache.derby.impl.jdbc.ConnectionChild.newSQLException(ConnectionChild.java:151) at org.apache.derby.impl.jdbc.EmbedResultSet.checkIfClosed(EmbedResultSet.java:4280) at org.apache.derby.impl.jdbc.EmbedResultSet.checkExecIfClosed(EmbedResultSet.java:4292) at org.apache.derby.impl.jdbc.EmbedResultSet.movePosition(EmbedResultSet.java:404) at org.apache.derby.impl.jdbc.EmbedResultSet.next(EmbedResultSet.java:388) at org.apache.derby.impl.sql.execute.VTIResultSet.getNextRowCore(VTIResultSet.java:308) at org.apache.derby.impl.sql.execute.ProjectRestrictResultSet.getNextRowCore(ProjectRestrictResultSet.java:255) at org.apache.derby.impl.sql.execute.NestedLoopJoinResultSet.getNextRowCore(NestedLoopJoinResultSet.java:116) at org.apache.derby.impl.sql.execute.ProjectRestrictResultSet.getNextRowCore(ProjectRestrictResultSet.java:255) at org.apache.derby.impl.sql.execute.NormalizeResultSet.getNextRowCore(NormalizeResultSet.java:186) at org.apache.derby.impl.sql.execute.DMLWriteResultSet.getNextRowCore(DMLWriteResultSet.java:127) at org.apache.derby.impl.sql.execute.InsertResultSet.open(InsertResultSet.java:496) at org.apache.derby.impl.sql.GenericPreparedStatement.execute(GenericPreparedStatement.java:370) at org.apache.derby.impl.sql.execute.GenericTriggerExecutor.executeSPS(GenericTriggerExecutor.java:173) at org.apache.derby.impl.sql.execute.StatementTriggerExecutor.fireTrigger(StatementTriggerExecutor.java:80) at org.apache.derby.impl.sql.execute.TriggerEventActivator.notifyEvent(TriggerEventActivator.java:278) at org.apache.derby.impl.sql.execute.DeleteResultSet.fireAfterTriggers(DeleteResultSet.java:479) at org.apache.derby.impl.sql.execute.DeleteResultSet.open(DeleteResultSet.java:167) at org.apache.derby.impl.sql.GenericPreparedStatement.execute(GenericPreparedStatement.java:370) at org.apache.derby.impl.jdbc.EmbedStatement.executeStatement(EmbedStatement.java:1203) at org.apache.derby.impl.jdbc.EmbedStatement.execute(EmbedStatement.java:596) at org.apache.derby.impl.jdbc.EmbedStatement.executeUpdate(EmbedStatement.java:176) at org.apache.derby.iapi.jdbc.BrokeredStatement.executeUpdate(BrokeredStatement.java:113) at ReproRSClosed.main(ReproRSClosed.java:20)============= end nested exception  level (2) ===========Cleanup action completed",
            "id": "4095"
        },
        "4097": {
            "ground_truth": "0",
            "bug_report": "'testMixedInsertDelete(org.apache.derbyTesting.functionTests.tests.lang.NullableUniqueConstraintTest)org.apache.derby.client.am.BatchUpdateException'\nSeen twice....See http://dbtg.thresher.com/derby/test/trunk15/jvm1.5/testing/testlog/SunOS-5.9_sun4u-sparc/754716-org.apache.derbyTesting.functionTests.suites.All_diff.txthttp://dbtg.thresher.com/derby/test/trunk15/jvm1.5/testing/testlog/SunOS-5.10_i86pc-i386/753342-org.apache.derbyTesting.functionTests.suites.All_diff.txt1) testMixedInsertDelete(org.apache.derbyTesting.functionTests.tests.lang.NullableUniqueConstraintTest)org.apache.derby.client.am.BatchUpdateException: Non-atomic batch failure. The batch was submitted  but at least one exception occurred on an individual member of the batch. Use getNextException() to retrieve the exceptions for specific batched elements. at org.apache.derby.client.am.Agent.endBatchedReadChain(Unknown Source) at org.apache.derby.client.am.PreparedStatement.executeBatchRequestX(Unknown Source) at org.apache.derby.client.am.PreparedStatement.executeBatchX(Unknown Source) at org.apache.derby.client.am.PreparedStatement.executeBatch(Unknown Source) at org.apache.derbyTesting.functionTests.tests.lang.NullableUniqueConstraintTest.testMixedInsertDelete(NullableUniqueConstraintTest.java:481) at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39) at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25) at org.apache.derbyTesting.junit.BaseTestCase.runBare(BaseTestCase.java:105) at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24) at junit.extensions.TestSetup$1.protect(TestSetup.java:21) at junit.extensions.TestSetup.run(TestSetup.java:25) at org.apache.derbyTesting.junit.BaseTestSetup.run(BaseTestSetup.java:57) at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24) at junit.extensions.TestSetup$1.protect(TestSetup.java:21) at junit.extensions.TestSetup.run(TestSetup.java:25) at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24) at junit.extensions.TestSetup$1.protect(TestSetup.java:21) at junit.extensions.TestSetup.run(TestSetup.java:25) at org.apache.derbyTesting.junit.BaseTestSetup.run(BaseTestSetup.java:57)",
            "id": "4097"
        },
        "4115": {
            "ground_truth": "0",
            "bug_report": "Provide a way to drop statistics information\nNow that DERBY-269 has been resolved  users can update statistics  but once they do  they are committed to using and maintaining the statistics  even if it doesn't improve performance or they have difficulty maintaining the statistics on a regular basis. It would be good to have a way to drop statistics information so that users could revert to the prior behavior if needed.",
            "id": "4115"
        },
        "4116": {
            "ground_truth": "0",
            "bug_report": "SYSCS_UTIL.SYSCS_UPDATE_STATISTICS should update the store estimated row count for the table\nWhen SYSCS_UTIL.SYSCS_UPDATE_STATISTICS is run  it doesn't update the store estimated row count. The program oldSelectivity.java attached to DERBY-3955 shows that the statistics are not updated.See discussions in DERBY-3955https://issues.apache.org/jira/browse/DERBY-3955?focusedCommentId=12688789&amp;page=com.atlassian.jira.plugin.system.issuetabpanels%3Acomment-tabpanel#action_12688789https://issues.apache.org/jira/browse/DERBY-3955?focusedCommentId=12688813&amp;page=com.atlassian.jira.plugin.system.issuetabpanels%3Acomment-tabpanel#action_12688813",
            "id": "4116"
        },
        "4120": {
            "ground_truth": "0",
            "bug_report": "derbyclient.jar is not a complete OSGi bundle\nThe manifest in derbyclient.jar is incomplete for usage in OSGi. There are no packages exported. This appears to only be a problem in standalone equinox (outside of eclipse). Note that I did not try other OSGi containers.The fix is relatively simple. Adding the Export-Package manifest header should take care of the problem.",
            "id": "4120"
        },
        "4125": {
            "ground_truth": "0",
            "bug_report": "The in-memory storage back end doesn't work on Windows\nBug reported by Knut Magne Solem  see DERBY-646.Using the in-memory storage back end fails on Windows (i.e. connect 'jdbc:derby:memory:MyDbTest;create=true'; from ij):ERROR XJ001: Java exception: 'ASSERT FAILED serviceName = memory:C:/Documents and Settings/user/workspace/derby/MyDbTest;storageFactory.getCanonicalName() = C:/Documents and Settings/user/workspace/derby/MyDbTest: org.apache.derby.shared.common.sanity.AssertFailure'.With an insane build  the error messages will look like this:ERROR XJ041: Failed to create database 'memory:myDB'  see the next exception for details.ERROR XBM01: Startup failed due to an exception. See next exception for details.ERROR XSTB2: Cannot log transaction changes  maybe trying to write to a read only database.The error occurs during boot  which means Windows users are unable to use the in-memory back end at all.",
            "id": "4125"
        },
        "4133": {
            "ground_truth": "0",
            "bug_report": "'testTableFunctionInJar' fails w/ 'The class 'DummyVTI' does not exist or is inaccessible...' on jvm1.4\nSeen in tests on jvm1.4 since ~ svn rev. 759509See e.g.http://dbtg.thresher.com/derby/test/Daily/jvm1.4/testing/Limited/testSummary-759509.htmlE.g.:1) testTableFunctionInJar(org.apache.derbyTesting.functionTests.tests.lang.DatabaseClassLoadingTest)java.sql.SQLException: The class 'DummyVTI' does not exist or is inaccessible. This can happen if the class is not public. at org.apache.derby.impl.jdbc.SQLExceptionFactory.getSQLException(Unknown Source) at org.apache.derby.impl.jdbc.Util.newEmbedSQLException(Unknown Source) at org.apache.derby.impl.jdbc.Util.seeNextException(Unknown Source) at org.apache.derby.impl.jdbc.TransactionResourceImpl.wrapInSQLException(Unknown Source) at org.apache.derby.impl.jdbc.TransactionResourceImpl.handleException(Unknown Source) at org.apache.derby.impl.jdbc.EmbedConnection.handleException(Unknown Source) at org.apache.derby.impl.jdbc.ConnectionChild.handleException(Unknown Source) at org.apache.derby.impl.jdbc.EmbedStatement.execute(Unknown Source) at org.apache.derby.impl.jdbc.EmbedStatement.executeQuery(Unknown Source) at org.apache.derbyTesting.functionTests.tests.lang.DatabaseClassLoadingTest.testTableFunctionInJar(DatabaseClassLoadingTest.java:1045) at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39) at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25) at org.apache.derbyTesting.junit.BaseTestCase.runBare(BaseTestCase.java:105) at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24) at junit.extensions.TestSetup$1.protect(TestSetup.java:21) at junit.extensions.TestSetup.run(TestSetup.java:25) at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24) at junit.extensions.TestSetup$1.protect(TestSetup.java:21) at junit.extensions.TestSetup.run(TestSetup.java:25) at org.apache.derbyTesting.junit.BaseTestSetup.run(BaseTestSetup.java:57)Caused by: java.sql.SQLException: Java exception: 'DummyVTI : DummyVTI (Unsupported major.minor version 49.0): java.lang.ClassNotFoundException'. at org.apache.derby.impl.jdbc.SQLExceptionFactory.getSQLException(Unknown Source) at org.apache.derby.impl.jdbc.Util.newEmbedSQLException(Unknown Source) at org.apache.derby.impl.jdbc.Util.javaException(Unknown Source) at org.apache.derby.impl.jdbc.TransactionResourceImpl.wrapInSQLException(Unknown Source) ... 38 moreCaused by: java.lang.ClassNotFoundException: DummyVTI : DummyVTI (Unsupported major.minor version 49.0) at org.apache.derby.impl.services.reflect.DatabaseClasses.loadApplicationClass(Unknown Source) at org.apache.derby.iapi.services.loader.ClassInspector.getClass(Unknown Source) at org.apache.derby.iapi.services.loader.ClassInspector.accessible(Unknown Source) at org.apache.derby.impl.sql.compile.QueryTreeNode.verifyClassExist(Unknown Source) at org.apache.derby.impl.sql.compile.StaticMethodCallNode.bindExpression(Unknown Source) at org.apache.derby.impl.sql.compile.JavaToSQLValueNode.bindExpression(Unknown Source) at org.apache.derby.impl.sql.compile.ResultColumn.bindExpression(Unknown Source) at org.apache.derby.impl.sql.compile.ResultColumnList.bindExpressions(Unknown Source) at org.apache.derby.impl.sql.compile.RowResultSetNode.bindExpressions(Unknown Source) at org.apache.derby.impl.sql.compile.DMLStatementNode.bindExpressions(Unknown Source) at org.apache.derby.impl.sql.compile.DMLStatementNode.bind(Unknown Source) at org.apache.derby.impl.sql.compile.CursorNode.bindStatement(Unknown Source) at org.apache.derby.impl.sql.GenericStatement.prepMinion(Unknown Source) at org.apache.derby.impl.sql.GenericStatement.prepare(Unknown Source) at org.apache.derby.impl.sql.conn.GenericLanguageConnectionContext.prepareInternalStatement(Unknown Source) ... 34 more",
            "id": "4133"
        },
        "4142": {
            "ground_truth": "0",
            "bug_report": "java.lang.VerifyError causing java.sql.SQLException: Cannot create an instance of generated class ... in lang.GeneratedColumnsTest and GeneratedColumnsPermsTest  on IBM iseries\nThis results in 22 errors.Here's the stack trace with an insane build:1) test_005_basicInsert(org.apache.derbyTesting.functionTests.tests.lang.GeneratedColumnsTest)java.sql.SQLException: Cannot create an instance of generated class org.apache.derby.exe.acd83d18d1x0120x62bdx2dffxffffb19003081. at java.lang.Throwable.&lt;init&gt;(Throwable.java:196) at java.lang.Exception.&lt;init&gt;(Exception.java:41) at java.sql.SQLException.&lt;init&gt;(SQLException.java:40) at org.apache.derby.impl.jdbc.EmbedSQLException.&lt;init&gt;(Unknown Source) at org.apache.derby.impl.jdbc.SQLExceptionFactory.getSQLException(Unknown Source) at org.apache.derby.impl.jdbc.Util.newEmbedSQLException(Unknown Source) at org.apache.derby.impl.jdbc.Util.seeNextException(Unknown Source) at org.apache.derby.impl.jdbc.TransactionResourceImpl.wrapInSQLException(Unknown Source) at org.apache.derby.impl.jdbc.TransactionResourceImpl.handleException(Unknown Source) at org.apache.derby.impl.jdbc.EmbedConnection.handleException(Unknown Source) at org.apache.derby.impl.jdbc.ConnectionChild.handleException(Unknown Source) at org.apache.derby.impl.jdbc.EmbedPreparedStatement.&lt;init&gt;(Unknown Source) at org.apache.derby.impl.jdbc.EmbedPreparedStatement20.&lt;init&gt;(Unknown Source) at org.apache.derby.impl.jdbc.EmbedPreparedStatement30.&lt;init&gt;(Unknown Source) at org.apache.derby.jdbc.Driver30.newEmbedPreparedStatement(Unknown Source) at org.apache.derby.impl.jdbc.EmbedConnection.prepareStatement(Unknown Source) at org.apache.derby.impl.jdbc.EmbedConnection.prepareStatement(Unknown Source) at org.apache.derbyTesting.functionTests.tests.lang.GeneratedColumnsHelper.chattyPrepare(GeneratedColumnsHelper.java:147) at org.apache.derbyTesting.functionTests.tests.lang.GeneratedColumnsHelper.goodStatement(GeneratedColumnsHelper.java:125) at org.apache.derbyTesting.functionTests.tests.lang.GeneratedColumnsTest.test_005_basicInsert(GeneratedColumnsTest.java:427) at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39) at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25) at org.apache.derbyTesting.junit.BaseTestCase.runBare(BaseTestCase.java:105) at junit.extensions.TestDecorator.basicRun(TestDecorator.java:22) at junit.extensions.TestSetup$1.protect(TestSetup.java:19) at junit.extensions.TestSetup.run(TestSetup.java:23) at org.apache.derbyTesting.junit.BaseTestSetup.run(BaseTestSetup.java:57) at junit.extensions.TestDecorator.basicRun(TestDecorator.java:22) at junit.extensions.TestSetup$1.protect(TestSetup.java:19) at junit.extensions.TestSetup.run(TestSetup.java:23)Caused by: java.sql.SQLException: Java exception: 'org/apache/derby/exe/acd83d18d1x0120x62bdx2dffxffffb19003081 0000 0000 : java.lang.VerifyError'. at java.lang.Throwable.&lt;init&gt;(Throwable.java:196) at java.lang.Exception.&lt;init&gt;(Exception.java:41) at java.sql.SQLException.&lt;init&gt;(SQLException.java:40) at org.apache.derby.impl.jdbc.EmbedSQLException.&lt;init&gt;(Unknown Source) at org.apache.derby.impl.jdbc.SQLExceptionFactory.getSQLException(Unknown Source) at org.apache.derby.impl.jdbc.Util.newEmbedSQLException(Unknown Source) at org.apache.derby.impl.jdbc.Util.javaException(Unknown Source) at org.apache.derby.impl.jdbc.TransactionResourceImpl.wrapInSQLException(Unknown Source) ... 43 moreCaused by: java.lang.VerifyError: org/apache/derby/exe/acd83d18d1x0120x62bdx2dffxffffb19003081 0000 0000  at java.lang.Throwable.&lt;init&gt;(Throwable.java:196) at java.lang.Error.&lt;init&gt;(Error.java:49) at java.lang.VerifyError.&lt;init&gt;(VerifyError.java:34) at sun.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:39) at sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:27) at java.lang.reflect.Constructor.newInstance(Constructor.java:494) at org.apache.derby.iapi.services.loader.ClassInfo.getNewInstance(Unknown Source) at org.apache.derby.impl.services.reflect.LoadedGeneratedClass.newInstance(Unknown Source) at org.apache.derby.impl.services.reflect.ReflectGeneratedClass.newInstance(Unknown Source) at org.apache.derby.impl.sql.GenericActivationHolder.&lt;init&gt;(Unknown Source) at org.apache.derby.impl.sql.GenericPreparedStatement.getActivation(Unknown Source) ... 39 more",
            "id": "4142"
        },
        "4148": {
            "ground_truth": "1",
            "bug_report": "NullPointerException in system.sttest run with 10.5.1.0\nI see the following stack trace on line 22615 of the redirected output:Thread finished: 1complete initial datatotal memory: 50713600 free: 3130088 Tue Mar 31 23:39:47 PDT 2009java.lang.NullPointerException at org.apache.derbyTesting.system.sttest.utils.Datatypes.update_one_row(Datatypes.java:612) at org.apache.derbyTesting.system.sttest.Sttest.run(Sttest.java:387)Exception in thread 'Thread-9' java.lang.NullPointerException at org.apache.derbyTesting.system.sttest.Sttest.run(Sttest.java:435)java.lang.NullPointerException at org.apache.derbyTesting.system.sttest.utils.Datatypes.update_one_row(Datatypes.java:612) at org.apache.derbyTesting.system.sttest.Sttest.run(Sttest.java:387)Exception in thread 'Thread-10' java.lang.NullPointerException at org.apache.derbyTesting.system.sttest.Sttest.run(Sttest.java:435)java.lang.NullPointerException at org.apache.derbyTesting.system.sttest.utils.Datatypes.update_one_row(Datatypes.java:612) at org.apache.derbyTesting.system.sttest.Sttest.run(Sttest.java:387)Exception in thread 'Thread-11' java.lang.NullPointerException at org.apache.derbyTesting.system.sttest.Sttest.run(Sttest.java:435)quantity in pick_some is: 10 rows deletedMatching this up with the derby.log - the first entry in derby.log is 2009-04-01 03:01:52.432 GMT  and ls -al shows 2009-03-31 20:01 PDT for the creation of testDB  so time diff was 7 hours - shows nothing of interest. The last entry in derby.log is at 2009-04-01 06:52:15.595 GMT  so only 3 hours later.I've seen the same thing 3 times - this needs to be analyzed further.I will also run on another machine  and run with sane jars to see if we get any stack trace of other help from derby.log.",
            "id": "4148"
        },
        "4157": {
            "ground_truth": "0",
            "bug_report": "Create a test to verify that virgin metadata is identical to hard-upgraded metadata\nWe should write a test to verify that the metadata is correct for each release for all hard-upgrade trajectories which terminate in that release. The test should examine all system tables. Note that if there are N releases  then there will (2&lt;sup&gt;N&lt;/sup&gt; - N) - 1 trajectories to examine.",
            "id": "4157"
        },
        "4166": {
            "ground_truth": "0",
            "bug_report": "improvements to the mailjdbc test\nWhen recently working with the mailjdbc system test org.apache.derbyTesting.system.mailjdbc on DERBY-4152 I noticed some potential improvements that might be good for the test. We should probably hold off on these improvements however until the root cause of DERBY-4152 is established  however  so we don't muddy the waters with that issue by changing the test.1) DbTasks.moveToFolders may throw an IllegalArgumentException. There is a line: message_id = Rn.nextInt(count - 1); if count is 1 the argument to nextInt() might be 0 which is not allowed. I hit this once but lost the stack trace  but it is apparent that when there is only one row in the table this can occur.2) Allow/implement multiple attachments per message and cleanup DbTasks.insertMail() logic. Remove the attach_id column from INBOX to allow multiple attachments. -Make the attachment insert part of the message for loop in insertMail. Use getGeneratedKeys() to get the id of the inserted message. When attachments are inserted  insert (1-4) attachments and give them a corresponding attach_id from 1-4.This will allow for removal of the select statements used to determine id and attach_id. I'll file another issue for these improvements if folks agree that they are sensible.A detailed description of the current implementation of insertMail is described at https://issues.apache.org/jira/secure/attachment/12405685/insertMailSummary.txt3) DbTasks.databaseSize calculation is wrong. It doesn't match du -sk. The method does not recurse into subdirectories and includes the length() on directory files which is undefined accourding to the file.length() javadoc.",
            "id": "4166"
        },
        "4169": {
            "ground_truth": "0",
            "bug_report": "'No method was found that matched the method call ....' in testPayment and testSubmitter (org.apache.derbyTesting.system.oe.test.OperationsTester) on 10.5.1.1 (RC2)\nSeen when running testPayment(org.apache.derbyTesting.system.oe.test.OperationsTester) with 10.5.1.1 (RC2).The test passed with no failures on 10.4.2.0.1) testPayment(org.apache.derbyTesting.system.oe.test.OperationsTester)java.sql.SQLSyntaxErrorException: No method was found that matched the method call org.apache.derbyTesting.system.oe.routines.Data.dataForBadCredit(java.lang.String  short  short  short  short  int  java.math.BigDecimal)  tried all combinations of object and primitive types and any possible type conversion for any parameters the method call may have. The method might exist but it is not public and/or static  or the parameter types are not method invocation convertible. at org.apache.derby.impl.jdbc.SQLExceptionFactory40.getSQLException(Unknown Source) at org.apache.derby.impl.jdbc.Util.generateCsSQLException(Unknown Source) at org.apache.derby.impl.jdbc.TransactionResourceImpl.wrapInSQLException(Unknown Source) at org.apache.derby.impl.jdbc.TransactionResourceImpl.handleException(Unknown Source) at org.apache.derby.impl.jdbc.EmbedConnection.handleException(Unknown Source) at org.apache.derby.impl.jdbc.ConnectionChild.handleException(Unknown Source) at org.apache.derby.impl.jdbc.EmbedPreparedStatement.&lt;init&gt;(Unknown Source) at org.apache.derby.impl.jdbc.EmbedPreparedStatement20.&lt;init&gt;(Unknown Source) at org.apache.derby.impl.jdbc.EmbedPreparedStatement30.&lt;init&gt;(Unknown Source) at org.apache.derby.impl.jdbc.EmbedPreparedStatement40.&lt;init&gt;(Unknown Source) at org.apache.derby.jdbc.Driver40.newEmbedPreparedStatement(Unknown Source) at org.apache.derby.impl.jdbc.EmbedConnection.prepareStatement(Unknown Source) at org.apache.derby.impl.jdbc.EmbedConnection.prepareStatement(Unknown Source) at org.apache.derbyTesting.system.oe.direct.StatementHelper.prepareStatement(StatementHelper.java:76) at org.apache.derbyTesting.system.oe.direct.Standard.paymentById(Standard.java:420) at org.apache.derbyTesting.system.oe.direct.Standard.payment(Standard.java:375) at org.apache.derbyTesting.system.oe.test.OperationsTester.testPayment(OperationsTester.java:134) at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39) at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25) at org.apache.derbyTesting.junit.BaseTestCase.runBare(BaseTestCase.java:105) at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24) at junit.extensions.TestSetup$1.protect(TestSetup.java:21) at junit.extensions.TestSetup.run(TestSetup.java:25) at org.apache.derbyTesting.junit.BaseTestSetup.run(BaseTestSetup.java:57)2) testSubmitter(org.apache.derbyTesting.system.oe.test.OperationsTester)java.sql.SQLSyntaxErrorException: No method was found that matched the method call org.apache.derbyTesting.system.oe.routines.Data.dataForBadCredit(java.lang.String  short  short  short  short  int  java.math.BigDecimal)  tried all combinations of object and primitive types and any possible type conversion for any parameters the method call may have. The method might exist but it is not public and/or static  or the parameter types are not method invocation convertible. at org.apache.derby.impl.jdbc.SQLExceptionFactory40.getSQLException(Unknown Source) at org.apache.derby.impl.jdbc.Util.generateCsSQLException(Unknown Source) at org.apache.derby.impl.jdbc.TransactionResourceImpl.wrapInSQLException(Unknown Source) at org.apache.derby.impl.jdbc.TransactionResourceImpl.handleException(Unknown Source) at org.apache.derby.impl.jdbc.EmbedConnection.handleException(Unknown Source) at org.apache.derby.impl.jdbc.ConnectionChild.handleException(Unknown Source) at org.apache.derby.impl.jdbc.EmbedPreparedStatement.&lt;init&gt;(Unknown Source) at org.apache.derby.impl.jdbc.EmbedPreparedStatement20.&lt;init&gt;(Unknown Source) at org.apache.derby.impl.jdbc.EmbedPreparedStatement30.&lt;init&gt;(Unknown Source) at org.apache.derby.impl.jdbc.EmbedPreparedStatement40.&lt;init&gt;(Unknown Source) at org.apache.derby.jdbc.Driver40.newEmbedPreparedStatement(Unknown Source) at org.apache.derby.impl.jdbc.EmbedConnection.prepareStatement(Unknown Source) at org.apache.derby.impl.jdbc.EmbedConnection.prepareStatement(Unknown Source) at org.apache.derbyTesting.system.oe.direct.StatementHelper.prepareStatement(StatementHelper.java:76) at org.apache.derbyTesting.system.oe.direct.Standard.paymentById(Standard.java:420) at org.apache.derbyTesting.system.oe.direct.Standard.payment(Standard.java:395) at org.apache.derbyTesting.system.oe.client.Submitter.runPayment(Submitter.java:437) at org.apache.derbyTesting.system.oe.client.Submitter.runTransaction(Submitter.java:316) at org.apache.derbyTesting.system.oe.test.OperationsTester.testSubmitter(OperationsTester.java:259) at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39) at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25) at org.apache.derbyTesting.junit.BaseTestCase.runBare(BaseTestCase.java:105) at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24) at junit.extensions.TestSetup$1.protect(TestSetup.java:21) at junit.extensions.TestSetup.run(TestSetup.java:25) at org.apache.derbyTesting.junit.BaseTestSetup.run(BaseTestSetup.java:57)Related to DERBY-1483  DERBY-3119  DERBY-2179  DERBY-3652?",
            "id": "4169"
        },
        "4171": {
            "ground_truth": "0",
            "bug_report": "Connections to on-disk db go to in-memory db if in-memory db with same name is booted\nWhen an in-memory database has been booted  subsequent attempts to connect to an ordinary (on-disk) database with the same name as the in-memory database will connect to the in-memory db.ij version 10.5ij&gt; connect 'jdbc:derby:memory:MyDB;create=true'; &#8211; with subprotocol memoryij&gt; create table t (x varchar(30));0 rows inserted/updated/deletedij&gt; insert into t values 'This is the in-memory backend';1 row inserted/updated/deletedij&gt; connect 'jdbc:derby:MyDB;create=true'; --without subprotocol memory  should create disk dbWARNING 01J01: Database 'MyDB' not created  connection made to existing database instead.ij(CONNECTION1)&gt; select * from t;X ------------------------------This is the in-memory backend 1 row selected",
            "id": "4171"
        },
        "4177": {
            "ground_truth": "0",
            "bug_report": "Javadoc for BTreeLockingPolicy should not mention 'scan lock' anymore\nThe javadoc for BTreeLockingPolicy still talks about scan locks  although the scan lock is no longer in use after DERBY-2991. The javadoc should be updated so that it reflects the current state of the code.",
            "id": "4177"
        },
        "4179": {
            "ground_truth": "0",
            "bug_report": "bootLock.java fails with missing exception on z/OS with  pmz3160sr2ifix-20081021_01(SR2+IZ32776+IZ33456)  and Windows Vista\nI saw this diff in store/bootLock.java. I did not see it with the 64bit jvm run on 10.5.1.0 RC1     Start: bootLock jdk1.6.0 storeall:storemore 2009-04-21 19:10:18 ***2 4d1&lt; expected exception&lt; SQLSTATE(XJ040):&lt; SQLSTATE(XSDB6):Test Failed. End: bootLock jdk1.6.0 storeall:storemore 2009-04-21 19:11:00 ***    The test passed on rerun when run independently.",
            "id": "4179"
        },
        "4187": {
            "ground_truth": "0",
            "bug_report": "Convert altertable.sql to JUnit\nConverting altertable.sql harness test to JUnit",
            "id": "4187"
        },
        "4198": {
            "ground_truth": "1",
            "bug_report": "When using the FOR UPDATE OF clause with SUR (Scroll-insensive updatable result sets)  the updateRow() method crashes\nThis problem occurs on both Client/Server and Embedded.With the Embedded driver  the JVM crashes with the following error:------------------------------------8&lt;-----------------------------------1) testReproduction(org.apache.derbyTesting.functionTests.tests.store.ReproHoldCursorBug)org.apache.derby.shared.common.sanity.AssertFailure: ASSERT FAILED statementContext is not expected to equal statementContexts&#91;0&#93; at org.apache.derby.shared.common.sanity.SanityManager.ASSERT(SanityManager.java:120) at org.apache.derby.impl.sql.conn.GenericLanguageConnectionContext.popStatementContext(GenericLanguageConnectionContext.java:2286) at org.apache.derby.impl.jdbc.EmbedResultSet.updateRow(EmbedResultSet.java:3740) at org.apache.derbyTesting.functionTests.tests.store.ReproHoldCursorBug.testReproduction(ReproHoldCursorBug.java:71) at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39) at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25) at org.apache.derbyTesting.junit.BaseTestCase.runBare(BaseTestCase.java:105) at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24) at junit.extensions.TestSetup$1.protect(TestSetup.java:21) at junit.extensions.TestSetup.run(TestSetup.java:25) at org.apache.derbyTesting.junit.BaseTestSetup.run(BaseTestSetup.java:57)-----------------------------------8&lt;--------------------------------------------(It shows a stack trace after this  but I'm attaching the result folders since those are more thorough.)&#91;1&#93;On the client driver  the JVM does not crash but it also errors out:1) testReproduction(org.apache.derbyTesting.functionTests.tests.store.ReproHoldCursorBug)java.sql.SQLException: DERBY SQL error: SQLCODE: -1  SQLSTATE: XJ001  SQLERRMC: java.lang.NullPointerExceptionXJ001.U(more detail on the log files)&#91;2&#93;The error does not show as long as the 'OF DATA' isn't specified. It also won't show if the whole FOR UPDATE clause is omitted.I would also like some comments and advice on how to proceed on converting holdCursorJDBC30.sql as it is affected by this problem. The original test does an update on a cursor with the 'FOR UPDATE OF DATA' clause  and this isn't working on the Java version of the test. Do I go around it by removing the FOR UPDATE clause or should I wait for this bug to get fixed?Attachments:&#91;1&#93; - ErrorOutput_Embedded.tar.gz - Error output files of the Embedded run&#91;2&#93; - ErrorOutput_Client.tar.gz - Error output files of the Client/Server run&#91;3&#93; - ReproHoldCursorBug.java - The reproduction of the errors",
            "id": "4198"
        },
        "4201": {
            "ground_truth": "1",
            "bug_report": "SecureServerTest AssertionFailedError: Timed out waiting for network server to start\nI saw this failure in the nightly run on 4/27 on the 10.5 branch - 10.5.1.2 - (769232). I have not seen it in previous runs on the same machine. There were actually two failures in the test. I think the second one failed because of the first so am not reporting a separate issue for that.There were 2 failures:1) SecureServerTest( Opened = false  Authenticated= false  CustomDerbyProperties= null  WildCardHost= null )junit.framework.AssertionFailedError: Timed out waiting for network server to start:Spawned SpawnedNetworkServer exitCode=0 at org.apache.derbyTesting.junit.NetworkServerTestSetup.setUp(NetworkServerTestSetup.java:200) at junit.extensions.TestSetup$1.protect(TestSetup.java:18) at junit.extensions.TestSetup.run(TestSetup.java:23) at org.apache.derbyTesting.junit.BaseTestSetup.run(BaseTestSetup.java:57) at junit.extensions.TestDecorator.basicRun(TestDecorator.java:22) at junit.extensions.TestSetup$1.protect(TestSetup.java:19) at junit.extensions.TestSetup.run(TestSetup.java:23) at junit.extensions.TestDecorator.basicRun(TestDecorator.java:22) at junit.extensions.TestSetup$1.protect(TestSetup.java:19) at junit.extensions.TestSetup.run(TestSetup.java:23) at junit.extensions.TestDecorator.basicRun(TestDecorator.java:22) at junit.extensions.TestSetup$1.protect(TestSetup.java:19) at junit.extensions.TestSetup.run(TestSetup.java:23)2) SecureServerTest( Opened = false  Authenticated= false  CustomDerbyProperties= functionTests/tests/derbynet/SecureServerTest.derby.properties  WildCardHost= null )junit.framework.AssertionFailedError: directory trace does not exist at org.apache.derbyTesting.functionTests.tests.derbynet.SecureServerTest.setTraceDirectory(SecureServerTest.java:386) at org.apache.derbyTesting.functionTests.tests.derbynet.SecureServerTest.testServerStartup(SecureServerTest.java:358) at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:85) at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:58) at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java(Compiled Code)) at org.apache.derbyTesting.junit.BaseTestCase.runBare(BaseTestCase.java:105) at junit.extensions.TestDecorator.basicRun(TestDecorator.java:22) at junit.extensions.TestSetup$1.protect(TestSetup.java:19) at junit.extensions.TestSetup.run(TestSetup.java:23) at org.apache.derbyTesting.junit.BaseTestSetup.run(BaseTestSetup.java:57) at junit.extensions.TestDecorator.basicRun(TestDecorator.java:22) at junit.extensions.TestSetup$1.protect(TestSetup.java:19) at junit.extensions.TestSetup.run(TestSetup.java:23) at junit.extensions.TestDecorator.basicRun(TestDecorator.java:22) at junit.extensions.TestSetup$1.protect(TestSetup.java:19) at junit.extensions.TestSetup.run(TestSetup.java:23) at junit.extensions.TestDecorator.basicRun(TestDecorator.java:22) at junit.extensions.TestSetup$1.protect(TestSetup.java:19) at junit.extensions.TestSetup.run(TestSetup.java:23) at junit.extensions.TestDecorator.basicRun(TestDecorator.java:22) at junit.extensions.TestSetup$1.protect(TestSetup.java:19) at junit.extensions.TestSetup.run(TestSetup.java:23)",
            "id": "4201"
        },
        "4218": {
            "ground_truth": "0",
            "bug_report": "'Table/View 'MAX_SCAN' does not exist' in org.apache.derbyTesting.functionTests.tests.store.IndexSplitDeadlockTest\nSee e.g. http://dbtg.thresher.com/derby/test/trunk15/jvm1.5/testing/testlog/Linux-2.6.9-34.ELsmp_x86_64-x86_64/772381-org.apache.derbyTesting.functionTests.suites.All_diff.txtThere were 2 errors:1) testMultipleLastKeyWaitsInMaxScan(org.apache.derbyTesting.functionTests.tests.store.IndexSplitDeadlockTest)java.sql.SQLException: Table/View 'MAX_SCAN' does not exist. at org.apache.derby.impl.jdbc.SQLExceptionFactory.getSQLException(Unknown Source) at org.apache.derby.impl.jdbc.Util.generateCsSQLException(Unknown Source) at org.apache.derby.impl.jdbc.TransactionResourceImpl.wrapInSQLException(Unknown Source) at org.apache.derby.impl.jdbc.TransactionResourceImpl.handleException(Unknown Source) at org.apache.derby.impl.jdbc.EmbedConnection.handleException(Unknown Source) at org.apache.derby.impl.jdbc.ConnectionChild.handleException(Unknown Source) at org.apache.derby.impl.jdbc.EmbedStatement.executeStatement(Unknown Source) at org.apache.derby.impl.jdbc.EmbedPreparedStatement.executeStatement(Unknown Source) at org.apache.derby.impl.jdbc.EmbedPreparedStatement.execute(Unknown Source) at org.apache.derbyTesting.functionTests.tests.store.IndexSplitDeadlockTest$3.doWork(IndexSplitDeadlockTest.java:590) at org.apache.derbyTesting.functionTests.tests.store.IndexSplitDeadlockTest$AsyncThread.run(IndexSplitDeadlockTest.java:769) at java.lang.Thread.run(Thread.java:595)Caused by: ERROR 42X05: Table/View 'MAX_SCAN' does not exist. at org.apache.derby.iapi.error.StandardException.newException(Unknown Source) at org.apache.derby.impl.sql.compile.DMLModStatementNode.verifyTargetTable(Unknown Source) at org.apache.derby.impl.sql.compile.InsertNode.bindStatement(Unknown Source) at org.apache.derby.impl.sql.GenericStatement.prepMinion(Unknown Source) at org.apache.derby.impl.sql.GenericStatement.prepare(Unknown Source) at org.apache.derby.impl.sql.GenericPreparedStatement.rePrepare(Unknown Source) ... 6 more2) testMultiplePrevKeyWaitsInForwardScan(org.apache.derbyTesting.functionTests.tests.store.IndexSplitDeadlockTest)java.sql.SQLException: Table/View 'FW_SCAN' does not exist. at org.apache.derby.impl.jdbc.SQLExceptionFactory.getSQLException(Unknown Source) at org.apache.derby.impl.jdbc.Util.generateCsSQLException(Unknown Source) at org.apache.derby.impl.jdbc.TransactionResourceImpl.wrapInSQLException(Unknown Source) at org.apache.derby.impl.jdbc.TransactionResourceImpl.handleException(Unknown Source) at org.apache.derby.impl.jdbc.EmbedConnection.handleException(Unknown Source) at org.apache.derby.impl.jdbc.ConnectionChild.handleException(Unknown Source) at org.apache.derby.impl.jdbc.EmbedStatement.executeStatement(Unknown Source) at org.apache.derby.impl.jdbc.EmbedPreparedStatement.executeStatement(Unknown Source) at org.apache.derby.impl.jdbc.EmbedPreparedStatement.execute(Unknown Source) at org.apache.derbyTesting.functionTests.tests.store.IndexSplitDeadlockTest$4.doWork(IndexSplitDeadlockTest.java:665) at org.apache.derbyTesting.functionTests.tests.store.IndexSplitDeadlockTest$AsyncThread.run(IndexSplitDeadlockTest.java:769) at java.lang.Thread.run(Thread.java:595)Caused by: ERROR 42X05: Table/View 'FW_SCAN' does not exist. at org.apache.derby.iapi.error.StandardException.newException(Unknown Source) at org.apache.derby.impl.sql.compile.DMLModStatementNode.verifyTargetTable(Unknown Source) at org.apache.derby.impl.sql.compile.InsertNode.bindStatement(Unknown Source) at org.apache.derby.impl.sql.GenericStatement.prepMinion(Unknown Source) at org.apache.derby.impl.sql.GenericStatement.prepare(Unknown Source) at org.apache.derby.impl.sql.GenericPreparedStatement.rePrepare(Unknown Source) at org.apache.derby.impl.sql.GenericPreparedStatement.executeStmt(Unknown Source) at org.apache.derby.impl.sql.GenericPreparedStatement.execute(Unknown Source) ... 6 moreor http://dbtg.thresher.com/derby/test/Daily/jvm1.5/testing/testlog/lin/772336-suitesAll_diff.txt or http://dbtg.thresher.com/derby/test/Daily/jvm1.5/testing/testlog/sles/772336-suitesAll_diff.txt or http://dbtg.thresher.com/derby/test/Daily/javaME/testing/testlog/ubuntu/772336-suitesAll_diff.txt",
            "id": "4218"
        },
        "4228": {
            "ground_truth": "0",
            "bug_report": "Remove unused pre-i18n constructors in BatchUpdateException\nclient.am.BatchUpdateException contains a number of unused constructors. There is a comment saying that they should be removed when i18n is complete. Since the i18n work on the client driver has been completed  and the constructors are no longer used  they should be removed.",
            "id": "4228"
        },
        "4232": {
            "ground_truth": "0",
            "bug_report": "XAResource.setTransactionTimeout() makes XAResource.start() fail with the client driver\nGot below error message when running an XA prolgram with derby. org.apache.derby.client.am.XaException: XAER_PROTO : Error executing a XAResource.start()  server returned XAER_PROTO. at org.apache.derby.client.net.NetXAResource.throwXAException(Unknown Source) at org.apache.derby.client.net.NetXAResource.start(Unknown Source) at TestDerbyXA.process(TestDerbyXA.java:186) at TestDerbyXA.main(TestDerbyXA.java:43)Caused by: org.apache.derby.client.am.SqlException: Error executing a XAResource.start()  server returned XAER_PROTO. at org.apache.derby.client.net.NetXAResource.xaRetValErrorAccumSQL(Unknown Source) ... 3 moreBelow is the example program I used. Note: The program will succeed if comment out line 147 - setTransactionTimeout. Does that means call XAResource.setTransactionTimeout() caused the failure?I use Apache Derby Network Server - 10.4.2.0 - (689064). The same program works fine with another version Apache Derby Network Server - 10.2.2.0 - (485682). It looks like there is a regression between the two versions.import java.sql.Connection;import java.sql.PreparedStatement;import java.sql.SQLException;import java.sql.Statement;import javax.sql.XAConnection;import javax.transaction.xa.XAException;import javax.transaction.xa.XAResource;import javax.transaction.xa.Xid;import org.apache.derby.jdbc.ClientXADataSource;public class TestDerbyXA { ClientXADataSource xaDSLocal = null; ClientXADataSource xaDSRemote = null; public TestDerbyXA() { // Create two XA data sources. xaDSLocal = new ClientXADataSource(); xaDSLocal.setServerName('localhost'); xaDSLocal.setPortNumber(1527); xaDSLocal.setDatabaseName('testdb'); xaDSLocal.setUser('app'); xaDSLocal.setPassword('derby'); xaDSRemote = new ClientXADataSource(); xaDSRemote.setServerName('localhost'); xaDSRemote.setPortNumber(1527); xaDSRemote.setDatabaseName('testdb'); xaDSRemote.setUser('app'); xaDSRemote.setPassword('derby'); // xaDSRemote = xaDSLocal; } public static void main(String[] args) throws Exception { TestDerbyXA testObj = new TestDerbyXA(); testObj.dropTable('tablea'); testObj.createTable('CREATE TABLE tablea (col1 INT  col2 VARCHAR(32))'); testObj.dropTable('tableb'); testObj.createTable('CREATE TABLE tableb (col1 INT  col2 VARCHAR(32))'); testObj.process(); } public void dropTable(String tableName) throws Exception { Connection conn = null; Statement stmt = null; try { conn = xaDSLocal.getConnection(); stmt = conn.createStatement(); stmt.executeUpdate('DROP TABLE ' + tableName); System.out.println('Drop table ' + tableName + ' succeed.'); } catch (SQLException sqle) { System.out.println('Drop table ' + tableName + ' failed.'); sqle.printStackTrace(); } finally { // ============ Close JDBC objects  including the connection ======= if (stmt != null) { try { stmt.close(); stmt = null; } catch (SQLException e) { } } if (conn != null) { try { conn.close(); conn = null; } catch (SQLException e) { } } } } public void createTable(String DDL) throws Exception { Connection conn = null; Statement stmt = null; try { conn = xaDSLocal.getConnection(); stmt = conn.createStatement(); stmt.executeUpdate(DDL); System.out.println(DDL + ' succeed.'); } catch (SQLException sqle) { System.out.println(DDL + ' failed.'); sqle.printStackTrace(); } finally { // ============ Close JDBC objects  including the connection ======= if (stmt != null) { try { stmt.close(); stmt = null; } catch (SQLException e) { } } if (conn != null) { try { conn.close(); conn = null; } catch (SQLException e) { } } } } public void process() throws Exception { Connection connLocal = null; Connection connRemote = null; int rows = 0; PreparedStatement pstmtLocal = null; PreparedStatement pstmtRemote = null; XAConnection xaConnLocal = null; XAConnection xaConnRemote = null; XAResource xarLocal = null; XAResource xarRemote = null; Xid xidLocal = null; Xid xidRemote = null; try { xaConnLocal = xaDSLocal.getXAConnection(); xaConnRemote = xaDSRemote.getXAConnection(); connLocal = xaConnLocal.getConnection(); connRemote = xaConnRemote.getConnection(); xarLocal = xaConnLocal.getXAResource(); xarRemote = xaConnRemote.getXAResource(); // Create the Xids // Create the global ID byte[] globalTransactionId1 = new byte[64]; globalTransactionId1[0] = (byte) 1; byte[] globalTransactionId2 = new byte[64]; globalTransactionId2[0] = (byte) 2; // Create the local branch ID byte[] branchQualifierLocal = new byte[64]; branchQualifierLocal[0] = (byte) 1; xidLocal = new XidImpl(globalTransactionId1  branchQualifierLocal  0x1234); // Create the remote branch ID byte[] branchQualifierRemote = new byte[64]; branchQualifierRemote[0] = (byte) 2; xidRemote = new XidImpl(globalTransactionId2  branchQualifierRemote  0x1234); // Database operations on the local branch  suspend local branch xarLocal.setTransactionTimeout(500); //!!! The failure will disappear if comment out this line. connLocal.setAutoCommit(false); xarLocal.start(xidLocal  XAResource.TMNOFLAGS); pstmtLocal = connLocal .prepareStatement('INSERT INTO tablea (col1  col2) VALUES (?  ?)'); pstmtLocal.setInt(1  1); pstmtLocal.setString(2  'insert first rec to tablea'); rows = pstmtLocal.executeUpdate(); System.out.println(rows + ' rows inserted to tablea'); pstmtLocal.close(); pstmtLocal = null; xarLocal.end(xidLocal  XAResource.TMSUCCESS); connLocal.setAutoCommit(true); // Database operation on the remote branch  commit remote branch xarRemote.setTransactionTimeout(500); connRemote.setAutoCommit(false); xarRemote.start(xidRemote  XAResource.TMNOFLAGS); pstmtRemote = connRemote .prepareStatement('INSERT INTO tableb (col1  col2) VALUES (?  ?)'); pstmtRemote.setInt(1  2); pstmtRemote.setString(2  'insert second rec to tableb'); rows = pstmtRemote.executeUpdate(); System.out.println(rows + ' rows inserted to tableb'); pstmtRemote.close(); pstmtRemote = null; xarRemote.end(xidRemote  XAResource.TMSUCCESS); connRemote.setAutoCommit(true); System.out.println('commit remote branch'); xarRemote.commit(xidRemote  true); // Resume the local branch and do some database operation  commit local branch xarLocal.setTransactionTimeout(500); connLocal.setAutoCommit(false); xarLocal.start(xidLocal  XAResource.TMJOIN); pstmtLocal = connLocal .prepareStatement('INSERT INTO tablea (col1  col2) VALUES (?  ?)'); pstmtLocal.setInt(1  3); pstmtLocal.setString(2  'insert third rec to tablea'); rows = pstmtLocal.executeUpdate(); System.out.println(rows + ' rows inserted to tablea'); pstmtLocal.close(); pstmtLocal = null; xarLocal.end(xidLocal  XAResource.TMSUCCESS); connLocal.setAutoCommit(true); System.out.println('commit local branch'); xarLocal.commit(xidLocal  true); // Close the resources connLocal.close(); connLocal = null; connRemote.close(); connRemote = null; xaConnLocal.close(); xaConnLocal = null; xaConnRemote.close(); xaConnRemote = null; } catch (SQLException e) { System.err.println('SQL Error: ' + e.getMessage()); e.printStackTrace(); } catch (XAException e) { System.err.println('XA Error: ' + e.getMessage()); e.printStackTrace(); } finally { if (pstmtLocal != null) try { pstmtLocal.close(); pstmtLocal = null; } catch (SQLException ignore) { } if (pstmtRemote != null) try { pstmtRemote.close(); pstmtRemote = null; } catch (SQLException ignore) { } if (connLocal != null) try { connLocal.close(); connLocal = null; } catch (SQLException ignore) { } if (connRemote != null) try { connRemote.close(); connRemote = null; } catch (SQLException ignore) { } if (xaConnLocal != null) try { xaConnLocal.close(); xaConnLocal = null; } catch (SQLException ignore) { } if (xaConnRemote != null) try { xaConnRemote.close(); xaConnRemote = null; } catch (SQLException ignore) { } } }}",
            "id": "4232"
        },
        "4241": {
            "ground_truth": "0",
            "bug_report": "Improve transition from read-only to writable Clob representation\nWhen a store stream Clob is going to be modified  it will be written out to the temporary area of Derby and represented as a TemporaryClob.The transfer of the data is done in a sub-optimal manner for two reasons; o for transfer of the complete Clob  the copy method operates on the byte level and we're not able to save the character length. o for transfer of parts of the Clob (i.e. truncation)  we have to first decode the UTF-8 encoding to find the byte count and then transfer the same bytes.I intend to do the following two changes; 1) Add a getCharLengthIfKnow-method to InternalClob. 2) Add a UTF-8 aware copy method to LOBStreamControl.When a complete Clob is to be copied  code like this will be executed; cachedCharLength = internalClob.getLengthIfKnown(); if (cachedCharLength &gt; 0) // use existing byte-oriented copy method for best performance (copy until EOF) else cachedCharLength = control.copyUTF8Data()When parts of a Clob is to be copied  we always use the UTF-8 aware copy method  but we also do a cheap range check. cachedCharLength = internalClob.getLengthIfKnown(); if (cachedCharLength &gt; 0 &amp;&amp; requestedLength &gt; cachedCharLength) throw EOFException(); if (cachedCharLength == requestedLength) // use existing byte-oriented copy method for best performance (copy until EOF) else cachedCharLength = control.copyUTF8Data(requestedLength);Adding the UTF-8 aware copy method was started under DERBY-4023  including comments on the first revision of a patch.",
            "id": "4241"
        },
        "4248": {
            "ground_truth": "0",
            "bug_report": "convert checkConstraint.sql to JUnit\nConverting CheckConstraint.sql to JUnit under supervision of Bryan Pendleton.",
            "id": "4248"
        },
        "4263": {
            "ground_truth": "0",
            "bug_report": "PropertySetter isn't able to recognize JDK without version number in path\nWith empty ant.properties and JDK 6 installed in /tmp/jdk as the only JDK on the system  PropertySetter complains that it's not able to set java16compile.classpath: ---- &#91;setJdkProperties&#93; &#91;setJdkProperties&#93; PropertySetter environment = &#91;setJdkProperties&#93; &#91;setJdkProperties&#93; java.vendor = Sun Microsystems Inc. &#91;setJdkProperties&#93; java.home = /tmp/jdk/jre &#91;setJdkProperties&#93; java.version = 1.6.0_13 &#91;setJdkProperties&#93; os.name = SunOS &#91;setJdkProperties&#93; j14lib = null &#91;setJdkProperties&#93; j15lib = null &#91;setJdkProperties&#93; j16lib = null &#91;setJdkProperties&#93; BUILD FAILED /code/derby/trunk0/build.xml:203: Don't know how to set java15compile.classpath  java16compile.classpath using this environment: java.vendor = Sun Microsystems Inc. java.home = /tmp/jdk/jre java.version = 1.6.0_13 os.name = SunOS j14lib = null j15lib = null j16lib = null'----Since it is able to detect both that the version of the default JDK is 1.6.0_13 and where it is installed  setting java16compile.classpath should be trivial.If the name of the JDK directory is changed from /tmp/jdk to /tmp/jdk1.6.0  Derby is built successfully.",
            "id": "4263"
        },
        "4273": {
            "ground_truth": "0",
            "bug_report": "A lock could not be obtained within the time requested error in testBTreeForwardScan_fetchRows_resumeAfterWait_nonUnique_split\nI recently merged changes for DERBY-3926 into 10.5.1.2 codeline (revision 784809) and I ran the junit tests on the merged code. The tests finished with one 'A lock could not be obtained within the time requested'. Knut suggested that I open a new jira entry for this issue. Copying his comment from DERBY-2991 here 'Yes  that test was added for DERBY-2991.. It requires some coordination between two threads  so my first guess would be that there is a timing issue in the test. Please file a separate JIRA issue for this failure. Thanks. 'Following is the stack track for the failureThere was 1 error: 1) testBTreeForwardScan_fetchRows_resumeAfterWait_nonUnique_split(org.apache.derbyTesting.functionTests.tests.store.IndexSplitDeadlockTest)java.sql.SQLException: A lock could not be obtained within the time requested  at org.apache.derby.impl.jdbc.SQLExceptionFactory.getSQLException(SQLExceptionFactory.java:45)  at org.apache.derby.impl.jdbc.Util.generateCsSQLException(Util.java:201)  at org.apache.derby.impl.jdbc.TransactionResourceImpl.wrapInSQLException(TransactionResourceImpl.java:391)  at org.apache.derby.impl.jdbc.TransactionResourceImpl.handleException(TransactionResourceImpl.java:346)  at org.apache.derby.impl.jdbc.EmbedConnection.handleException(EmbedConnection.java:2201)  at org.apache.derby.impl.jdbc.ConnectionChild.handleException(ConnectionChild.java:81)  at org.apache.derby.impl.jdbc.EmbedResultSet.closeOnTransactionError(EmbedResultSet.java:4338)  at org.apache.derby.impl.jdbc.EmbedResultSet.movePosition(EmbedResultSet.java:467)  at org.apache.derby.impl.jdbc.EmbedResultSet.next(EmbedResultSet.java:371)  at org.apache.derbyTesting.functionTests.tests.store.IndexSplitDeadlockTest.testBTreeForwardScan_fetchRows_resumeAfterWait_nonUnique_split(IndexSplitDeadlockTest.java:489)  at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)  at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:79)  at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)  at org.apache.derbyTesting.junit.BaseTestCase.runBare(BaseTestCase.java:106)  at junit.extensions.TestDecorator.basicRun(TestDecorator.java:22)  at junit.extensions.TestSetup$1.protect(TestSetup.java:19)  at junit.extensions.TestSetup.run(TestSetup.java:23)  at org.apache.derbyTesting.junit.BaseTestSetup.run(BaseTestSetup.java:57)  at junit.extensions.TestDecorator.basicRun(TestDecorator.java:22)  at junit.extensions.TestSetup$1.protect(TestSetup.java:19)  at junit.extensions.TestSetup.run(TestSetup.java:23)  at org.apache.derbyTesting.junit.BaseTestSetup.run(BaseTestSetup.java:57) Caused by: ERROR 40XL1: A lock could not be obtained within the time requested at org.apache.derby.iapi.error.StandardException.newException(StandardException.java:276)  at org.apache.derby.impl.services.locks.ConcurrentLockSet.lockObject(ConcurrentLockSet.java:602)  at org.apache.derby.impl.services.locks.ConcurrentLockSet.zeroDurationLockObject(ConcurrentLockSet.java:855)  at org.apache.derby.impl.services.locks.AbstractPool.zeroDurationlockObject(AbstractPool.java:297)  at org.apache.derby.impl.store.raw.xact.RowLocking2nohold.lockRecordForRead(RowLocking2nohold.java:89)  at org.apache.derby.impl.store.access.heap.HeapController.lockRow(HeapController.java:520)  at org.apache.derby.impl.store.access.heap.HeapController.lockRow(HeapController.java:638)  at org.apache.derby.impl.store.access.btree.index.B2IRowLocking3.lockRowOnPage(B2IRowLocking3.java:309)  at org.apache.derby.impl.store.access.btree.index.B2IRowLocking3._lockScanRow(B2IRowLocking3.java:599)  at org.apache.derby.impl.store.access.btree.index.B2IRowLockingRR.lockScanRow(B2IRowLockingRR.java:105)  at org.apache.derby.impl.store.access.btree.BTreeForwardScan.fetchRows(BTreeForwardScan.java:305)  at org.apache.derby.impl.store.access.btree.BTreeScan.fetchNextGroup(BTreeScan.java:1585)  at org.apache.derby.impl.sql.execute.BulkTableScanResultSet.reloadArray(BulkTableScanResultSet.java:327)  at org.apache.derby.impl.sql.execute.BulkTableScanResultSet.getNextRowCore(BulkTableScanResultSet.java:282)  at org.apache.derby.impl.sql.execute.BasicNoPutResultSetImpl.getNextRow(BasicNoPutResultSetImpl.java:460)  at org.apache.derby.impl.jdbc.EmbedResultSet.movePosition(EmbedResultSet.java:427)  ... 34 more FAILURES!!! Tests run: 9258  Failures: 0  Errors: 1",
            "id": "4273"
        },
        "4274": {
            "ground_truth": "0",
            "bug_report": "SYSCS_UPDATE_STATISTICS takes unnecessary table lock\nI'm using SYSCS_UTIL.SYSCS_UPDATE_STATISTICS in an application and see deadlocks similar to this one from time to time:Caused by: java.sql.SQLTransactionRollbackException: A lock could not be obtained due to a deadlock  cycle of locks and waiters is:Lock : ROW  SYSSTATISTICS  (2 20) Waiting XID : {20137  S}   APP  SELECT CS.REVISION  A.NAME  CS.TIME  CS.MESSAGE  F2.PATH FROM CHANGESETS CS  FILECHANGES FC  REPOSITORIES R  FILES F  AUTHORS A  FILECHANGES FC2  FILES F2 WHERE R.PATH = ? AND F.PATH LIKE ? ESCAPE '#' AND F.REPOSITORY = R.ID AND A.REPOSITORY = R.ID AND CS.ID = FC.CHANGESET AND R.ID = CS.REPOSITORY AND FC.FILE = F.ID AND A.ID = CS.AUTHOR AND CS.ID = FC2.CHANGESET AND FC2.FILE = F2.ID ORDER BY CS.ID DESC Granted XID : {20134  X} Lock : TABLE  CHANGESETS  Tablelock Waiting XID : {20134  X}   APP  alter table 'APP'.'CHANGESETS' all update statistics  Granted XID : {20137  IS} . The selected victim is XID : 20137.Here  a select statement is being re-prepared because update statistics has invalidated it  but it has to wait for update statistics to finish in order to read the new statistics from SYSSTATISTICS. Then update statistics attempts to obtain an exclusive lock on the table whose indexes are being updated  but it has to wait because the select statement is holding an intention lock on the table. Both transactions wait for each other  so we have a deadlock.Since SYSCS_UPDATE_STATISTICS does not update the table  only its entries in SYSSTATISTICS  there is no need to take an exclusive table lock. If it didn't lock the table exclusively  this deadlock situation would go away.",
            "id": "4274"
        },
        "4276": {
            "ground_truth": "1",
            "bug_report": "Update demo's to remove references to com.ibm.db2.jcc.DB2Driver\nSimpleApp.java is still refering to DB2 JDBC driver. I think it should be take out to reflect DB2 driver is no longer supported.There are also some typos in SimpleApp.java. i.e. noone  retreiving  etc.example.html that should be updated as well.Kathey mention nserverdemo also has references to the DB2 driver. This issue will address that as well.",
            "id": "4276"
        },
        "4281": {
            "ground_truth": "0",
            "bug_report": "10.6 Upgrade test fails: SYSCS_UTIL.SYSCS_SET_XPLAIN_SCHEMA is not recognized as a function\nThe 10.6 upgrade tests are currently commented out. When the 10.6 upgrade test is enabled  it fails with the following exception:Caused by: java.sql.SQLException: 'SYSCS_UTIL.SYSCS_SET_XPLAIN_SCHEMA' is not recognized as a function or procedure. at org.apache.derby.impl.jdbc.SQLExceptionFactory.getSQLException(SQLExceptionFactory.java:45) at org.apache.derby.impl.jdbc.SQLExceptionFactory40.wrapArgsForTransportAcrossDRDA(SQLExceptionFactory40.java:119) at org.apache.derby.impl.jdbc.SQLExceptionFactory40.getSQLException(SQLExceptionFactory40.java:70) ... 98 moreCaused by: ERROR 42Y03: 'SYSCS_UTIL.SYSCS_SET_XPLAIN_SCHEMA' is not recognized as a function or procedure. at org.apache.derby.iapi.error.StandardException.newException(StandardException.java:286) at org.apache.derby.impl.sql.compile.StaticMethodCallNode.bindExpression(StaticMethodCallNode.java:216) at org.apache.derby.impl.sql.compile.JavaToSQLValueNode.bindExpression(JavaToSQLValueNode.java:246) at org.apache.derby.impl.sql.compile.CallStatementNode.bindStatement(CallStatementNode.java:145) at org.apache.derby.impl.sql.GenericStatement.prepMinion(GenericStatement.java:316) at org.apache.derby.impl.sql.GenericStatement.prepare(GenericStatement.java:88) at org.apache.derby.impl.sql.conn.GenericLanguageConnectionContext.prepareInternalStatement(GenericLanguageConnectionContext.java:822) at org.apache.derby.impl.jdbc.EmbedStatement.execute(EmbedStatement.java:606) ... 92 more",
            "id": "4281"
        },
        "4284": {
            "ground_truth": "0",
            "bug_report": "All Columns become Nullable when Using left join\nConsider following:-create table person ( id varchar(20) not null  name varchar(100) not null);create table car ( id varchar(20) not null  person_id varchar(20) not null  model varchar(100) not null  plat_no varchar(100) not null);When select :-selectp.name c.model c.plat_nofrom person pleft join car c on (p.id = c.person_id);From the ResultSet  get the ResultSetMetaData and inspect each column's isNullable() value  which is always = 1 (always nullable). Expected : column 'p.name' isNullable = 0 (not nullable)  but I get 'p.name' isNullable = 1 (nullable)",
            "id": "4284"
        },
        "4292": {
            "ground_truth": "1",
            "bug_report": "creation of FileInputStream in org.apache.derby.impl.tools.ij.Main not wrapped in privilege  block which can cause problems running under SecurityManager\norg.apache.derby.impl.tools.ij.Main has this code where the call to FileInputStream is not wrapped in a privilege block: try { in1 = new FileInputStream(file); if (in1 != null) { in1 = new BufferedInputStream(in1  utilMain.BUFFEREDFILESIZE); in = langUtil.getNewInput(in1); } } catch (FileNotFoundException e) { if (Boolean.getBoolean('ij.searchClassPath')) { in = langUtil.getNewInput(util.getResourceAsStream(file)); }This can cause issues when running under SecurityManager",
            "id": "4292"
        },
        "4293": {
            "ground_truth": "1",
            "bug_report": "Mutable public static variables\nThere are quite a few instances of public static fields which appear to be intended to be constant  but which are not final.The code would be safer if all the constant fields were made final.Patch to follow for some of the problem fields.The following also ought to be fixed:org.apache.derby.iapi.services.property.PropertyUtil.servicePropertyList (e.g. use an accessor to lookup the values)org.apache.derby.iapi.types.JSQLType.primitiveNames (ditto)",
            "id": "4293"
        },
        "4297": {
            "ground_truth": "0",
            "bug_report": "'compilation time did not compute (0 0 0 0) expected: but was:' in testGroupBySortProps(....tests.lang.XplainStatisticsTest)\nSeen inhttp://dbtg.thresher.com/derby/test/trunk15/jvm1.5/testing/testlog/CYGWIN_NT-5.1_i686-unknown/790694-org.apache.derbyTesting.functionTests.suites.All_diff.txtThere was 1 failure:1) testGroupBySortProps(org.apache.derbyTesting.functionTests.tests.lang.XplainStatisticsTest)junit.framework.AssertionFailedError: compilation time did not compute (0 0 0 0) expected:&lt;16&gt; but was:&lt;0&gt; at org.apache.derbyTesting.functionTests.tests.lang.XplainStatisticsTest.verifySensibleStatementTimings(XplainStatisticsTest.java:707) at org.apache.derbyTesting.functionTests.tests.lang.XplainStatisticsTest.testGroupBySortProps(XplainStatisticsTest.java:1011) at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39) at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25) at org.apache.derbyTesting.junit.BaseTestCase.runBare(BaseTestCase.java:109) at junit.extensions.TestDecorator.basicRun(TestDecorator.java:22) at junit.extensions.TestSetup$1.protect(TestSetup.java:19) at junit.extensions.TestSetup.run(TestSetup.java:23) at org.apache.derbyTesting.junit.BaseTestSetup.run(BaseTestSetup.java:57)",
            "id": "4297"
        },
        "4312": {
            "ground_truth": "0",
            "bug_report": "SQLException XJ215 on insert  with setCharacterStream() and autocommit off in mailjdbc test\nI am running the 10.5 maildbc test on Linux with network server and the 10.5.2.0 release candidate and an updated derbyTesting.jar to have just Lily's change to change the backup user: I see in the test output early and often  this error inserting data into the table:SQLState: XJ215Severity: 20000Message: You cannot invoke other java.sql.Clob/java.sql.Blob methods after calling the free() method or afterClob's transaction has been committed or rolled back.java.sql.SQLException: You cannot invoke other java.sql.Clob/java.sql.Blob methods after calling the free() mter the Blob/Clob's transaction has been committed or rolled back. at org.apache.derby.client.am.SQLExceptionFactory40.getSQLException(Unknown Source) at org.apache.derby.client.am.SqlException.getSQLException(Unknown Source) at org.apache.derby.client.am.Lob.checkValidity(Unknown Source) at org.apache.derby.client.am.Clob.length(Unknown Source) at org.apache.derby.client.net.NetStatementRequest.computeProtocolTypesAndLengths(Unknown Source) at org.apache.derby.client.net.NetStatementRequest.buildSQLDTAcommandData(Unknown Source) at org.apache.derby.client.net.NetStatementRequest.writeExecute(Unknown Source) at org.apache.derby.client.net.NetPreparedStatement.writeExecute_(Unknown Source) at org.apache.derby.client.am.PreparedStatement.writeExecute(Unknown Source) at org.apache.derby.client.am.PreparedStatement.flowExecute(Unknown Source) at org.apache.derby.client.am.PreparedStatement.executeUpdateX(Unknown Source) at org.apache.derby.client.am.PreparedStatement.executeUpdate(Unknown Source) at org.apache.derbyTesting.system.mailjdbc.utils.DbTasks.insertMail(DbTasks.java:447) at org.apache.derbyTesting.system.mailjdbc.tasks.Refresh.insertMail(Refresh.java:99) at org.apache.derbyTesting.system.mailjdbc.tasks.Refresh.doWork(Refresh.java:75) at org.apache.derbyTesting.system.mailjdbc.tasks.Refresh.run(Refresh.java:51)Caused by: org.apache.derby.client.am.SqlException: You cannot invoke other java.sql.Clob/java.sql.Blob metholling the free() method or after the Blob/Clob's transaction has been committed or rolled back.The interesting thing is that the test itself is not using any Clob methods it uses setCharacterStream and also autocommit is off.Below is a code excerpt and conn.setAutoCommit(false); PreparedStatement insertFirst = conn.prepareStatement( Statements.insertStr  Statement.RETURN_GENERATED_KEYS); String name = new String('ABCD'); String l_name = new String('WXYZ'); long s_insert = System.currentTimeMillis(); for (int i = 0; i &lt; num; i++) { String new_name = new String(increment(name  60)); String new_lname = new String(decrement(l_name  60)); insertFirst.setString(1  new_name); insertFirst.setString(2  new_lname); insertFirst.setTimestamp(3  new Timestamp(System .currentTimeMillis())); name = new_name; l_name = new_lname; try { // to create a stream of random length between 200 bytes and 3MB int clobLength = Rn.nextInt(3078000 - 200 + 1) + 200; streamReader = new LoopingAlphabetReader(clobLength  CharAlphabet.modernLatinLowercase()); insertFirst.setCharacterStream(4  streamReader  clobLength); } catch (Exception e) { MailJdbc.logAct.logMsg(LogFile.ERROR + thread_name + ' : ' + 'File not found Exception : ' + e.getMessage()); errorPrint(e); throw e; } int rand_num = Rn.nextInt(10 - 1); if (i == rand_num) { ResultSet rs = stmt .executeQuery('select count from REFRESH.INBOX where attach_id&gt;0'); while (rs.next()) { id_count = rs.getInt(1); insertFirst.setInt(5  rs.getInt(1) + 1); } rs.close(); conn.setTransactionIsolation(Connection.TRANSACTION_READ_COMMITTED); } else insertFirst.setInt(5  0); insertFirst .setString( 6  'This column is used only to by pass the space problem. If the problem still exists  then we are going to ' + 'have a serious issue here.*****************************************************************************************************'); int result = insertFirst.executeUpdate();if I connect with ij I do see some rows in the INBOX  so some inserts do seem to be happening. Kristian pointed out that this looks similar to DERBY-4224 with setAsciiStream() but this looks far more serious as autocommit is off and there does not appear to be a commit  so there is no obvious workaround. I assume this is also a regression. We shouldn't be throwing this error if the user did not use any Clob methods. I will try to narrow down the reproduction and track down where the issue was introduced. Knut said DERBY-4224 goes all the way back to 10.3.1.4 with DERBY-208. I don't know if it is the same case with this one.",
            "id": "4312"
        },
        "4314": {
            "ground_truth": "0",
            "bug_report": "With derby client setTransactionIsolation executes and commits even if isolation has not changed\nWith in EmbedConnection.setIsolation() we have a check to see if the isolation level is the same and if so just return without doing a commit: public void setTransactionIsolation(int level) throws SQLException { if (level == getTransactionIsolation()) return;with org.apache.derby.client.am.Connection we have no such check. It would be good if the client driver acted like embedded.",
            "id": "4314"
        },
        "4315": {
            "ground_truth": "0",
            "bug_report": "Attempt to reuse streams in client on insert gives protocol exception and inserts wrong data\nIf a user attempts to reuse a stream set as a parameter to a prepared statement  the statement execution should fail with SQL State XJ001. Instead client fails with a protocol error and inserts wrong data. See the attached java program ReproReuseStream.java for a reproduction.&#91;C:/kmarsden/repro/reusestream&#93; java ReproReuseStreamInsert row 1Try to insert row 2 with reused streamsjava.sql.SQLException: Network protocol error: end of stream prematurely reached  parameter #4. Remaining data has been padded with 0x0. at org.apache.derby.client.am.SQLExceptionFactory40.getSQLException(SQLExceptionFactory40.java:96) at org.apache.derby.client.am.SqlException.getSQLException(SqlException.java:358) at org.apache.derby.client.am.PreparedStatement.executeUpdate(PreparedStatement.java:399) at ReproReuseStream.main(ReproReuseStream.java:41)Caused by: org.apache.derby.client.am.SqlException: Network protocol error: end of stream prematurely reached  parameter #4. Remaining data has been padded with 0x0. at org.apache.derby.client.net.Request.writePlainScalarStream(Request.java:490) at org.apache.derby.client.net.Request.writeScalarStream(Request.java:264) at org.apache.derby.client.net.NetStatementRequest.buildEXTDTA(NetStatementRequest.java:951) at org.apache.derby.client.net.NetStatementRequest.writeExecute(NetStatementRequest.java:147) at org.apache.derby.client.net.NetPreparedStatement.writeExecute_(NetPreparedStatement.java:178) at org.apache.derby.client.am.PreparedStatement.writeExecute(PreparedStatement.java:1801) at org.apache.derby.client.am.PreparedStatement.flowExecute(PreparedStatement.java:2031) at org.apache.derby.client.am.PreparedStatement.executeUpdateX(PreparedStatement.java:404) at org.apache.derby.client.am.PreparedStatement.executeUpdate(PreparedStatement.java:390) ... 1 moreGo ahead and commit so we can see the wrong data.ID |MNAMEMVALUE BYTEDATACHARDATA--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------1 |mname0 6363636363636363636363636363636363636363636363636363636363636363636363636363636363636363636363636363636363636363636363636363636&amp;ccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc&amp;2 mname0 0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000&amp; &amp;To workaround the issue users should not attempt to reuse streams but we should give a better message and not insert wrong data.The code was extracted from StreamingColumnTest testDerby500 but the commits were removed.",
            "id": "4315"
        },
        "4319": {
            "ground_truth": "0",
            "bug_report": "hang in suites.all with ibm 1.5 on AIX after ttestDefaultProperties\nThe test run for 10.5.2.0 hung in suites.All. The console output (the run was with -Dderby.tests.trace=true) showed ttestDefaultProperties had successfully completed but the run was halted.ps -eaf | grep java showed the process that kicked off suites.All  and a networkserver process with the following flags: classpath &lt;classpath including derby.jar  derbytools.jar  derbyclient.jar  derbynet.jar  derbyTesting.jar  derbyrun.jar  derbyTesting.jar and junit.jar&gt; -Dderby.drda.logConnections= -Dderby.drda.traceAll= -Dderby.drda.traceDirectory= -Dderby.drda.keepAlive= -Dderby.drda.timeSlice= -Dderby.drda.host= -Dderby.drda.portNumber= -derby.drda.minThreads= -Dderby.drda.maxThreads= -Dderby.drda.startNetworkServer= -Dderby.drda.debug= org.apache.derby.drda.NetworkServerControl start -h localhost -p 1527This process had been sitting for 2 days.After killing the NetworkServerControl process  the test continued successfully (except for DERBY-4186  fixed in trunk)  but the following was put out to the console: START-SPAWNED:SpawnedNetworkServer STANDARD OUTPUT: exit code=1372009-07-18 03:16:07.157 GMT : Security manager installed using the Basic serversecurity policy.2009-07-18 03:16:09.169 GMT : Apache Derby Network Server - 10.5.2.0 - (794445)started and ready to accept connections on port 1527END-SPAWNED :SpawnedNetworkServer STANDARD OUTPUT:",
            "id": "4319"
        },
        "4321": {
            "ground_truth": "1",
            "bug_report": "test nstest generates errors XBM06 re reencryption and 22003 re value outside range for decimal/numeric\nThe test nstest (both in embedded and networkserver) ran into a JVM-bug-related error the last few times I tried it; but with a newer jvm I notice it's generating an XBM06 error:XBM06: Startup failed. An encrypted database cannot be accessed without the correct boot password. From the test's README.txt it shows it is indeed attempting to re-encrypt  but this is failing.The test needs to be tightened up so it doesn't show unusual errors.The test also generates:22003: The resulting value is outside the range for the data type DECIMAL/NUMERIC(5 0)The test's readme and comments don't indicate this is a negative test  so this too should get tightened/cleaned up.",
            "id": "4321"
        },
        "4326": {
            "ground_truth": "1",
            "bug_report": "hang on winvista with IBM 1.6 SR5 in NSSecurityMechanismTest\nThis is stopping my platform testing on winvista with ibm 1.6 SR5.During the initial run of suites.All  I got:-------------------------------- testNetworkServerSecurityMechanism java.net.SocketException: Connection reset by peer: setsockopt at java.net.PlainSocketImpl.socketSetOption(Native Method) at java.net.PlainSocketImpl.setOption(PlainSocketImpl.java:283) at java.net.Socket.setKeepAlive(Socket.java:1171) at org.apache.derby.impl.drda.ClientThread.run(Unknown Source)--------------------------------Rerunning suites.All gave the same error.There is only 1 java process active &amp; hanging.Running just the test itself also results in a hang but there was (so far - it's been sitting unchanged for 4 hours) java.net.SocketException.",
            "id": "4326"
        },
        "4342": {
            "ground_truth": "1",
            "bug_report": "SQLSTATE 38000 (NullPointerException) at inner self join and value(x1  x2...)\ncreate table xyz (c1 int  c2 int);insert into xyz values(1 2);select * from xyz t1 inner join xyz t2 on t1.c1 = t2.c1 where value(t1.c1  t1.c2) = 1;causes the following error:FEHLER 38000: Bei der Auswertung eines Ausdrucks wurde die Ausnahme 'java.lang.NullPointerException' ausgeloest.FEHLER XJ001: Java-Ausnahme: ': java.lang.NullPointerException'.",
            "id": "4342"
        },
        "4343": {
            "ground_truth": "0",
            "bug_report": "ASSERT FAILED calling setTransactionIsolation checking isolation_ == level   on  pooled connection\nFor DERBY-4314  I thought I would do a little testing to understand the server round trips in various scenarios for pooled connections. So I wrote the small attached program ConnReuse.java and hit this assertion in client:Exception in thread 'main' org.apache.derby.shared.common.sanity.AssertFailure: ASSERT FAILED at org.apache.derby.shared.common.sanity.SanityManager.ASSERT(SanityManager.java:98) at org.apache.derby.client.am.Connection.setTransactionIsolationX(Connection.java:987) at org.apache.derby.client.am.Connection.setTransactionIsolation(Connection.java:915) at org.apache.derby.client.am.LogicalConnection.setTransactionIsolation(LogicalConnection.java:253) at TestConnReuse.main(TestConnReuse.java:32)---------------To run the program on trunk:java org.apache.derby.drda.NetworkServerControl startjava TestConnReuse.This needs more investigation  but I thought I would go ahead and log the bug. I tried this only on trunk. I have not yet Tried it on the branches. Tried it with Lily's DERBY-4314 patch. Tried it with embedded. Tried actually doing something with the prior logical connection which might be related.",
            "id": "4343"
        },
        "4348": {
            "ground_truth": "0",
            "bug_report": "Copy table content with 'INSERT INTO table SELECT FROM (...)' statement leads to corrupt data\nI had to change a the primary key of a table and used ddlutils to do so. Ddlutils recreated the table to perform this task.After the schema conversion the row data of the changed table were corrupted. The values of the last table column were filled with values from other rows!After performing a few tests I could break down the problem to the SQL statement 'INSERT INTO table SELECT FROM (...)'To reprocude the effect do the following:1. unpack attached database 'rmdb.zip'2. connect to the database with embedded driver  User: IGEL Password: test 3. read data of an example row from database select * from stringrangenew where classname = 'x.xserver%.colordepth';result is  x.xserver%.colordepth 2 &#91;16&#93; &#91;24&#93; &#91;32&#93;4. now copy the data to the second table (column INSTANCENR has been added to this table) INSERT INTO STRINGRANGENEW_ (CLASSNAME FIRMWAREID RVALUE) SELECT CLASSNAME FIRMWAREID RVALUE FROM STRINGRANGENEW;5. select data of example row from second table select * from stringrangenew_ where classname = 'x.xserver%.colordepth';result is  x.xserver%.colordepth 2 -1 &#91;CCW&#93;&#91;CW&#93;&#91;XX&#93;-&gt; value of last column is not the same as in orignal table!Here some additional information i worked out during my tests: if you change the copy statement to include the additional column INSTANCENR  the copied data are correct. delete from STRINGRANGENEW_; INSERT INTO STRINGRANGENEW_ (CLASSNAME FIRMWAREID  INSTANCENR  RVALUE) SELECT CLASSNAME FIRMWAREID  -1  RVALUE FROM STRINGRANGENEW; if you select the rows only 'SELECT CLASSNAME FIRMWAREID RVALUE FROM STRINGRANGENEW'  the result shows correct dataNote: The effect is not restricted to this row but also applies to other rows. But it's always the same rows  that get corrupted.",
            "id": "4348"
        },
        "4355": {
            "ground_truth": "0",
            "bug_report": "Implement CROSS JOIN\nImplement the CROSS JOIN syntaxSELECT * from t1 CROSS JOIN t2;as an alternative syntax toSELECT * FROM t1  t2; This should be pretty straight forward and ease the migration of SQL code to Derby.",
            "id": "4355"
        },
        "4357": {
            "ground_truth": "0",
            "bug_report": "TableFunctions provide no information to limit underlying query\nThe API specification for TableFunctions cannot provide information to the implementer of the TableFunction about the details of the query. For example: (a) I defined a table function named MyFunction with columns a b  &amp; c(b) I bind the table function properly using the CREATE FUNCTION SQL.User executes the following SQL:select a b from table ( MyFunction() ) where c = 123Without passing the column list and/or where clause as arguments to the table function  my implementation can not know that it only needs two of the three columns  and only rows where c = 123.For TableFunctions that are built to integrate distant/legacy data  the cost of the query can be prohibitive. It would be better if information regarding the columns in the select and restrictions from the where clause could be passed to the developer.",
            "id": "4357"
        },
        "4365": {
            "ground_truth": "1",
            "bug_report": "NullPointerException when preparing LEFT OUTER JOIN between VALUES statements\nij version 10.5ij&gt; connect 'jdbc:derby:db;create=true';ij&gt; select a.* from (values ('a') ('b') (null)) a left outer join (values ('c') ('d')) b on 1=1;ERROR XJ001: Java exception: ': java.lang.NullPointerException'.",
            "id": "4365"
        },
        "4367": {
            "ground_truth": "0",
            "bug_report": "Replace Utils.min and Utils.max in the client driver with standard methods in java.lang.Math\nThe client has a utility class implementing functions for choosing the smallest and the largest int. These functions are already defined in java.lang.Math  and should be used instead because they are more familiar and because there is no need to duplicate the functionality.",
            "id": "4367"
        },
        "4372": {
            "ground_truth": "0",
            "bug_report": "Wrong result for simple join when index is created\nIn the example below  the first SELECT has correct result. After the index is created  the second SELECT gives wrong result.ij&gt; CREATE TABLE t1 (i1 INT  j1 INT);0 rows inserted/updated/deletedij&gt; CREATE TABLE t2 (i2 INT  j2 INT);0 rows inserted/updated/deletedij&gt; INSERT INTO t1 VALUES (8  8) (NULL  8);2 rows inserted/updated/deletedij&gt; INSERT INTO t2 VALUES (8  8);1 row inserted/updated/deletedij&gt; SELECT * FROM t1 INNER JOIN t2 ON (t2.j2 = t1.i1) OR (t2.j2 = t1.j1);I1 |J1 |I2 |J2 -----------------------------------------------8 |8 |8 |8 NULL |8 |8 |8 2 rows selectedij&gt; CREATE INDEX ix2 ON t2(j2);0 rows inserted/updated/deletedij&gt; SELECT * FROM t1 INNER JOIN t2 ON (t2.j2 = t1.i1) OR (t2.j2 = t1.j1);I1 |J1 |I2 |J2 -----------------------------------------------8 |8 |8 |8 1 row selected",
            "id": "4372"
        },
        "4386": {
            "ground_truth": "0",
            "bug_report": "JavaDoc warnings in several classes in impl/sql/execute/rts\nA 'raw non-ASCII' character was introduced in several classes as part of a commit for DERBY-2487.These should be removed to get rid of the JavaDoc warnings.I plan to enable JavaDoc warnings reporting in the Hudson Derby build job.",
            "id": "4386"
        },
        "4387": {
            "ground_truth": "0",
            "bug_report": "Infinite loop in PredicateList.joinClauseTransitiveClosure()\nThis sequence of statements triggers an infinite loop in PredicateList.joinClauseTransitiveClosure() and never completes:create table c (a int  b int  c int);create table cc (aa int);select * from cc t1  c t2  cc t3 where t3.aa = t2.a and t3.aa = t2.b and t3.aa = t2.c;",
            "id": "4387"
        },
        "4388": {
            "ground_truth": "1",
            "bug_report": "NullPointerException in RIGHT JOIN with NOT BETWEEN\nij&gt; create table t1(x int);0 rows inserted/updated/deletedij&gt; create table t2(x int);0 rows inserted/updated/deletedij&gt; insert into t2 values (1);1 row inserted/updated/deletedij&gt; select * from t1 right join t2 on t1.x = t2.x where t1.x not between 0 and 4;X |X -----------------------ERROR 38000: The exception 'java.lang.NullPointerException' was thrown while evaluating an expression.ERROR XJ001: Java exception: ': java.lang.NullPointerException'.",
            "id": "4388"
        },
        "4391": {
            "ground_truth": "1",
            "bug_report": "NullPointerException when comparing indexed column with result from a set operation\nI'm reporting this issue on behalf of Bernt M. Johnsen.If an indexed column is compared with a UNION query (or some other set operation)  a NullPointerException is raised  as can be seen by this sequence of statements in ij:ij&gt; create table t(a int not null primary key  b int);0 rows inserted/updated/deletedij&gt; select * from t where a &lt; (values 4 union values 4);ERROR XJ001: Java exception: ': java.lang.NullPointerException'.",
            "id": "4391"
        },
        "4405": {
            "ground_truth": "0",
            "bug_report": "Transformation to inner join not performed for certain three-way joins\nIn the CROSS JOIN section in the reference manual (http://db.apache.org/derby/docs/dev/ref/rrefsqljcrossjoin.html) there are three examples that are supposed to be equivalent. However  the performance differs significantly between the different queries.The queries use the tours db and look like this:(1)SELECT * FROM CITIES LEFT OUTER JOIN (FLIGHTS CROSS JOIN COUNTRIES) ON CITIES.AIRPORT = FLIGHTS.ORIG_AIRPORT WHERE COUNTRIES.COUNTRY_ISO_CODE = 'US'(2)SELECT * FROM CITIES LEFT OUTER JOIN FLIGHTS INNER JOIN COUNTRIES ON 1=1 ON CITIES.AIRPORT = FLIGHTS.ORIG_AIRPORT WHERE COUNTRIES.COUNTRY_ISO_CODE = 'US'(3)SELECT * FROM CITIES LEFT OUTER JOIN (SELECT * FROM FLIGHTS  COUNTRIES) S ON CITIES.AIRPORT = S.ORIG_AIRPORT WHERE S.COUNTRY_ISO_CODE = 'US'When executed in ij  (1) and (2) need 6 seconds to complete  whereas (3) completes in 50 ms.The query plans for (1) and (2) use nested loop joins and table scans. (3) uses a combination of hash join and nested loop join  and index scans as well as table scans.It looks like (3) has been rewritten from a left outer join to an inner join internally. This is fine because all rows that have the right-side columns filled with NULLs will be filtered out by the predicate S.COUNTRY_ISO_CODE='US'  so the extra rows generated by the outer join will not be returned.This optimization should also be possible for (1) and (2). We should improve the logic so that those joins are transformed too. The transformation happens in HalfOuterJoinNode.transformOuterJoins().",
            "id": "4405"
        },
        "4410": {
            "ground_truth": "1",
            "bug_report": "NullPointerException when USING clause contains all columns in both join tables\nij&gt; create table t(x int);0 rows inserted/updated/deletedij&gt; select t1.  t2. from t t1 join t t2 using ;ERROR XJ001: Java exception: ': java.lang.NullPointerException'.This statement should have raised an exception because both t1.* and t2.* expand to no columns. See DERBY-4407.",
            "id": "4410"
        },
        "4411": {
            "ground_truth": "1",
            "bug_report": "Scalar subquery erroneously rejected for not returning exactly one row\nThis sequence of statements causes an error because the scalar sub-query supposedly doesn't return exactly one row  even though it does return exactly one row:ij&gt; create table t (x int unique  y int);0 rows inserted/updated/deletedij&gt; insert into t values (1 2);1 row inserted/updated/deletedij&gt; select * from t where x &gt; (values 1 union select y from t where 1=0);ERROR 21000: Scalar subquery is only allowed to return a single row.ij&gt; values 1 union select y from t where 1=0;1 -----------1 1 row selectedBefore DERBY-4391  the problematic statement would have caused a NullPointerException.",
            "id": "4411"
        },
        "4412": {
            "ground_truth": "0",
            "bug_report": "Make getNegation() abstract in BinaryComparisonOperatorNode and UnaryComparisonOperatorNode\nBoth BinaryComparisonOperatorNode and UnaryComparisonOperatorNode have a method called getNegation() with the following code: /* Keep the compiler happy - this method should never be called. We should always be calling the method in a sub-class. */ if (SanityManager.DEBUG) SanityManager.ASSERT(false  'expected to call getNegation() for subclass ' + getClass().toString()); return this;Instead of relying on asserts to detect missing method overrides at run-time  we should make the methods abstract so that such errors are detected by the compiler.",
            "id": "4412"
        },
        "4414": {
            "ground_truth": "1",
            "bug_report": "NullPointerException with JOIN...USING and invalid table name in select list\nij version 10.6ij&gt; connect 'jdbc:derby:memory:db;create=true';ij&gt; create table t(a int  b int  c int);0 rows inserted/updated/deletedij&gt; select t.* from t t1 join t t2 using (a);ERROR XJ001: Java exception: ': java.lang.NullPointerException'.java.sql.SQLException: Java exception: ': java.lang.NullPointerException'. at org.apache.derby.impl.jdbc.SQLExceptionFactory40.getSQLException(SQLExceptionFactory40.java:95) at org.apache.derby.impl.jdbc.Util.newEmbedSQLException(Util.java:142) at org.apache.derby.impl.jdbc.Util.javaException(Util.java:299) at org.apache.derby.impl.jdbc.TransactionResourceImpl.wrapInSQLException(TransactionResourceImpl.java:403) at org.apache.derby.impl.jdbc.TransactionResourceImpl.handleException(TransactionResourceImpl.java:346) at org.apache.derby.impl.jdbc.EmbedConnection.handleException(EmbedConnection.java:2204) at org.apache.derby.impl.jdbc.ConnectionChild.handleException(ConnectionChild.java:81) at org.apache.derby.impl.jdbc.EmbedStatement.execute(EmbedStatement.java:614) at org.apache.derby.impl.jdbc.EmbedStatement.execute(EmbedStatement.java:555) at org.apache.derby.impl.tools.ij.ij.executeImmediate(ij.java:329) at org.apache.derby.impl.tools.ij.utilMain.doCatch(utilMain.java:521) at org.apache.derby.impl.tools.ij.utilMain.runScriptGuts(utilMain.java:363) at org.apache.derby.impl.tools.ij.utilMain.go(utilMain.java:261) at org.apache.derby.impl.tools.ij.Main.go(Main.java:229) at org.apache.derby.impl.tools.ij.Main.mainCore(Main.java:184) at org.apache.derby.impl.tools.ij.Main.main(Main.java:75) at org.apache.derby.tools.ij.main(ij.java:59)Caused by: java.sql.SQLException: Java exception: ': java.lang.NullPointerException'. at org.apache.derby.impl.jdbc.SQLExceptionFactory.getSQLException(SQLExceptionFactory.java:45) at org.apache.derby.impl.jdbc.SQLExceptionFactory40.wrapArgsForTransportAcrossDRDA(SQLExceptionFactory40.java:119) at org.apache.derby.impl.jdbc.SQLExceptionFactory40.getSQLException(SQLExceptionFactory40.java:70) ... 16 moreCaused by: java.lang.NullPointerException at org.apache.derby.impl.sql.compile.JoinNode.getAllResultColumns(JoinNode.java:431) at org.apache.derby.impl.sql.compile.FromList.expandAll(FromList.java:474) at org.apache.derby.impl.sql.compile.ResultColumnList.expandAllsAndNameColumns(ResultColumnList.java:1598) at org.apache.derby.impl.sql.compile.ResultColumnList.bindExpressions(ResultColumnList.java:686) at org.apache.derby.impl.sql.compile.SelectNode.bindExpressions(SelectNode.java:451) at org.apache.derby.impl.sql.compile.DMLStatementNode.bindExpressions(DMLStatementNode.java:227) at org.apache.derby.impl.sql.compile.DMLStatementNode.bind(DMLStatementNode.java:140) at org.apache.derby.impl.sql.compile.CursorNode.bindStatement(CursorNode.java:249) at org.apache.derby.impl.sql.GenericStatement.prepMinion(GenericStatement.java:319) at org.apache.derby.impl.sql.GenericStatement.prepare(GenericStatement.java:88) at org.apache.derby.impl.sql.conn.GenericLanguageConnectionContext.prepareInternalStatement(GenericLanguageConnectionContext.java:824) at org.apache.derby.impl.jdbc.EmbedStatement.execute(EmbedStatement.java:606) ... 9 moreThe query is expected to fail (because the table name in t.* does not match any of the joined tables)  but not with a NullPointerException. A similar query with ON instead of USING fails more gracefully:ij&gt; select t.* from t t1 join t t2 on t1.a=t2.a;ERROR 42X10: 'T' is not an exposed table name in the scope in which it appears.",
            "id": "4414"
        },
        "4428": {
            "ground_truth": "0",
            "bug_report": "Add proper delete mechanism for in-memory databases\nThe current mechanism for deleting in-memory databases isn't good enough  and a proper one must be added.It is also important to be able to delete in-memory databases  since they occupy valuable main memory that should be discarded when the database is no longer needed.I intend to implement the mechanism by using the JDBC connection URL:'jdbc:derby:memory:myDatabase;delete=true&#91;;user=X;password=Y&#93;The connection attempt will throw an exception in any case  either because the request failed or because it succeeded.Reasons for a failure can be invalid user and/or password  lacking encryption attributes  or conflicting attributes.For the time being  only the database owner will be allowed to delete databases (note: do we have a way to control/limit in-memory database creation?)",
            "id": "4428"
        },
        "4432": {
            "ground_truth": "1",
            "bug_report": "Memory leak when attempting to boot non-existing database with the in-memory back end\nWhen attempting to boot a non-existing database with the in-memory back end  a DataStore is created and referenced by a map. Since the database doesn't exist  Derby won't use the DataStore again and it will hang around indefinitely in VFMemoryStorageFactory (or until the same database is actually created  in which case the data store will be used).FYI  storage factory instances are instantiated liberally  including for the same service (i.e. six instances of VFMemoryStorageFactory may be created to boot 'jdbc:derby:memory:myDB').",
            "id": "4432"
        },
        "4438": {
            "ground_truth": "0",
            "bug_report": "'Table/View 'T1' already exists in Schema 'APP'' in lang.DropTableTest on phoneME/cvm\nSee http://dbtg.foundry.sun.com/derby/test/Daily/javaME/testing/Limited/testSummary-833084.htmlhttp://dbtg.foundry.sun.com/derby/test/Daily/javaME/FailReports/833084_bySig.html same signature as DERBY-4392 : org.apache.derbyTesting.functionTests.tests.lang.DropTableTest &#91;org.apache.derbyTesting.functionTests.tests.lang.CheckConstraintTest&#93;: DERBY-4392 Closed - signature&#91;1&#93;Caused by test not cleaning up and phoneME/cvm executing tests in a different order than other jvms Introduced by r833055 / DERBY-4423.I am testing a fix.",
            "id": "4438"
        },
        "4442": {
            "ground_truth": "0",
            "bug_report": "Evaluation of default value and identity in an INSERT result set evaluated too early.\nIn contrast to generated column  which are evaluated when the next row from the result set to be inserted  currently default values and identity columns are generated 'early'  that is as part of avaluating the subquery (SELECT or VALUES as the case may be). This does not currently cause a user visible bug in Derby  but it lies behind DERBY-3 and the effect Bryan observed in DERBY-4.Additionally  'early' computation has given rise to much special handling and ensuing bugs  cf. DERBY-1644  DERBY-4413  DERBY-4419  DERBY-4425 and others.DERBY-4397 requires this fix for correct behaviour with INSERT.See alsohttps://issues.apache.org/jira/browse/DERBY-4413?focusedCommentId=12769532&amp;page=com.atlassian.jira.plugin.system.issuetabpanels%3Acomment-tabpanel#action_12769532",
            "id": "4442"
        },
        "4443": {
            "ground_truth": "0",
            "bug_report": "Wrap rollback in exception handlers in try-catch\nAvoid this pattern everywhere: }catch(SQLException se){ //issue a rollback on any errors conn.rollback(); throw se; }because an error in rollback will shadow the original exception.",
            "id": "4443"
        },
        "4455": {
            "ground_truth": "0",
            "bug_report": "Prepared statement failure with CLOB: Stream has already been read and end-of-file reached and cannot be re-used.\nPossibly related to #4332?We have encountered an error when using Prepared Statements and CLOBs. I have read:http://db.apache.org/derby/papers/JDBCImplementation.html#setAsciiStream%2CsetBinaryStream%2CsetCharacterStreamBut it does not seem applicable  as we are not re-using a stream.The environment is this:1. Java 62. Derby 10.5.3.03. Bitronix JTA 1.3.3We're actually using Hibernate  but I eliminated it from the equation (and the problem persists).A summary of the failure flow is this:1. Start a transaction2. Obtain a connection from a pool of connections (for this test  the pool size is pinned at 1)3. Prepare a statement that inserts a CLOB.4. Set the parameters5. Add the prepared statement to a batch (but we only batch 1 &#8211; this is to emulate what hibernate is doing as closely as possible).6. Execute the batch.Everything up to this point works.7. Repeat steps 1-6. But this time  the connection will be reused from the pool  and the statement will be gotten from a prepared statement cache (maintained by bitronix). I.e. the prepared statement is re-used.8. Observe the following failure:org.apache.derby.client.am.BatchUpdateException: Non-atomic batch failure. The batch was submitted  but at least one exception occurred on an individual member of the batch. Use getNextException() to retrieve the exceptions for specific batched elements. at org.apache.derby.client.am.Agent.endBatchedReadChain(Unknown Source) at org.apache.derby.client.am.PreparedStatement.executeBatchRequestX(Unknown Source) at org.apache.derby.client.am.PreparedStatement.executeBatchX(Unknown Source) at org.apache.derby.client.am.PreparedStatement.executeBatch(Unknown Source) at bitronix.tm.resource.jdbc.JdbcPreparedStatementHandle.executeBatch(JdbcPreparedStatementHandle.java:248) at org.dancernetworks.TestFailure.doInsert(TestFailure.java:134) at org.dancernetworks.TestFailure.doPrepared(TestFailure.java:110) at org.dancernetworks.TestFailure.main(TestFailure.java:55)Nov 30  2009 10:29:31 PM bitronix.tm.BitronixTransactionManager shutdownINFO: shutting down Bitronix Transaction ManagerAn IOException was thrown when reading a 'java.sql.String' from an InputStream.java.sql.SQLException: An IOException was thrown when reading a 'java.sql.String' from an InputStream. at org.apache.derby.impl.jdbc.SQLExceptionFactory40.getSQLException(Unknown Source) at org.apache.derby.impl.jdbc.Util.newEmbedSQLException(Unknown Source) at org.apache.derby.impl.jdbc.Util.seeNextException(Unknown Source) at org.apache.derby.impl.jdbc.TransactionResourceImpl.wrapInSQLException(Unknown Source) at org.apache.derby.impl.jdbc.EmbedResultSet.noStateChangeException(Unknown Source) at org.apache.derby.impl.jdbc.EmbedPreparedStatement.transferParameters(Unknown Source) at org.apache.derby.jdbc.XAStatementControl.getRealPreparedStatement(Unknown Source) at org.apache.derby.iapi.jdbc.BrokeredPreparedStatement.getPreparedStatement(Unknown Source) at org.apache.derby.iapi.jdbc.BrokeredPreparedStatement.getStatement(Unknown Source) at org.apache.derby.iapi.jdbc.BrokeredStatement.close(Unknown Source) at org.apache.derby.impl.drda.DRDAStatement.close(Unknown Source) at org.apache.derby.impl.drda.Database.close(Unknown Source) at org.apache.derby.impl.drda.Session.close(Unknown Source) at org.apache.derby.impl.drda.DRDAConnThread.closeSession(Unknown Source) at org.apache.derby.impl.drda.DRDAConnThread.run(Unknown Source)Caused by: java.sql.SQLException: An IOException was thrown when reading a 'java.sql.String' from an InputStream. at org.apache.derby.impl.jdbc.SQLExceptionFactory.getSQLException(Unknown Source) at org.apache.derby.impl.jdbc.SQLExceptionFactory40.wrapArgsForTransportAcrossDRDA(Unknown Source) ... 15 moreCaused by: java.sql.SQLException: Java exception: 'Stream has already been read and end-of-file reached and cannot be re-used.: java.io.EOFException'. at org.apache.derby.impl.jdbc.SQLExceptionFactory.getSQLException(Unknown Source) at org.apache.derby.impl.jdbc.SQLExceptionFactory40.wrapArgsForTransportAcrossDRDA(Unknown Source) at org.apache.derby.impl.jdbc.SQLExceptionFactory40.getSQLException(Unknown Source) at org.apache.derby.impl.jdbc.Util.newEmbedSQLException(Unknown Source) at org.apache.derby.impl.jdbc.Util.javaException(Unknown Source) at org.apache.derby.impl.jdbc.TransactionResourceImpl.wrapInSQLException(Unknown Source) ... 12 moreCaused by: java.io.EOFException: Stream has already been read and end-of-file reached and cannot be re-used. at org.apache.derby.iapi.types.ReaderToUTF8Stream.read(Unknown Source) at java.io.DataInputStream.readUnsignedShort(DataInputStream.java:320) at org.apache.derby.iapi.types.SQLChar.readExternal(Unknown Source) at org.apache.derby.iapi.types.SQLChar.getString(Unknown Source) at org.apache.derby.iapi.types.SQLChar.setFrom(Unknown Source) at org.apache.derby.iapi.types.DataType.setValue(Unknown Source) at org.apache.derby.impl.sql.GenericParameterValueSet.transferDataValues(Unknown Source) at org.apache.derby.impl.sql.execute.BaseActivation.setParameters(Unknown Source) at org.apache.derby.impl.sql.GenericActivationHolder.setParameters(Unknown Source) ... 10 moreAttached is an archived Eclipse project of a self-contained reproduction. It includes everything needed to run  including the Bitronix 1.3.3 jar.",
            "id": "4455"
        },
        "4470": {
            "ground_truth": "0",
            "bug_report": "Forbid ordering operations on UDTs\nKnut has provided an example of an ordering operation which succeeds on a UDT in his Dec. 11  2009 comment on DERBY-651.",
            "id": "4470"
        },
        "4476": {
            "ground_truth": "0",
            "bug_report": "Use helper methods from IdUtil instead of TupleDescriptor.quoteProtectName()\nTupleDescriptor.quoteProtectName() duplicates functionality provided by the o.a.d.iapi.util.IdUtil class. The method should be removed  and its callers should use IdUtil.normalToDelimited() or IdUtil.mkQualifiedName() instead.",
            "id": "4476"
        },
        "4477": {
            "ground_truth": "0",
            "bug_report": "Selecting / projecting a column whose value is represented by a stream more than once fails\nSelecting / projecting a column whose value is represented as a stream more than once crashes Derby  i.e.:ResultSet rs = stmt.executeQuery('SELECT clobValue AS clobOne  clobValue AS clobTwo FROM mytable');rs.getString(1);rs.getString(2);After having looked at the class of bugs having to do with reuse of stream data types  I now have a possible fix. It fixes DERBY-3645  DERBY-3646 and DERBY-2349 (there may be more Jiras).The core of the fix is cloning certain DVDs being selected/projected in multiple columns. There are two types of cloning: A) materializing clone B) stream clone(A) can be implemented already  (B) requires code to clone a stream without materializing it. Note that the streams I'm talking about are streams originating from the store.Testing revealed the following: the cost of the checks performed to figure out if cloning is required seems acceptable (negligible?) in some cases (A) has better performance than (B) because the raw data only has to be decoded once stream clones are preferred when the data value is above a certain size for several reasons: avoids potential out-of-memory errors (and in case of a server environment  it lowers the memory pressure) avoids decoding the whole value if the JDBC streaming APIs are used to access only parts of the value avoids decoding overall in cases where the value isn't accessed by the client / user (this statement conflicts with the performance observation above)We don't always know the size of a value  and since the fix code deals with all kinds of data types  it is slightly more costly to try to obtain the size.What do people think about the following goal statement?Goals:----- Phase 1 1) No crashes or wrong results due to stream reuse when executing duplicate column selections (minus goal 4) 2) Minimal performance degradation for non-duplicate column selections 3) Only a minor performance degradation for duplicate [&#91;LONG&#93; VAR]CHAR &#91;FOR BIT DATA&#93; column selections----- Phase 2 4) No out-of-memory exceptions during execution of duplicate column selections of BLOB/CLOB 5) Optimize BLOB/CLOB cloningI think phase 1 can proceed by reviewing and discussing the prototype patch. Phase 2 requires more discussion and work (see DERBY-3650).A note about the bug behavior facts:Since this issue is the underlying cause for several other reported issues  I have decided to be liberal when setting the bug behavior facts. Depending on where the duplicate column selection is used  it can cause both crashes  wrong results and data corruption.",
            "id": "4477"
        },
        "4478": {
            "ground_truth": "0",
            "bug_report": "Use AtomicLong for XactFactory.tranId\nDyre Tjeldvoll posted some results on DERBY-3092 that indicated that some types of load might cause contention on XactFactory.tranId (a shared long)  and suggested that it was replaced with a java.util.concurrent.atomic.AtomicLong on the platforms that support java.util.concurrent.*.I'm splitting this issue out from DERBY-3092 so that the two possible improvements reported there can be addressed independently.",
            "id": "4478"
        },
        "4484": {
            "ground_truth": "0",
            "bug_report": "Add import/export support for UDTs.\nImport/export should work on UDTs.",
            "id": "4484"
        },
        "4488": {
            "ground_truth": "1",
            "bug_report": "Nullpointer when performing INSERT INTO\nTo replicate  execute the following 4 queries:CREATE TABLE feed (fst INTEGER  snd VARCHAR(50)  UNIQUE(fst))INSERT INTO feed VALUES (1  'fst')CREATE TABLE tbl (col1 INTEGER  col2 INTEGER NOT NULL REFERENCES feed (fst) ON DELETE RESTRICT ON UPDATE RESTRICT)INSERT INTO tbl(col1) SELECT 1 FROM feedThe result of the last INSERT INTO query is:java.lang.NullPointerException at org.apache.derby.impl.store.access.btree.BTreeScan.initScanParams(Unknown Source) at org.apache.derby.impl.store.access.btree.BTreeScan.reopenScan(Unknown Source) at org.apache.derby.impl.sql.execute.TableScanResultSet.reopenScanController(Unknown Source) at org.apache.derby.impl.sql.execute.TableScanResultSet.reopenScanController(Unknown Source) at org.apache.derby.impl.sql.execute.TableScanResultSet.reopenCore(Unknown Source) at org.apache.derby.impl.sql.execute.BulkTableScanResultSet.reopenCore(Unknown Source) at org.apache.derby.impl.sql.execute.ProjectRestrictResultSet.reopenCore(Unknown Source) at org.apache.derby.impl.sql.execute.NormalizeResultSet.reopenCore(Unknown Source) at org.apache.derby.impl.sql.execute.InsertResultSet.open(Unknown Source) at org.apache.derby.impl.sql.GenericPreparedStatement.executeStmt(Unknown Source) at org.apache.derby.impl.sql.GenericPreparedStatement.execute(Unknown Source) at org.apache.derby.impl.jdbc.EmbedStatement.executeStatement(Unknown Source) at org.apache.derby.impl.jdbc.EmbedPreparedStatement.executeStatement(Unknown Source) at org.apache.derby.impl.jdbc.EmbedPreparedStatement.execute(Unknown Source)",
            "id": "4488"
        },
        "4496": {
            "ground_truth": "0",
            "bug_report": "Column list size mismatch with ORDER BY in INSERT statement\nI see this error on trunk (revision 894516):ij&gt; create table t(x varchar(100));0 rows inserted/updated/deletedij&gt; insert into t select * from (select * from sysibm.sysdummy1 order by length(ibmreqd)) t1;ERROR 42X32: The number of columns in the derived column list must match the number of columns in table 'T1'.The statement succeeds if I remove the ORDER BY clause:ij&gt; insert into t select * from (select * from sysibm.sysdummy1) t1;1 row inserted/updated/deleted",
            "id": "4496"
        },
        "4514": {
            "ground_truth": "0",
            "bug_report": "j2ME test failures relating to runtimeStatisticsParser\nAfter my change for DERBY-4038 to the runtimeStatisticsParser  the IBM tests show 44 errors and the Sun tests 48 - because I've used the String.split method which isn't available with j2ME.For example: 1) testDynamicLikeOptimization(org.apache.derbyTesting.functionTests.tests.lang.DynamicLikeOptimizationTest)java.lang.NoSuchMethodError: java/lang/String.split(Ljava/lang/String[Ljava/lang/String; at org.apache.derbyTesting.junit.RuntimeStatisticsParser.getStartPosition(RuntimeStatisticsParser.java:421) at org.apache.derbyTesting.junit.RuntimeStatisticsParser.&lt;init&gt;(RuntimeStatisticsParser.java:81) at org.apache.derbyTesting.junit.SQLUtilities.getRuntimeStatisticsParser(SQLUtilities.java:125) at org.apache.derbyTesting.functionTests.tests.lang.DynamicLikeOptimizationTest.testDynamicLikeOptimization(DynamicLikeOptimizationTest.java:547) at java.lang.reflect.AccessibleObject.invokeV(AccessibleObject.java:195) at org.apache.derbyTesting.junit.BaseTestCase.runBare(BaseTestCase.java:109) at junit.extensions.TestDecorator.basicRun(TestDecorator.java:22) at junit.extensions.TestSetup$1.protect(TestSetup.java:19) at junit.extensions.TestSetup.run(TestSetup.java:23) at org.apache.derbyTesting.junit.BaseTestSetup.run(BaseTestSetup.java:57)The runtimeStatisticsParser code needs to be adjusted.",
            "id": "4514"
        },
        "4515": {
            "ground_truth": "0",
            "bug_report": "Document and clarify the use of DataValueDescriptor.setValue(InputStream int)\nThe usage of the method DataValueDescriptor.setValue(InputStream stream  int length) is unclear. The intended use seems to be to pass on the known length of an input stream set from the JDBC-layer (i.e. setBinaryStream).There seems to be two distinct cases: the logical length of the stream is known the logical length of the stream is not knownUsing -1 when the length is not known seems to be an established pattern.",
            "id": "4515"
        },
        "4520": {
            "ground_truth": "0",
            "bug_report": "Refactor and extend data type cloning facilities\nWith the increased use of streams to represent data values  the cloning facilities needs to be improved.Unless I get pushback  I will proceed by producing patches to reach the following goals: move the functionality provided by CloneableObject into DataValueDescriptor (all classes implementing CloneableObject also implements DataValueDescriptor) introduce the cloning methods cloneValue  cloneState and cloneHolder (all in DataValueDescriptor  see description below) Note that they all return a usable DVD. I'm all ears for better names for the clone methods (another suggestion mentioned is cloneDeep  cloneHalfDeep  and cloneShallow).NOTE: See comment below  the method names changed during the course of development.cloneValue &lt;deep&gt; (new method  functionality was present through combined calls to the DVD public interface)  a DVD obtained through cloneValue is independent of other DVDs and the state of the Derby store the data value will be materializedcloneState &lt;halfDeep&gt; (~= DataValueDescriptor.getClone) a DVD obtained through cloneState is independent of other DVDs  but may depend on the state of the Derby store (due to references to store streams) the data value will be materialized if the value is represented by a non-cloneable stream or if Derby believes materializing the value is more appropriate than keeping the stream representationcloneHolder &lt;shallow&gt; (~= CloneableObject.cloneObject) a DVD obtained through cloneHolder is dependent on the original DVD and its clones made through cloneHolder. If one of the DVDs changes its state  all of them will be affected. Will also be dependent on the state of the Derby store if there are references to store streams. the data value will never be materialized due to cloneHolder being invokedFor many of the data types  cloneState and cloneHolder will forward to cloneValue.cloneState will be used the most. cloneValue is currently only required in the sorter. cloneHolder is required (for performance reasons and maybe to avoid OOME) when DVDs pass through temporary holders (BackingStoreHashtable  TemporaryRowHolderImpl). I have not gone through all the usages of cloneState to see if any of them can be  or has to be  replaced with another clone-call.The ability to clone store streams will be added by Mike's patch attached to DERBY-3650. New method names:It turned out that using only two methods was sufficient:cloneHolder &lt;shallow&gt; (as above)cloneValue(boolean forceMaterialization) &lt;halfDeep or deep&gt;Basically  cloneValue(false) equals cloneState() above  and cloneValue(true) equals cloneValue() above.",
            "id": "4520"
        },
        "4538": {
            "ground_truth": "0",
            "bug_report": "If the CREATE TRIGGER does not have the REFERENCING clause  then there is no need to keep before and after values for the triggering table\nIn order for the trigger action to have access to before and after values of the triggering table  the CREATE TRIGGER should use the REFERENCING clause. Without the REFERENCING clause  old and new values of triggering table can't be accessed by the trigger action. Based on this  we can improve Derby memory utilization by not keeping old and new values if REFERENCING clause is missing. It will be good to see if the code already does this optimization and if not  then introducing this optimization will definitely be very useful when the triggering table could have LOB columns.",
            "id": "4538"
        },
        "4539": {
            "ground_truth": "0",
            "bug_report": "Make it possible to put the optional clauses of a CREATE SEQUENCE statement in the arbitrary order allowed by the SQL Standard\nThe current syntax for CREATE SEQUENCE requires that the optional clauses appear in a fixed order. The SQL Standard is more flexible here.",
            "id": "4539"
        },
        "4542": {
            "ground_truth": "0",
            "bug_report": "Avoid materialization where possible when cloning CollatorSQLClob\nCloning a CollatorSQLClob results in always materializing the value. Since CLOBs can be very large  this should be avoided. There should now be sufficient functionality to do this  see SQLClob.",
            "id": "4542"
        },
        "4545": {
            "ground_truth": "0",
            "bug_report": "test_11_tableFunctionColumns fails with weme (J2ME) with 'java.lang.NoClassDefFoundError: java.sql.DriverManager'\nStarting Friday Feb 3  testing svn 907159  IBM weme 6.2 fails as follows.http://people.apache.org/~myrnavl/derby_test_results/main/windows/testlog/weme6.2/907159-suites.All_diff.txtIt would appear that either the test needs to be disabled for J2ME or DriverManager use needs to be removed from the test.1) test_11_tableFunctionColumns(org.apache.derbyTesting.functionTests.tests.lang.UDTTest)java.sql.SQLException: The exception 'java.lang.NoClassDefFoundError: java.sql.DriverManager' was thrown while evaluating an expression. at org.apache.derby.impl.jdbc.SQLExceptionFactory.getSQLException(Unknown Source) at org.apache.derby.impl.jdbc.Util.newEmbedSQLException(Unknown Source) at org.apache.derby.impl.jdbc.Util.seeNextException(Unknown Source) at org.apache.derby.impl.jdbc.TransactionResourceImpl.wrapInSQLException(Unknown Source) at org.apache.derby.impl.jdbc.TransactionResourceImpl.handleException(Unknown Source) at org.apache.derby.impl.jdbc.EmbedConnection.handleException(Unknown Source) at org.apache.derby.impl.jdbc.ConnectionChild.handleException(Unknown Source) at org.apache.derby.impl.jdbc.EmbedStatement.executeStatement(Unknown Source) at org.apache.derby.impl.jdbc.EmbedPreparedStatement.executeStatement(Unknown Source) at org.apache.derby.impl.jdbc.EmbedPreparedStatement.executeQuery(Unknown Source) at org.apache.derbyTesting.functionTests.tests.lang.GeneratedColumnsHelper.assertResults(GeneratedColumnsHelper.java:335) at org.apache.derbyTesting.functionTests.tests.lang.UDTTest.test_11_tableFunctionColumns(UDTTest.java:814) at java.lang.reflect.AccessibleObject.invokeV(AccessibleObject.java:195) at org.apache.derbyTesting.junit.BaseTestCase.runBare(BaseTestCase.java:109) at junit.extensions.TestDecorator.basicRun(TestDecorator.java:22) at junit.extensions.TestSetup$1.protect(TestSetup.java:19) at junit.extensions.TestSetup.run(TestSetup.java:23) at org.apache.derbyTesting.junit.BaseTestSetup.run(BaseTestSetup.java:57) at junit.extensions.TestDecorator.basicRun(TestDecorator.java:22) at junit.extensions.TestSetup$1.protect(TestSetup.java:19) at junit.extensions.TestSetup.run(TestSetup.java:23) at org.apache.derbyTesting.junit.BaseTestSetup.run(BaseTestSetup.java:57)Caused by: java.sql.SQLException: Java exception: 'java.sql.DriverManager: java.lang.NoClassDefFoundError'. at org.apache.derby.impl.jdbc.SQLExceptionFactory.getSQLException(Unknown Source) at org.apache.derby.impl.jdbc.Util.newEmbedSQLException(Unknown Source) at org.apache.derby.impl.jdbc.Util.javaException(Unknown Source) at org.apache.derby.impl.jdbc.TransactionResourceImpl.wrapInSQLException(Unknown Source) ... 41 moreCaused by: java.lang.NoClassDefFoundError: java.sql.DriverManager at org.apache.derbyTesting.functionTests.tests.lang.UDTTest.hashmapReader(UDTTest.java:854) at org.apache.derby.exe.ac8b55d5f4x0126xa337xbefex00001d5b55d51.g0(Unknown Source) at java.lang.reflect.AccessibleObject.invokeL(AccessibleObject.java:203) at org.apache.derby.impl.services.reflect.ReflectMethod.invoke(Unknown Source) at org.apache.derby.impl.sql.execute.VTIResultSet.openCore(Unknown Source) at org.apache.derby.impl.sql.execute.BasicNoPutResultSetImpl.open(Unknown Source) at org.apache.derby.impl.sql.GenericPreparedStatement.executeStmt(Unknown Source) at org.apache.derby.impl.sql.GenericPreparedStatement.execute(Unknown Source) ... 37 more",
            "id": "4545"
        },
        "4548": {
            "ground_truth": "0",
            "bug_report": "would like an alternative location for ant.properties\nThe current build.xml directs ant to look for a file ant.properties in user.home. This can get confusing when you have multiple versions on the same machine.I've worked around this in the past by pointing ant at other directories with -Duser.home=...  but it would be easier to have another place set up - I don't really like changing user.home.We could add another line to build.xml  e.g.  for trunk's current build.xml:@@ -20 6 +20 7 @@ &lt;!-- Set Properties --&gt; &lt;!-- User settings --&gt;+ &lt;property file='ant.properties'/&gt; &lt;property file='${user.home}/ant.properties'/&gt; &lt;!-- Set property lib dir --&gt; &lt;property name='properties.dir' value='tools/ant/properties'/&gt;This would make ant look first for ant.properties in the same directory as the top level build.xml  and secondly for the one in user.home.If the community agrees this would be ok  I'd like to make this change and backport it all the way to 10.0.By having an additional place we'd not cause incompatibilities to other build processes (except if someone has put an ant.properties file in the top of the checked out tree).If we do this  I think it's up to the developers to ensure that there's not 2 ant.properties files that are conflicting.",
            "id": "4548"
        },
        "4549": {
            "ground_truth": "1",
            "bug_report": "NPE in JBitSet\nA NPE occurs at org.apache.derby.iapi.util.JBitSet.or().A NPE occured at the same location before: http://issues.apache.org/jira/browse/DERBY-1574The bug was confirmed by Bryan Pendleton to show in the HEAD as well: http://mail-archives.apache.org/mod_mbox/db-derby-user/201002.mbox/%3C4B79F74E.1000005@amberpoint.com%3ETo reproduce:----------------------CREATE TABLE ABC (ID int PRIMARY KEY NOT NULL);CREATE TABLE DEF (ID int PRIMARY KEY NOT NULL);SELECT * FROM ABC t1WHERE (SELECT DISTINCT t2.ID FROM DEF t2)  IN (SELECT t3.ID FROM DEF t3) ----------------------Leads to error message: Error: DERBY SQL error: SQLCODE: -1  SQLSTATE: XJ001  SQLERRMC: java.lang.NullPointerExceptionXJ001.USQLState: XJ001ErrorCode: -1Stacktrace:java.lang.NullPointerException at org.apache.derby.iapi.util.JBitSet.or(Unknown Source) at org.apache.derby.impl.sql.compile.OptimizerImpl.&lt;init&gt;(Unknown Source) at org.apache.derby.impl.sql.compile.Level2OptimizerImpl.&lt;init&gt;(Unknown Source) at org.apache.derby.impl.sql.compile.Level2OptimizerFactoryImpl.getOptimizerImpl(Unknown Source) at org.apache.derby.impl.sql.compile.OptimizerFactoryImpl.getOptimizer(Unknown Source) at org.apache.derby.impl.sql.compile.ResultSetNode.getOptimizer(Unknown Source) at org.apache.derby.impl.sql.compile.SelectNode.optimize(Unknown Source) at org.apache.derby.impl.sql.compile.SubqueryNode.optimize(Unknown Source) at org.apache.derby.impl.sql.compile.SubqueryList.optimize(Unknown Source) at org.apache.derby.impl.sql.compile.SelectNode.optimize(Unknown Source) at org.apache.derby.impl.sql.compile.DMLStatementNode.optimizeStatement(Unknown Source) at org.apache.derby.impl.sql.compile.CursorNode.optimizeStatement(Unknown Source) at org.apache.derby.impl.sql.GenericStatement.prepMinion(Unknown Source) at org.apache.derby.impl.sql.GenericStatement.prepare(Unknown Source) at org.apache.derby.impl.sql.conn.GenericLanguageConnectionContext.prepareInternalStatement(Unknown Source) at org.apache.derby.impl.jdbc.EmbedPreparedStatement.&lt;init&gt;(Unknown Source) at org.apache.derby.impl.jdbc.EmbedPreparedStatement20.&lt;init&gt;(Unknown Source) at org.apache.derby.impl.jdbc.EmbedPreparedStatement30.&lt;init&gt;(Unknown Source) at org.apache.derby.impl.jdbc.EmbedPreparedStatement40.&lt;init&gt;(Unknown Source) at org.apache.derby.jdbc.Driver40.newEmbedPreparedStatement(Unknown Source) at org.apache.derby.impl.jdbc.EmbedConnection.prepareStatement(Unknown Source) at org.apache.derby.impl.jdbc.EmbedConnection.prepareStatement(Unknown Source) at org.apache.derby.impl.drda.DRDAStatement.prepare(Unknown Source) at org.apache.derby.impl.drda.DRDAStatement.explicitPrepare(Unknown Source) at org.apache.derby.impl.drda.DRDAConnThread.parsePRPSQLSTT(Unknown Source) at org.apache.derby.impl.drda.DRDAConnThread.processCommands(Unknown Source) at org.apache.derby.impl.drda.DRDAConnThread.run(Unknown Source)Cleanup action completed",
            "id": "4549"
        },
        "4551": {
            "ground_truth": "1",
            "bug_report": "Allow database user to execute stored procedures with same permissions as database owner and/or routine definer\nCurretnly there is no way to hide data and database structure in embedded derby from the end user. One way to accomplish the above requirement is as follows:1. Create encrypted database so data is protected2. Enable authentication and sql authorization in database3. Create two users  dbUser and dbOwner4. Store application logic as stored procedure in the databse so dbUser does not know what tables are accecced by the application logic  thus hiding table structure5. Revoke select permission from dbUser so he cannot describe tables thus protecting table structures6. Give only Execute permissions on stored procedures to dbUserThe above steps will ensure that data and data structure is hidden when application is delivered to end user.The problem is  if user does not have select permission  the stored procedures will not execute. So I am requesting the following enhancement to Derby:If dbOwner has given Execure permission to stored procecure to a dbUser  then allow stored procedure to execute even if the dbUser has no select permission. In otherwords  When dbUser calls stored procedure  database will use dbOwners authorization to execute stored procedure rather than dbUsers. This may be implemented by creating new permission called RunAsDbOwner.DbOwner can then grant permission to dbUser to execute a stored procedure with RunAsDbOwner.If this is implemented  applications can be created which will truely hide the database structure and data from end users. Database will behave as a blackbox with only in/out data exposed in stored procedures.",
            "id": "4551"
        },
        "4554": {
            "ground_truth": "0",
            "bug_report": "Remove lang/scrollCursors1.sql\nlang/scrollCursors1.sql was converted to JUnit in DERBY-2542. The canons were removed  but the original sql test file is still in the code. The sql file should also be removed.",
            "id": "4554"
        },
        "4562": {
            "ground_truth": "0",
            "bug_report": "Complation of prepared statement results in Syntax Error\nIn attempting to upgrade our product from Derby 10.3.1.4 to 10.5.3.0  I simply replaced the derby jars - no change to java environment or code. I now experience a Syntax Error when preparing a statement that previously worked correctly.This statement:SELECT Offset  CMFragmentOID  CMContentOID  FragmentLength  Fragment FROM CMFragment  WHERE CMContentOID = ? AND Offset BETWEEN  (SELECT Offset FROM CMFragment WHERE CMContentOID = ? AND Offset &lt;= ? AND Offset + FragmentLength &gt; ?)  AND (SELECT Offset FROM CMFragment WHERE CMContentOID = ? AND Offset &lt; ? AND Offset + FragmentLength &gt;= ?) ORDER BY Offset ASCWhich should evaluate to the following after the parameters are provided:SELECT Offset  CMFragmentOID  CMContentOID  FragmentLength  Fragment FROM CMFragment  WHERE CMContentOID = -6915303484809802281 AND Offset BETWEEN  (SELECT Offset FROM CMFragment WHERE CMContentOID = -6915303484809802281 AND Offset &lt;= 0 AND Offset + FragmentLength &gt; 0)  AND (SELECT Offset FROM CMFragment WHERE CMContentOID = -6915303484809802281 AND Offset &lt; 131072 AND Offset + FragmentLength &gt;= 131072) ORDER BY Offset ASCFails with:Caused by: java.sql.SQLSyntaxErrorException: Syntax error: Encountered 'Offset' at line 1  column 202. at org.apache.derby.impl.jdbc.SQLExceptionFactory40.getSQLException(Unknown Source) at org.apache.derby.impl.jdbc.Util.generateCsSQLException(Unknown Source) at org.apache.derby.impl.jdbc.TransactionResourceImpl.wrapInSQLException(Unknown Source) at org.apache.derby.impl.jdbc.TransactionResourceImpl.handleException(Unknown Source) at org.apache.derby.impl.jdbc.EmbedConnection.handleException(Unknown Source) at org.apache.derby.impl.jdbc.ConnectionChild.handleException(Unknown Source) at org.apache.derby.impl.jdbc.EmbedPreparedStatement.&lt;init&gt;(Unknown Source) at org.apache.derby.impl.jdbc.EmbedPreparedStatement20.&lt;init&gt;(Unknown Source) at org.apache.derby.impl.jdbc.EmbedPreparedStatement30.&lt;init&gt;(Unknown Source) at org.apache.derby.impl.jdbc.EmbedPreparedStatement40.&lt;init&gt;(Unknown Source) at org.apache.derby.jdbc.Driver40.newEmbedPreparedStatement(Unknown Source) at org.apache.derby.impl.jdbc.EmbedConnection.prepareStatement(Unknown Source) at org.apache.derby.impl.jdbc.EmbedConnection.prepareStatement(Unknown Source) at com.paisley.foundation.sql.decorator.BaseConnectionDecorator.prepareStatement(BaseConnectionDecorator.java:349) at com.paisley.foundation.sql.decorator.batchvalidator.BatchValidatorConnection.prepareStatement(BatchValidatorConnection.java:152) at com.paisley.foundation.sql.decorator.BaseConnectionDecorator.prepareStatement(BaseConnectionDecorator.java:349) at com.paisley.foundation.database.connection.DatabaseConnection.prepareStatement(DatabaseConnection.java:960) at com.paisley.foundation.persistent.sql.PersistentQuery.execute(PersistentQuery.java:236) at com.paisley.rnj.content.model.CMFragment.load(CMFragment.java:254) ... 25 moreCaused by: java.sql.SQLException: Syntax error: Encountered 'Offset' at line 1  column 202. at org.apache.derby.impl.jdbc.SQLExceptionFactory.getSQLException(Unknown Source) at org.apache.derby.impl.jdbc.SQLExceptionFactory40.wrapArgsForTransportAcrossDRDA(Unknown Source) ... 44 moreCaused by: ERROR 42X01: Syntax error: Encountered 'Offset' at line 1  column 202. at org.apache.derby.iapi.error.StandardException.newException(Unknown Source) at org.apache.derby.impl.sql.compile.ParserImpl.parseStatement(Unknown Source) at org.apache.derby.impl.sql.GenericStatement.prepMinion(Unknown Source) at org.apache.derby.impl.sql.GenericStatement.prepare(Unknown Source) at org.apache.derby.impl.sql.conn.GenericLanguageConnectionContext.prepareInternalStatement(Unknown Source) ... 38 moreThe failure position indicated is in this clause: AND Offset + FragmentLength &gt; ?This statement does work correctly in 10.3.1.4. It also works as a direct SQL statement  if I don't use a prepared statement  but execute the SQL above.",
            "id": "4562"
        },
        "4569": {
            "ground_truth": "0",
            "bug_report": "failures in ij2 test with cdc/foundation (ibm's weme 6.2)\nThe test ij2.sql from derbyall is failing for weme6.2 like so:     Start: ij2 jdkWECE J2ME Foundation Specification v1.1 derbyall:derbytools 2010-02-25 04:11:05 ***31 del&lt; IJ ERROR: Unable to establish prepared statement S31a31&gt; IJ ERROR: Unable to establish prepared statement S@CONNECTION0Test Failed. End: ij2 jdkWECE J2ME Foundation Specification v1.1 derbyall:derbytools 2010-02-25 04:11:15 ***    I think this is expected after the change: ------------------------------------------------------------------------r916014 | rhillegas | 2010-02-24 14:39:49 -0800 (Wed  24 Feb 2010) | 1 lineDERBY-4550: Commit Sylvain Leroux's patch which adds qualified identifiers to ij.------------------------------------------------------------------------Looks like all that's needed is an update of java/testing/org/apache/derbyTesting/functionTests/master/j9_foundation/ij2.out.",
            "id": "4569"
        },
        "4580": {
            "ground_truth": "0",
            "bug_report": "Cannot use dblook on soft-upgraded database: Table/View 'SYS.SYSSEQUENCES' does not exist.\nI tried to use dblook on trunk to dump the schema of a database created with Derby 10.5. dblook printed the following message:&#8211; Timestamp: 2010-03-12 15:45:50.836&#8211; Source database is: db&#8211; Connection URL is: jdbc:derby:db&#8211; appendLogs: false&#8211; Note: At least one unexpected error/warning message was&#8211; encountered during DDL generation. See dblook.log&#8211; to review the message(s).In dblook.log  I saw an exception with this message:java.sql.SQLSyntaxErrorException: Table/View 'SYS.SYSSEQUENCES' does not exist.",
            "id": "4580"
        },
        "4589": {
            "ground_truth": "0",
            "bug_report": "Corrupted database prevents startup and should be automatically repaired perhaps\nI have found a database in my application that prevents startup due to it being corrupted. The driver reports that the database does not exist  even though it does. Then when my app tries to create the database using ;create=true; on the URL it fails.I think this happened due to the app being killed in Task Manager while it was creating the database.I have the database saved so that you can reproduce the problem. (I'm not sure if I can attach it yet)",
            "id": "4589"
        },
        "4602": {
            "ground_truth": "1",
            "bug_report": "10 failures and 11 errors with IBM weme6.2/j9/cdc-foundation after revision 922304 for DERBY-4483\nSince March 12 there's been 10 failures and 11 errors in the nightly test run with IBM's j2ME/CDC-foundation profile implementation  see: http://people.apache.org/~myrnavl/derby_test_results/main/windows/testSummary-922467.html. Things were ok on March 10  see: http://people.apache.org/~myrnavl/derby_test_results/main/windows/testSummary-921667.html.I believe these were the effect of the following checkin for DERBY-4483:r922304 | kahatlen | 2010-03-12 08:01:20 -0800 (Fri  12 Mar 2010) | 8 linesDERBY-4483: Provide a way to change the hash algorithm used by BUILTIN authenticationI'll attach the full failure stacks in a separate file  but I believe perhaps new tests have been added that need to be excluded from the run  because the provider doesn't support the intended mechanism.I'd also be interested to know if these same failures occur with Sun's/Oracle's phoneME.This is the top of the first error:-------------------1) testVariousBuiltinAlgorithms(org.apache.derbyTesting.functionTests.tests.jdbcapi.AuthenticationTest)java.sql.SQLException: The message digest algorithm 'SHA-256' is not supported by any of the available cryptography providers. Please install a cryptography provider that supports that algorithm  or specify another algorithm in the derby.authentication.builtin.algorithm property. at org.apache.derby.impl.jdbc.SQLExceptionFactory.getSQLException(Unknown Source) at org.apache.derby.impl.jdbc.Util.newEmbedSQLException(Unknown Source) at org.apache.derby.impl.jdbc.Util.seeNextException(Unknown Source) at org.apache.derby.impl.jdbc.TransactionResourceImpl.wrapInSQLException(Unknown Source) at org.apache.derby.impl.jdbc.TransactionResourceImpl.handleException(Unknown Source) at org.apache.derby.impl.jdbc.EmbedConnection.handleException(Unknown Source) at org.apache.derby.impl.jdbc.ConnectionChild.handleException(Unknown Source) at org.apache.derby.impl.jdbc.EmbedStatement.executeStatement(Unknown Source) at org.apache.derby.impl.jdbc.EmbedPreparedStatement.executeStatement(Unknown Source) at org.apache.derby.impl.jdbc.EmbedCallableStatement.executeStatement(Unknown Source) at org.apache.derby.impl.jdbc.EmbedPreparedStatement.execute(Unknown Source) at org.apache.derbyTesting.functionTests.tests.jdbcapi.AuthenticationTest.setDatabaseProperty(AuthenticationTest.java:1208) at org.apache.derbyTesting.functionTests.tests.jdbcapi.AuthenticationTest.setDatabaseProperty(AuthenticationTest.java:1218) at org.apache.derbyTesting.functionTests.tests.jdbcapi.AuthenticationTest.testVariousBuiltinAlgorithms(AuthenticationTest.java:1118)------------------The failures are likely a result of this - the stack shows issues like no cleaning up of databases etc.",
            "id": "4602"
        },
        "4603": {
            "ground_truth": "0",
            "bug_report": "test testBuiltinAuthenticationWithConfigurableHash fails from upgradeTests.Changes10_6 with ibm's j9\nWith the patch for DERBY-4602 I saw one error with IBM's weme 6.2:1) testBuiltinAuthenticationWithConfigurableHash(org.apache.derbyTesting.functionTests.tests.upgradeTests.Changes10_6)java.sql.SQLException: The message digest algorithm 'SHA-256' is not supported by any of the available cryptography providers. Please install a cryptography provider that supports that algorithm  or specify another algorithm in the derby.authentication.builtin.algorithm property. at org.apache.derby.impl.jdbc.SQLExceptionFactory.getSQLException(SQLExceptionFactory.java:45) at org.apache.derby.impl.jdbc.Util.newEmbedSQLException(Util.java:142) at org.apache.derby.impl.jdbc.Util.seeNextException(Util.java:278) at org.apache.derby.impl.jdbc.TransactionResourceImpl.wrapInSQLException(TransactionResourceImpl.java:398) at org.apache.derby.impl.jdbc.TransactionResourceImpl.handleException(TransactionResourceImpl.java:346) at org.apache.derby.impl.jdbc.EmbedConnection.handleException(EmbedConnection.java:2269) at org.apache.derby.impl.jdbc.ConnectionChild.handleException(ConnectionChild.java:81) at org.apache.derby.impl.jdbc.EmbedStatement.executeStatement(EmbedStatement.java:1321) at org.apache.derby.impl.jdbc.EmbedPreparedStatement.executeStatement(EmbedPreparedStatement.java:1673) at org.apache.derby.impl.jdbc.EmbedCallableStatement.executeStatement(EmbedCallableStatement.java:117) at org.apache.derby.impl.jdbc.EmbedPreparedStatement.execute(EmbedPreparedStatement.java:1328) at org.apache.derbyTesting.functionTests.tests.upgradeTests.Changes10_6.setPasswords(Changes10_6.java:442) at org.apache.derbyTesting.functionTests.tests.upgradeTests.Changes10_6.testBuiltinAuthenticationWithConfigurableHash(Changes10_6.java:384) at java.lang.reflect.AccessibleObject.invokeV(AccessibleObject.java:195) at org.apache.derbyTesting.junit.BaseTestCase.runBare(BaseTestCase.java:109) at junit.extensions.TestDecorator.basicRun(TestDecorator.java:22) at junit.extensions.TestSetup$1.protect(TestSetup.java:19) at junit.extensions.TestSetup.run(TestSetup.java:23) at junit.extensions.TestDecorator.basicRun(TestDecorator.java:22) at junit.extensions.TestSetup$1.protect(TestSetup.java:19) at junit.extensions.TestSetup.run(TestSetup.java:23) at junit.extensions.TestDecorator.basicRun(TestDecorator.java:22) at junit.extensions.TestSetup$1.protect(TestSetup.java:19) at junit.extensions.TestSetup.run(TestSetup.java:23) at org.apache.derbyTesting.junit.BaseTestSetup.run(BaseTestSetup.java:57) at junit.extensions.TestDecorator.basicRun(TestDecorator.java:22) at junit.extensions.TestSetup$1.protect(TestSetup.java:19) at junit.extensions.TestSetup.run(TestSetup.java:23) at org.apache.derbyTesting.junit.BaseTestSetup.run(BaseTestSetup.java:57) at junit.extensions.TestDecorator.basicRun(TestDecorator.java:22) at junit.extensions.TestSetup$1.protect(TestSetup.java:19) at junit.extensions.TestSetup.run(TestSetup.java:23) at junit.extensions.TestDecorator.basicRun(TestDecorator.java:22) at junit.extensions.TestSetup$1.protect(TestSetup.java:19) at junit.extensions.TestSetup.run(TestSetup.java:23) at org.apache.derbyTesting.junit.BaseTestSetup.run(BaseTestSetup.java:57) at junit.extensions.TestDecorator.basicRun(TestDecorator.java:22) at junit.extensions.TestSetup$1.protect(TestSetup.java:19) at junit.extensions.TestSetup.run(TestSetup.java:23) at junit.extensions.TestDecorator.basicRun(TestDecorator.java:22) at junit.extensions.TestSetup$1.protect(TestSetup.java:19) at junit.extensions.TestSetup.run(TestSetup.java:23) at org.apache.derbyTesting.junit.BaseTestSetup.run(BaseTestSetup.java:57) at junit.extensions.TestDecorator.basicRun(TestDecorator.java:22) at junit.extensions.TestSetup$1.protect(TestSetup.java:19) at junit.extensions.TestSetup.run(TestSetup.java:23) at junit.extensions.TestDecorator.basicRun(TestDecorator.java:22) at junit.extensions.TestSetup$1.protect(TestSetup.java:19) at junit.extensions.TestSetup.run(TestSetup.java:23) at org.apache.derbyTesting.junit.BaseTestSetup.run(BaseTestSetup.java:57) at junit.extensions.TestDecorator.basicRun(TestDecorator.java:22) at junit.extensions.TestSetup$1.protect(TestSetup.java:19) at junit.extensions.TestSetup.run(TestSetup.java:23) at junit.extensions.TestDecorator.basicRun(TestDecorator.java:22) at junit.extensions.TestSetup$1.protect(TestSetup.java:19) at junit.extensions.TestSetup.run(TestSetup.java:23) at org.apache.derbyTesting.junit.BaseTestSetup.run(BaseTestSetup.java:57) at junit.extensions.TestDecorator.basicRun(TestDecorator.java:22) at junit.extensions.TestSetup$1.protect(TestSetup.java:19) at junit.extensions.TestSetup.run(TestSetup.java:23) at junit.extensions.TestDecorator.basicRun(TestDecorator.java:22) at junit.extensions.TestSetup$1.protect(TestSetup.java:19) at junit.extensions.TestSetup.run(TestSetup.java:23) at org.apache.derbyTesting.junit.BaseTestSetup.run(BaseTestSetup.java:57) at junit.extensions.TestDecorator.basicRun(TestDecorator.java:22) at junit.extensions.TestSetup$1.protect(TestSetup.java:19) at junit.extensions.TestSetup.run(TestSetup.java:23) at junit.extensions.TestDecorator.basicRun(TestDecorator.java:22) at junit.extensions.TestSetup$1.protect(TestSetup.java:19) at junit.extensions.TestSetup.run(TestSetup.java:23) at junit.extensions.TestDecorator.basicRun(TestDecorator.java:22) at junit.extensions.TestSetup$1.protect(TestSetup.java:19) at junit.extensions.TestSetup.run(TestSetup.java:23)Caused by: java.sql.SQLException: Java exception: 'SHA-256: java.security.NoSuchAlgorithmException'. at org.apache.derby.impl.jdbc.SQLExceptionFactory.getSQLException(SQLExceptionFactory.java:45) at org.apache.derby.impl.jdbc.Util.newEmbedSQLException(Util.java:142) at org.apache.derby.impl.jdbc.Util.javaException(Util.java:299) at org.apache.derby.impl.jdbc.TransactionResourceImpl.wrapInSQLException(TransactionResourceImpl.java:403) ... 111 moreCaused by: java.security.NoSuchAlgorithmException: SHA-256 at java.lang.Throwable.&lt;init&gt;(Throwable.java:67) at java.security.MessageDigest.getInstance(MessageDigest.java:204) at org.apache.derby.impl.jdbc.authentication.AuthenticationServiceBase.encryptPasswordConfigurableScheme(AuthenticationServiceBase.java:549) at org.apache.derby.impl.jdbc.authentication.AuthenticationServiceBase.encryptUsingDefaultAlgorithm(AuthenticationServiceBase.java:615) at org.apache.derby.impl.jdbc.authentication.AuthenticationServiceBase.map(AuthenticationServiceBase.java:411) at org.apache.derby.iapi.services.property.PropertyValidation.doValidateApplyAndMap(PropertyValidation.java:81) at org.apache.derby.impl.store.access.PropertyConglomerate.validateApplyAndMap(PropertyConglomerate.java:384) at org.apache.derby.impl.store.access.PropertyConglomerate.setProperty(PropertyConglomerate.java:513) at org.apache.derby.impl.store.access.RAMTransaction.setProperty(RAMTransaction.java:1795) at org.apache.derby.iapi.db.PropertyInfo.setDatabaseProperty(PropertyInfo.java:108) at org.apache.derby.catalog.SystemProcedures.SYSCS_SET_DATABASE_PROPERTY(SystemProcedures.java:686) at org.apache.derby.exe.ac75629305x0127xb63ax3d55xfffff5235db30.g0(Unknown Source) at java.lang.reflect.AccessibleObject.invokeV(AccessibleObject.java:195) at org.apache.derby.impl.services.reflect.ReflectMethod.invoke(ReflectMethod.java:46) at org.apache.derby.impl.sql.execute.CallStatementResultSet.open(CallStatementResultSet.java:75) at org.apache.derby.impl.sql.GenericPreparedStatement.executeStmt(GenericPreparedStatement.java:436) at org.apache.derby.impl.sql.GenericPreparedStatement.execute(GenericPreparedStatement.java:317) at org.apache.derby.impl.jdbc.EmbedStatement.executeStatement(EmbedStatement.java:1232)",
            "id": "4603"
        },
        "4619": {
            "ground_truth": "0",
            "bug_report": "PropertySetter fails due to an empty jre/lib directory\nIf a JDK directory with an empty jre/lib directory is chosen by the old algorithm for detecting JDKs on the build system  the build fails because the classpath is set to the empty string instead of the default (stubs and the higher level JDK classpath).The situation causing this problem can arise if a JDK with extension libs is uninstalled. Depending on the packaging system  this may leave the jre/lib/ext directory behind.",
            "id": "4619"
        },
        "4621": {
            "ground_truth": "0",
            "bug_report": "Invalid conversion from Timestamp to String when calling setTimestamp() with Calendar\nIf you set a VARCHAR parameter with setTimestamp()  the string will be formatted differently depending on whether a Calendar is specified or not  even if the default calendar is used.Take for example this statement: VALUES CAST(? AS VARCHAR(30))I executed this statement twice with the same Timestamp instance. First like this: ps.setTimestamp(1  ts);and then like this ps.setTimestamp(1  ts  Calendar.getInstance());In this example  both of the methods should use the default Calendar to convert the timestamp to a string. However  I see that they generate different strings:2010-04-20 15:17:36.0 vs 2010-04-20 03:17:36Note there are two differences:1) The method that takes a Calendar object does not show the fraction part (.0)2) The method that takes a Calendar object is 12 hours off (03 instead of 15)",
            "id": "4621"
        },
        "4624": {
            "ground_truth": "0",
            "bug_report": "Broken logic for avoiding testing across midnight in TimestampArithTest\nTimestampArithTest's decorator has this code to avoid failures in case the test starts close to midnight: /* Make sure that we are not so close to midnight that TODAY might be yesterday before we are finished using it. */ while (calendar.get(Calendar.HOUR) == 23 &amp;&amp; calendar.get(Calendar.MINUTE) &gt;= 58) Unknown macro: { try { Thread.sleep((60 - calendar.get(Calendar.SECOND)) * 1000); } catch (InterruptedException ie) { // ignore it } } There are at least three problems with this code:1) (calendar.get(Calendar.HOUR) == 23) never evaluates to true  because calendar.get(Calendar.HOUR) returns values in the range 0-11. Calendar.HOUR_OF_DAY should be used instead.2) If the current time is after 23:58 and before 23:59  the code sleeps until 23:59  the test will wait until 23:59 before it starts  making it even more likely that it will cross midnight while running.3) The code is executed after the Calendar object has been initialized  so if this code is ever triggered and waits until after midnight  the TODAY field is guaranteed to be yesterday when the test starts executing.",
            "id": "4624"
        },
        "4638": {
            "ground_truth": "0",
            "bug_report": "Expose names of top-level test suites for easier scripting\nI sometimes run each of the top-level JUnit test suites individually so that they can be run in parallel and complete faster. It would be useful if AllPackages could expose the list of suites to allow scripting of such tasks without needing to change the script when a new suite is added.",
            "id": "4638"
        },
        "4647": {
            "ground_truth": "0",
            "bug_report": "BaseTestCase.execJavaCmd() does not work with weme 6.2\nSpawning a java process with BaseTestCase.execJavaCmd() does not work with weme 6.2  I think because the boot classpath does not get passed. This issue came up in DERBY-4179. After this issue is fixed  BootLockTest should be enabled for weme.The error is actually.JVMJ9VM011W Unable to load jclfoun10_24: The specified module could not be found.JVMEXEX013E Internal VM error: Failed to create Java VMJVMEXEX014I Run C:/cygwin/ibmsvn/ntsoftware/weme6.2/bin/j9.exe -help for usageexecJavaProcess does pick up the j9 executable but does not pass on the other settings.This is how my script invokes the test with j9. It probably has a lot of legacy system properties not needed  but I suppose execJavaCmd should just pass along all system properties  but I don't know how it would get the bootclasspath. Perhaps -Dbootcp was a way to pass it on in the old harness.c:/cygwin/ibmsvn/ntsoftware/weme6.2/bin/j9 -jcl:foun11 -DderbyTesting.serverhost=localhost -DderbyTesting.clienthost=localhost -Demma.active= -Xbootclasspath/a:c:/cygwin/ibmsvn/ntsoftware/weme6.2/lib/jdbc.jar -Dbootcp=c:/cygwin/ibmsvn/ntsoftware/weme6.2/lib/jdbc.jar junit.textui.TestRunner org.apache.derbyTesting.functionTests.tests.store.BootLockTest Otherwise  currently I think the method is only used in replication and network server  but am not sure.",
            "id": "4647"
        },
        "4651": {
            "ground_truth": "0",
            "bug_report": "Hidden assumptions in FromVTI.makeRestriction()\nFromVTI.makeRestriction() has this code to strip away Boolean constants from AND and OR expressions: // strip off trailing vacuous constant if present if ( andOperator.getRightOperand() instanceof BooleanConstantNode ) { return makeRestriction( andOperator.getLeftOperand()  columnNameMap ); }and // strip off trailing vacuous constant if present if ( orOperator.getRightOperand() instanceof BooleanConstantNode ) { return makeRestriction( orOperator.getLeftOperand()  columnNameMap ); }The code for AND will only work as expected if the right operand is TRUE. The code for OR only works correctly if the right operand is FALSE.I'm not sure if this can ever result in user-visible bugs  since Boolean constants are usually removed before we get to this point in the code. The predicate has probably been transformed to conjunctive normal form  in which Boolean constants in the right operand of an AndNode or an OrNode in fact is always TRUE or FALSE  respectively.I think this code either should be changed to work regardless of the value of the constant in the right operand  or the assumption that the predicate is on conjunctive normal form should be documented in the comments (and perhaps also checked in an assert statement).",
            "id": "4651"
        },
        "4661": {
            "ground_truth": "0",
            "bug_report": "Reduce size of encoding buffer for short character values\nWhen inserting character values Derby converts from Java char to an on-disk encoding of UTF-8. To to this  the user stream is read and the resulting bytes after conversion are placed in a 'translation buffer'. The default size of the buffer is 32 KB. When inserting a lot of short values  the pressure on the Java garbage collector is unnecessary high and the allocation/GC also causes a somewhat higher CPU usage.This effect of this issue can easily be reduced by sizing the buffer in the appropriate cases.",
            "id": "4661"
        },
        "4663": {
            "ground_truth": "0",
            "bug_report": "Write a regression test to verify the behavior of ResultSet.getBoolean()\nThe JDBC spec partially defines the expected behavior of ResultSet.getBoolean(). It would be good to have a regression test which tracks Derby's actual implementation. For the moment  it appears that Derby conforms to the defined behavior  does something reasonable in the undefined cases  and behaves the same way in the embedded and client drivers.The behavior of ResultSet.getBoolean() does not appear to have been defined until JDBC 4. Here is the JDBC 4 javadoc:'If the designated column has a datatype of CHAR or VARCHAR and contains a '0' or has a datatype of BIT  TINYINT  SMALLINT  INTEGER or BIGINT and contains a 0  a value of false is returned. If the designated column has a datatype of CHAR or VARCHAR and contains a '1' or has a datatype of BIT  TINYINT  SMALLINT  INTEGER or BIGINT and contains a 1  a value of true is returned.' The behavior for those datatypes is not specified if the actual value is not 0 or 1. However  in a private communication I have the following statement of intent from Lance Andersen  the JDBC spec lead:'Note: Please refer to your driver documentation for the return value when the designated column contains a values other than '0'  0  '1' or 1.'In addition  the behavior for other datatypes is not specified. Some day it might be good if Derby's documentation described our behavior in the unspecified cases. Here it is:1) ResultSet.getBoolean() on LONG VARCHAR behaves like CHAR and VARCHAR2) ResultSet.getBoolean() on DECIMAL  REAL  DOUBLE  and NUMERIC behaves like INTEGER.3) Derby raises an exception if you call ResultSet.getBoolean() on BLOB  CHAR FOR BIT DATA  CLOB  DATE  LONG VARCHAR FOR BIT DATA  TIME  TIMESTAMP  or VARCHAR FOR BIT DATA.4) You can't even directly select an XML value.",
            "id": "4663"
        },
        "4665": {
            "ground_truth": "0",
            "bug_report": "Unidiomatic error handling in TimestampArithTest\nTimestampArithTest contains some error handling code that prevents the underlying error from being reported to the JUnit framework  and it may even terminate the JVM running the tests on some errors. Examples:This code prints the stack trace of the underlying error to the terminal  but it won't be included in the report from the JUnit framework: printStackTrace(sqle); fail('Unexpected exception from statement '' + sql + ''');This code terminates the JVM on error  preventing subsequent tests from running  and also preventing the JUnit framework to report the results from the tests that did run: } catch (Exception e) { System.out.println(s + ' is not a proper timestamp string.'); System.out.println(e.getClass().getName() + ': ' + e.getMessage()); e.printStackTrace(); System.exit(1); return null; }",
            "id": "4665"
        },
        "4685": {
            "ground_truth": "0",
            "bug_report": "Dead/unreachable code in OpenConglomerate.lockPositionForWrite()\nOpenConglomerate.lockPositionForWrite() contains this code twice: if (!waitForLock) { // throw lock timeout error. throw StandardException.newException(SQLState.LOCK_TIMEOUT); }The second occurrence of this code can never end up throwing an exception  since waitForLock is guaranteed to be true there because of the identical check a couple of lines above. (Judging by the similar method lockPositionForRead()  it is probably the first check that should be removed  so that the latch on the page is released before the exception is thrown.)Also  the method is always called with forInsert==false  so the forInsert parameter can be removed. (I also suspect that the method doesn't work correctly if ever used in an insert operation  since it calls latchPage(RowPosition) which will unlatch the page if the row isn't found on the page  and I assume that a row that is about to be inserted does not exist yet.)",
            "id": "4685"
        },
        "4690": {
            "ground_truth": "0",
            "bug_report": "Too few arguments when generating AM_RECORD_NOT_FOUND error\nThe message for AM_RECORD_NOT_FOUND has three parameters  but all the methods that generate an exception with that message  only use two of them. So the generated message ends up looking like this:ERROR XSAM6: Record {2} on page 7 in container 625 not found.whereas it should have looked like this:ERROR XSAM6: Record 7 on page 1 in container 625 not found.I don't know if these messages ever make it all the way up to the application  since they are typically caught by this code block in TableScanResultSet: if (se.getMessageId().equals(SQLState.AM_RECORD_NOT_FOUND)) { // Somehow the row got deleted between the above // doesCurrentPositionQualify() call and here (one way is if // this scan is read uncommitted isolation level). return null; }But they may be logged in derby.log if the log severity level is set appropriately.",
            "id": "4690"
        },
        "4692": {
            "ground_truth": "0",
            "bug_report": "Unions between BOOLEAN and non-BOOLEAN datatypes should be rejected\nDERBY-4684 fixed problems in implicit casts to BOOLEAN. However  the query which created the implicit casts should raise an error for other reasons:select isindex from sys.sysconglomerates where conglomeratename = 'foo'unionvalues ( 'true' )This should fail because if either of the datatypes being UNIONed is BOOLEAN  then both should be BOOLEAN. Here is my reasoning  copied from the related discussion on DERBY:1) The rules for determining whether two datatypes are union compatible are stated in the SQL Standard in part 2  section 7.3 (&lt;query expression&gt;)  syntax rule 20.b.ii.2) That  in turn  refers the reader to section 9.3 (Result of data type combinations).3) Section 9.3  syntax rule 3.g says that if either of two values to be merged is BOOLEAN  then both must be BOOLEAN.",
            "id": "4692"
        },
        "4693": {
            "ground_truth": "0",
            "bug_report": "column rename looses 'identity' attribute.\nrenaming an identity column causes the column to loose its 'identity' attribute.you can reproduce the problem as follows:CREATE TABLE njr_version ( id INTEGER generated always as identity  databaseVersion INTEGER);insert into njr_version (databaseVersion) values (10);&#8211; column inserted successfully.rename column njr_version.id to idVersion;insert into njr_version (databaseVersion) values (10);Error: Column 'IDVERSION' cannot accept a NULL value.To compound this problem there is no way to restore the renamed column's identity attribute as the alter command doesn't let you set an identity attribute. The only work around is to create a new table and copy the data across.",
            "id": "4693"
        },
        "4695": {
            "ground_truth": "0",
            "bug_report": "Internal assignment of tablenumer  columnnumber looks wrong in query tree  although no ill effects are seen.\nWhile looking into derby-4679  I also looked at the query inderby-2526 to validate that my changes also worked for that variant ofthe problem.During inspection of the query trees after the bind phase  I found oneinstance in which the pair (tablenumber  columnnumber) of a columnreference was wrong. Although it did not seem to impact the queryresult  I note it here as as something we should probably investiateas it may be a symptom an underlying problem  or a potential forfuture problems.The query looks like this:select b3.* from b3 join bvw on (b3.c8 = bvw.c5) join b4 on (bvw.c1 = b4.c7) where b4.c4 = 42'and the underlying DDL is this:create table b2 (c1 int  c2 int  c3 char(1)  c4 int  c5 int  c6 int);create table b4 (c7 int  c4 int  c6 int);create table b3 (c8 int  c9 int  c5 int  c6 int);create table b (c1 int  c2 int  c3 char(1)  c4 int  c5 int  c6 int);create view bvw (c5  c1  c2  c3  c4) asselect c5  c1  c2  c3  c4 from b2 unionselect c5  c1  c2  c3  c4 from b;create view bvw2 (c1  c2  c3  c4  c5) asAfter the bind phase  the join clause 'bvw.c1 = b4.c7' has thefollowing entry for the column reference bvw.C1: tableNumber: 1 columnNumber: 6The problem is that the node with tablenumber 1 is bvw  which is theview with the subquery for the union  which has only 5 resultingcolumns  so 6 must be wrong. Although both the view participant tables(b  b2) both have six column  the view does not. In any case  C1 iscolumn 2 in the view and column 2 in the two union selects from both band b2.C1 is however  column 6 of the join node resulting from 'select b3.*from b3 join bvw on (b3.c8 = bvw.c5)'  but the correct table number forthat would be 5  not 1.So  it would seem the table number has been bound to the bvw view'sresult set  but the column number has been bound to the innermost joinnode's result set. This looks worrying to me.See derby.log attached for the full dump of the query tree after thebind phase.sourceResultSet:  org.apache.derby.impl.sql.compile.FromSubquery@12789d2 correlation Name: BVW null tableNumber 1 &lt;------------------------------------------- Note! level 0 resultSetNumber: 0 referencedTableMap: null statementResultSet: false resultColumns:  org.apache.derby.impl.sql.compile.ResultColumnList@c943d1 indexRow: false orderBySelect: 0 &#91;0&#93;:  org.apache.derby.impl.sql.compile.ResultColumn@d3c6a3 **truncated** &#91;1&#93;:  org.apache.derby.impl.sql.compile.ResultColumn@18352d8 exposedName: C1 name: C1 tableName: null isDefaultColumn: false wasDefaultColumn: false isNameGenerated: false sourceTableName: B2 type: INTEGER columnDescriptor: null isGenerated: false isGeneratedForUnmatchedColumnInInsert: false isGroupingColumn: false isReferenced: true isRedundant: false virtualColumnId: 2 resultSetNumber: -1 dataTypeServices: INTEGER expression:  org.apache.derby.impl.sql.compile.VirtualColumnNode@b40ec4 dataTypeServices: null sourceColumn:  org.apache.derby.impl.sql.compile.ResultColumn@1d95da8 **truncated** sourceResultSet:  org.apache.derby.impl.sql.compile.UnionNode@14d7745 **truncated** &#91;2&#93;:  org.apache.derby.impl.sql.compile.ResultColumn@13576a2 exposedName: C2 name: C2 tableName: null isDefaultColumn: false wasDefaultColumn: false isNameGenerated: false sourceTableName: B2 type: INTEGER columnDescriptor: null isGenerated: false isGeneratedForUnmatchedColumnInInsert: false isGroupingColumn: false isReferenced: true isRedundant: false virtualColumnId: 3 resultSetNumber: -1 dataTypeServices: INTEGER expression:  org.apache.derby.impl.sql.compile.VirtualColumnNode@ff8c74 dataTypeServices: null sourceColumn:  org.apache.derby.impl.sql.compile.ResultColumn@61736e **truncated** sourceResultSet:  org.apache.derby.impl.sql.compile.UnionNode@14d7745 **truncated** &#91;3&#93;:  org.apache.derby.impl.sql.compile.ResultColumn@15e2ccd exposedName: C3 name: C3 tableName: null isDefaultColumn: false wasDefaultColumn: false isNameGenerated: false sourceTableName: B2 type: CHAR(1) columnDescriptor: null isGenerated: false isGeneratedForUnmatchedColumnInInsert: false isGroupingColumn: false isReferenced: true isRedundant: false virtualColumnId: 4 resultSetNumber: -1 dataTypeServices: CHAR(1) expression:  org.apache.derby.impl.sql.compile.VirtualColumnNode@1cf7491 dataTypeServices: null sourceColumn:  org.apache.derby.impl.sql.compile.ResultColumn@11946c2 **truncated** sourceResultSet:  org.apache.derby.impl.sql.compile.UnionNode@14d7745 **truncated** &#91;4&#93;: &lt;----------------------------------------- highest column number is 5 (index is zero-based) org.apache.derby.impl.sql.compile.ResultColumn@edf730 exposedName: C4 name: C4 tableName: null isDefaultColumn: false wasDefaultColumn: false isNameGenerated: false sourceTableName: B2 type: INTEGER columnDescriptor: null isGenerated: false isGeneratedForUnmatchedColumnInInsert: false isGroupingColumn: false isReferenced: true isRedundant: false virtualColumnId: 5 resultSetNumber: -1 dataTypeServices: INTEGER expression:  org.apache.derby.impl.sql.compile.VirtualColumnNode@ff94b1 dataTypeServices: null sourceColumn:  org.apache.derby.impl.sql.compile.ResultColumn@17a4989 **truncated** sourceResultSet:  org.apache.derby.impl.sql.compile.UnionNode@14d7745 **truncated** subquery:  org.apache.derby.impl.sql.compile.UnionNode@14d7745 **truncated**",
            "id": "4695"
        },
        "4700": {
            "ground_truth": "0",
            "bug_report": "Add method to obtain a bogus port in TestConfiguration\nIn some cases one needs to obtain a port number on which there is no Derby network server.Today this is solved in an ad-hoc way  for instance by using the current port minus one. When running tests in parallel  there is a chance that a port where there actually is a Derby network server listening is picked.As a start  I suggest that the bogus port is allocated to the last port in the port range configured for the run: baseport + MAX_PORTS_USED -1.",
            "id": "4700"
        },
        "4712": {
            "ground_truth": "1",
            "bug_report": "Complex nested joins problems\nI ran a randomized test for nested joins against PostgreSQL  Derby  and H2  and found some problems with Derby. The queries below throw NullPointerExceptions; the last query an assertion. The test case is here: http://code.google.com/p/h2database/source/browse/trunk/h2/src/test/org/h2/test/db/TestNestedJoins.java . There are probably shorter queries that are problematic  but I can't test it because Derby closes the connection after the assertion.create table t0(x int);create table t1(x int);create table t2(x int);create table t3(x int);create table t4(x int);insert into t4 values(0);insert into t4 values(1);insert into t4 values(2);insert into t4 values(3);create table t5(x int);insert into t5 values(0);insert into t5 values(1);insert into t5 values(2);insert into t5 values(3);insert into t5 values(4);create table t6(x int);insert into t6 values(0);insert into t6 values(1);insert into t6 values(2);insert into t6 values(3);insert into t6 values(4);insert into t6 values(5);create table t7(x int);insert into t7 values(0);insert into t7 values(1);insert into t7 values(2);insert into t7 values(3);insert into t7 values(4);insert into t7 values(5);insert into t7 values(6);create table t8(x int);insert into t8 values(0);insert into t8 values(1);insert into t8 values(2);insert into t8 values(3);insert into t8 values(4);insert into t8 values(5);insert into t8 values(6);insert into t8 values(7);create table t9(x int);insert into t9 values(0);insert into t9 values(1);insert into t9 values(2);insert into t9 values(3);insert into t9 values(4);insert into t9 values(5);insert into t9 values(6);insert into t9 values(7);insert into t9 values(8);insert into t0 values(1);insert into t1 values(2);insert into t0 values(3);insert into t1 values(3);insert into t2 values(4);insert into t0 values(5);insert into t2 values(5);insert into t1 values(6);insert into t2 values(6);insert into t0 values(7);insert into t1 values(7);insert into t2 values(7);insert into t3 values(8);insert into t0 values(9);insert into t3 values(9);insert into t1 values(10);insert into t3 values(10);insert into t0 values(11);insert into t1 values(11);insert into t3 values(11);insert into t2 values(12);insert into t3 values(12);insert into t0 values(13);insert into t2 values(13);insert into t3 values(13);insert into t1 values(14);insert into t2 values(14);insert into t3 values(14);insert into t0 values(15);insert into t1 values(15);insert into t2 values(15);insert into t3 values(15);select t0.x   t1.x   t2.x   t3.x   t4.x   t5.x   t6.x   t7.x   t8.x from (((t0 inner join ((t1 right outer join (t2 inner join t3 on t2.x = t3.x ) on t1.x = t2.x ) left outer join (t4 inner join t5 on t4.x = t5.x ) on t1.x = t4.x ) on t0.x = t2.x ) left outer join (t6 inner join t7 on t6.x = t7.x ) on t1.x = t6.x ) inner join t8 on t5.x = t8.x );select t0.x   t1.x   t2.x   t3.x   t4.x   t5.x   t6.x   t7.x from ((t0 right outer join t1 on t0.x = t1.x ) inner join (((t2 inner join (t3 left outer join t4 on t3.x = t4.x ) on t2.x = t3.x ) right outer join t5 on t2.x = t5.x ) left outer join (t6 inner join t7 on t6.x = t7.x ) on t4.x = t6.x ) on t0.x = t5.x );select t0.x   t1.x   t2.x   t3.x   t4.x   t5.x   t6.x   t7.x from ((((t0 left outer join t1 on t0.x = t1.x ) right outer join t2 on t0.x = t2.x ) right outer join t3 on t0.x = t3.x ) inner join ((t4 inner join t5 on t4.x = t5.x ) right outer join (t6 right outer join t7 on t6.x = t7.x ) on t4.x = t6.x ) on t1.x = t4.x );select t0.x   t1.x   t2.x   t3.x   t4.x   t5.x from (((t0 inner join t1 on t0.x = t1.x ) right outer join (t2 right outer join t3 on t2.x = t3.x ) on t0.x = t2.x ) inner join (t4 left outer join t5 on t4.x = t5.x ) on t1.x = t4.x );select t0.x   t1.x   t2.x   t3.x   t4.x   t5.x   t6.x from ((t0 right outer join (t1 right outer join (t2 left outer join (t3 left outer join t4 on t3.x = t4.x ) on t2.x = t3.x ) on t1.x = t3.x ) on t0.x = t1.x ) left outer join (t5 inner join t6 on t5.x = t6.x ) on t2.x = t5.x );",
            "id": "4712"
        },
        "4716": {
            "ground_truth": "0",
            "bug_report": "Enable BOOLEAN typed columns\nAllow tables to have boolean columns.",
            "id": "4716"
        },
        "4729": {
            "ground_truth": "0",
            "bug_report": "add more information to the XACT_PROTOCOL_VIOLATION returned from store.\nImprove the following message:ERROR 40XT0: An internal error was identified by RawStore module.At least add the state variables. Originally it wasn't expected that this error would ever fire  but it often does. It usuallyis caused by some previous bug and then something going wrong with the cleanup after the bug in an XA transaction.",
            "id": "4729"
        },
        "4748": {
            "ground_truth": "1",
            "bug_report": "StringIndexOutOfBoundsException on syntax error (invalid COMMIT)\nStart the network server on port 1527 on localhost.Run ant on the following:&lt;project default='all'&gt;  &lt;property environment='env' /&gt;  &lt;path id='derby.classpath.id'&gt;  &lt;fileset dir='${env.DERBY_LIB'&gt;  &lt;include name='derbynet.jar' /&gt;  &lt;include name='derbyclient.jar' /&gt;  &lt;/fileset&gt;  &lt;/path&gt;  &lt;target name='all'&gt;  &lt;sql driver='org.apache.derby.jdbc.ClientDriver' url='jdbc:derby://localhost:1527/derbyDB;create=true;user=derbyuser;passsword=derbypwd'  userid='derbyuser'  password='derbypwd'  classpathref='derby.classpath.id'  onerror='continue'&gt;create table mytable1 (mycol varchar(255)); commit;  &lt;/sql&gt;  &lt;/target&gt; &lt;/project&gt; On 10.5.3  I get &#91;sql&#93; Executing commands  &#91;sql&#93; Failed to execute: commit  &#91;sql&#93; java.sql.SQLSyntaxErrorException: Syntax error: Encountered 'commit'  at line 1  column 1.  &#91;sql&#93; 1 of 2 SQL statements executed successfully but on 10.6.1  I get &#91;sql&#93; Executing commands BUILD FAILED java.lang.StringIndexOutOfBoundsException: String index out of range: 6  at java.lang.String.charAt(String.java:686)  at org.apache.derby.client.am.Statement.isolateAnyInitialIdentifier(Unknown Source)  at org.apache.derby.client.am.Statement.getStatementToken(Unknown Source)  at org.apache.derby.client.am.Statement.parseSqlAndSetSqlModes(Unknown Source) ....",
            "id": "4748"
        },
        "4752": {
            "ground_truth": "0",
            "bug_report": "CheapDateFormatter returns incorrect and invalid date strings\nCheapDateFormatter has multiple problems. These are the ones I'm aware of:1) On the boundary between non-leap years and leap years it will return first day of thirteenth month in previous year (for instance  2011-13-01 instead of 2012-01-01)2) It treats all years divisible by four as leap years. Those divisible by 100 and not by 400 are not leap years. It attempts to adjust for that (see the snippet below) but it always ends up setting leapYear=true if (year%4)==0. // It's a leap year if divisible by 4  unless divisible by 100  // unless divisible by 400. if ((year % 4L) == 0) { if ((year % 100L) == 0) { if ((year % 400L) == 0) { leapYear = true; } } leapYear = true; }3) More leap year trouble. To find out which year it is  it calculates the number of four year periods that have elapsed since 1970-01-01. A four year period is considered 365*3+366 days. Although most four year periods are of that length  some are shorter  so we'll get one day off starting from year 2100  two days off from year 2200  and so on.",
            "id": "4752"
        },
        "4755": {
            "ground_truth": "0",
            "bug_report": "DERBY-4601 added a new message to derby.log during engine shutdown and it changed the database shutdown message. Need to update docs with that information\nDERBY-4601 added a new message to derby.log during engine shutdown and it changed the database shutdown message. Need to update docs with that information. I have found 2 places in our docs where we show examples of shutdown messages1)In Getting started Guide  under Creating a Derby database and running SQL statements section  we show a typical startup and shutdown message. That section will need to change2)In Derby Developer's Guide  under section Derby System -&gt; Shutting down the systemAn eg of engine shutdown message in derby.log is2010-07-23 18:59:24.078 GMT Thread&#91;main 5 main&#93; :Shutting down Derby EngineAn eg of database shutdown message is as follows2010-07-20 17:23:55.171 GMT:Shutting down instance 80220011-0129-f0e1-f479-0000000c5ef0 on database directory C:/p4clients/svnmain/client2/trunk/systest/out142/dbs/tours3 with class loader sun.misc.Launcher$AppClassLoader@3f6e3f6e (Notice that this message includes the name of the db getting shutdown. Before the changes for DERBY-4601 went in  we didn't include the name of the database)",
            "id": "4755"
        },
        "4760": {
            "ground_truth": "0",
            "bug_report": "test failure in derbynet/testProtocol.java with ibm jvms\nOn Friday  I saw this failure:     Start: testProtocol jdk1.6.0 DerbyNetClient derbynetmats:derbynetmats 2010-07-31 00:18:53 ***308 add&gt; Test UNICODEMGR at level 1208 while sending UTF8 characters in RDBNAM&gt; PASSED&gt; Test UNICODEMGR at level 1208 while sending UTF8 characters in USRID and PASSWORD&gt; PASSED&gt; Test setting RDBNAM at ACCSEC *and* at SECCHK&gt; PASSEDTest Failed.    I assume it's related to the check-in for DERBY-4746 (revision 980800).",
            "id": "4760"
        },
        "4764": {
            "ground_truth": "1",
            "bug_report": "Files with missing ASF license headers\nThere are some files (consisting of creative works) without license headers in the repository. Some files are also using a different text for the Apache License header then the other files.I plan to add the license header after having verified that the files were uploaded to Jira with the grant license to ASF bullet ticked.The list of files I have identified so far  grouped based on the assumed action required.&#8212; Add license headerjava/testing/org/apache/derbyTesting/functionTests/tests/memory/TriggerTests.javajava/engine/org/apache/derby/impl/sql/catalog/XPLAINStatementDescriptor.javajava/engine/org/apache/derby/impl/sql/catalog/XPLAINScanPropsDescriptor.javajava/engine/org/apache/derby/impl/sql/catalog/XPLAINResultSetDescriptor.javajava/engine/org/apache/derby/impl/sql/catalog/XPLAINStatementTimingsDescriptor.javajava/engine/org/apache/derby/impl/sql/catalog/XPLAINSortPropsDescriptor.javajava/engine/org/apache/derby/impl/sql/catalog/XPLAINResultSetTimingsDescriptor.javajava/engine/org/apache/derby/impl/sql/catalog/XPLAINTableDescriptor.javajava/engine/org/apache/derby/impl/sql/execute/xplain/XPLAINSystemTableVisitor.javajava/engine/org/apache/derby/impl/sql/execute/xplain/XPLAINDefaultVisitor.javajava/engine/org/apache/derby/impl/sql/execute/xplain/XPLAINFactory.javajava/engine/org/apache/derby/impl/sql/execute/xplain/XPLAINUtil.javajava/engine/org/apache/derby/iapi/sql/execute/xplain/XPLAINFactoryIF.javajava/engine/org/apache/derby/iapi/sql/execute/xplain/XPLAINable.javajava/engine/org/apache/derby/iapi/sql/execute/xplain/XPLAINVisitor.javajava/tools/org/apache/derby/tools/PlanExporter.javajava/tools/org/apache/derby/impl/tools/planexporter/TreeNode.javajava/tools/org/apache/derby/impl/tools/planexporter/AccessDatabase.javajava/tools/org/apache/derby/impl/tools/planexporter/CreateHTMLFile.javajava/tools/org/apache/derby/impl/tools/planexporter/CreateXMLFile.java&#8212; Update license headerjava/engine/org/apache/derby/impl/services/jmxnone/NoManagementService.javajava/engine/org/apache/derby/impl/services/jmx/JMXManagementService.javajava/engine/org/apache/derby/iapi/services/jmx/ManagementService.java&#8212; Consider adding headerjava/shared/org/apache/derby/shared/common/sanity/SanityState.javajava/shared/org/apache/derby/shared/common/sanity/SanityState.tmpljava/tools/org/apache/derby/impl/tools/planexporter/resources/advancedViewXSL.xsljava/tools/org/apache/derby/impl/tools/planexporter/resources/vanilla_html.xsljava/tools/org/apache/derby/impl/tools/planexporter/resources/advancedViewXSL2.xslThe SanityState classes seem to come from somewhere. Does anyone have the history? Can we add the ASF license header?The xsl files also look like creative works to me. Any objections on that?",
            "id": "4764"
        },
        "4779": {
            "ground_truth": "1",
            "bug_report": "NPE while inserting into a table which has a generated column and an insert trigger\nThe following script generates an NPE on the concluding insert:connect 'jdbc:derby:memory:dummy;create=true';create function getRegion( v int )returns varchar( 20 )language java parameter style java deterministic no sqlexternal name 'java.lang.Integer.toString';create table orders( orderID bigint primary key  salesPrice int not null  region generated always as ( getRegion( salesPrice ) ));create table dummy( a int );create trigger newOrderTriggerafter insert on ordersfor each rowinsert into dummy( a ) values ( 1 );insert into orders( orderID  salesPrice ) values ( 1  2 );------------------------Here is the NPE:java.lang.NullPointerException at org.apache.derby.impl.sql.execute.DMLWriteResultSet.objectifyStreams(Unknown Source) at org.apache.derby.impl.sql.execute.DMLWriteResultSet.getNextRowCore(Unknown Source) at org.apache.derby.impl.sql.execute.InsertResultSet.open(Unknown Source) at org.apache.derby.impl.sql.GenericPreparedStatement.executeStmt(Unknown Source) at org.apache.derby.impl.sql.GenericPreparedStatement.execute(Unknown Source) at org.apache.derby.impl.jdbc.EmbedStatement.executeStatement(Unknown Source) at org.apache.derby.impl.jdbc.EmbedStatement.execute(Unknown Source) at org.apache.derby.impl.jdbc.EmbedStatement.execute(Unknown Source) at org.apache.derby.impl.tools.ij.ij.executeImmediate(Unknown Source) at org.apache.derby.impl.tools.ij.utilMain.doCatch(Unknown Source) at org.apache.derby.impl.tools.ij.utilMain.runScriptGuts(Unknown Source) at org.apache.derby.impl.tools.ij.utilMain.go(Unknown Source) at org.apache.derby.impl.tools.ij.Main.go(Unknown Source) at org.apache.derby.impl.tools.ij.Main.mainCore(Unknown Source) at org.apache.derby.impl.tools.ij.Main.main(Unknown Source) at org.apache.derby.tools.ij.main(Unknown Source)",
            "id": "4779"
        },
        "4796": {
            "ground_truth": "0",
            "bug_report": "Missing escape for apostrophes in many messages\nThe properties file format requires that single-quote characters are escaped with an extra single-quote. A number of messages don't follow this rule.Take this example from the Italian localization:42X34=Esiste un parametro ? nell'elenco di selezione. Ci/u00F2 non /u00E8 consentito.Note that there's only a single apostrophe in 'nell'elenco' above. When this message is printed  the apostrophe will be omitted:$ LC_ALL=it_IT.UTF-8 java -jar derbyrun.jar ijVersione ij 10.6ij&gt; connect 'jdbc:derby:db;create=true';ij&gt; select ? from sys.systables;ERRORE 42X34: Esiste un parametro ? nellelenco di selezione. Ci non  consentito.We should go through the message files and add extra apostrophes where they are missing.",
            "id": "4796"
        },
        "4803": {
            "ground_truth": "0",
            "bug_report": "Sequences do not work in INSERT/SELECT\nUsing sequence in SELECT works fine whereas the same SELECT query used in INSERT/SELECT results in 'The statement references the following sequence more than once' error. This happens even though the SELECT in question returns exactly 1 row of data.The Reference Manual states 1. ' NEXT VALUE FOR expression may occur in the following places: SELECT statement: As part of the expression defining a returned column in a SELECT list' and 2. ' NEXT VALUE expression may not appear in any of these situations: CASE expression  WHERE clause  ORDER BY clause  Aggregate expression  ROW_NUMBER function  DISTINCT select list'.Nowhere a restriction on INSERT/SELECT is mentioned. Additionally  other databases (i.e. Oracle) support use of sequences in INSERT/SELECT.Therefore  I consider it a bug.",
            "id": "4803"
        },
        "4810": {
            "ground_truth": "0",
            "bug_report": "setTimestamp() methods don't agree on trailing zeros\nWith the statement VALUES CAST(? AS VARCHAR(29))PreparedStatement.setTimestamp(int Timestamp) and PreparedStatement.setTimestamp(int Timestamp Calendar) don't agree on what to do with trailing zeros in the nanosecond component. The method that doesn't take a Calendar argument  removes trailing zeros. The method that takes a Calendar object appends zeros so that the nanosecond component always has nine digits. (Both methods have a special case when nanoseconds is zero  and they agree on adding just a single zero after the decimal point in that case.)The format used by PreparedStatement.setTimestamp(int Timestamp) matches what java.sql.Timestamp.toString() returns (in fact  it uses Timestamp.toString() internally to produce the string representation)  and I think it would be reasonable to use that format for both the methods.",
            "id": "4810"
        },
        "4812": {
            "ground_truth": "0",
            "bug_report": "ReplicationMessageTransmit run does not unwrap PrivilegedActionException which can lead to failure of replicationTests.ReplicationRun_Local_StateTest_part1_1\nOne of our nightly tests failed with the exception (db path slightly edited) below.Looking at the source of org.apache.derby.impl.store.replication.net.ReplicationMessageTransmit.run  it seems that the code does not completely unwrap the PrivilegedActionException (compared to how this is done in for example org.apache.derbyTesting.functionTests.util.PrivilegedFileOpsForTests.getFileInputStream()).It could be that the test is looking for the java.io.IOException  which it doesn't get (it gets the PrivilegedActionException instead).----------------------1) testReplication_Local_StateTest_part1_1(org.apache.derbyTesting.functionTests.tests.replicationTests.ReplicationRun_Local_StateTest_part1_1)junit.framework.AssertionFailedError: Got -1 XRE42 DERBY SQL error: SQLCODE: -1  SQLSTATE: XRE42  SQLERRMC: Replicated database '/test/results/db_slave/wombat' shutdown.. Expected XRE41 at java.lang.Throwable.&lt;init&gt;(Throwable.java:67) at junit.framework.AssertionFailedError.&lt;init&gt;(AssertionFailedError.java:11) at org.apache.derbyTesting.functionTests.tests.replicationTests.ReplicationRun.assertException(ReplicationRun.java:3427) at org.apache.derbyTesting.functionTests.tests.replicationTests.ReplicationRun_Local_StateTest_part1_1._testPostStartedMasterAndSlave_StopSlave(ReplicationRun_Local_StateTest_part1_1.java:150) at org.apache.derbyTesting.functionTests.tests.replicationTests.ReplicationRun_Local_StateTest_part1_1.testReplication_Local_StateTest_part1_1(ReplicationRun_Local_StateTest_part1_1.java:134) at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:48) at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25) at org.apache.derbyTesting.junit.BaseTestCase.runBare(BaseTestCase.java:109) at org.apache.derbyTesting.functionTests.tests.replicationTests.ReplicationRun.runBare(ReplicationRun.java:201) at junit.extensions.TestDecorator.basicRun(TestDecorator.java:22) at junit.extensions.TestSetup$1.protect(TestSetup.java:19) at junit.extensions.TestSetup.run(TestSetup.java:16)----------------------The exception in the db_master-derby.log was:------------------------Database Class Loader started - derby.database.classpath=''---- BEGIN REPLICATION ERROR MESSAGE (9/13/10 9:40 AM) ----Replication slave got a fatal error for database '/test/results/db_master/wombat'. Replication will be stopped.ERROR XRE04: Could not establish a connection to the peer of the replicated database '/test/results/db_master/wombat' on address 'localhost:8888'. at org.apache.derby.iapi.error.StandardException.newException(Unknown Source) at org.apache.derby.impl.store.replication.master.MasterController.setupConnection(Unknown Source) at org.apache.derby.impl.store.replication.master.MasterController.startMaster(Unknown Source) at org.apache.derby.impl.store.raw.RawStore.startReplicationMaster(Unknown Source) at org.apache.derby.impl.store.access.RAMAccessManager.startReplicationMaster(Unknown Source) at org.apache.derby.impl.db.BasicDatabase.startReplicationMaster(Unknown Source) at org.apache.derby.impl.jdbc.EmbedConnection.handleStartReplicationMaster(Unknown Source) at org.apache.derby.impl.jdbc.EmbedConnection.&lt;init&gt;(Unknown Source) at org.apache.derby.jdbc.Driver40.getNewEmbedConnection(Unknown Source) at org.apache.derby.jdbc.InternalDriver.connect(Unknown Source) at org.apache.derby.jdbc.AutoloadedDriver.connect(Unknown Source) at org.apache.derby.impl.drda.Database.makeConnection(Unknown Source) at org.apache.derby.impl.drda.DRDAConnThread.getConnFromDatabaseName(Unknown Source) at org.apache.derby.impl.drda.DRDAConnThread.verifyUserIdPassword(Unknown Source) at org.apache.derby.impl.drda.DRDAConnThread.parseSECCHK(Unknown Source) at org.apache.derby.impl.drda.DRDAConnThread.parseDRDAConnection(Unknown Source) at org.apache.derby.impl.drda.DRDAConnThread.processCommands(Unknown Source) at org.apache.derby.impl.drda.DRDAConnThread.run(Unknown Source)Caused by: java.security.PrivilegedActionException: java.net.ConnectException: Connection refused at java.security.AccessController.doPrivileged(AccessController.java:255) at org.apache.derby.impl.store.replication.net.ReplicationMessageTransmit.initConnection(Unknown Source) ... 17 moreCaused by: java.net.ConnectException: Connection refused at java.net.PlainSocketImpl.socketConnect(Native Method) at java.net.PlainSocketImpl.doConnect(PlainSocketImpl.java:352) at java.net.PlainSocketImpl.connectToAddress(PlainSocketImpl.java:214) at java.net.PlainSocketImpl.connect(PlainSocketImpl.java:201) at java.net.SocksSocketImpl.connect(SocksSocketImpl.java:378) at java.net.Socket.connect(Socket.java:528) at org.apache.derby.impl.store.replication.net.ReplicationMessageTransmit$1.run(Unknown Source) at java.security.AccessController.doPrivileged(AccessController.java:251) ... 18 more============= begin nested exception  level (1) ===========java.security.PrivilegedActionException: java.net.ConnectException: Connection refused at java.security.AccessController.doPrivileged(AccessController.java:255) at org.apache.derby.impl.store.replication.net.ReplicationMessageTransmit.initConnection(Unknown Source) at org.apache.derby.impl.store.replication.master.MasterController.setupConnection(Unknown Source) at org.apache.derby.impl.store.replication.master.MasterController.startMaster(Unknown Source) at org.apache.derby.impl.store.raw.RawStore.startReplicationMaster(Unknown Source) at org.apache.derby.impl.store.access.RAMAccessManager.startReplicationMaster(Unknown Source) at org.apache.derby.impl.db.BasicDatabase.startReplicationMaster(Unknown Source) at org.apache.derby.impl.jdbc.EmbedConnection.handleStartReplicationMaster(Unknown Source) at org.apache.derby.impl.jdbc.EmbedConnection.&lt;init&gt;(Unknown Source) at org.apache.derby.jdbc.Driver40.getNewEmbedConnection(Unknown Source) at org.apache.derby.jdbc.InternalDriver.connect(Unknown Source) at org.apache.derby.jdbc.AutoloadedDriver.connect(Unknown Source) at org.apache.derby.impl.drda.Database.makeConnection(Unknown Source) at org.apache.derby.impl.drda.DRDAConnThread.getConnFromDatabaseName(Unknown Source) at org.apache.derby.impl.drda.DRDAConnThread.verifyUserIdPassword(Unknown Source) at org.apache.derby.impl.drda.DRDAConnThread.parseSECCHK(Unknown Source) at org.apache.derby.impl.drda.DRDAConnThread.parseDRDAConnection(Unknown Source) at org.apache.derby.impl.drda.DRDAConnThread.processCommands(Unknown Source) at org.apache.derby.impl.drda.DRDAConnThread.run(Unknown Source)Caused by: java.net.ConnectException: Connection refused at java.net.PlainSocketImpl.socketConnect(Native Method) at java.net.PlainSocketImpl.doConnect(PlainSocketImpl.java:352) at java.net.PlainSocketImpl.connectToAddress(PlainSocketImpl.java:214) at java.net.PlainSocketImpl.connect(PlainSocketImpl.java:201) at java.net.SocksSocketImpl.connect(SocksSocketImpl.java:378) at java.net.Socket.connect(Socket.java:528) at org.apache.derby.impl.store.replication.net.ReplicationMessageTransmit$1.run(Unknown Source) at java.security.AccessController.doPrivileged(AccessController.java:251) ... 18 more============= end nested exception  level (1) ======================== begin nested exception  level (2) ===========java.net.ConnectException: Connection refused at java.net.PlainSocketImpl.socketConnect(Native Method) at java.net.PlainSocketImpl.doConnect(PlainSocketImpl.java:352) at java.net.PlainSocketImpl.connectToAddress(PlainSocketImpl.java:214) at java.net.PlainSocketImpl.connect(PlainSocketImpl.java:201) at java.net.SocksSocketImpl.connect(SocksSocketImpl.java:378) at java.net.Socket.connect(Socket.java:528) at org.apache.derby.impl.store.replication.net.ReplicationMessageTransmit$1.run(Unknown Source) at java.security.AccessController.doPrivileged(AccessController.java:251) at org.apache.derby.impl.store.replication.net.ReplicationMessageTransmit.initConnection(Unknown Source) at org.apache.derby.impl.store.replication.master.MasterController.setupConnection(Unknown Source) at org.apache.derby.impl.store.replication.master.MasterController.startMaster(Unknown Source) at org.apache.derby.impl.store.raw.RawStore.startReplicationMaster(Unknown Source) at org.apache.derby.impl.store.access.RAMAccessManager.startReplicationMaster(Unknown Source) at org.apache.derby.impl.db.BasicDatabase.startReplicationMaster(Unknown Source) at org.apache.derby.impl.jdbc.EmbedConnection.handleStartReplicationMaster(Unknown Source) at org.apache.derby.impl.jdbc.EmbedConnection.&lt;init&gt;(Unknown Source) at org.apache.derby.jdbc.Driver40.getNewEmbedConnection(Unknown Source) at org.apache.derby.jdbc.InternalDriver.connect(Unknown Source) at org.apache.derby.jdbc.AutoloadedDriver.connect(Unknown Source) at org.apache.derby.impl.drda.Database.makeConnection(Unknown Source) at org.apache.derby.impl.drda.DRDAConnThread.getConnFromDatabaseName(Unknown Source) at org.apache.derby.impl.drda.DRDAConnThread.verifyUserIdPassword(Unknown Source) at org.apache.derby.impl.drda.DRDAConnThread.parseSECCHK(Unknown Source) at org.apache.derby.impl.drda.DRDAConnThread.parseDRDAConnection(Unknown Source) at org.apache.derby.impl.drda.DRDAConnThread.processCommands(Unknown Source) at org.apache.derby.impl.drda.DRDAConnThread.run(Unknown Source)============= end nested exception  level (2) ===========",
            "id": "4812"
        },
        "4815": {
            "ground_truth": "0",
            "bug_report": "Override mechanism for modules.properties works backwards\nIt is possible to override the properties in org/apache/derby/modules.properties by putting your own version of it somewhere on the classpath. BaseMonitor.getDefaultModuleProperties() apparently intends to use values from the first modules.properties file that mentions a property: String key = (String) newKeys.nextElement(); if( moduleList.contains( key)) // RESOLVE how do we localize messages before we have finished initialization? report( 'Ignored duplicate property ' + key + ' in ' + modulesPropertiesURL.toString()); else moduleList.setProperty( key  otherList.getProperty( key));However  moduleList.contains(key) doesn't look for a key in moduleList  it looks for a property value. This code should have used containsKey() instead.Beacuse of this  the last modules.properties on the classpath will take precedence over the ones earlier on the classpath. So if you for example have two different versions of derby.jar in the classpath  the engine will use the classes from the first jar and modules.properties from the last jar.",
            "id": "4815"
        },
        "4847": {
            "ground_truth": "0",
            "bug_report": "Errors should be displayed if using wrong CLASSPATH to make documentation target for release\nWhen making Derby documentation for 10.6.2.1 release  no error was prompt when wrong version of java is being used or wrong value for CLASSPATH.In order to make Derby documentation  the release manager has to set CLASSPATH to include: fop.jar  avalon-framework-cvs-20020806.jar  and batik.jar files located in %DOC_ROOT%/trunk/lib/ for PDF output. When using wrong CLASSPATH to build pdf documentation  no error was prompt and no PDF output was created. Error will be more intuitive that the build was not successful.",
            "id": "4847"
        },
        "4849": {
            "ground_truth": "0",
            "bug_report": "Re-compilation may cause duplicate entries in the XPLAIN table\nIf happening at the right moment  a re-compilation request may cause duplicate entries in the XPLAIN statement tables.I have only confirmed this for the SYSXPLAIN_STATEMENTS table  and I do not know if the other XPLAIN tables are affected.The error is highly intermittent  and so far I have only been able to trigger it when testing the automatic index statistics update prototype.See the attached stack-trace for some more details.",
            "id": "4849"
        },
        "4859": {
            "ground_truth": "1",
            "bug_report": "Missing doPrivileged in DatabaseClasses.WriteClassFile()\nOne of my test runs failed with the following error:1) testAllUncommittedReclaim(org.apache.derbyTesting.functionTests.tests.store.AccessTest)java.sql.SQLException: Java exception: 'access denied (java.io.FilePermission /export/home/tmp/kh160127/derbyall/system/ac72985692x012bxc9d4x9594xffffa08cb27a0.class write): java.security.AccessControlException'. at org.apache.derby.impl.jdbc.SQLExceptionFactory40.getSQLException(Unknown Source)(...)Caused by: java.security.AccessControlException: access denied (java.io.FilePermission /export/home/tmp/kh160127/derbyall/system/ac72985692x012bxc9d4x9594xffffa08cb27a0.class write) at java.security.AccessControlContext.checkPermission(AccessControlContext.java:323) at java.security.AccessController.checkPermission(AccessController.java:546) at java.lang.SecurityManager.checkPermission(SecurityManager.java:532) at java.lang.SecurityManager.checkWrite(SecurityManager.java:962) at java.io.FileOutputStream.&lt;init&gt;(FileOutputStream.java:169) at java.io.FileOutputStream.&lt;init&gt;(FileOutputStream.java:131) at org.apache.derby.impl.services.reflect.DatabaseClasses.WriteClassFile(Unknown Source) at org.apache.derby.impl.services.reflect.DatabaseClasses.loadGeneratedClass(Unknown Source)(...)I think the underlying error is an OutOfMemoryError  because I have seen tests running out of permgen space with the same configuration lately. But that error never gets all the way out to the test framework because of the above file permission error.When DatabaseClasses.loadGeneratedClass() fails with a LinkageError or a VirtualMachineError (the super-class of OutOfMemoryError)  it attempts to dump the generated class to disk. But since the tests run under a security manager  and the code writes the class to disk isn't wrapped in a privileged block  the dumping of extra debug info fails and hides the original error.",
            "id": "4859"
        },
        "4866": {
            "ground_truth": "0",
            "bug_report": "Simplify SYSCS_BULK_INSERT with IdUtil.mkQualifiedName()\nSystemProcedures.SYSCS_BULK_INSERT contains this piece of code: String entityName = IdUtil.normalToDelimited(tableName); if (schemaName != null) { entityName = IdUtil.normalToDelimited(schemaName) + '.' + entityName; }The helper method IdUtil.mkQualifiedName() could do the exact same in one line.",
            "id": "4866"
        },
        "4873": {
            "ground_truth": "1",
            "bug_report": "NullPointerException in testBoundaries with ibm jvm 1.6\nWith the line skipping the testBoundaries fixture of the InternationalConnectTest commented out  I get the following stack when I run the test with ibm 1.6:1) testBoundaries(org.apache.derbyTesting.functionTests.tests.jdbcapi.InternationalConnectTest)java.sql.SQLException: DERBY SQL error: SQLCODE: -1  SQLSTATE: XJ001  SQLERRMC: java.lang.NullPointerExceptionXJ001.U at org.apache.derby.client.am.SQLExceptionFactory40.getSQLException(SQLExceptionFactory40.java:96) at org.apache.derby.client.am.SqlException.getSQLException(SqlException.java:358) at org.apache.derby.jdbc.ClientDriver.connect(ClientDriver.java:149) at java.sql.DriverManager.getConnection(DriverManager.java:322) at java.sql.DriverManager.getConnection(DriverManager.java:273) at org.apache.derbyTesting.functionTests.tests.jdbcapi.InternationalConnectTest.testBoundaries(InternationalConnectTest.java:111) at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:48) at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25) at org.apache.derbyTesting.junit.BaseTestCase.runBare(BaseTestCase.java:109) at junit.extensions.TestDecorator.basicRun(TestDecorator.java:22) at junit.extensions.TestSetup$1.protect(TestSetup.java:19) at junit.extensions.TestSetup.run(TestSetup.java:23) at org.apache.derbyTesting.junit.BaseTestSetup.run(BaseTestSetup.java:57) at junit.extensions.TestDecorator.basicRun(TestDecorator.java:22) at junit.extensions.TestSetup$1.protect(TestSetup.java:19) at junit.extensions.TestSetup.run(TestSetup.java:23) at junit.extensions.TestDecorator.basicRun(TestDecorator.java:22) at junit.extensions.TestSetup$1.protect(TestSetup.java:19) at junit.extensions.TestSetup.run(TestSetup.java:23) at org.apache.derbyTesting.junit.BaseTestSetup.run(BaseTestSetup.java:57)Caused by: org.apache.derby.client.am.SqlException: DERBY SQL error: SQLCODE: -1  SQLSTATE: XJ001  SQLERRMC: java.lang.NullPointerExceptionXJ001.U at org.apache.derby.client.am.Connection.completeSqlca(Connection.java:2117) at org.apache.derby.client.net.NetConnectionReply.parseRdbAccessFailed(NetConnectionReply.java:541) at org.apache.derby.client.net.NetConnectionReply.parseAccessRdbError(NetConnectionReply.java:434) at org.apache.derby.client.net.NetConnectionReply.parseACCRDBreply(NetConnectionReply.java:297) at org.apache.derby.client.net.NetConnectionReply.readAccessDatabase(NetConnectionReply.java:121) at org.apache.derby.client.net.NetConnection.readSecurityCheckAndAccessRdb(NetConnection.java:846) at org.apache.derby.client.net.NetConnection.flowSecurityCheckAndAccessRdb(NetConnection.java:769) at org.apache.derby.client.net.NetConnection.flowUSRIDONLconnect(NetConnection.java:601) at org.apache.derby.client.net.NetConnection.flowConnect(NetConnection.java:408) at org.apache.derby.client.net.NetConnection.&lt;init&gt;(NetConnection.java:218) at org.apache.derby.client.net.NetConnection40.&lt;init&gt;(NetConnection40.java:77) at org.apache.derby.client.net.ClientJDBCObjectFactoryImpl40.newNetConnection(ClientJDBCObjectFactoryImpl40.java:269) at org.apache.derby.jdbc.ClientDriver.connect(ClientDriver.java:140) ... 35 moreThis is after the latest check in for DERBY-4836 (revision 1028035).I'll attach derby.log.",
            "id": "4873"
        },
        "4880": {
            "ground_truth": "0",
            "bug_report": "Unchecked warnings in JMXManagementService and VTI demos\nThese warnings I only see if java15compile.classpath points to Java 6 class libraries (either set explicitly in ant.properties  or implicitly by the property setter): &#91;javac&#93; /code/derby/trunk2/java/engine/org/apache/derby/impl/services/jmx/JMXManagementService.java:215: warning: &#91;unchecked&#93; unchecked conversion &#91;javac&#93; found : java.lang.Class &#91;javac&#93; required: java.lang.Class&lt;java.lang.Object&gt; &#91;javac&#93; new StandardMBean(bean  beanInterface) { &#91;javac&#93; ^ &#91;javac&#93; /code/derby/trunk2/java/engine/org/apache/derby/impl/services/jmx/JMXManagementService.java:215: warning: &#91;unchecked&#93; unchecked method invocation: &lt;T&gt;StandardMBean(T java.lang.Class&lt;T&gt;) in javax.management.StandardMBean is applied to (java.lang.Object java.lang.Class) &#91;javac&#93; new StandardMBean(bean  beanInterface) { &#91;javac&#93; ^ &#91;javac&#93; 2 warnings &#91;javac&#93; /code/derby/trunk2/java/demo/vtis/java/org/apache/derbyDemo/vtis/core/QueryVTIHelper.java:185: warning: &#91;unchecked&#93; unchecked call to getMethod(java.lang.String java.lang.Class&lt;?&gt;...) as a member of the raw type java.lang.Class &#91;javac&#93; ( methodName  new Class[] { String.class } ); &#91;javac&#93; ^ &#91;javac&#93; /code/derby/trunk2/java/demo/vtis/java/org/apache/derbyDemo/vtis/core/XmlVTI.java:253: warning: &#91;unchecked&#93; unchecked call to getMethod(java.lang.String java.lang.Class&lt;?&gt;...) as a member of the raw type java.lang.Class &#91;javac&#93; ( methodName  new Class[] { String.class } ); &#91;javac&#93; ^ &#91;javac&#93; /code/derby/trunk2/java/demo/vtis/java/org/apache/derbyDemo/vtis/core/XmlVTI.java:260: warning: &#91;unchecked&#93; unchecked call to getConstructor(java.lang.Class&lt;?&gt;...) as a member of the raw type java.lang.Class &#91;javac&#93; ( new Class[] { String.class  String.class  String[].class } ); &#91;javac&#93; ^ &#91;javac&#93; /code/derby/trunk2/java/demo/vtis/java/org/apache/derbyDemo/vtis/snapshot/Subscription.java:278: warning: &#91;unchecked&#93; unchecked call to getMethod(java.lang.String java.lang.Class&lt;?&gt;...) as a member of the raw type java.lang.Class &#91;javac&#93; ( methodName  new Class[] {} ); &#91;javac&#93; ^ &#91;javac&#93; 4 warnings",
            "id": "4880"
        },
        "4888": {
            "ground_truth": "0",
            "bug_report": "ClassCastException when calling boolean meta-data functions with 10.7 client against 10.6 server\nI noticed that DESCRIBE didn't work when I tried to connect to a 10.6 server with ij/client driver at version 10.7.ij&gt; describe t;JAVA ERROR: java.lang.ClassCastException: java.lang.Integer cannot be cast to java.lang.Booleanjava.lang.ClassCastException: java.lang.Integer cannot be cast to java.lang.Boolean at org.apache.derby.client.am.DatabaseMetaData.getMetaDataInfoBoolean(DatabaseMetaData.java:2401) at org.apache.derby.client.am.DatabaseMetaData.storesLowerCaseIdentifiers(DatabaseMetaData.java:191) at org.apache.derby.impl.tools.ij.ij.caIdentifier(ij.java:3040) at org.apache.derby.impl.tools.ij.ij.DescTableStatement(ij.java:1624) at org.apache.derby.impl.tools.ij.ij.ijStatement(ij.java:1121) at org.apache.derby.impl.tools.ij.utilMain.runScriptGuts(utilMain.java:341) at org.apache.derby.impl.tools.ij.utilMain.go(utilMain.java:261) at org.apache.derby.impl.tools.ij.Main.go(Main.java:229) at org.apache.derby.impl.tools.ij.Main.mainCore(Main.java:184) at org.apache.derby.impl.tools.ij.Main.main(Main.java:75) at org.apache.derby.tools.ij.main(ij.java:59) at org.apache.derby.iapi.tools.run.main(run.java:53)",
            "id": "4888"
        },
        "4895": {
            "ground_truth": "1",
            "bug_report": "Thread local TableDescriptor#referencedColumnMap is not removed from app threads when Derby is shut down\n&gt; This has been seen to cause error messages in TomCat  cf. this quote from a mail on derby-user:&gt; &gt; http://mail-archives.apache.org/mod_mbox/db-derby-user/201011.mbox/%3C7800E37B639BC345BC2AB40980B7C529180FB525@MERCMBX03R.na.SAS.com%3E&gt; &gt; SEVERE: The web application &#91;/MyApp&#93; created a ThreadLocal with key of type [org.apache.derby.iapi.sq/&gt; l.dictionary.TableDescriptor$1] (value &#91;org.apache.derby.iapi.sql.dictionary.TableDescriptor$1@d133a3&#93;)/&gt; and a value of type &#91;java.util.WeakHashMap&#93; (value [{={1  2  3  4}  =null  =null}]) but failed to remo/&gt; ve it when the web application was stopped. This is very likely to create a memory leak.",
            "id": "4895"
        },
        "4899": {
            "ground_truth": "0",
            "bug_report": "Refactor access to primary structures in AlterTableConstantAction\nMany of the private methods in impl.sql.execute.AlterTableConstantAction take the activation (and sometimes a number of references obtained through it) as an argument. This seems unnecessary  and it clutters the code with argument passing  boilerplate code and variable hiding.",
            "id": "4899"
        },
        "4907": {
            "ground_truth": "0",
            "bug_report": "EmbeddedXADataSource with ;create=true attribute set in setDatabaseName fails with java.sql.SQLException: Database not available\nSetting the ;create=true attribute in setDatabaseName with EmbededXADataSource and EmbeddedXADataSource40 fails with $ java TestDerbyCreateException in thread 'main' java.sql.SQLException: Database not available at org.apache.derby.jdbc.EmbeddedXADataSource.setupResourceAdapter(EmbededXADataSource.java:175) at org.apache.derby.jdbc.EmbeddedXADataSource.getXAConnection(EmbeddedXDataSource.java:101) at TestDerbyCreate.main(TestDerbyCreate.java:18)using the create attributie in databaseName works fine with EmbeddedDataSource. Using setCreateDatabase('create') with EmbeddedXADataSource is a good work around and I think generally preferable.import java.sql.*;import javax.sql.*;public class TestDerbyCreate{ public static void main(String[] args) throws Throwable { org.apache.derby.jdbc.EmbeddedXADataSource ds = new org.apache.derby.jdbc.EmbeddedXADataSource(); ds.setDatabaseName('TestDB;create=true'); ds.setUser('dbuser1'); ds.setPassword('dbpwd1'); PooledConnection pooledConn = ds.getXAConnection(); Connection conn = pooledConn.getConnection(); System.out.println('Database product: ' + conn.getMetaData().getDatabaseProductName()); System.out.println('Database version: ' + conn.getMetaData().getDatabaseProductVersion()); System.out.println('Driver name: ' + conn.getMetaData().getDriverName()); System.out.println('Driver version: ' + conn.getMetaData().getDriverVersion()); System.out.println('JDBC driver major ve",
            "id": "4907"
        },
        "4910": {
            "ground_truth": "0",
            "bug_report": "Four replication tests fail on z/OS with junit.framework.AssertionFailedError: startMaster did not succeed.\nFour replication tests failed with junit.framework.AssertionFailedError: startMaster did not succeed. running on the 64bit JVM on z/OS:ReplicationRun_Local_3_p2 ReplicationRun_Local_StateTest_part1ReplicationRun_Local_3_p3 ReplicationRun_Local_StateTest_part1_2Below are the stack traces. I will attach the fail directory.There were 4 failures:1) testReplication_Local_StateTest_part1(org.apache.derbyTesting.functionTests.tests.replicationTests.ReplicationRun_Local_StateTest_part1)junit.framework.AssertionFailedError: startMaster did not succeed. at org.apache.derbyTesting.functionTests.tests.replicationTests.ReplicationRun.startMaster_direct(ReplicationRun.java:1072) at org.apache.derbyTesting.functionTests.tests.replicationTests.ReplicationRun.startMaster(ReplicationRun.java:906) at org.apache.derbyTesting.functionTests.tests.replicationTests.ReplicationRun_Local_StateTest_part1._testPreStartedMaster(ReplicationRun_Local_StateTest_part1.java:375) at org.apache.derbyTesting.functionTests.tests.replicationTests.ReplicationRun_Local_StateTest_part1.testReplication_Local_StateTest_part1(ReplicationRun_Local_StateTest_part1.java:136) at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:48) at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25) at org.apache.derbyTesting.junit.BaseTestCase.runBare(BaseTestCase.java:109) at org.apache.derbyTesting.functionTests.tests.replicationTests.ReplicationRun.runBare(ReplicationRun.java:207) at junit.extensions.TestDecorator.basicRun(TestDecorator.java:22) at junit.extensions.TestSetup$1.protect(TestSetup.java:19) at junit.extensions.TestSetup.run(TestSetup.java:16)2) testReplication_Local_StateTest_part1_2(org.apache.derbyTesting.functionTests.tests.replicationTests.ReplicationRun_Local_StateTest_part1_2)junit.framework.AssertionFailedError: startMaster did not succeed. at org.apache.derbyTesting.functionTests.tests.replicationTests.ReplicationRun.startMaster_direct(ReplicationRun.java:1072) at org.apache.derbyTesting.functionTests.tests.replicationTests.ReplicationRun.startMaster(ReplicationRun.java:906) at org.apache.derbyTesting.functionTests.tests.replicationTests.ReplicationRun_Local_StateTest_part1_2.testReplication_Local_StateTest_part1_2(ReplicationRun_Local_StateTest_part1_2.java:128) at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:48) at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25) at org.apache.derbyTesting.junit.BaseTestCase.runBare(BaseTestCase.java:109) at org.apache.derbyTesting.functionTests.tests.replicationTests.ReplicationRun.runBare(ReplicationRun.java:207) at junit.extensions.TestDecorator.basicRun(TestDecorator.java:22) at junit.extensions.TestSetup$1.protect(TestSetup.java:19) at junit.extensions.TestSetup.run(TestSetup.java:16)3) testReplication_Local_3_p2_StateTests_bigInsert_sleepBeforeStopMaster(org.apache.derbyTesting.functionTests.tests.replicationTests.ReplicationRun_Local_3_p2)junit.framework.AssertionFailedError: startMaster did not succeed. at org.apache.derbyTesting.functionTests.tests.replicationTests.ReplicationRun.startMaster_direct(ReplicationRun.java:1072) at org.apache.derbyTesting.functionTests.tests.replicationTests.ReplicationRun.startMaster(ReplicationRun.java:906) at org.apache.derbyTesting.functionTests.tests.replicationTests.ReplicationRun_Local_3_p2.replication_Local_3_p2_StateTests(ReplicationRun_Local_3_p2.java:128) at org.apache.derbyTesting.functionTests.tests.replicationTests.ReplicationRun_Local_3_p2.testReplication_Local_3_p2_StateTests_bigInsert_sleepBeforeStopMaster(ReplicationRun_Local_3_p2.java:248) at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:48) at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25) at org.apache.derbyTesting.junit.BaseTestCase.runBare(BaseTestCase.java:109) at org.apache.derbyTesting.functionTests.tests.replicationTests.ReplicationRun.runBare(ReplicationRun.java:207) at junit.extensions.TestDecorator.basicRun(TestDecorator.java:22) at junit.extensions.TestSetup$1.protect(TestSetup.java:19) at junit.extensions.TestSetup.run(TestSetup.java:16)4) testReplication_Local_3_p3_StateNegativeTests(org.apache.derbyTesting.functionTests.tests.replicationTests.ReplicationRun_Local_3_p3)junit.framework.AssertionFailedError: startMaster did not succeed. at org.apache.derbyTesting.functionTests.tests.replicationTests.ReplicationRun.startMaster_direct(ReplicationRun.java:1072) at org.apache.derbyTesting.functionTests.tests.replicationTests.ReplicationRun.startMaster(ReplicationRun.java:906) at org.apache.derbyTesting.functionTests.tests.replicationTests.ReplicationRun_Local_3_p3.testReplication_Local_3_p3_StateNegativeTests(ReplicationRun_Local_3_p3.java:128) at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:48) at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25) at org.apache.derbyTesting.junit.BaseTestCase.runBare(BaseTestCase.java:109) at org.apache.derbyTesting.functionTests.tests.replicationTests.ReplicationRun.runBare(ReplicationRun.java:207) at junit.extensions.TestDecorator.basicRun(TestDecorator.java:22) at junit.extensions.TestSetup$1.protect(TestSetup.java:19) at junit.extensions.TestSetup.run(TestSetup.java:16)FAILURES!!!Tests run: 13032  Failures: 4  Errors: 0",
            "id": "4910"
        },
        "4911": {
            "ground_truth": "0",
            "bug_report": "restoreIntrFlagIfSeen may throw ShutdownException causing confusing console stack trace at server shutdown\nException in thread 'DRDAConnThread_508'org.apache.derby.iapi.error.ShutdownException: at org.apache.derby.iapi.services.context.ContextManager.checkInterrupt(ContextManager.java:437) at org.apache.derby.iapi.services.context.ContextManager.getContext(ContextManager.java:155) at org.apache.derby.iapi.services.context.ContextService.getContextOrNull(ContextService.java:249) at org.apache.derby.iapi.util.InterruptStatus.restoreIntrFlagIfSeen(InterruptStatus.java:158) at org.apache.derby.impl.jdbc.TransactionResourceImpl.handleException(TransactionResourceImpl.java:356) at org.apache.derby.impl.jdbc.EmbedConnection.handleException(EmbedConnection.java:2284) at org.apache.derby.impl.jdbc.ConnectionChild.handleException(ConnectionChild.java:82) at org.apache.derby.impl.jdbc.EmbedPreparedStatement.closeActions(EmbedPreparedStatement.java:261) at org.apache.derby.impl.jdbc.EmbedStatement.close(EmbedStatement.java:307) at org.apache.derby.impl.drda.DRDAStatement.close(DRDAStatement.java:1027) at org.apache.derby.impl.drda.Database.close(Database.java:364) at org.apache.derby.impl.drda.Session.close(Session.java:115) at org.apache.derby.impl.drda.DRDAConnThread.closeSession(DRDAConnThread.java:8289) at org.apache.derby.impl.drda.DRDAConnThread.run(DRDAConnThread.java:315)",
            "id": "4911"
        },
        "4912": {
            "ground_truth": "0",
            "bug_report": "Instability in Derby2017LayerBTest\nSeen on 10.7 RC1:testFailedStreamInsertBinaryAutoCommitRollbackOnError(org.apache.derbyTesting.functionTests.tests.jdbc4.Derby2017LayerBTest) FAILURE:junit.framework.AssertionFailedError: Column value mismatch @ column 'B'  row 1: Expected: &gt;5468697320697320726f772031&lt; Found: &gt;5468697320697320726f772036&lt; at junit.framework.Assert.fail(Assert.java:47) at org.apache.derbyTesting.junit.JDBC.assertRowInResultSet(JDBC.java:1213) at org.apache.derbyTesting.junit.JDBC.assertRowInResultSet(JDBC.java:1125) at org.apache.derbyTesting.junit.JDBC.assertFullResultSetMinion(JDBC.java:1012) at org.apache.derbyTesting.junit.JDBC.assertFullResultSet(JDBC.java:935) at org.apache.derbyTesting.junit.JDBC.assertFullResultSet(JDBC.java:892) at org.apache.derbyTesting.junit.JDBC.assertFullResultSet(JDBC.java:850) at org.apache.derbyTesting.functionTests.tests.jdbc4.Derby2017LayerBTest.doInsertTest(Derby2017LayerBTest.java:493) at org.apache.derbyTesting.functionTests.tests.jdbc4.Derby2017LayerBTest.testFailedStreamInsertBinaryAutoCommitRollbackOnError(Derby2017LayerBTest.java:315)",
            "id": "4912"
        },
        "4915": {
            "ground_truth": "0",
            "bug_report": "test failure in OSReadOnlyTest in assertDirectoryDeleted\nI've seen the assert flag a failure for deleteing a log file last night  and a seg0 file the night before.This is one stack trace:1) testOSReadOnly(org.apache.derbyTesting.functionTests.tests.store.OSReadOnlyTest)junit.framework.AssertionFailedError: Failed to delete 2 files (root=F:/test/JarResults.2010-11-23/ibm16_suites.All/system/singleUse/readWrite: F:/test/JarResults.2010-11-23/ibm16_suites.All/system/singleUse/readWrite/log (isDir=true  canRead=true  canWrite=true  size=0)  F:/jartest/JarResults.2010-11-23/ibm16_suites.All/system/singleUse/readWrite (isDir=true  canRead=true  canWrite=true  size=0) at org.apache.derbyTesting.junit.BaseJDBCTestCase.assertDirectoryDeleted(BaseJDBCTestCase.java:1421) at org.apache.derbyTesting.functionTests.tests.store.OSReadOnlyTest.moveDatabaseOnOS(OSReadOnlyTest.java:295) at org.apache.derbyTesting.functionTests.tests.store.OSReadOnlyTest.testOSReadOnly(OSReadOnlyTest.java:160) at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:48) at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25) at org.apache.derbyTesting.junit.BaseTestCase.runBare(BaseTestCase.java:109) at junit.extensions.TestDecorator.basicRun(TestDecorator.java:22) at junit.extensions.TestSetup$1.protect(TestSetup.java:19) at junit.extensions.TestSetup.run(TestSetup.java:16) at org.apache.derbyTesting.junit.BaseTestSetup.run(BaseTestSetup.java:57) at junit.extensions.TestDecorator.basicRun(TestDecorator.java:22) at junit.extensions.TestSetup$1.protect(TestSetup.java:19) at junit.extensions.TestSetup.run(TestSetup.java:16) at org.apache.derbyTesting.junit.BaseTestSetup.run(BaseTestSetup.java:57) at junit.extensions.TestDecorator.basicRun(TestDecorator.java:22) at junit.extensions.TestSetup$1.protect(TestSetup.java:19) at junit.extensions.TestSetup.run(TestSetup.java:16) at junit.extensions.TestDecorator.basicRun(TestDecorator.java:22) at junit.extensions.TestSetup$1.protect(TestSetup.java:19) at junit.extensions.TestSetup.run(TestSetup.java:16) at org.apache.derbyTesting.junit.BaseTestSetup.run(BaseTestSetup.java:57) at junit.extensions.TestDecorator.basicRun(TestDecorator.java:22) at junit.extensions.TestSetup$1.protect(TestSetup.java:19) at junit.extensions.TestSetup.run(TestSetup.java:16)This is another:1) testOSReadOnly(org.apache.derbyTesting.functionTests.tests.store.OSReadOnlyTest)junit.framework.AssertionFailedError: Failed to delete 2 files (root=F:/test/JarResults.2010-11-22/ibm16_suites.All/system/singleUse/readOnly: F:/test/JarResults.2010-11-22/ibm16_suites.All/system/singleUse/readOnly/seg0 (isDir=true  canRead=true  canWrite=true  size=0)  F:/jartest/JarResults.2010-11-22/ibm16_suites.All/system/singleUse/readOnly (isDir=true  canRead=true  canWrite=true  size=0) at org.apache.derbyTesting.junit.BaseJDBCTestCase.assertDirectoryDeleted(BaseJDBCTestCase.java:1421) at org.apache.derbyTesting.functionTests.tests.store.OSReadOnlyTest.moveDatabaseOnOS(OSReadOnlyTest.java:295) at org.apache.derbyTesting.functionTests.tests.store.OSReadOnlyTest.testOSReadOnly(OSReadOnlyTest.java:152) at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:48) at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25) at org.apache.derbyTesting.junit.BaseTestCase.runBare(BaseTestCase.java:109) at junit.extensions.TestDecorator.basicRun(TestDecorator.java:22) at junit.extensions.TestSetup$1.protect(TestSetup.java:19) at junit.extensions.TestSetup.run(TestSetup.java:16) at org.apache.derbyTesting.junit.BaseTestSetup.run(BaseTestSetup.java:57) at junit.extensions.TestDecorator.basicRun(TestDecorator.java:22) at junit.extensions.TestSetup$1.protect(TestSetup.java:19) at junit.extensions.TestSetup.run(TestSetup.java:16) at org.apache.derbyTesting.junit.BaseTestSetup.run(BaseTestSetup.java:57) at junit.extensions.TestDecorator.basicRun(TestDecorator.java:22) at junit.extensions.TestSetup$1.protect(TestSetup.java:19) at junit.extensions.TestSetup.run(TestSetup.java:16) at junit.extensions.TestDecorator.basicRun(TestDecorator.java:22) at junit.extensions.TestSetup$1.protect(TestSetup.java:19) at junit.extensions.TestSetup.run(TestSetup.java:16) at org.apache.derbyTesting.junit.BaseTestSetup.run(BaseTestSetup.java:57) at junit.extensions.TestDecorator.basicRun(TestDecorator.java:22) at junit.extensions.TestSetup$1.protect(TestSetup.java:19) at junit.extensions.TestSetup.run(TestSetup.java:16)This is on a machine that I've been able to arrange for a windows machine on which to run the tests for 10.7 nightly  but this is not a new machine. So perhaps the disk - being older - is a little slow in deleting? Perhaps the check can be delayed  or redone if failed first time. I'm still investigating  checking on hardware settings. The disk scan showed up healthy  and multithreading is not on.",
            "id": "4915"
        },
        "4920": {
            "ground_truth": "0",
            "bug_report": "suites.All stuck in RAFContainer4.awaitRestoreChannel()\nI have suites.All running on trunk  and it seems to be stuck in a call to RAFContainer4.awaitRestoreChannel(). Here's the stack for the waiting thread:'main' prio=3 tid=0x08070800 nid=0x2 waiting on condition &#91;0xfe61e000&#93; java.lang.Thread.State: TIMED_WAITING (sleeping) at java.lang.Thread.sleep(Native Method) at org.apache.derby.impl.store.raw.data.RAFContainer4.awaitRestoreChannel(RAFContainer4.java:698) at org.apache.derby.impl.store.raw.data.RAFContainer4.writePage(RAFContainer4.java:593) at org.apache.derby.impl.store.raw.data.CachedPage.writePage(CachedPage.java:787) at org.apache.derby.impl.store.raw.data.CachedPage.clean(CachedPage.java:610) at org.apache.derby.impl.services.cache.ConcurrentCache.cleanAndUnkeepEntry(ConcurrentCache.java:551) at org.apache.derby.impl.services.cache.ConcurrentCache.cleanCache(ConcurrentCache.java:509) at org.apache.derby.impl.services.cache.ConcurrentCache.cleanAll(ConcurrentCache.java:460) at org.apache.derby.impl.store.raw.data.BaseDataFileFactory.checkpoint(BaseDataFileFactory.java:1211) at org.apache.derby.impl.store.raw.log.LogToFile.checkpointWithTran(LogToFile.java:1710) at org.apache.derby.impl.store.raw.log.LogToFile.checkpoint(LogToFile.java:1507) at org.apache.derby.impl.store.raw.RawStore.stop(RawStore.java:368) at org.apache.derby.impl.services.monitor.TopService.stop(TopService.java:442) at org.apache.derby.impl.services.monitor.TopService.shutdown(TopService.java:393) at org.apache.derby.impl.services.monitor.BaseMonitor.shutdown(BaseMonitor.java:229) at org.apache.derby.impl.services.monitor.BaseMonitor.shutdown(BaseMonitor.java:199) at org.apache.derby.jdbc.InternalDriver.connect(InternalDriver.java:231) at org.apache.derby.jdbc.AutoloadedDriver.connect(AutoloadedDriver.java:119) at java.sql.DriverManager.getConnection(DriverManager.java:582) at java.sql.DriverManager.getConnection(DriverManager.java:154) at org.apache.derbyTesting.junit.DriverManagerConnector.getConnectionByAttributes(DriverManagerConnector.java:137) at org.apache.derbyTesting.junit.DriverManagerConnector.shutEngine(DriverManagerConnector.java:120) at org.apache.derbyTesting.junit.TestConfiguration.shutdownEngine(TestConfiguration.java:1599) at org.apache.derbyTesting.junit.SystemPropertyTestSetup.setUp(SystemPropertyTestSetup.java:83) at junit.extensions.TestSetup$1.protect(TestSetup.java:20) at junit.framework.TestResult.runProtected(TestResult.java:124) at junit.extensions.TestSetup.run(TestSetup.java:25) at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24) at junit.extensions.TestSetup$1.protect(TestSetup.java:21) at junit.framework.TestResult.runProtected(TestResult.java:124) at junit.extensions.TestSetup.run(TestSetup.java:25) at org.apache.derbyTesting.junit.BaseTestSetup.run(BaseTestSetup.java:57) at junit.framework.TestSuite.runTest(TestSuite.java:230) at junit.framework.TestSuite.run(TestSuite.java:225) at junit.framework.TestSuite.runTest(TestSuite.java:230) at junit.framework.TestSuite.run(TestSuite.java:225) at junit.framework.TestSuite.runTest(TestSuite.java:230) at junit.framework.TestSuite.run(TestSuite.java:225) at junit.textui.TestRunner.doRun(TestRunner.java:121) at junit.textui.TestRunner.start(TestRunner.java:185) at junit.textui.TestRunner.main(TestRunner.java:143)",
            "id": "4920"
        },
        "4944": {
            "ground_truth": "0",
            "bug_report": "Embedded Derby does not start when derby.jar is dynamically uploaded / added to the classpath\nHi  For our workflow-system  we can use a variety of DBMS as the store engine. Derby is one of them especially popularfor test and development purposes. During setup of our system  we allow to upload a jar file with the JDBC-Driver for the DBMS.In case of derby  we use the embedded mode and upload derby.jar. After that we add the jar to the repositories of our class loaderand call Class drc = Class.forName('org.apache.derby.jdbc.EmbeddedDriver'  true  ourclassloader);Driver drv = (Driver)drc.newInstance();this worked perfectly for many years up to version 10.6.1.0  but ceased to work in 10.6.2.1; i assume the unreleased future versions are affected  toowhen derby.jar is placed in the classpath manually before starting our setup  everything works fine regardless of the derby version.investigations lead to the following conclusion: since rev. 982370 this is broken  in the immediate predecessor rev. 980035 it worked. rev. 982370 in the org.apache.derby.impl.store.raw.data.BaseDataFileFactory class introduced a new method private static String jarClassPath(final Class cls) which tries to find the jarfile from which derby was loaded. it contains the following lines: if ( cs == null ) return null;URL result = cs.getLocation();return result.toString();  but in the case  when we dynamically load derby   cs is not null but cs.getLocation() is null. so i propose to change the line with the if to:...if ( cs == null || cs.getLocation()==null) return null;...or maybe it would be better to surround the whole body of the method with a try catch  since it is not essential  and a null return value is also ok?thank you for your efforts concerning derby at large  Michael",
            "id": "4944"
        },
        "4949": {
            "ground_truth": "0",
            "bug_report": "Backward  confusing error message when you use the wrong ResultSet.getXXX() method in the client driver\nIf you try to get a Time value out of an INTEGER column  the client driver gives this error. I believe that similar nonsense comes back when you try other mismatched getters on other datatypes: 'An attempt was made to get a data value of type 'java.sql.Types 4' from a data value of type 'java.sql.Time'.'The exception is a java.sql.SQLDataException with SQLState 22005. The embedded driver returns a better message: 'An attempt was made to get a data value of type 'java.sql.Time' from a data value of type INTEGER'.'I recommend two improvements to the utility method which generates these exceptions:1) Flip the order of the type names.2) Use the ResultSetMetaData to look up the source data type name.",
            "id": "4949"
        },
        "4950": {
            "ground_truth": "0",
            "bug_report": "AccessControlException when running AssertFailureTest from Ant\nSeen when running 'ant junit-all': &#91;junit&#93; Running org.apache.derbyTesting.unitTests.junit._Suite &#91;junit&#93; Exception in thread 'main' java.security.AccessControlException: access denied (java.io.FilePermission /code/derby/trunk0/junit_20101222_2349/junitvmwatcher3394322945027170783.properties write) &#91;junit&#93; at java.security.AccessControlContext.checkPermission(AccessControlContext.java:323) &#91;junit&#93; at java.security.AccessController.checkPermission(AccessController.java:546) &#91;junit&#93; at java.lang.SecurityManager.checkPermission(SecurityManager.java:532) &#91;junit&#93; at java.lang.SecurityManager.checkWrite(SecurityManager.java:962) &#91;junit&#93; at java.io.FileOutputStream.&lt;init&gt;(FileOutputStream.java:169) &#91;junit&#93; at java.io.FileOutputStream.&lt;init&gt;(FileOutputStream.java:70) &#91;junit&#93; at java.io.FileWriter.&lt;init&gt;(FileWriter.java:46) &#91;junit&#93; at org.apache.tools.ant.taskdefs.optional.junit.JUnitTestRunner.registerTestCase(JUnitTestRunner.java:939) &#91;junit&#93; at org.apache.tools.ant.taskdefs.optional.junit.JUnitTestRunner.access$000(JUnitTestRunner.java:68) &#91;junit&#93; at org.apache.tools.ant.taskdefs.optional.junit.JUnitTestRunner$2.startTest(JUnitTestRunner.java:808) &#91;junit&#93; at org.apache.tools.ant.taskdefs.optional.junit.JUnitTestRunner$3.startTest(JUnitTestRunner.java:1004) &#91;junit&#93; at junit.framework.TestResult.startTest(TestResult.java:151) &#91;junit&#93; at junit.framework.TestResult.run(TestResult.java:103) &#91;junit&#93; at junit.framework.TestCase.run(TestCase.java:120) &#91;junit&#93; at junit.framework.TestSuite.runTest(TestSuite.java:230) &#91;junit&#93; at junit.framework.TestSuite.run(TestSuite.java:225) &#91;junit&#93; at junit.framework.TestSuite.runTest(TestSuite.java:230) &#91;junit&#93; at junit.framework.TestSuite.run(TestSuite.java:225) &#91;junit&#93; at org.apache.tools.ant.taskdefs.optional.junit.JUnitTestRunner.run(JUnitTestRunner.java:420) &#91;junit&#93; at org.apache.tools.ant.taskdefs.optional.junit.JUnitTestRunner.launch(JUnitTestRunner.java:911) &#91;junit&#93; at org.apache.tools.ant.taskdefs.optional.junit.JUnitTestRunner.main(JUnitTestRunner.java:768) &#91;junit&#93; Running org.apache.derbyTesting.unitTests.junit._Suite &#91;junit&#93; Tests run: 1  Failures: 0  Errors: 1  Time elapsed: 0 sec &#91;junit&#93; Test org.apache.derbyTesting.unitTests.junit._Suite FAILED (crashed)",
            "id": "4950"
        },
        "4960": {
            "ground_truth": "1",
            "bug_report": "Race condition in FileContainer#allocCache when reopening RAFContainer after interrupt\nThe symptom is an ArrayIndexOutOfBoundsException:java.lang.ArrayIndexOutOfBoundsException: -1 at org.apache.derby.impl.store.raw.data.AllocationCache.validate(AllocationCache.java:581) at org.apache.derby.impl.store.raw.data.AllocationCache.getLastPageNumber(AllocationCache.java:122) at org.apache.derby.impl.store.raw.data.FileContainer.pageValid(FileContainer.java:2067) at org.apache.derby.impl.store.raw.data.FileContainer.getUserPage(FileContainer.java:2522) at org.apache.derby.impl.store.raw.data.FileContainer.getInsertablePage(FileContainer.java:2867) at org.apache.derby.impl.store.raw.data.FileContainer.getPageForInsert(FileContainer.java:3017) at org.apache.derby.impl.store.raw.data.BaseContainerHandle.getPageForInsert(BaseContainerHandle.java:372) at org.apache.derby.impl.store.access.heap.HeapController.doInsert(HeapController.java:244) at org.apache.derby.impl.store.access.heap.HeapController.insertAndFetchLocation(HeapController.java:599) at org.apache.derby.impl.sql.execute.RowChangerImpl.insertRow(RowChangerImpl.java:452) at org.apache.derby.impl.sql.execute.InsertResultSet.normalInsertCore(InsertResultSet.java:1028) at org.apache.derby.impl.sql.execute.InsertResultSet.open(InsertResultSet.java:505) at org.apache.derby.impl.sql.GenericPreparedStatement.executeStmt(GenericPreparedStatement.java:436) at org.apache.derby.impl.sql.GenericPreparedStatement.execute(GenericPreparedStatement.java:317) at org.apache.derby.impl.jdbc.EmbedStatement.executeStatement(EmbedStatement.java:1241) at org.apache.derby.impl.jdbc.EmbedPreparedStatement.executeStatement(EmbedPreparedStatement.java:1686) at org.apache.derby.impl.jdbc.EmbedPreparedStatement.executeUpdate(EmbedPreparedStatement.java:308) at InterruptTest$WorkerThread.run(InterruptTest.java:261This can only happen if another thread has called allocCache.reset while the thread above is in the loop in validate  so as to set numExtents to 0.The synchronization of allocCache is documented in the Javadoc of the FileContainer class: all accesses to allocCache should synchronize.This is omitted when we reopen: FileContainer#openContainer calls readHeader -&gt; readHeaderFromArray -&gt; allocCache.reset",
            "id": "4960"
        },
        "4980": {
            "ground_truth": "0",
            "bug_report": "Replication tests lose derby.log for slave\nAfter running ReplicationRun_Local_3_p1 I notice that of the two directories created  db_master and db_slave  only db_master contains a derby.log file. This is not so nice  since the log file is sometimes needed for test debugging",
            "id": "4980"
        },
        "4982": {
            "ground_truth": "0",
            "bug_report": "Retrying after interrupts in store pops a bug in derbyall/storeall/storeunit/T_RawStoreFactory in some cases\nCf Myrna's comment on DERBY-4741:'I think the latest check-in has caused the following tinderbox failure:derbyall/storeall/storeall.fail:unit/T_RawStoreFactory.unitsee: http://dbtg.foundry.sun.com/derby/test/tinderbox_trunk16/jvm1.6/testing/testlog/SunOS-5.10_i86pc-i386/1061516-derbyall_diff.txt:                 Diff file derbyall/storeall/storeunit/T_RawStoreFactory.diff             Start: T_RawStoreFactory jdk1.6.0_18 storeall:storeunit 2011-01-20 23:22:23 ***2 del&lt; &#8211; Unit Test T_RawStoreFactory finished2 add&gt; ran out of time&gt; Exit due to time bombTest Failed. End: T_RawStoreFactory jdk1.6.0_18 storeall:storeunit 2011-01-21 00:22:54 ***'It failed in the nightly runs with ibm 1.6 also (and 1.4.2 and 1.5).",
            "id": "4982"
        },
        "4983": {
            "ground_truth": "0",
            "bug_report": "failure in jdbcapi.StatementJdbc20Test:testCompletionClosure_jdbc4_1 with j9 (j2ME/CDC)\nAfter revision 1061824 for DERBY-4869  there is the following failure in the tests when run with ibm's j9:1) testCompletionClosure_jdbc4_1(org.apache.derbyTesting.functionTests.tests.jdbcapi.StatementJdbc20Test)java.sql.SQLException: The exception 'java.lang.NoClassDefFoundError: java.sql.DriverManager' was thrown while evaluating an expression. at org.apache.derby.impl.jdbc.SQLExceptionFactory.getSQLException(Unknown Source) at org.apache.derby.impl.jdbc.Util.newEmbedSQLException(Unknown Source) at org.apache.derby.impl.jdbc.Util.seeNextException(Unknown Source) at org.apache.derby.impl.jdbc.TransactionResourceImpl.wrapInSQLException(Unknown Source) at org.apache.derby.impl.jdbc.TransactionResourceImpl.handleException(Unknown Source) at org.apache.derby.impl.jdbc.EmbedConnection.handleException(Unknown Source) at org.apache.derby.impl.jdbc.ConnectionChild.handleException(Unknown Source) at org.apache.derby.impl.jdbc.EmbedStatement.executeStatement(Unknown Source) at org.apache.derby.impl.jdbc.EmbedStatement.execute(Unknown Source) at org.apache.derby.impl.jdbc.EmbedStatement.execute(Unknown Source) at org.apache.derbyTesting.functionTests.tests.jdbcapi.StatementJdbc20Test.vetClosedCall(StatementJdbc20Test.java:357) at org.apache.derbyTesting.functionTests.tests.jdbcapi.StatementJdbc20Test.vetClosure(StatementJdbc20Test.java:317) at org.apache.derbyTesting.functionTests.tests.jdbcapi.StatementJdbc20Test.testCompletionClosure_jdbc4_1(StatementJdbc20Test.java:309) at java.lang.reflect.AccessibleObject.invokeV(AccessibleObject.java:195) at org.apache.derbyTesting.junit.BaseTestCase.runBare(BaseTestCase.java:112) at junit.extensions.TestDecorator.basicRun(TestDecorator.java:22) at junit.extensions.TestSetup$1.protect(TestSetup.java:19) at junit.extensions.TestSetup.run(TestSetup.java:23) at org.apache.derbyTesting.junit.BaseTestSetup.run(BaseTestSetup.java:57)Caused by: java.sql.SQLException: Java exception: 'java.sql.DriverManager: java.lang.NoClassDefFoundError'. at org.apache.derby.impl.jdbc.SQLExceptionFactory.getSQLException(Unknown Source) at org.apache.derby.impl.jdbc.Util.newEmbedSQLException(Unknown Source) at org.apache.derby.impl.jdbc.Util.javaException(Unknown Source) at org.apache.derby.impl.jdbc.TransactionResourceImpl.wrapInSQLException(Unknown Source) ... 33 moreCaused by: java.lang.NoClassDefFoundError: java.sql.DriverManager at org.apache.derbyTesting.functionTests.tests.jdbcapi.StatementJdbc20Test.dynamicResults(StatementJdbc20Test.java:449) at org.apache.derby.exe.acdf1940dax012dxb95exf375xffffd1bbe3d70.g0(Unknown Source) at java.lang.reflect.AccessibleObject.invokeV(AccessibleObject.java:195) at org.apache.derby.impl.services.reflect.ReflectMethod.invoke(Unknown Source) at org.apache.derby.impl.sql.execute.CallStatementResultSet.open(Unknown Source) at org.apache.derby.impl.sql.GenericPreparedStatement.executeStmt(Unknown Source) at org.apache.derby.impl.sql.GenericPreparedStatement.execute(Unknown Source) ... 29 moreNote  that there is no record of how this test would fare with the phoneME - those tests haven't been running since mid-September 2010 (http://dbtg.foundry.sun.com/derby/test/Daily/javaME/testing/Full/index_all.html).",
            "id": "4983"
        },
        "4984": {
            "ground_truth": "0",
            "bug_report": "ALTER TABLE DROP COLUMN may leave triggers invalid even if they are not using the column getting dropped.\nWhile doing testing for DERBY-4887  I found a case where ALTER TABLE DROP COLUMN will leave triggers in invalid state even if those triggers are not using the column getting dropped. egCREATE TABLE tab (  element_id INTEGER NOT NULL   altered_id VARCHAR(30) NOT NULL); insert into tab values(1 'aa');&#8211; Create a trigger against the table CREATE TRIGGER mytrig  AFTER UPDATE OF altered_id ON tab  REFERENCING NEW AS newt OLD AS oldt  FOR EACH ROW MODE DB2SQL  SELECT newt.altered_id from tab;--Drop the first column in the table. This will cause the column positions to be recalculated within the tablealter table tab drop column element_id; --mytrig is still looking for column altered_id at position 2 but drop column has changed it's position within the table to 1update tab set altered_id='bb';As shown in the example above  table 'TAB' only has 2 columns. The trigger 'MYTRIG' uses the 2nd column in it's trigger action through the REFERENCING clause. During trigger action sql parsing  every column referenced through REFERENCING clause gets transformed into a reference to the column through it's column position in the trigger table(this change to look for columns based on their column positions rather than the name went in as revision 397959 with following commit comments DERBY-1258 Change the generated code for a new/old column in a row trigger to access columns by position and not name to avoid the case-insensitive name lookup specified by JDBC.) When in the script above  we drop the column in position 1  the trigger 'MYTRIG' ends up becoming invalid because column being used in the trigger action is no more in column position 2.One possible solution is to regenerate the SPSDescriptor associated with the trigger action for all the triggers defined on the table whose column is getting dropped. We could be little smarter and only regenerate the SPSDescriptor for the triggers who use the REFERENCING clause. But we need to do more testing to make sure that triggers without REFERENCING clause do not get impacted by a drop of column which is not the last column of the table. This optimization of recognizing the right triggers may not be worth it since performance may not be that big a criteria for an ALTER TABLE DROP COLUMN which should be a rare operation in a production system.An interim solution to this problem is obviously to drop and recreate the triggers",
            "id": "4984"
        },
        "4985": {
            "ground_truth": "0",
            "bug_report": "BootLockTest can fail with ERROR XCY03: Required property 'derby.serviceProtocol' has not been set  with slow configurations\nIf derby tests are running with JVM options that slow things down substantially  it can fail with:1) testBootLock(org.apache.derbyTesting.functionTests.tests.store.BootLockTest)junit.framework.ComparisonFailure: Dual boot not detected: check BootLockMinion.log expected:&lt;...SDB6&gt; but was:&lt;...CY03&gt; at org.apache.derbyTesting.junit.BaseJDBCTestCase.assertSQLState(BaseJDBCTestCase.java:769) at org.apache.derbyTesting.junit.BaseJDBCTestCase.assertSQLState(BaseJDBCTestCase.java:804) at org.apache.derbyTesting.functionTests.tests.store.BootLockTest.testBootLock(BootLockTest.java:145) at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:60) at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:37) at org.apache.derbyTesting.junit.BaseTestCase.runBare(BaseTestCase.java:109) at junit.extensions.TestDecorator.basicRun(TestDecorator.java:22) at junit.extensions.TestSetup$1.protect(TestSetup.java:19) at junit.extensions.TestSetup.run(TestSetup.java:23) at org.apache.derbyTesting.junit.BaseTestSetup.run(BaseTestSetup.java:57) at junit.extensions.TestDecorator.basicRun(TestDecorator.java:22) at junit.extensions.TestSetup$1.protect(TestSetup.java:19) at junit.extensions.TestSetup.run(TestSetup.java:23) at junit.extensions.TestDecorator.basicRun(TestDecorator.java:22) at junit.extensions.TestSetup$1.protect(TestSetup.java:19) at junit.extensions.TestSetup.run(TestSetup.java:23)Caused by: java.sql.SQLException: Required property 'derby.serviceProtocol' hasnot been set. at org.apache.derby.impl.jdbc.SQLExceptionFactory40.getSQLException(SQLExceptionFactory40.java:95) at org.apache.derby.impl.jdbc.Util.generateCsSQLException(Util.java:256) at org.apache.derby.impl.jdbc.EmbedConnection.bootDatabase(EmbedConnection.java:2723) at org.apache.derby.impl.jdbc.EmbedConnection.&lt;init&gt;(EmbedConnection.java:384) at org.apache.derby.jdbc.Driver40.getNewEmbedConnection(Driver40.java:68) at org.apache.derby.jdbc.InternalDriver.connect(InternalDriver.java:238) at org.apache.derby.jdbc.AutoloadedDriver.connect(AutoloadedDriver.java:128) at java.sql.DriverManager.getConnection(DriverManager.java:322) at java.sql.DriverManager.getConnection(DriverManager.java:297) at org.apache.derbyTesting.junit.DriverManagerConnector.openConnection(DriverManagerConnector.java:81) at org.apache.derbyTesting.junit.DriverManagerConnector.openConnection(DriverManagerConnector.java:43) at org.apache.derbyTesting.junit.TestConfiguration.openDefaultConnection(TestConfiguration.java:1538) at org.apache.derbyTesting.junit.BaseJDBCTestCase.openDefaultConnection(BaseJDBCTestCase.java:428) at org.apache.derbyTesting.junit.BaseJDBCTestCase.getConnection(BaseJDBCTestCase.java:110) at org.apache.derbyTesting.functionTests.tests.store.BootLockTest.testBootLock(BootLockTest.java:136) ... 31 moreCaused by: java.sql.SQLException: Required property 'derby.serviceProtocol' hasnot been set. at org.apache.derby.impl.jdbc.SQLExceptionFactory.getSQLException(SQLExceptionFactory.java:45) at org.apache.derby.impl.jdbc.SQLExceptionFactory40.wrapArgsForTransportAcrossDRDA(SQLExceptionFactory40.java:119) at org.apache.derby.impl.jdbc.SQLExceptionFactory40.getSQLException(SQLExceptionFactory40.java:70) ... 45 moreCaused by: ERROR XCY03: Required property 'derby.serviceProtocol' has not been set. at org.apache.derby.iapi.error.StandardException.newException(StandardException.java:286) at org.apache.derby.impl.services.monitor.BaseMonitor.startProviderService(BaseMonitor.java:1679) at org.apache.derby.impl.services.monitor.BaseMonitor.findProviderAndStartService(BaseMonitor.java:1560) at org.apache.derby.impl.services.monitor.BaseMonitor.startPersistentService(BaseMonitor.java:979) at org.apache.derby.iapi.services.monitor.Monitor.startPersistentService(Monitor.java:550) at org.apache.derby.impl.jdbc.EmbedConnection.bootDatabase(EmbedConnection.java:2686) ... 43 moreThe test waits for the spawned process to create db.lck and service.properties and then waits three seconds more to make sure the properties have been written  but this might not be enough time.Although I have not seen this myself with unchanged code   I can simulate it on windows by changing StorageFactoryService.saveServiceProperties() to have a sleep between creating the service.properties file and writing the properties out  e.g. try { os = servicePropertiesFile.getOutputStream(); try { Thread.sleep(10000); } catch (Exception e) {} properties.store( os  serviceName + MessageService.getTextMessage(MessageId.SERVICE_PROPERTIES_DONT_EDIT));",
            "id": "4985"
        },
        "4992": {
            "ground_truth": "0",
            "bug_report": "Release notes should specify which Java version is needed to run Derby\nSince 10.3  it appears we no longer include information about what Java version is needed to run Derby  at least not on the release notes published on the web site  cf.http://db.apache.org/derby/releases/release-10.7.1.1.html and others.In the 10.2 release notes  we see:JDK/JDBC support: JDK 1.3  1.4  1.5  and J2ME J2ME/CDC/Foundation Profile JSR-169  JDBC 2.1  and JDBC 3.0 supportI think this type of information should still be readily available from the release notes  does anybody know why we stopped doing that?",
            "id": "4992"
        },
        "5001": {
            "ground_truth": "0",
            "bug_report": "Intermittent bug in InterruptResilienceTest\nKnut saw an error on the nightly test on Windows 2003: apparently an interrupt happened when waiting for a lock. Cf. enclosure test.log.",
            "id": "5001"
        },
        "5008": {
            "ground_truth": "0",
            "bug_report": "[patch] fix npe in error condition\nLogToFile#switchLogFile: In the cleanup code that handles failure of initLogFile  we seecode nulls out a variable and then access it: push the nulling down to the end.",
            "id": "5008"
        },
        "5011": {
            "ground_truth": "0",
            "bug_report": "[patch] Client driver lexer to determine statement type: fix bad attempt at incrementing a variable\nIn the client driver lexer to determine statement type  we look for token 'select'  'update'  'values' etc. The lexer used to has a bug in itshandling of end-of-line comments '--'.code doesidx = idx++;but this does absolutely nothing",
            "id": "5011"
        },
        "5018": {
            "ground_truth": "0",
            "bug_report": "[patch] remove erroneous throws clauses on non derivable methods that don't throw\nvarious constructors/private methods declare throwing exceptions that they don't in fact throw. This causes calling methods to handle these exceptions  for no reason. patch removes.",
            "id": "5018"
        },
        "5022": {
            "ground_truth": "0",
            "bug_report": "[patch] override equals correctly\ncode implements equals w/o an Object parm. Calling code that doesn't have first class signature of FormatableBitSet will not work as expected. Properly override equals to fix.",
            "id": "5022"
        },
        "5023": {
            "ground_truth": "0",
            "bug_report": "Cannot find Ant libraries when building from NetBeans\nBuilding Derby doesn't work out of the box in NetBeans. The wiki page http://wiki.apache.org/db-derby/BuildingDerby instructs NetBeans users to specify the ant.library.dir property in order to get the build working.The Ant documentation says the following about the ant.library.dir property: 'The following property is only set if Ant is started via the Launcher class (which means it may not be set inside IDEs either)' - http://ant.apache.org/manual/properties.htmlSince the property is not guaranteed to be set  I suggest that we replace references to '${ant.library.dir}/ant.jar' with references to '${ant.core.lib}' in the build scripts. According to the above mentioned Ant manual page the ant.core.lib property should always be available and point to ant.jar. Changing this makes it possible to build Derby from NetBeans with no special customization.",
            "id": "5023"
        },
        "5025": {
            "ground_truth": "0",
            "bug_report": "UpdateStatisticsTest fails after we enabled the automatic calculation of index statistics.\nAfter enabling the automatic calculation of statistics  we see the following error in UpdateStatisticsTest in the tinderbox run. See  for instance  http://dbtg.foundry.sun.com/derby/test/tinderbox_trunk16/jvm1.6/testing/Limited/testSummary-1069761.html :1) testUpdateStatistics(org.apache.derbyTesting.functionTests.tests.lang.UpdateStatisticsTest)junit.framework.AssertionFailedError at org.apache.derbyTesting.functionTests.tests.lang.UpdateStatisticsTest.testUpdateStatistics(UpdateStatisticsTest.java:164) at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39) at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25) at org.apache.derbyTesting.junit.BaseTestCase.runBare(BaseTestCase.java:112) at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24) at junit.extensions.TestSetup$1.protect(TestSetup.java:21) at junit.extensions.TestSetup.run(TestSetup.java:25) at org.apache.derbyTesting.junit.BaseTestSetup.run(BaseTestSetup.java:57)2) testUpdateStatistics(org.apache.derbyTesting.functionTests.tests.lang.UpdateStatisticsTest)junit.framework.AssertionFailedError at org.apache.derbyTesting.functionTests.tests.lang.UpdateStatisticsTest.testUpdateStatistics(UpdateStatisticsTest.java:164) at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39) at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25) at org.apache.derbyTesting.junit.BaseTestCase.runBare(BaseTestCase.java:112) at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24) at junit.extensions.TestSetup$1.protect(TestSetup.java:21) at junit.extensions.TestSetup.run(TestSetup.java:25) at org.apache.derbyTesting.junit.BaseTestSetup.run(BaseTestSetup.java:57) at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24) at junit.extensions.TestSetup$1.protect(TestSetup.java:21) at junit.extensions.TestSetup.run(TestSetup.java:25) at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24) at junit.extensions.TestSetup$1.protect(TestSetup.java:21) at junit.extensions.TestSetup.run(TestSetup.java:25) at org.apache.derbyTesting.junit.BaseTestSetup.run(BaseTestSetup.java:57)",
            "id": "5025"
        },
        "5032": {
            "ground_truth": "0",
            "bug_report": "[patch] derived InternalXact attempts (and fails) to override a method from base\nRawTransaction implementspublic void checkLogicalOperationOk() throws StandardException {}which is attempted to be overridden in derived class InternalXact  but is not done so because of a case problem in InternalXact public void checkLogicalOperationOK() throws StandardException { throw StandardException.newException( SQLState.XACT_NOT_SUPPORTED_IN_INTERNAL_XACT);}Code that calls this method thru the parent will not get the overridden method called.",
            "id": "5032"
        },
        "5033": {
            "ground_truth": "0",
            "bug_report": "[patch] System.arraycopy  being native  is more performant\nvarious places in the code  manual loops are used to copy one array to another  switch with System.arraycopy for better performance.",
            "id": "5033"
        },
        "5034": {
            "ground_truth": "0",
            "bug_report": "[patch] bad field masking makes non functional rowsInput evaluation\nRealDistinctScalarAggregateStatistics derives from RealScalarAggregateStatisticsRealDistinctScalarAggregateStatistics takes a constructor parm of rowsInput and forwards it to the super class's constructor  where it is stored for use by the class.However  the subclass mistakenly added a masked rowsInput field that is never set  and thus interferes with the proper use of the super class's rowsInput field.patch removed the erroneous subclass's field.",
            "id": "5034"
        },
        "5042": {
            "ground_truth": "0",
            "bug_report": "ResultSet.updateBoolean() on new BOOLEAN type throws exception\nI am encountering an error trying to update a BOOLEAN type through anupdatable ResultSet. My table looks like this:CREATE TABLE file_store ( path VARCHAR(255) NOT NULL  network VARCHAR(32) NOT NULL  file_blob BLOB  file_md5 VARCHAR(32)  is_directory BOOLEAN NOT NULL DEFAULT false  PRIMARY KEY (path  network));My SQL looks like this:SELECT path  network  is_directory FROM file_storeWHERE path=? AND network=? AND is_directory=true FOR UPDATE OF path  network  is_directoryMy Java code looks like this:...resultSet.moveToInsertRow();resultSet.updateString('path'  dirPath);resultSet.updateString('network'  network);resultSet.updateBoolean('is_directory'  true);resultSet.insertRow();An exception is thrown in the call to updateBoolean() as follows:java.sql.SQLException: An attempt was made to put a data value of type 'byte' into a data value of type 'BOOLEAN'.It's a shame  I was looking forward to using the new BOOLEAN type before I roll out the next version of our software. For now I will fallback to SMALLINT. Does/will ALTER TABLE support a change from SMALLINT to BOOLEAN?",
            "id": "5042"
        },
        "5045": {
            "ground_truth": "0",
            "bug_report": "Assert failures in UpdateStatisticsTest\nI saw these failures when running suites.All against revision 1070949 + the 1b patch attached to DERBY-642:junit.framework.AssertionFailedError: Index statistics for &lt;ALL TABLES&gt;1: {tableId=94a458d3-012e-2a1f-d23d-ffff93077fa3  tableName=&lt;n/a&gt;  indexName=&lt;n/a&gt;  lcols=1  rows=160  unique/card=160  created=2011-02-15 17:31:00.951} expected:&lt;0&gt; but was:&lt;1&gt; at org.apache.derbyTesting.junit.IndexStatsUtil.assertStats(IndexStatsUtil.java:132) at org.apache.derbyTesting.junit.IndexStatsUtil.assertNoStats(IndexStatsUtil.java:109) at org.apache.derbyTesting.functionTests.tests.lang.UpdateStatisticsTest.testUpdateStatistics(UpdateStatisticsTest.java:91) at org.apache.derbyTesting.junit.BaseTestCase.runBare(BaseTestCase.java:112) at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24) at junit.extensions.TestSetup$1.protect(TestSetup.java:23) at junit.extensions.TestSetup.run(TestSetup.java:27) at org.apache.derbyTesting.junit.BaseTestSetup.run(BaseTestSetup.java:57) at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24) at junit.extensions.TestSetup$1.protect(TestSetup.java:23) at junit.extensions.TestSetup.run(TestSetup.java:27) at org.apache.derbyTesting.junit.BaseTestSetup.run(BaseTestSetup.java:57)junit.framework.AssertionFailedError: Index statistics for &lt;ALL TABLES&gt;1: {tableId=94a458d3-012e-2a1f-d23d-ffff93077fa3  tableName=&lt;n/a&gt;  indexName=&lt;n/a&gt;  lcols=1  rows=160  unique/card=160  created=2011-02-15 17:31:00.951} expected:&lt;0&gt; but was:&lt;1&gt; at org.apache.derbyTesting.junit.IndexStatsUtil.assertStats(IndexStatsUtil.java:132) at org.apache.derbyTesting.junit.IndexStatsUtil.assertNoStats(IndexStatsUtil.java:109) at org.apache.derbyTesting.functionTests.tests.lang.UpdateStatisticsTest.testUpdateStatistics(UpdateStatisticsTest.java:91) at org.apache.derbyTesting.junit.BaseTestCase.runBare(BaseTestCase.java:112) at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24) at junit.extensions.TestSetup$1.protect(TestSetup.java:23) at junit.extensions.TestSetup.run(TestSetup.java:27) at org.apache.derbyTesting.junit.BaseTestSetup.run(BaseTestSetup.java:57) at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24) at junit.extensions.TestSetup$1.protect(TestSetup.java:23) at junit.extensions.TestSetup.run(TestSetup.java:27) at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24) at junit.extensions.TestSetup$1.protect(TestSetup.java:23) at junit.extensions.TestSetup.run(TestSetup.java:27) at org.apache.derbyTesting.junit.BaseTestSetup.run(BaseTestSetup.java:57) at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24) at junit.extensions.TestSetup$1.protect(TestSetup.java:23) at junit.extensions.TestSetup.run(TestSetup.java:27) at org.apache.derbyTesting.junit.BaseTestSetup.run(BaseTestSetup.java:57)",
            "id": "5045"
        },
        "5046": {
            "ground_truth": "0",
            "bug_report": "Intermittent assert failure in AutomaticIndexStatisticsTest.testStatisticsCorrectness\nAn assert on timestamps in the test AutomaticIndexStatisticsTest.testStatisticsCorrectnes is unstable  and fails on sufficiently fast machines and/or operating systems with lower resolution timers.",
            "id": "5046"
        },
        "5052": {
            "ground_truth": "0",
            "bug_report": "[patch] Bad name collision causes non functional method\nijMultipleResultSetResult has this method /** Create a ijResultImpl that represents multiple result set. */ public ijMultipleResultSetResult(List resultSets) throws SQLException { resultSets = new ArrayList(); resultSets.addAll(resultSets); }due to the name collision  this does nothing... patch fixes with this. prefixing.",
            "id": "5052"
        },
        "5053": {
            "ground_truth": "0",
            "bug_report": "[patch] reduce superfluous boxing histrionics\ncode converts strings to primitives using excessive boxing patterns. patch reduces.",
            "id": "5053"
        },
        "5063": {
            "ground_truth": "0",
            "bug_report": "Embedded driver allows updateBytes() on BOOLEAN column\nThe following code inserts the value TRUE into the table T on the embedded driver: Statement s = c.createStatement(ResultSet.TYPE_FORWARD_ONLY  ResultSet.CONCUR_UPDATABLE); s.execute('create table t(b boolean)'); ResultSet rs = s.executeQuery('select b from t'); rs.moveToInsertRow(); rs.updateBytes(1  'this is a test'.getBytes()); rs.insertRow();The client driver fails:java.sql.SQLException: An attempt was made to put a data value of type 'byte[]' into a data value of type 'BOOLEAN'.I believe the client driver is correct  and embedded should be changed to match it.",
            "id": "5063"
        },
        "5070": {
            "ground_truth": "0",
            "bug_report": "[patch] remove unused fetching of data dictionary\ncode fetches data dictionary for no reason.",
            "id": "5070"
        },
        "5071": {
            "ground_truth": "0",
            "bug_report": "[patch] use string buffers when building strings in loops\nVarious spots in code builds up strings in loops. This causes n extra StringBuffer allocations and n extra String allocationspatch replaces with direct StringBuffer use.",
            "id": "5071"
        },
        "5074": {
            "ground_truth": "0",
            "bug_report": "test failure(s) with IBM 1.4.2 in store.InterruptResilienceTest.testRAFWriteInterrupted: java.sql.SQLException: The exception 'junit.framework.AssertionFailedError: interrupt flag lost' was thrown while evaluating an expression.\nSince February 17  I see this failure:1) testRAFWriteInterrupted(org.apache.derbyTesting.functionTests.tests.store.InterruptResilienceTest) java.sql.SQLException: The exception 'junit.framework.AssertionFailedError: interrupt flag lost' was thrown while evaluating an expression. at org.apache.derby.impl.jdbc.SQLExceptionFactory.getSQLException(Unknown Source) at org.apache.derby.impl.jdbc.Util.newEmbedSQLException(Unknown Source) at org.apache.derby.impl.jdbc.Util.seeNextException(Unknown Source) at org.apache.derby.impl.jdbc.TransactionResourceImpl.wrapInSQLException(Unknown Source) at org.apache.derby.impl.jdbc.TransactionResourceImpl.handleException(Unknown Source) at org.apache.derby.impl.jdbc.EmbedConnection.handleException(Unknown Source) at org.apache.derby.impl.jdbc.ConnectionChild.handleException(Unknown Source) at org.apache.derby.impl.jdbc.EmbedStatement.executeStatement(Unknown Source) at org.apache.derby.impl.jdbc.EmbedStatement.execute(Unknown Source) at org.apache.derby.impl.jdbc.EmbedStatement.executeUpdate(Unknown Source) at org.apache.derbyTesting.functionTests.tests.store.InterruptResilienceTest.testRAFWriteInterrupted(InterruptResilienceTest.java:204) at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java(Compiled Code)) at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java(Compiled Code)) at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java(Compiled Code)) at org.apache.derbyTesting.junit.BaseTestCase.runBare(BaseTestCase.java(Compiled Code)) at junit.extensions.TestDecorator.basicRun(TestDecorator.java:22) at junit.extensions.TestSetup$1.protect(TestSetup.java:19) at junit.extensions.TestSetup.run(TestSetup.java:23) at org.apache.derbyTesting.junit.BaseTestSetup.run(BaseTestSetup.java:57) at junit.extensions.TestDecorator.basicRun(TestDecorator.java:22) at junit.extensions.TestSetup$1.protect(TestSetup.java:19) at junit.extensions.TestSetup.run(TestSetup.java:23) at junit.extensions.TestDecorator.basicRun(TestDecorator.java:22) at junit.extensions.TestSetup$1.protect(TestSetup.java:19) at junit.extensions.TestSetup.run(TestSetup.java:23)Caused by: java.sql.SQLException: Java exception: 'interrupt flag lost: junit.framework.AssertionFailedError'. at org.apache.derby.impl.jdbc.SQLExceptionFactory.getSQLException(Unknown Source) at org.apache.derby.impl.jdbc.Util.newEmbedSQLException(Unknown Source) at org.apache.derby.impl.jdbc.Util.javaException(Unknown Source) at org.apache.derby.impl.jdbc.TransactionResourceImpl.wrapInSQLException(Unknown Source) ... 46 moreCaused by: junit.framework.AssertionFailedError: interrupt flag lost at org.apache.derbyTesting.functionTests.tests.store.InterruptResilienceTest.tstRAFwriteInterrupted(InterruptResilienceTest.java(Compiled Code)) at org.apache.derby.exe.ac0b5b0099x012ex376dx55e3x00000a2ef4be0.g0(Unknown Source) at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java(Compiled Code)) at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java(Compiled Code)) at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java(Compiled Code)) at org.apache.derby.impl.services.reflect.ReflectMethod.invoke(Unknown Source) at org.apache.derby.impl.sql.execute.CallStatementResultSet.open(Unknown Source) at org.apache.derby.impl.sql.GenericPreparedStatement.executeStmt(Unknown Source) at org.apache.derby.impl.sql.GenericPreparedStatement.execute(Unknown Source) ... 42 moretwice (February 20 and February 25) this was followed by a second test failure:2) testRAFReadWriteMultipleThreads(org.apache.derbyTesting.functionTests.tests.store.InterruptResilienceTest)java.sql.SQLException: The exception 'junit.framework.AssertionFailedError: Column value mismatch @ column '1'  row 1: Expected: &gt;30000&lt; Found: &gt;29999&lt;' was thrown while evaluating an expression. at org.apache.derby.impl.jdbc.SQLExceptionFactory.getSQLException(Unknown Source) at org.apache.derby.impl.jdbc.Util.newEmbedSQLException(Unknown Source) at org.apache.derby.impl.jdbc.Util.seeNextException(Unknown Source) at org.apache.derby.impl.jdbc.TransactionResourceImpl.wrapInSQLException(Unknown Source) at org.apache.derby.impl.jdbc.TransactionResourceImpl.handleException(Unknown Source) at org.apache.derby.impl.jdbc.EmbedConnection.handleException(Unknown Source) at org.apache.derby.impl.jdbc.ConnectionChild.handleException(Unknown Source) at org.apache.derby.impl.jdbc.EmbedStatement.executeStatement(Unknown Source) at org.apache.derby.impl.jdbc.EmbedStatement.execute(Unknown Source) at org.apache.derby.impl.jdbc.EmbedStatement.executeUpdate(Unknown Source) at org.apache.derbyTesting.functionTests.tests.store.InterruptResilienceTest.testRAFReadWriteMultipleThreads(InterruptResilienceTest.java:515) at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java(Compiled Code)) at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java(Compiled Code)) at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java(Compiled Code)) at org.apache.derbyTesting.junit.BaseTestCase.runBare(BaseTestCase.java(Compiled Code)) at junit.extensions.TestDecorator.basicRun(TestDecorator.java:22) at junit.extensions.TestSetup$1.protect(TestSetup.java:19) at junit.extensions.TestSetup.run(TestSetup.java:23) at org.apache.derbyTesting.junit.BaseTestSetup.run(BaseTestSetup.java:57) at junit.extensions.TestDecorator.basicRun(TestDecorator.java:22) at junit.extensions.TestSetup$1.protect(TestSetup.java:19) at junit.extensions.TestSetup.run(TestSetup.java:23) at junit.extensions.TestDecorator.basicRun(TestDecorator.java:22) at junit.extensions.TestSetup$1.protect(TestSetup.java:19) at junit.extensions.TestSetup.run(TestSetup.java:23)Caused by: java.sql.SQLException: Java exception: 'Column value mismatch @ column '1'  row 1: Expected: &gt;30000&lt; Found: &gt;29999&lt;: junit.framework.AssertionFailedError'. at org.apache.derby.impl.jdbc.SQLExceptionFactory.getSQLException(Unknown Source) at org.apache.derby.impl.jdbc.Util.newEmbedSQLException(Unknown Source) at org.apache.derby.impl.jdbc.Util.javaException(Unknown Source) at org.apache.derby.impl.jdbc.TransactionResourceImpl.wrapInSQLException(Unknown Source) ... 46 moreCaused by: junit.framework.AssertionFailedError: Column value mismatch @ column '1'  row 1: Expected: &gt;30000&lt; Found: &gt;29999&lt; at org.apache.derbyTesting.junit.JDBC.assertRowInResultSet(JDBC.java(Compiled Code)) at org.apache.derbyTesting.junit.JDBC.assertRowInResultSet(JDBC.java(Inlined Compiled Code)) at org.apache.derbyTesting.junit.JDBC.assertFullResultSetMinion(JDBC.java(Compiled Code)) at org.apache.derbyTesting.junit.JDBC.assertFullResultSet(JDBC.java(Inlined Compiled Code)) at org.apache.derbyTesting.junit.JDBC.assertFullResultSet(JDBC.java(Inlined Compiled Code)) at org.apache.derbyTesting.junit.JDBC.assertFullResultSet(JDBC.java(Inlined Compiled Code)) at org.apache.derbyTesting.junit.JDBC.assertSingleValueResultSet(JDBC.java(Compiled Code)) at org.apache.derbyTesting.functionTests.tests.store.InterruptResilienceTest.tstRAFReadWriteMultipleThreads(InterruptResilienceTest.java:265) at org.apache.derby.exe.ac070a00b0x012ex46e5x5b33x0000368ebfa60.g0(Unknown Source) at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java(Compiled Code)) at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java(Compiled Code)) at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java(Compiled Code)) at org.apache.derby.impl.services.reflect.ReflectMethod.invoke(Unknown Source) at org.apache.derby.impl.sql.execute.CallStatementResultSet.open(Unknown Source) at org.apache.derby.impl.sql.GenericPreparedStatement.executeStmt(Unknown Source) at org.apache.derby.impl.sql.GenericPreparedStatement.execute(Unknown Source) ... 42 moreSee for instance: http://people.apache.org/~myrnavl/derby_test_results/main/linux/testlog/ibm142/1071866-suites.All_diff.txtand:http://people.apache.org/~myrnavl/derby_test_results/main/linux/testlog/ibm142/1072825-suites.All_diff.txtI can reproduce the first failure on my laptop with Windows XP with ibm 1.4.2 (in fact  I got the same failure twice  I assume once with NetworkServer/client  once with embedded) by just running the test.This popping up on the 17th is because this test didn't run with ibm 1.4.2 for a while before revision 1071754 (see DERBY-4463  but this is a different problem.)I marked this 'store'  but this test doesn't fail with Sun's 1.4.2 jvm  judging from the results at http://dbtg.foundry.sun.com/derby/test/Daily/jvm1.4/testing/Limited/   so it's possible there's a jvm issue here.",
            "id": "5074"
        },
        "5076": {
            "ground_truth": "0",
            "bug_report": "[patch] move instanceof check up above where casts occur\ncode does an instanceof check on Diagnosable much after multiple casts to Diagnosable occurs above it.Move the instanceof check up before the first cast  so that it does some good.",
            "id": "5076"
        },
        "5077": {
            "ground_truth": "0",
            "bug_report": "[patch] remove non productive instanceof checks\nvarious places in code does instanceof checks where the outcome can be determined statically to be always true or always false.removed these checks as they do nothing.",
            "id": "5077"
        },
        "5078": {
            "ground_truth": "0",
            "bug_report": "Incorrect list of compatible JRE versions in client trace\nWhen running with client side tracing enabled  these lines appear first in the trace file:&#91;derby&#93; BEGIN TRACE_DRIVER_CONFIGURATION&#91;derby&#93; Driver: Apache Derby Network Client JDBC Driver 10.8.0.0 alpha - (1075248P)&#91;derby&#93; Compatible JRE versions: { 1.3  1.4 }The list of compatible JRE versions is wrong. The client driver doesn't work on 1.3  and 1.5 and 1.6 are missing from the list.",
            "id": "5078"
        },
        "5079": {
            "ground_truth": "0",
            "bug_report": "DERBY-4984 caused a regression which will not allow users to drop a table if the table was involved in a trigger action rebind during ALTER TABLE DROP COLUMN\nThe fix for DERBY-4984 has introduced a regression which adds rows into SYSDEPENDS which are incorrect. The error I think was caused when before doing a rebind of trigger action  I made the trigger table as the current dependent in the dependency system and hence all the dependencies required by the trigger action got associated with that trigger table and hence causing the errorneous behavior. I will work on this asap. The fix went into trunk and 10.7. I will add a test case for this in the jira and will also add a test case in our junit test",
            "id": "5079"
        },
        "5082": {
            "ground_truth": "0",
            "bug_report": "ShutdownException in ContextManager.checkInterrupt() during shutdown\nWhen running the attached repro script  I often (but not always) see a ShutdownException in ContextManager.checkInterrupt() when ij exits and shuts down the Derby engine. ij expects an exception here  but it expects an SQLException  not a ShutdownException.",
            "id": "5082"
        },
        "5085": {
            "ground_truth": "0",
            "bug_report": "After specifying deregister=false on the engine shutdown URL  Derby forgets that the default behavior is deregister=true\nIf you shutdown the engine specifying deregister=false  then get a new connection  then shutdown the engine again without specifying any value for the deregister attribute  Derby acts as though you specified deregister=false again. I will attach a test program which shows this problem.",
            "id": "5085"
        },
        "5086": {
            "ground_truth": "0",
            "bug_report": "Disable istat logging by default\nThe automatic index statistics daemon will by default log what it's doing. That means messages like these ones will be written to derby.log during normal operation:Wed Mar 02 13:36:22 CET 2011 Thread&#91;main 5 main&#93; {istat} 'APP'.'T': update scheduled - 23ce809c-012e-7691-6c29-000003480128 reason=&#91;no stats  row-estimate=36167&#93; (queueSize=1)Wed Mar 02 13:36:22 CET 2011 Thread&#91;index-stat-thread 5 main&#93; {istat} 'APP'.'T': generating index statisticsWed Mar 02 13:36:23 CET 2011 Thread&#91;index-stat-thread 5 main&#93; {istat} 'APP'.'T': generation complete (509 ms)Wed Mar 02 13:36:23 CET 2011 Thread&#91;main 5 main&#93; {istat} stopping daemon  active=false  work/age=510/14736 &#91;q/p/s=0/1/1 err:k/u/c=0/0/0 rej:f/d/o=0/0/0&#93;Although these messages may be helpful in diagnosing bugs  they may also be a source of confusion since users probably only expect errors/problems to be logged by default. Also  for some workloads  large quantities of log may be produced and take up disk space. Therefore  I think we should disable the logging before the 10.8 release  and instead instruct users who experience problems to enable logging manually with the derby.storage.indexStats.log property.",
            "id": "5086"
        },
        "5087": {
            "ground_truth": "0",
            "bug_report": "NPE in istat daemon when encountering critical exception during shutdown\nIf the istat daemon encounters a critical error during shutdown and the data dictionary module has been stopped  it will run into a NPE.This bug is highly timing-dependent in two ways: the data dictionary module must have been stopped first  and then the istat daemon must encounter a critical error 'at the right time'.I have seen this bug once on my laptop.",
            "id": "5087"
        },
        "5092": {
            "ground_truth": "0",
            "bug_report": "[patch] avoid Boolean allocations for rowset data in client cursor\ncode allocates a new Boolean for every row value of a boolean column  creating needless garbage. Patch switches to use immutable Boolean.TRUE and Boolean.FALSE values.",
            "id": "5092"
        },
        "5093": {
            "ground_truth": "0",
            "bug_report": "[patch] avoid Integer allocations fetching client meta data info\ncode needlessly generates Integer objects (garbage) in loops looking for meta data information  patch removes these allocations",
            "id": "5093"
        },
        "5100": {
            "ground_truth": "0",
            "bug_report": "GetCurrentPropertiesTest depends on implicit ordering of test cases\nThe test cases in GetCurrentPropertiesTest must run in the order in which they are defined in the source file. If for example the test case testPropertiesTraceOn runs first  the test will fail with the following stack trace:1) testPropertiesTraceOn(org.apache.derbyTesting.functionTests.tests.derbynet.GetCurrentPropertiesTest)junit.framework.ComparisonFailure: expected:&lt;&#91;tru&#93;e&gt; but was:&lt;&#91;fals&#93;e&gt; at org.apache.derbyTesting.functionTests.tests.derbynet.GetCurrentPropertiesTest.testPropertiesTraceOn(GetCurrentPropertiesTest.java:206) at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57) at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) at org.apache.derbyTesting.junit.BaseTestCase.runBare(BaseTestCase.java:112)(...)Seen in the nightly tests  for example here: http://dbtg.foundry.sun.com/derby/test/Daily/jvm1.7/testing/testlog/vista-64/1076682-suitesAll_diff.txt",
            "id": "5100"
        },
        "5103": {
            "ground_truth": "0",
            "bug_report": "ProcedureInTriggerTest depends on implicit ordering of test cases\nIf for example the test case testTriggerContainsSql is executed as the first test case  it will fail with the following error:1) testTriggerContainsSql(org.apache.derbyTesting.functionTests.tests.lang.ProcedureInTriggerTest)junit.framework.AssertionFailedError: expected:&lt;2&gt; but was:&lt;0&gt; at org.apache.derbyTesting.functionTests.tests.lang.ProcedureInTriggerTest.checkAndResetGetConnectionProcCount(ProcedureInTriggerTest.java:514) at org.apache.derbyTesting.functionTests.tests.lang.ProcedureInTriggerTest.testTriggerContainsSql(ProcedureInTriggerTest.java:120) at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57) at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) at org.apache.derbyTesting.junit.BaseTestCase.runBare(BaseTestCase.java:112) at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24) at junit.extensions.TestSetup$1.protect(TestSetup.java:21) at junit.extensions.TestSetup.run(TestSetup.java:25) at org.apache.derbyTesting.junit.BaseTestSetup.run(BaseTestSetup.java:57)The test should either make the order of the test cases explicit or make the test cases independent of the order in which they run.Seen in the nightly tests  for example here: http://dbtg.foundry.sun.com/derby/test/Daily/jvm1.7/testing/testlog/lin/1076682-suitesAll_diff.txt",
            "id": "5103"
        },
        "5106": {
            "ground_truth": "0",
            "bug_report": "Lacking cleanup in CheckConstraintTest.testJira4282()\nThe test case testJira4282 in CheckConstraintTest doesn't drop the table it creates. The table itself has a unique name that doesn't conflict with any other test case  but it also has a constraint with a generic name (CK1) that is in conflict with constraints created in testCheckConstraints and testPositionalUpdate. If testJira4282 runs before any of those test cases  the test will fail.Example from the nightly tests:http://dbtg.foundry.sun.com/derby/test/Daily/jvm1.7/testing/testlog/lin/1076682-suitesAll_diff.txt1) testCheckConstraints(org.apache.derbyTesting.functionTests.tests.lang.CheckConstraintTest)java.sql.SQLException: Constraint 'CK1' already exists in Schema 'APP'. at org.apache.derby.client.am.SQLExceptionFactory40.getSQLException(Unknown Source) at org.apache.derby.client.am.SqlException.getSQLException(Unknown Source) at org.apache.derby.client.am.Statement.executeUpdate(Unknown Source) at org.apache.derbyTesting.functionTests.tests.lang.CheckConstraintTest.testCheckConstraints(CheckConstraintTest.java:243)",
            "id": "5106"
        },
        "5114": {
            "ground_truth": "0",
            "bug_report": "Assert failure in SavepointJdbc30Test.testReleaseSqlSavepointAndRollback\nSeen in nightly testing on Java 7:http://dbtg.foundry.sun.com/derby/test/Daily/jvm1.7/testing/testlog/vista-64/1078855-suitesAll_diff.txt23) testReleaseSqlSavepointAndRollback(org.apache.derbyTesting.functionTests.tests.jdbcapi.SavepointJdbc30Test)junit.framework.AssertionFailedError: expected:&lt;6&gt; but was:&lt;0&gt; at org.apache.derbyTesting.functionTests.tests.jdbcapi.SavepointJdbc30Test.testReleaseSqlSavepointAndRollback(SavepointJdbc30Test.java:775) at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57) at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) at org.apache.derbyTesting.junit.BaseTestCase.runBare(BaseTestCase.java:112)",
            "id": "5114"
        },
        "5117": {
            "ground_truth": "0",
            "bug_report": "ParameterMetaDataJdbc30Test fails with ''DUMMYINT' is not recognized as a function or procedure'\nParameterMetaDataJdbc30Test has failed a couple of times in the nightly tests on Java 7.http://dbtg.foundry.sun.com/derby/test/Daily/jvm1.7/testing/testlog/lin/1078310-suitesAll_diff.txt1) testMetatdataAfterProcRecompile(org.apache.derbyTesting.functionTests.tests.jdbcapi.ParameterMetaDataJdbc30Test)java.sql.SQLSyntaxErrorException: 'DUMMYINT' is not recognized as a function or procedure. at org.apache.derby.impl.jdbc.SQLExceptionFactory40.getSQLException(Unknown Source) at org.apache.derby.impl.jdbc.Util.generateCsSQLException(Unknown Source) at org.apache.derby.impl.jdbc.TransactionResourceImpl.wrapInSQLException(Unknown Source) at org.apache.derby.impl.jdbc.TransactionResourceImpl.handleException(Unknown Source) at org.apache.derby.impl.jdbc.EmbedConnection.handleException(Unknown Source) at org.apache.derby.impl.jdbc.ConnectionChild.handleException(Unknown Source) at org.apache.derby.impl.jdbc.EmbedPreparedStatement.&lt;init&gt;(Unknown Source) at org.apache.derby.impl.jdbc.EmbedCallableStatement.&lt;init&gt;(Unknown Source) at org.apache.derby.impl.jdbc.EmbedCallableStatement20.&lt;init&gt;(Unknown Source) at org.apache.derby.impl.jdbc.EmbedCallableStatement30.&lt;init&gt;(Unknown Source) at org.apache.derby.impl.jdbc.EmbedCallableStatement40.&lt;init&gt;(Unknown Source) at org.apache.derby.jdbc.Driver40.newEmbedCallableStatement(Unknown Source) at org.apache.derby.impl.jdbc.EmbedConnection.prepareCall(Unknown Source) at org.apache.derby.impl.jdbc.EmbedConnection.prepareCall(Unknown Source) at org.apache.derbyTesting.junit.BaseJDBCTestCase.prepareCall(BaseJDBCTestCase.java:317) at org.apache.derbyTesting.functionTests.tests.jdbcapi.ParameterMetaDataJdbc30Test.testMetatdataAfterProcRecompile(ParameterMetaDataJdbc30Test.java:524)",
            "id": "5117"
        },
        "5119": {
            "ground_truth": "0",
            "bug_report": "testQualifiers(org.apache.derbyTesting.functionTests.tests.store.AccessTest)java.sql.SQLException: Table/View 'FOO' already exists in Schema 'APP'.\n1) testQualifiers(org.apache.derbyTesting.functionTests.tests.store.AccessTest)java.sql.SQLException: Table/View 'FOO' already exists in Schema 'APP'. at java.lang.Throwable.&lt;init&gt;(Throwable.java:80) at java.sql.SQLException.&lt;init&gt;(SQLException.java:153) at java.sql.SQLException.&lt;init&gt;(SQLException.java:176) at org.apache.derby.impl.jdbc.SQLExceptionFactory40.getSQLException(Unknown Source) at org.apache.derby.impl.jdbc.Util.generateCsSQLException(Unknown Source) at org.apache.derby.impl.jdbc.TransactionResourceImpl.wrapInSQLException(Unknown Source) at org.apache.derby.impl.jdbc.TransactionResourceImpl.handleException(Unknown Source) at org.apache.derby.impl.jdbc.EmbedConnection.handleException(Unknown Source) at org.apache.derby.impl.jdbc.ConnectionChild.handleException(Unknown Source) at org.apache.derby.impl.jdbc.EmbedStatement.executeStatement(Unknown Source) at org.apache.derby.impl.jdbc.EmbedStatement.execute(Unknown Source) at org.apache.derby.impl.jdbc.EmbedStatement.executeUpdate(Unknown Source) at org.apache.derbyTesting.functionTests.tests.store.AccessTest.testQualifiers(AccessTest.java:1807) at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:60) at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:37) at org.apache.derbyTesting.junit.BaseTestCase.runBare(BaseTestCase.java:112) at junit.extensions.TestDecorator.basicRun(TestDecorator.java:22) at junit.extensions.TestSetup$1.protect(TestSetup.java:19) at junit.extensions.TestSetup.run(TestSetup.java:16) at junit.extensions.TestDecorator.basicRun(TestDecorator.java:22) at junit.extensions.TestSetup$1.protect(TestSetup.java:19) at junit.extensions.TestSetup.run(TestSetup.java:23) at org.apache.derbyTesting.junit.BaseTestSetup.run(BaseTestSetup.java:51) at junit.extensions.TestDecorator.basicRun(TestDecorator.java:22) at junit.extensions.TestSetup$1.protect(TestSetup.java:19) at junit.extensions.TestSetup.run(TestSetup.java:16)Caused by: java.sql.SQLException: Table/View 'FOO' already exists in Schema 'APP'. at org.apache.derby.impl.jdbc.SQLExceptionFactory.getSQLException(Unknown Source) at org.apache.derby.impl.jdbc.SQLExceptionFactory40.wrapArgsForTransportAcrossDRDA(Unknown Source) ... 47 moreCaused by: ERROR X0Y32: Table/View 'FOO' already exists in Schema 'APP'. at org.apache.derby.iapi.error.StandardException.newException(Unknown Source) at org.apache.derby.impl.sql.catalog.DataDictionaryImpl.duplicateDescriptorException(Unknown Source) at org.apache.derby.impl.sql.catalog.DataDictionaryImpl.addDescriptor(Unknown Source) at org.apache.derby.impl.sql.execute.CreateTableConstantAction.executeConstantAction(Unknown Source) at org.apache.derby.impl.sql.execute.MiscResultSet.open(Unknown Source) at org.apache.derby.impl.sql.GenericPreparedStatement.executeStmt(Unknown Source) at org.apache.derby.impl.sql.GenericPreparedStatement.execute(Unknown Source) ... 41 moreNote this was followed by another failure DERBY-4550. Not sure if the failure to create the table might have impacted that test.",
            "id": "5119"
        },
        "5133": {
            "ground_truth": "0",
            "bug_report": "nightly test failure in derbyall/storeall/storemore/SpaceTable\nhttp://dbtg.foundry.sun.com/derby/test/Daily/jvm1.4/testing/testlog/lin/1081468-derbyall_diff.txtFailure Details:                 Diff file derbyall/storeall/storemore/SpaceTable.diff             Start: SpaceTable jdk1.4.2_02 storeall:storemore 2011-03-15 11:50:03 ***145 del&lt; PLATYPUS |0 |1 |20 |4096 |81920 145a145&gt; PLATYPUS |0 |2 |19 |4096 |77824 Test Failed. End: SpaceTable jdk1.4.2_02 storeall:storemore 2011-03-15 11:50:13 ***------------------------------------------------------",
            "id": "5133"
        },
        "5157": {
            "ground_truth": "0",
            "bug_report": "Incomplete quoting of SQL identifiers in AlterTableConstantAction\nAlterTableConstantAction generates SQL statements various places. Identifiers (schema names  table names  column names) are surrounded with double quotes in case they contain special characters. This is not enough if the identifiers contain double quotes  as can be seen with this example:ij&gt; create table t(x int);0 rows inserted/updated/deletedij&gt; alter table t add column '''' int default 42;ERROR 42X01: Syntax error: Encountered '/'' at line 1  column 22.I've found three places where AlterTableConstantAction generates SQL statements: updateNewColumnToDefault()  updateNewAutoincrementColumn()  getColumnMax(). All three places suffer from this problem.",
            "id": "5157"
        },
        "5159": {
            "ground_truth": "0",
            "bug_report": "ParameterMetaDataJdbc30Test fails with ''PMDD' is not recognized as a function or procedure'\nSeen in nightly testing on Java 7:http://dbtg.foundry.sun.com/derby/test/Daily/jvm1.7/testing/testlog/sol32/1085472-suitesAll_diff.txt1) testParameterMetadataWithLITERALParameters(org.apache.derbyTesting.functionTests.tests.jdbcapi.ParameterMetaDataJdbc30Test)java.sql.SQLSyntaxErrorException: 'PMDD' is not recognized as a function or procedure. at org.apache.derby.impl.jdbc.SQLExceptionFactory40.getSQLException(Unknown Source) at org.apache.derby.impl.jdbc.Util.generateCsSQLException(Unknown Source) at org.apache.derby.impl.jdbc.TransactionResourceImpl.wrapInSQLException(Unknown Source) at org.apache.derby.impl.jdbc.TransactionResourceImpl.handleException(Unknown Source) at org.apache.derby.impl.jdbc.EmbedConnection.handleException(Unknown Source) at org.apache.derby.impl.jdbc.ConnectionChild.handleException(Unknown Source) at org.apache.derby.impl.jdbc.EmbedPreparedStatement.&lt;init&gt;(Unknown Source) at org.apache.derby.impl.jdbc.EmbedCallableStatement.&lt;init&gt;(Unknown Source) at org.apache.derby.impl.jdbc.EmbedCallableStatement20.&lt;init&gt;(Unknown Source) at org.apache.derby.impl.jdbc.EmbedCallableStatement30.&lt;init&gt;(Unknown Source) at org.apache.derby.impl.jdbc.EmbedCallableStatement40.&lt;init&gt;(Unknown Source) at org.apache.derby.jdbc.Driver40.newEmbedCallableStatement(Unknown Source) at org.apache.derby.impl.jdbc.EmbedConnection.prepareCall(Unknown Source) at org.apache.derby.impl.jdbc.EmbedConnection.prepareCall(Unknown Source) at org.apache.derbyTesting.junit.BaseJDBCTestCase.prepareCall(BaseJDBCTestCase.java:317) at org.apache.derbyTesting.functionTests.tests.jdbcapi.ParameterMetaDataJdbc30Test.testParameterMetadataWithLITERALParameters(ParameterMetaDataJdbc30Test.java:743) at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57) at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) at org.apache.derbyTesting.junit.BaseTestCase.runBare(BaseTestCase.java:112) at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24) at junit.extensions.TestSetup$1.protect(TestSetup.java:21) at junit.extensions.TestSetup.run(TestSetup.java:25) at org.apache.derbyTesting.junit.BaseTestSetup.run(BaseTestSetup.java:57)Caused by: java.sql.SQLException: 'PMDD' is not recognized as a function or procedure. at org.apache.derby.impl.jdbc.SQLExceptionFactory.getSQLException(Unknown Source) at org.apache.derby.impl.jdbc.SQLExceptionFactory40.wrapArgsForTransportAcrossDRDA(Unknown Source) ... 47 moreCaused by: ERROR 42Y03: 'PMDD' is not recognized as a function or procedure. at org.apache.derby.iapi.error.StandardException.newException(Unknown Source) at org.apache.derby.impl.sql.compile.StaticMethodCallNode.bindExpression(Unknown Source) at org.apache.derby.impl.sql.compile.JavaToSQLValueNode.bindExpression(Unknown Source) at org.apache.derby.impl.sql.compile.CallStatementNode.bindStatement(Unknown Source) at org.apache.derby.impl.sql.GenericStatement.prepMinion(Unknown Source) at org.apache.derby.impl.sql.GenericStatement.prepare(Unknown Source) at org.apache.derby.impl.sql.conn.GenericLanguageConnectionContext.prepareInternalStatement(Unknown Source) ... 41 moreLooks like a problem with the ordering of the test cases. testParameterMetadataWithDECIMALParameters() creates the procedure PMDD  and testParameterMetadataWithLITERALParameters() calls it and drops it. If the test cases run in the opposite order  testParameterMetadataWithLITERALParameters() cannot find the procedure and fails.",
            "id": "5159"
        },
        "5161": {
            "ground_truth": "0",
            "bug_report": "Cannot rollback after syntax error in internal statement\nTo reproduce  execute the statements below in ij. Can only be reproduced this way before DERBY-5157. I don't know how to reproduce it when that bug is fixed.ij version 10.7ij&gt; connect 'jdbc:derby:db;create=true';ij&gt; autocommit off;ij&gt; create table t(x int);0 rows inserted/updated/deletedij&gt; alter table t add column '''' int default 42;ERROR 42X01: Syntax error: Encountered '/'' at line 1  column 22.Issue the 'help' command for general information on IJ command syntax.Any unrecognized commands are treated as potential SQL commands and executed directly.Consult your DBMS server reference documentation for details of the SQL syntax supported by your server.ij&gt; rollback;ERROR X0Y67: Cannot issue rollback in a nested connection when there is a pending operation in the parent connection.The error message implies that we've called rollback() on a nested transaction  whereas we're in fact called it on the parent transaction.Expected result: The rollback statement should abort the transaction without raising any errors.",
            "id": "5161"
        },
        "5162": {
            "ground_truth": "0",
            "bug_report": "CLOB INOUT arg set to NULL by procedure does not preserve NULL value when re-invoked\nIf a procedure sets an INOUT CLOB arg to NULL and is then re-invoked  the NULL is not preserved. Instead  the procedure sees the same CLOB that it saw in the last invocation. This bug was disclosed during the testing of the fix for DERBY-2515. I will attach a repro.",
            "id": "5162"
        },
        "5163": {
            "ground_truth": "0",
            "bug_report": "[patch] fix up sql cleanup handling\nWhen a sql exception occurs  don't allow potential cascading sql problems when closing sql objects from masking the original cause of the exception.Also make sure statements get closed.",
            "id": "5163"
        },
        "5189": {
            "ground_truth": "0",
            "bug_report": "PropertySetter should ignore GCJ installations\nMany Linux platforms come with GCJ installed. GCJ implements most of the Java SE API  but not all of it  so it cannot be used to build Derby. Unfortunately  PropertySetter sometimes get confused by it and constructs a compile classpath using GCJ's libraries.For example  on a machine running Debian 6.0.1  I have the sun-java6-jdk package as well as the gcj-jdk package installed. When running ant to build Derby (with no ~/ant.properties)  I get these compile classpaths constructed:printCompilerProperties: &#91;echo&#93; After setting properties: compilerPropsAlreadySet = true &#91;echo&#93; After setting properties: compilerLevel16 = 1.6 &#91;echo&#93; After setting properties: jsr169compile.classpath = /home/kah/derby/trunk/classes/stubs/jsr169:/usr/lib/jvm/java-1.5.0-gcj-4.4/jre/lib/rt.jar &#91;echo&#93; After setting properties: j14lib = ${j14lib} &#91;echo&#93; After setting properties: java14compile.classpath = /usr/lib/jvm/java-1.5.0-gcj-4.4/jre/lib/rt.jar &#91;echo&#93; After setting properties: j15lib = ${j15lib} &#91;echo&#93; After setting properties: java15compile.classpath = /usr/lib/jvm/java-1.5.0-gcj-4.4/jre/lib/rt.jar &#91;echo&#93; After setting properties: j16lib = ${jdk16}/jre/lib &#91;echo&#93; After setting properties: java16compile.classpath = /usr/lib/jvm/java-6-sun-1.6.0.24/jre/lib/alt-rt.jar:/usr/lib/jvm/java-6-sun-1.6.0.24/jre/lib/alt-string.jar:/usr/lib/jvm/java-6-sun-1.6.0.24/jre/lib/charsets.jar:/usr/lib/jvm/java-6-sun-1.6.0.24/jre/lib/deploy.jar:/usr/lib/jvm/java-6-sun-1.6.0.24/jre/lib/javaws.jar:/usr/lib/jvm/java-6-sun-1.6.0.24/jre/lib/jce.jar:/usr/lib/jvm/java-6-sun-1.6.0.24/jre/lib/jsse.jar:/usr/lib/jvm/java-6-sun-1.6.0.24/jre/lib/management-agent.jar:/usr/lib/jvm/java-6-sun-1.6.0.24/jre/lib/plugin.jar:/usr/lib/jvm/java-6-sun-1.6.0.24/jre/lib/resources.jar:/usr/lib/jvm/java-6-sun-1.6.0.24/jre/lib/rt.jarSince java15compile.classpath is based on GCJ  and GCJ lacks some classes in the javax.management.remote package  the build fails when it gets to the JMX tests:compile_jdk15: &#91;javac&#93; Compiling 14 source files to /home/kah/derby/trunk/classes &#91;javac&#93; /home/kah/derby/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/management/JMXConnectionDecorator.java:26: cannot find symbol &#91;javac&#93; symbol : class JMXServiceURL &#91;javac&#93; location: package javax.management.remote &#91;javac&#93; import javax.management.remote.JMXServiceURL; &#91;javac&#93; ^(...) &#91;javac&#93; /home/kah/derby/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/management/RemoteConnectionGetter.java:73: cannot find symbol &#91;javac&#93; symbol : class JMXConnector &#91;javac&#93; location: class org.apache.derbyTesting.functionTests.tests.management.RemoteConnectionGetter &#91;javac&#93; JMXConnector jmxc = conns.remove(jmxConnection); &#91;javac&#93; ^ &#91;javac&#93; 17 errorsBUILD FAILED/home/kah/derby/trunk/build.xml:596: The following error occurred while executing this line:/home/kah/derby/trunk/java/testing/build.xml:80: The following error occurred while executing this line:/home/kah/derby/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/management/build.xml:53: Compile failed; see the compiler error output for details.Total time: 1 minute 30 secondsPropertySetter should ignore GCJ installations to prevent this problem. If it hadn't found GCJ  it would have constructed java15compile.classpath from java16compile.classpath  and the build would have succeeded.",
            "id": "5189"
        },
        "5192": {
            "ground_truth": "0",
            "bug_report": "Setting up network server for management tests hangs intermittently\nI've seen on three occurrences with the 10.8.1.0 and 10.8.1.1 release candidates that suites.All has been stuck when setting up the network server decorator for the management test suite. Here's what I see at the end of the console output (running with derby.tests.trace=true): &#91;junit&#93; test_jdbc4_1 used 0 ms  &#91;junit&#93; test_jdbc4_1 used 0 ms  &#91;junit&#93; test_notBooted used 1623 ms java.net.SocketException: Connection reset &#91;junit&#93; at java.net.SocketInputStream.read(SocketInputStream.java:189) &#91;junit&#93; at java.net.SocketInputStream.read(SocketInputStream.java:121) &#91;junit&#93; at java.net.SocketInputStream.read(SocketInputStream.java:107) &#91;junit&#93; at org.apache.derby.impl.drda.NetworkServerControlImpl.fillReplyBuffer(Unknown Source) &#91;junit&#93; at org.apache.derby.impl.drda.NetworkServerControlImpl.readResult(Unknown Source) &#91;junit&#93; at org.apache.derby.impl.drda.NetworkServerControlImpl.pingWithNoOpen(Unknown Source) &#91;junit&#93; at org.apache.derby.impl.drda.NetworkServerControlImpl.ping(Unknown Source) &#91;junit&#93; at org.apache.derby.drda.NetworkServerControl.ping(Unknown Source) &#91;junit&#93; at org.apache.derbyTesting.junit.NetworkServerTestSetup.pingForServerUp(NetworkServerTestSetup.java:567) &#91;junit&#93; at org.apache.derbyTesting.junit.NetworkServerTestSetup.pingForServerStart(NetworkServerTestSetup.java:636) &#91;junit&#93; at org.apache.derbyTesting.junit.NetworkServerTestSetup.setUp(NetworkServerTestSetup.java:196) &#91;junit&#93; at junit.extensions.TestSetup$1.protect(TestSetup.java:20) &#91;junit&#93; at junit.framework.TestResult.runProtected(TestResult.java:124) &#91;junit&#93; at junit.extensions.TestSetup.run(TestSetup.java:25) &#91;junit&#93; at org.apache.derbyTesting.junit.BaseTestSetup.run(BaseTestSetup.java:57) &#91;junit&#93; at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24) &#91;junit&#93; at junit.extensions.TestSetup$1.protect(TestSetup.java:21) &#91;junit&#93; at junit.framework.TestResult.runProtected(TestResult.java:124) &#91;junit&#93; at junit.extensions.TestSetup.run(TestSetup.java:25) &#91;junit&#93; at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24) &#91;junit&#93; at junit.extensions.TestSetup$1.protect(TestSetup.java:21) &#91;junit&#93; at junit.framework.TestResult.runProtected(TestResult.java:124) &#91;junit&#93; at junit.extensions.TestSetup.run(TestSetup.java:25) &#91;junit&#93; at org.apache.derbyTesting.junit.BaseTestSetup.run(BaseTestSetup.java:57) &#91;junit&#93; at junit.framework.TestSuite.runTest(TestSuite.java:230) &#91;junit&#93; at junit.framework.TestSuite.run(TestSuite.java:225) &#91;junit&#93; at junit.framework.TestSuite.runTest(TestSuite.java:230) &#91;junit&#93; at junit.framework.TestSuite.run(TestSuite.java:225) &#91;junit&#93; at junit.framework.TestSuite.runTest(TestSuite.java:230) &#91;junit&#93; at junit.framework.TestSuite.run(TestSuite.java:225) &#91;junit&#93; at junit.framework.TestSuite.runTest(TestSuite.java:230) &#91;junit&#93; at junit.framework.TestSuite.run(TestSuite.java:225) &#91;junit&#93; at org.apache.tools.ant.taskdefs.optional.junit.JUnitTestRunner.run(JUnitTestRunner.java:518) &#91;junit&#93; at org.apache.tools.ant.taskdefs.optional.junit.JUnitTestRunner.launch(JUnitTestRunner.java:1052) &#91;junit&#93; at org.apache.tools.ant.taskdefs.optional.junit.JUnitTestRunner.main(JUnitTestRunner.java:906)The exception trace is just printed to the console  but it doesn't make any test fail. (The exception printed on FreeBSD was different  it said 'DRDA_InvalidReplyTooShort.S:Invalid reply from network server: Insufficient data.' The other two looked like the one above.)All the hangs have happened on VirtualBox instances  though with different guest operating systems and JVMs. Probably the timing is different from what we have on physical machines.",
            "id": "5192"
        },
        "5233": {
            "ground_truth": "0",
            "bug_report": "Interrupt of create table or index (i.e. a container) will throw XSDF1 under NIO - connection survives\nCf the enclosed repro. It would be good to make Derby ignore the interrupt here. Cf DERBY-4741. Note that this is less serious than in the cases referred to in DERBY-4741: here the database does not get shut down  even the connection survives  cf the repro. So  this can be considered a follow-up to DERBY-4741 to further improve Derby's robustness under interrupts.",
            "id": "5233"
        },
        "5236": {
            "ground_truth": "0",
            "bug_report": "Client driver silently truncates strings that exceed 32KB\nCan be seen with this JUnit test case that retrieves a VARCHAR value with 20000 characters. With the client driver  the string is truncated to 10900 characters (32700 bytes when encoded in UTF-8). public void testLongColumn() throws SQLException { PreparedStatement ps = prepareStatement( 'values cast(? as varchar(20000))'); char[] chars = new char[20000]; Arrays.fill(chars  '/u4e10'); String str = new String(chars); ps.setString(1  str); JDBC.assertSingleValueResultSet(ps.executeQuery()  str); }",
            "id": "5236"
        },
        "5239": {
            "ground_truth": "0",
            "bug_report": "Remove usages of DriverManager to obtain an Embedded Connection in Derby Server\nThe Derby Network Server appears to look up the Derby Embedded Driver from the java.sql.DriverManager in a couple of places in order to get the connection to the actual database.This means the network server cannot operate in environments where for whatever reason it is not OK to access the embedded driver from the DriverManager. Just in general this behavior is unexpected as it should be possible to directly load the embedded driver.I've observed this issue in 10.6.1.0 and checked that the relevant usages are unchanged in trunk.",
            "id": "5239"
        },
        "5243": {
            "ground_truth": "0",
            "bug_report": "assert failure in test testRAFReadWriteMultipleThreads: interrupted flag cleared\nThis is another instance of an interrupted thread losing its interrupted flag after calling Derby  but I believe this is distinct from other we have seen.1) testRAFReadWriteMultipleThreads(org.apache.derbyTesting.functionTests.tests.store.InterruptResilienceTest)java.sql.SQLException: The exception 'junit.framework.AssertionFailedError: WorkerThread 0' was thrown while evaluating an expression. at org.apache.derby.impl.jdbc.SQLExceptionFactory.getSQLException(Unknown Source) at org.apache.derby.impl.jdbc.Util.newEmbedSQLException(Unknown Source) at org.apache.derby.impl.jdbc.Util.seeNextException(Unknown Source) at org.apache.derby.impl.jdbc.TransactionResourceImpl.wrapInSQLException(Unknown Source) at org.apache.derby.impl.jdbc.TransactionResourceImpl.handleException(Unknown Source) at org.apache.derby.impl.jdbc.EmbedConnection.handleException(Unknown Source) at org.apache.derby.impl.jdbc.ConnectionChild.handleException(Unknown Source) at org.apache.derby.impl.jdbc.EmbedStatement.executeStatement(Unknown Source) at org.apache.derby.impl.jdbc.EmbedStatement.execute(Unknown Source) at org.apache.derby.impl.jdbc.EmbedStatement.executeUpdate(Unknown Source) at org.apache.derbyTesting.functionTests.tests.store.InterruptResilienceTest.testRAFReadWriteMultipleThreads(InterruptResilienceTest.java:532) at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39) at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25) at org.apache.derbyTesting.junit.BaseTestCase.runBare(BaseTestCase.java:112) at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24) at junit.extensions.TestSetup$1.protect(TestSetup.java:21) at junit.extensions.TestSetup.run(TestSetup.java:25) at org.apache.derbyTesting.junit.BaseTestSetup.run(BaseTestSetup.java:57) at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24) at junit.extensions.TestSetup$1.protect(TestSetup.java:21) at junit.extensions.TestSetup.run(TestSetup.java:25) at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24) at junit.extensions.TestSetup$1.protect(TestSetup.java:21) at junit.extensions.TestSetup.run(TestSetup.java:25)Caused by: java.sql.SQLException: Java exception: 'WorkerThread 0: junit.framework.AssertionFailedError'. at org.apache.derby.impl.jdbc.SQLExceptionFactory.getSQLException(Unknown Source) at org.apache.derby.impl.jdbc.Util.newEmbedSQLException(Unknown Source) at org.apache.derby.impl.jdbc.Util.javaException(Unknown Source) at org.apache.derby.impl.jdbc.TransactionResourceImpl.wrapInSQLException(Unknown Source) ... 45 moreCaused by: junit.framework.AssertionFailedError: WorkerThread 0 at org.apache.derbyTesting.junit.BaseTestCase.fail(BaseTestCase.java:771) at org.apache.derbyTesting.functionTests.tests.store.InterruptResilienceTest.tstRAFReadWriteMultipleThreads(InterruptResilienceTest.java:323) at org.apache.derby.exe.ac070a00b0x0130x06edxad12x000062ebfce90.g0(Unknown Source) at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39) at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25) at org.apache.derby.impl.services.reflect.ReflectMethod.invoke(Unknown Source) at org.apache.derby.impl.sql.execute.CallStatementResultSet.open(Unknown Source) at org.apache.derby.impl.sql.GenericPreparedStatement.executeStmt(Unknown Source) at org.apache.derby.impl.sql.GenericPreparedStatement.execute(Unknown Source) ... 41 moreCaused by: junit.framework.AssertionFailedError at org.apache.derbyTesting.functionTests.tests.store.InterruptResilienceTest$WorkerThread.run(InterruptResilienceTest.java:430)",
            "id": "5243"
        },
        "5244": {
            "ground_truth": "0",
            "bug_report": "DatabaseMetaData.getColumns(null  null  tableName  null) does not return the columns meta for a SYNONYM\nDatabaseMetaData.getColumns(null  null  tableName  null) does not return the columns meta for a SYNONYM.Sample java code use for testing./** ListColumns.java */import java.sql.*;import java.util.Properties;public class ListColumns { public static void main(String[] args) { Connection con = null; try { Class.forName('org.apache.derby.jdbc.ClientDriver'); Properties connectionProps = new Properties(); connectionProps.put('user'  'app'); connectionProps.put('password'  'app'); con = DriverManager.getConnection( 'jdbc:derby://localhost:1527/northwind'  connectionProps); String tableName = 'V1'; DatabaseMetaData meta = con.getMetaData(); System.out.println('Database Product Version' + meta.getDatabaseProductVersion()); ResultSet res = meta.getColumns(null  null  tableName  null); System.out.println('List of columns for ' + tableName); while (res.next()) { System.out.println(' ' + res.getString('TABLE_SCHEM') + '  ' + res.getString('TABLE_NAME') + '  ' + res.getString('COLUMN_NAME') + '  ' + res.getString('TYPE_NAME') + '  ' + res.getInt('COLUMN_SIZE') + '  ' + res.getString('NULLABLE')); } res.close(); con.close(); } catch (java.lang.ClassNotFoundException e) { System.err.println('ClassNotFoundException: ' + e.getMessage()); } catch (SQLException e) { System.err.println('SQLException: ' + e.getMessage()); } }}",
            "id": "5244"
        },
        "5246": {
            "ground_truth": "0",
            "bug_report": "Simplify bytecode generation for concatenation operator\nConcatenationOperatorNode generates bytecode that ensures the result object is not null before calling the method that implements the operator. This breaks the pattern used by other operators (which ensures that the result object is not null inside the method that implements the operator  not in the generated bytecode)  and it unnecessarily complicates the code in BinaryOperatorNode.The comments indicate that the current approach was chosen to prevent the null check from happening at execution time  but the generated bytecode does perform the null check at execution time  so generating byte code for it shouldn't have any real benefit over writing Java code for it. In general  implementing as much as possible of the execution time code as Java code is preferred to implementing it directly as bytecode because it's easier to read and debug Java code  and because the generated bytecode cannot be shared between execution plans and take more memory.",
            "id": "5246"
        },
        "5247": {
            "ground_truth": "0",
            "bug_report": "Warnings regarding XPath displayed when generating JavaDoc\nWhen generating JavaDocs for Derby. the following warnings are displayed: &#91;javadoc&#93; Constructing Javadoc information... &#91;javadoc&#93; /home/kw160128/derby/commits/10.8/java/engine/org/apache/derby/iapi/types/SqlXmlUtil.java:51: package org.w3c.dom.xpath does not exist &#91;javadoc&#93; import org.w3c.dom.xpath.XPathEvaluator; &#91;javadoc&#93; ^ &#91;javadoc&#93; /home/kw160128/derby/commits/10.8/java/engine/org/apache/derby/iapi/types/SqlXmlUtil.java:52: package org.w3c.dom.xpath does not exist &#91;javadoc&#93; import org.w3c.dom.xpath.XPathExpression; &#91;javadoc&#93; ^ &#91;javadoc&#93; /home/kw160128/derby/commits/10.8/java/engine/org/apache/derby/iapi/types/SqlXmlUtil.java:53: package org.w3c.dom.xpath does not exist &#91;javadoc&#93; import org.w3c.dom.xpath.XPathResult; &#91;javadoc&#93; ^ &#91;javadoc&#93; /home/kw160128/derby/commits/10.8/java/engine/org/apache/derby/iapi/types/SqlXmlUtil.java:128: cannot find symbol &#91;javadoc&#93; symbol : class XPathExpression &#91;javadoc&#93; location: class org.apache.derby.iapi.types.SqlXmlUtil &#91;javadoc&#93; private XPathExpression query;",
            "id": "5247"
        },
        "5249": {
            "ground_truth": "1",
            "bug_report": "A table created with 10.0.2.1 with constraints cannot be dropped with 10.5 due to NullPointerException with insane build or ASSERT FAILED Failed to find sharable conglomerate descriptor for index conglomerate  with sane build\nIn 10.0.2.1 there was some bug that caused a duplicate entry in sys.sysconglomerates.After running the attached repro_create.sql with 10.0.2.1  you will see two rows returned instead of one with:select c.constraintname  c.constraintid  cong.conglomerateid  cong.conglomeratename from sys.sysconglomerates cong  sys.syskeys k  sys.sysconstraints c where c.constraintname = 'PK_RS' and c.constraintid =k.constraintid and k.conglomerateid = cong.conglomerateid ;I am not sure what practical impact this has with 10.0 as you can still drop the table s.rs with that version.On connecting to the database with 10.5  either soft or hard upgrade with 10.5.3.2 - 1103924DROP TABLE S.RS fails with:Caused by: java.sql.SQLException: Java exception: 'ASSERT FAILED Failed to findsharable conglomerate descriptor for index conglomerate # 785: org.apache.derby.shared.common.sanity.AssertFailure'. at org.apache.derby.impl.jdbc.SQLExceptionFactory.getSQLException(SQLExceptionFactory.java:45) at org.apache.derby.impl.jdbc.SQLExceptionFactory40.wrapArgsForTransportAcrossDRDA(SQLExceptionFactory40.java:119) at org.apache.derby.impl.jdbc.SQLExceptionFactory40.getSQLException(SQLExceptionFactory40.java:70) ... 17 moreCaused by: org.apache.derby.shared.common.sanity.AssertFailure: ASSERT FAILED Failed to find sharable conglomerate descriptor for index conglomerate # 785 at org.apache.derby.shared.common.sanity.SanityManager.THROWASSERT(SanityManager.java:162) at org.apache.derby.shared.common.sanity.SanityManager.THROWASSERT(SanityManager.java:147) at org.apache.derby.iapi.sql.dictionary.ConglomerateDescriptor.describeSharedConglomerate(ConglomerateDescriptor.java:638) at org.apache.derby.iapi.sql.dictionary.ConglomerateDescriptor.drop(ConglomerateDescriptor.java:428) at org.apache.derby.iapi.sql.dictionary.ConstraintDescriptor.drop(ConstraintDescriptor.java:738) at org.apache.derby.impl.sql.execute.DDLSingleTableConstantAction.dropConstraint(DDLSingleTableConstantAction.java:144) at org.apache.derby.impl.sql.execute.DDLSingleTableConstantAction.dropConstraint(DDLSingleTableConstantAction.java:107) at org.apache.derby.impl.sql.execute.DropTableConstantAction.dropAllConstraintDescriptors(DropTableConstantAction.java:315) at org.apache.derby.impl.sql.execute.DropTableConstantAction.executeConstantAction(DropTableConstantAction.java:222) at org.apache.derby.impl.sql.execute.MiscResultSet.open(MiscResultSet.java:61) at org.apache.derby.impl.sql.GenericPreparedStatement.executeStmt(GenericPreparedStatement.java:416) at org.apache.derby.impl.sql.GenericPreparedStatement.execute(GenericPreparedStatement.java:297) at org.apache.derby.impl.jdbc.EmbedStatement.executeStatement(EmbedStatement.java:1235) ... 10 moreand with an insane build with a NullPointerException:java.lang.NullPointerException  at  org.apache.derby.iapi.sql.dictionary.ConglomerateDescriptor.drop(Unknown  Source)  at  org.apache.derby.iapi.sql.dictionary.ConstraintDescriptor.drop(Unknown  Source)  at  org.apache.derby.impl.sql.execute.DDLSingleTableConstantAction.dropConst  raint(Unknown Source)  at  org.apache.derby.impl.sql.execute.DDLSingleTableConstantAction.dropConst  raint(Unknown Source)  at  org.apache.derby.impl.sql.execute.DropTableConstantAction.dropAllConstra  intDescriptors(Unknown Source)  at  org.apache.derby.impl.sql.execute.DropTableConstantAction.executeConstan  tAction(Unknown Source)  at org.apache.derby.impl.sql.execute.MiscResultSet.open(Unknown  Source)  at  org.apache.derby.impl.sql.GenericPreparedStatement.executeStmt(Unknown  Source)  at org.apache.derby.impl.sql.GenericPreparedStatement.execute(Unknown  Source)  at org.apache.derby.impl.jdbc.EmbedStatement.executeStatement(Unknown  Source)  at org.apache.derby.impl.jdbc.EmbedStatement.execute(Unknown Source)  at org.apache.derby.impl.jdbc.EmbedStatement.executeUpdate(Unknown  Source) Still need to figure out the exact versions affected  when the dup row was fixed  and when the drop stopped working.To reproduce connect to a database with 10.0.2.1 (can be accessed at http://svn.apache.org/repos/asf/db/derby/jars/10.0.2.1)run the attached script repro_create.sql;connect with the latest on the trunk or 10.5 branchDROP TABLE S.RS;The table will not drop. The work around is to drop the table with the old version 10.0.2.1",
            "id": "5249"
        },
        "5253": {
            "ground_truth": "0",
            "bug_report": "Engine code references org.apache.derby.shared.common.sanity.SanityManager\nDerby engine code is importing org.apache.derby.shared.common.sanity.SanityManager  causing sealing violations. See DERBY-4669 why this fix is inadequate.Even though this won't fix the/all problems  using shared.common.sanity.SanityManager on the client and iapi.services.sanity.SanityManager in the engine code is a simple rule to follow. Violations are also easily addressed.",
            "id": "5253"
        },
        "5277": {
            "ground_truth": "1",
            "bug_report": "Intermittent OutOfMemoryErrors in BasicSetup.testTriggersWithLOBcolumns()\nSeen many times in the JDK 7 tests lately  and also in the Tinderbox. First occurrence was here: http://dbtg.foundry.sun.com/derby/test/Daily/jvm1.7/testing/testlog/sol32/1134678-suitesAll_diff.txt(There had been no commits in the last two days before this test run  so it's difficult to say if a recent change caused it.)The test case has a comment that says that it should never read the LOB into memory  but according to the stack trace  that's exactly what's happening:Caused by: java.lang.OutOfMemoryError: Java heap space at org.apache.derby.iapi.types.SQLBinary.readFromStream(Unknown Source) at org.apache.derby.iapi.types.SQLBinary.readExternal(Unknown Source) at org.apache.derby.iapi.types.SQLBinary.getValue(Unknown Source) at org.apache.derby.iapi.types.SQLBinary.loadStream(Unknown Source) at org.apache.derby.impl.sql.execute.UpdateResultSet.objectifyStream(Unknown Source) at org.apache.derby.impl.sql.execute.UpdateResultSet.collectAffectedRows(Unknown Source) at org.apache.derby.impl.sql.execute.UpdateResultSet.open(Unknown Source) at org.apache.derby.impl.sql.GenericPreparedStatement.executeStmt(Unknown Source) at org.apache.derby.impl.sql.GenericPreparedStatement.execute(Unknown Source) at org.apache.derby.impl.jdbc.EmbedStatement.executeStatement(Unknown Source) at org.apache.derby.impl.jdbc.EmbedPreparedStatement.executeStatement(Unknown Source) at org.apache.derby.impl.jdbc.EmbedPreparedStatement.executeUpdate(Unknown Source) at org.apache.derbyTesting.functionTests.tests.upgradeTests.BasicSetup.testTriggersWithLOBcolumns(BasicSetup.java:854)",
            "id": "5277"
        },
        "5280": {
            "ground_truth": "0",
            "bug_report": "Large batch of DDL in a database procedure dies on a transaction severity error.\nThe batch of DDL run by the procedure which registers database metadata functions now dies with the following error:ERROR 40XC0: Dead statement. This may be caused by catching a transaction severity error inside this statement.A process of binary search shows that this problem was introduced by revision 1086920 as part of the work on DERBY-5161.The bug can be reproduced by compiling the DBMDWrapper class attached to DERBY-3973 and then running the following script:connect 'jdbc:derby:memory:db;create=true'; create procedure registerPublicStaticMethods( in connectionURL varchar( 200 )  in printSQL boolean )language java parameter style java modifies sql dataexternal name 'DBMDWrapper.registerPublicStaticMethods';call registerPublicStaticMethods( 'jdbc:default:connection'  false );If you change the second argument to registerPublicStaticMethods to true  then you will see all of the DDL being issued by the database procedure. The procedure runs fine in 10.7 but fails with this error in 10.8.",
            "id": "5280"
        },
        "5286": {
            "ground_truth": "0",
            "bug_report": "Update tools/ide/netbeans directory\nThe tools/ide directory contains projects for two versions of NetBeans (5.5 and 6.0). Since they haven't been updated for newer versions of NetBeans  I suppose it means they aren't used much. Also  since there are two of them  NetBeans gets confused as to which of the projects to use  and I have experienced that it often uses a mix of the 5.5 and 6.0 projects for the open source files  which causes problems for navigation and debugging. The problem with having multiple NetBeans projects pointing to the same source is described here: http://wiki.netbeans.org/FaqSourceRootOverlapTo prevent these problems  we should either remove the tools/ide/netbeans directory and let NetBeans users create their own projects (there a pretty good description on the wiki: http://wiki.apache.org/db-derby/BuildingDerby#Using_NetBeans_to_Build_Derby )  or provide an updated project and remove the old ones.(The project files aren't really tied to a particular version of NetBeans and can be opened by newer versions. But the projects still need to be updated to be usable  I think. For example  they should have project-specific formatting settings (added in NB 6.5  I think) which set tab size to 4  since setting tab size globally to 4 as you would have to with the current projects  only works if Derby is the only project you're working on in NetBeans.)",
            "id": "5286"
        },
        "5289": {
            "ground_truth": "0",
            "bug_report": "Unable to boot 10.5.1.1 database - fails during soft/hard upgrade process for a new version number while trying to drop jdbc metadata\nI have been unable to get Derby 10.7.1.1 and 10.8.1.2 to boot the attached 10.5.1.1 database. Derby 10.6.1.0 is however able to use the DB.I'm not sure if this is a backwards compatibility bug or the result of corruption to the database. Running SYSCS_CHECK_TABLE and SYSCS_COMPRESS_TABLE under 10.6.1.0 found no problems with the database.NOTE: I have had to remove all data and non-essential tables/columns/triggers/etc prior to attaching this database.Output when connecting to the DB using ij:ERROR XJ040: Failed to start database 'C:/Users/BMASON/Sandbox/InternalDB' with class loader sun.misc.Launcher$AppClassLoader@11b86e7  see the next exception for details.ERROR XSDA7: Restore of a serializable or SQLData object of class   attempted to read more data than was originally storedFull exception from our application:java.sql.SQLException: Failed to start database 'C:/Users/BMASON/Sandbox/InternalDB' with class loader sun.misc.Launcher$AppClassLoader@93dee9  see the next exception for details. at org.apache.derby.impl.jdbc.SQLExceptionFactory40.getSQLException(Unknown Source) at org.apache.derby.impl.jdbc.Util.newEmbedSQLException(Unknown Source) at org.apache.derby.impl.jdbc.Util.seeNextException(Unknown Source) at org.apache.derby.impl.jdbc.EmbedConnection.bootDatabase(Unknown Source) at org.apache.derby.impl.jdbc.EmbedConnection.&lt;init&gt;(Unknown Source) at org.apache.derby.impl.jdbc.EmbedConnection30.&lt;init&gt;(Unknown Source) at org.apache.derby.impl.jdbc.EmbedConnection40.&lt;init&gt;(Unknown Source) at org.apache.derby.jdbc.Driver40.getNewEmbedConnection(Unknown Source) at org.apache.derby.jdbc.InternalDriver.connect(Unknown Source) at org.apache.derby.jdbc.EmbeddedDataSource.getConnection(Unknown Source) at org.apache.derby.jdbc.EmbeddedDataSource.getConnection(Unknown Source) at com.ADInstruments.LTS.util.DerbyUtils.exists(DerbyUtils.java:86) at com.ADInstruments.LTS.InternalDB.InternalDbUtilities.cacheInternalDbVersion(InternalDbUtilities.java:117) at com.ADInstruments.LTCS.InternalDB.InternalDbStartup.initialiseDatabase(InternalDbStartup.java:23) at com.ADInstruments.LTCS.StartupTasks$StartupRunnable.initDatabases(StartupTasks.java:35) at com.ADInstruments.LTCS.StartupTasks$StartupRunnable.run(StartupTasks.java:52) at java.lang.Thread.run(Thread.java:662)Caused by: java.sql.SQLException: Failed to start database 'C:/Users/BMASON/Sandbox/InternalDB' with class loader sun.misc.Launcher$AppClassLoader@93dee9  see the next exception for details. at org.apache.derby.impl.jdbc.SQLExceptionFactory.getSQLException(Unknown Source) at org.apache.derby.impl.jdbc.SQLExceptionFactory40.wrapArgsForTransportAcrossDRDA(Unknown Source) ... 17 moreCaused by: java.sql.SQLException: Restore of a serializable or SQLData object of class   attempted to read more data than was originally stored at org.apache.derby.impl.jdbc.SQLExceptionFactory.getSQLException(Unknown Source) at org.apache.derby.impl.jdbc.SQLExceptionFactory40.wrapArgsForTransportAcrossDRDA(Unknown Source) at org.apache.derby.impl.jdbc.SQLExceptionFactory40.getSQLException(Unknown Source) at org.apache.derby.impl.jdbc.Util.generateCsSQLException(Unknown Source) ... 14 moreCaused by: ERROR XSDA7: Restore of a serializable or SQLData object of class   attempted to read more data than was originally stored at org.apache.derby.iapi.error.StandardException.newException(Unknown Source) at org.apache.derby.impl.store.raw.data.StoredPage.readRecordFromArray(Unknown Source) at org.apache.derby.impl.store.raw.data.StoredPage.restoreRecordFromSlot(Unknown Source) at org.apache.derby.impl.store.raw.data.BasePage.fetchFromSlot(Unknown Source) at org.apache.derby.impl.store.access.conglomerate.GenericScanController.fetchRows(Unknown Source) at org.apache.derby.impl.store.access.heap.HeapScan.fetchNext(Unknown Source) at org.apache.derby.impl.sql.catalog.DataDictionaryImpl.getDescriptorViaHeap(Unknown Source) at org.apache.derby.impl.sql.catalog.DataDictionaryImpl.getAllSPSDescriptors(Unknown Source) at org.apache.derby.impl.sql.catalog.DataDictionaryImpl.dropJDBCMetadataSPSes(Unknown Source) at org.apache.derby.impl.sql.catalog.DataDictionaryImpl.updateMetadataSPSes(Unknown Source) at org.apache.derby.impl.sql.catalog.DD_Version.handleMinorRevisionChange(Unknown Source) at org.apache.derby.impl.sql.catalog.DD_Version.upgradeIfNeeded(Unknown Source) at org.apache.derby.impl.sql.catalog.DataDictionaryImpl.loadDictionaryTables(Unknown Source) at org.apache.derby.impl.sql.catalog.DataDictionaryImpl.boot(Unknown Source) at org.apache.derby.impl.services.monitor.BaseMonitor.boot(Unknown Source) at org.apache.derby.impl.services.monitor.TopService.bootModule(Unknown Source) at org.apache.derby.impl.services.monitor.BaseMonitor.startModule(Unknown Source) at org.apache.derby.iapi.services.monitor.Monitor.bootServiceModule(Unknown Source) at org.apache.derby.impl.db.BasicDatabase.boot(Unknown Source) at org.apache.derby.impl.services.monitor.BaseMonitor.boot(Unknown Source) at org.apache.derby.impl.services.monitor.TopService.bootModule(Unknown Source) at org.apache.derby.impl.services.monitor.BaseMonitor.bootService(Unknown Source) at org.apache.derby.impl.services.monitor.BaseMonitor.startProviderService(Unknown Source) at org.apache.derby.impl.services.monitor.BaseMonitor.findProviderAndStartService(Unknown Source) at org.apache.derby.impl.services.monitor.BaseMonitor.startPersistentService(Unknown Source) at org.apache.derby.iapi.services.monitor.Monitor.startPersistentService(Unknown Source) ... 14 moreCaused by: java.io.EOFException at java.io.DataInputStream.readInt(DataInputStream.java:375) at org.apache.derby.iapi.sql.dictionary.TriggerDescriptor.readExternal(Unknown Source) at org.apache.derby.iapi.services.io.FormatIdInputStream.readObject(Unknown Source) at org.apache.derby.iapi.services.io.ArrayUtil.readArrayItems(Unknown Source) at org.apache.derby.impl.sql.execute.TriggerInfo.readExternal(Unknown Source) at org.apache.derby.iapi.services.io.FormatIdInputStream.readObject(Unknown Source) at org.apache.derby.impl.sql.execute.WriteCursorConstantAction.readExternal(Unknown Source) at org.apache.derby.impl.sql.execute.UpdateConstantAction.readExternal(Unknown Source) at org.apache.derby.iapi.services.io.FormatIdInputStream.readObject(Unknown Source) at org.apache.derby.impl.sql.GenericStorablePreparedStatement.readExternal(Unknown Source) at org.apache.derby.iapi.services.io.FormatIdInputStream.readObject(Unknown Source) at org.apache.derby.iapi.types.UserType.readExternal(Unknown Source) ... 39 more",
            "id": "5289"
        },
        "5291": {
            "ground_truth": "1",
            "bug_report": "test failure: NullPointerException with J2ME (weme 6.2) in testDerby4137_TransactionTimeoutSpecifiedNotExceeded(org.apache.derbyTesting.functionTests.tests.memory.XAMemTest)\nSee: http://people.apache.org/~myrnavl/derby_test_results/main/windows/testlog/weme6.2/1136748-suites.All_diff.txt(until cleaned up).This test started failing after the following three changes were committed:-----------------------------------------------------------r1136397 | kahatlen | 2011-06-16 05:21:07 -0700 (Thu  16 Jun 2011) | 3 linesDERBY-5239: Remove usages of DriverManager to obtain an Embedded Connection in Derby ServerRemove import of DriverManager now that it's not used.------------------------------------------------------------------------r1136371 | kahatlen | 2011-06-16 03:54:33 -0700 (Thu  16 Jun 2011) | 6 linesDERBY-5274: getColumns() doesn't work with auto generated identitycolumns that start with large numbersRemoved hard-coded maximum length for the start value and increment inthe meta-data query.------------------------------------------------------------------------r1136363 | kristwaa | 2011-06-16 03:22:46 -0700 (Thu  16 Jun 2011) | 10 linesDERBY-4137: OOM issue using XA with timeouts Reduce the memory footprint when executing successful XA transactions thathave a timeout set by nulling out the reference to the XATransactionStateobject in the timer task. The timer task will stay around in the timer queueuntil reaching the scheduled time - even if the task is canceled.Added a regression test (run as part of 'ant junit-lowmem').Patch file: derby-4137-2a-reduce_memory_footprint.diff-----------------------------------------------------------The stack trace is like so:---------------------------------------------1) testDerby4137_TransactionTimeoutSpecifiedNotExceeded(org.apache.derbyTesting.functionTests.tests.memory.XAMemTest)junit.framework.AssertionFailedError: java.lang.NullPointerException at org.apache.derbyTesting.junit.JDBCDataSource.getDataSourceObject(JDBCDataSource.java:182) at org.apache.derbyTesting.junit.J2EEDataSource.getXADataSource(J2EEDataSource.java:98) at org.apache.derbyTesting.junit.J2EEDataSource.getXADataSource(J2EEDataSource.java:69) at org.apache.derbyTesting.functionTests.tests.memory.XAMemTest.testDerby4137_TransactionTimeoutSpecifiedNotExceeded(XAMemTest.java:65) at java.lang.reflect.AccessibleObject.invokeV(AccessibleObject.java:195) at org.apache.derbyTesting.junit.BaseTestCase.runBare(BaseTestCase.java:112) at junit.extensions.TestDecorator.basicRun(TestDecorator.java:22) at junit.extensions.TestSetup$1.protect(TestSetup.java:19) at junit.extensions.TestSetup.run(TestSetup.java:23) at org.apache.derbyTesting.junit.BaseTestSetup.run(BaseTestSetup.java:57)Likely this test just needs to not run if (JDBC.vmSupportsJSR169()).",
            "id": "5291"
        },
        "5292": {
            "ground_truth": "1",
            "bug_report": "SQLAuthorisation and views\nHi in some cases there seem to be issues with SQLAuthorisation in conjunction with database VIEWS.Please see attached files as repro (script.txt has only the SQL I executed  output is the output resulting when running the script). I would think identical results should be returned in all cases and independent on how the view has been defined  but this to my surprise not being the case:1) Trying to select from view appl.'VW_MyTasks' - which is a simple view defined on just one table - leads to expected results  i.e. 'my' tasks are being returned.2) Trying to select from view appl.'VW_MyPriorityTasks - which is a view defined on two joined tables without using an inner join clause - leads to expected results  i.e. 'my' priority tasks are being returned.3) Trying to select from view appl.'VW2_MyPriorityTasks - which is the same view but now the two tables joined using an inner join clause - leads to an error and no tasks returned (when the same results as in 2) above were expected).4) Trying to select from view appl.'VW3_MyPriorityTasks' - which is a view defined using a subselect - also unexpectedly leads to an error.Note: While I could rewrite each inner join clause with changing the syntax like in 2) above  this provides a simple work-around for such cases. May be there is a work-around for subselects also (not sure if every subselect could be rewritten to a join?). However when depending on using EXISTS constructs in the query there unfortunately is no way (I would know of) to get around this problem. Unfortuanetly a view that makes use of EXISTS is also one I would need to define in my data base...Thanks",
            "id": "5292"
        },
        "5300": {
            "ground_truth": "0",
            "bug_report": "Change derby.tests.trace to print the class as well as fixture name\nI was thinking it would be good for the test output with -Dderby.tests.trace=true to have the class name as well as the fixture as I think if I had a nickel for every time I grepped for a fixture name to find out what class it is in  I would have a pretty big piggy bank.It could print the full class name  like this:org.apache.derbyTesting.functionTests.tests.lang.SimpleTest.testBasicOperations used 844 ms .or strip off the org.apache.derbyTesting.functionTests for less output like:tests.lang.SimpleTest.testBugFixes used 6265 ms .Any preferences?",
            "id": "5300"
        },
        "5306": {
            "ground_truth": "0",
            "bug_report": "Remove dead methods (June 2011)\nUnused methods should be removed.",
            "id": "5306"
        },
        "5313": {
            "ground_truth": "0",
            "bug_report": "Assert failure with CASE expression in GROUP BY clause\nI see the following assert failure with debug jars on 10.5.3.0 and later (doesn't fail on 10.5.1.1 and earlier):ij&gt; create table t(x int);0 rows inserted/updated/deletedij&gt; insert into t values 1;1 row inserted/updated/deletedij&gt; select case when a=1 then 1 else 2 end from t t1(a) join t t2(b) on a=b group by case when a=1 then 1 else 2 end;ERROR XJ001: Java exception: 'ASSERT FAILED retVN expected to be instanceof ColumnReference  not org.apache.derby.impl.sql.compile.ConditionalNode: org.apache.derby.shared.common.sanity.AssertFailure'.",
            "id": "5313"
        },
        "5331": {
            "ground_truth": "0",
            "bug_report": "Incorrect use of CharsetEncoder in DDMWriter\nDDMWriter has two calls to CharsetEncoder.encode()  in writeLDString() and writeString(). According to the javadoc for CharsetEncoder  one should call reset() before one calls encode()  and flush() after on. DDMWriter doesn't call reset() or flush(). I'm not aware of any problems that happen because of it  but we should follow the spec to avoid surprises.",
            "id": "5331"
        },
        "5336": {
            "ground_truth": "1",
            "bug_report": "Repeated database creation causes OutOfMemoryError\nRepeatedly creating  querying  updating  and shutting down a database or databases eventually causes OutOfMemoryError.Java source reproducing the problem is attached.",
            "id": "5336"
        },
        "5343": {
            "ground_truth": "0",
            "bug_report": "Starting 7/13/2011 weme 6.2 upgrade tests started failing with 213 failures 127 errors with java.lang.IllegalAccessException\nStarting on 7/13/2011 weme 6.2 upgrade tests started failing with many failures and errors.The first Error is a java.lang.IllegalAccessException with stack trace below. It is probably related to this checkin.r1145973 | kahatlen | 2011-07-13 05:28:39 -0700 (Wed  13 Jul 2011) | 3 linesDERBY-5316: Unload old JDBC drivers when done with them in the upgrade testsAt first glance it looks like a JVM issue as the native method shoudln't get an IllegalAccessException.Probably best to work around it short term and disable the fix for weme. I think it just impacts the tests and not the product.Time: 11 927.828There were 127 errors:1) 10.1.1.0 Upgrade Phase: CREATE java.lang.IllegalAccessException at java.lang.reflect.Field.setImpl(Native Method) at java.lang.reflect.Field.set(Field.java:431) at org.apache.derbyTesting.functionTests.tests.upgradeTests.PhaseChanger.clearField(PhaseChanger.java:228) at org.apache.derbyTesting.functionTests.tests.upgradeTests.PhaseChanger.clearDerby23ThreadLocals(PhaseChanger.java:264) at org.apache.derbyTesting.functionTests.tests.upgradeTests.PhaseChanger.tearDown(PhaseChanger.java:153) at junit.extensions.TestSetup$1.protect(TestSetup.java:20) at junit.extensions.TestSetup.run(TestSetup.java:23) at org.apache.derbyTesting.junit.BaseTestSetup.run(BaseTestSetup.java:57) at junit.extensions.TestDecorator.basicRun(TestDecorator.java:22) at junit.extensions.TestSetup$1.protect(TestSetup.java:19) at junit.extensions.TestSetup.run(TestSetup.java:23) at org.apache.derbyTesting.junit.BaseTestSetup.run(BaseTestSetup.java:57) at junit.extensions.TestDecorator.basicRun(TestDecorator.java:22) at junit.extensions.TestSetup$1.protect(TestSetup.java:19) at junit.extensions.TestSetup.run(TestSetup.java:23) at junit.extensions.TestDecorator.basicRun(TestDecorator.java:22) at junit.extensions.TestSetup$1.protect(TestSetup.java:19) at junit.extensions.TestSetup.run(TestSetup.java:23) at org.apache.derbyTesting.junit.BaseTestSetup.run(BaseTestSetup.java:57) at junit.extensions.TestDecorator.basicRun(TestDecorator.java:22) at junit.extensions.TestSetup$1.protect(TestSetup.java:19) at junit.extensions.TestSetup.run(TestSetup.java:23) at junit.extensions.TestDecorator.basicRun(TestDecorator.java:22) at junit.extensions.TestSetup$1.protect(TestSetup.java:19) at junit.extensions.TestSetup.run(TestSetup.java:23) at org.apache.derbyTesting.junit.BaseTestSetup.run(BaseTestSetup.java:57) at junit.extensions.TestDecorator.basicRun(TestDecorator.java:22) at junit.extensions.TestSetup$1.protect(TestSetup.java:19) at junit.extensions.TestSetup.run(TestSetup.java:23) at junit.extensions.TestDecorator.basicRun(TestDecorator.java:22) at junit.extensions.TestSetup$1.protect(TestSetup.java:19) at junit.extensions.TestSetup.run(TestSetup.java:23) at org.apache.derbyTesting.junit.BaseTestSetup.run(BaseTestSetup.java:57) at junit.extensions.TestDecorator.basicRun(TestDecorator.java:22) at junit.extensions.TestSetup$1.protect(TestSetup.java:19) at junit.extensions.TestSetup.run(TestSetup.java:23) at junit.extensions.TestDecorator.basicRun(TestDecorator.java:22) at junit.extensions.TestSetup$1.protect(TestSetup.java:19) at junit.extensions.TestSetup.run(TestSetup.java:23) at org.apache.derbyTesting.junit.BaseTestSetup.run(BaseTestSetup.java:57) at junit.extensions.TestDecorator.basicRun(TestDecorator.java:22) at junit.extensions.TestSetup$1.protect(TestSetup.java:19) at junit.extensions.TestSetup.run(TestSetup.java:23) at junit.extensions.TestDecorator.basicRun(TestDecorator.java:22) at junit.extensions.TestSetup$1.protect(TestSetup.java:19) at junit.extensions.TestSetup.run(TestSetup.java:23) at org.apache.derbyTesting.junit.BaseTestSetup.run(BaseTestSetup.java:57) at junit.extensions.TestDecorator.basicRun(TestDecorator.java:22) at junit.extensions.TestSetup$1.protect(TestSetup.java:19) at junit.extensions.TestSetup.run(TestSetup.java:23) at junit.extensions.TestDecorator.basicRun(TestDecorator.java:22) at junit.extensions.TestSetup$1.protect(TestSetup.java:19) at junit.extensions.TestSetup.run(TestSetup.java:23) at junit.extensions.TestDecorator.basicRun(TestDecorator.java:22) at junit.extensions.TestSetup$1.protect(TestSetup.java:19) at junit.extensions.TestSetup.run(TestSetup.java:23)2) testUnimplementedSQLObjectAttributes(org.apache.derbyTesting.functionTests.tests.jdbcapi.DatabaseMetaDataTest)SQL Exception: Feature not implemented: no details. at org.apache.derby.impl.jdbc.Util.newEmbedSQLException(Unknown Source) at org.apache.derby.impl.jdbc.Util.newEmbedSQLException(Unknown Source) at org.apache.derby.impl.jdbc.Util.notImplemented(Unknown Source) at org.apache.derby.impl.jdbc.EmbedDatabaseMetaData.getAttributes(Unknown Source) at org.apache.derbyTesting.functionTests.tests.jdbcapi.DatabaseMetaDataTest.testUnimplementedSQLObjectAttributes(DatabaseMetaDataTest.java:944) at java.lang.reflect.AccessibleObject.invokeV(AccessibleObject.java:195) at org.apache.derbyTesting.junit.BaseTestCase.runBare(BaseTestCase.java:112) at junit.extensions.TestDecorator.basicRun(TestDecorator.java:22) at junit.extensions.TestSetup$1.protect(TestSetup.java:19) at junit.extensions.TestSetup.run(TestSetup.java:23) at junit.extensions.TestDecorator.basicRun(TestDecorator.java:22) at junit.extensions.TestSetup$1.protect(TestSetup.java:19) at junit.extensions.TestSetup.run(TestSetup.java:23) at org.apache.derbyTesting.junit.BaseTestSetup.run(BaseTestSetup.java:57) at junit.extensions.TestDecorator.basicRun(TestDecorator.java:22) at junit.extensions.TestSetup$1.protect(TestSetup.java:19) at junit.extensions.TestSetup.run(TestSetup.java:23) at org.apache.derbyTesting.junit.BaseTestSetup.run(BaseTestSetup.java:57) at junit.extensions.TestDecorator.basicRun(TestDecorator.java:22) at junit.extensions.TestSetup$1.protect(TestSetup.java:19) at junit.extensions.TestSetup.run(TestSetup.java:23) at junit.extensions.TestDecorator.basicRun(TestDecorator.java:22) at junit.extensions.TestSetup$1.protect(TestSetup.java:19) at junit.extensions.TestSetup.run(TestSetup.java:23) at org.apache.derbyTesting.junit.BaseTestSetup.run(BaseTestSetup.java:57) at junit.extensions.TestDecorator.basicRun(TestDecorator.java:22) at junit.extensions.TestSetup$1.protect(TestSetup.java:19) at junit.extensions.TestSetup.run(TestSetup.java:23) at junit.extensions.TestDecorator.basicRun(TestDecorator.java:22) at junit.extensions.TestSetup$1.protect(TestSetup.java:19) at junit.extensions.TestSetup.run(TestSetup.java:23) at org.apache.derbyTesting.junit.BaseTestSetup.run(BaseTestSetup.java:57) at junit.extensions.TestDecorator.basicRun(TestDecorator.java:22) at junit.extensions.TestSetup$1.protect(TestSetup.java:19) at junit.extensions.TestSetup.run(TestSetup.java:23) at junit.extensions.TestDecorator.basicRun(TestDecorator.java:22) at junit.extensions.TestSetup$1.protect(TestSetup.java:19) at junit.extensions.TestSetup.run(TestSetup.java:23) at org.apache.derbyTesting.junit.BaseTestSetup.run(BaseTestSetup.java:57) at junit.extensions.TestDecorator.basicRun(TestDecorator.java:22) at junit.extensions.TestSetup$1.protect(TestSetup.java:19) at junit.extensions.TestSetup.run(TestSetup.java:23) at junit.extensions.TestDecorator.basicRun(TestDecorator.java:22) at junit.extensions.TestSetup$1.protect(TestSetup.java:19) at junit.extensions.TestSetup.run(TestSetup.java:23) at org.apache.derbyTesting.junit.BaseTestSetup.run(BaseTestSetup.java:57) at junit.extensions.TestDecorator.basicRun(TestDecorator.java:22) at junit.extensions.TestSetup$1.protect(TestSetup.java:19) at junit.extensions.TestSetup.run(TestSetup.java:23) at junit.extensions.TestDecorator.basicRun(TestDecorator.java:22) at junit.extensions.TestSetup$1.protect(TestSetup.java:19) at junit.extensions.TestSetup.run(TestSetup.java:23) at org.apache.derbyTesting.junit.BaseTestSetup.run(BaseTestSetup.java:57) at junit.extensions.TestDecorator.basicRun(TestDecorator.java:22) at junit.extensions.TestSetup$1.protect(TestSetup.java:19) at junit.extensions.TestSetup.run(TestSetup.java:23) at junit.extensions.TestDecorator.basicRun(TestDecorator.java:22) at junit.extensions.TestSetup$1.protect(TestSetup.java:19) at junit.extensions.TestSetup.run(TestSetup.java:23) at junit.extensions.TestDecorator.basicRun(TestDecorator.java:22) at junit.extensions.TestSetup$1.protect(TestSetup.java:19) at junit.extensions.TestSetup.run(TestSetup.java:23)",
            "id": "5343"
        },
        "5345": {
            "ground_truth": "0",
            "bug_report": "URLCheck fails on phoneME\nI see this failure on phoneME:org.apache.derbyTesting.functionTests.tests.tools.ToolScripts.URLCheck (from org.apache.derbyTesting.functionTests.suites.All)junit.framework.ComparisonFailure: Output at line 19 expected:&lt;&#91;ij(CONNECTION1)&gt; -- Find an unknown attribute.&#93;&gt; but was:&lt;&#91;JAVA ERROR: java.lang.NoClassDefFoundError: java.sql.Driver&#93;&gt; at org.apache.derbyTesting.functionTests.util.CanonTestCase.compareCanon(Unknown Source) at org.apache.derbyTesting.functionTests.util.ScriptTestCase.runTest(Unknown Source) at org.apache.derbyTesting.junit.BaseTestCase.runBare(Unknown Source) at junit.extensions.TestDecorator.basicRun(Unknown Source) at junit.extensions.TestSetup$1.protect(Unknown Source) at junit.extensions.TestSetup.run(Unknown Source) at org.apache.derbyTesting.junit.BaseTestSetup.run(Unknown Source) at sun.misc.CVM.runMain(Unknown Source)The original test was excluded on Foundation because it required java.sql.Driver.",
            "id": "5345"
        },
        "5346": {
            "ground_truth": "0",
            "bug_report": "ij3Test fails on phoneME\norg.apache.derbyTesting.functionTests.tests.tools.ij3Test.ij3 (from org.apache.derbyTesting.functionTests.suites.All)junit.framework.ComparisonFailure: Output at line 1 expected:&lt;ij&#91;(CONNECTION1)&#93;&gt; --&gt; but was:&lt;ij[]&gt; --&gt; at org.apache.derbyTesting.functionTests.util.CanonTestCase.compareCanon(Unknown Source) at org.apache.derbyTesting.functionTests.util.ScriptTestCase.runTest(Unknown Source) at org.apache.derbyTesting.junit.BaseTestCase.runBare(Unknown Source) at junit.extensions.TestDecorator.basicRun(Unknown Source) at junit.extensions.TestSetup$1.protect(Unknown Source) at junit.extensions.TestSetup.run(Unknown Source) at junit.extensions.TestDecorator.basicRun(Unknown Source) at junit.extensions.TestSetup$1.protect(Unknown Source) at junit.extensions.TestSetup.run(Unknown Source) at org.apache.derbyTesting.junit.BaseTestSetup.run(Unknown Source) at sun.misc.CVM.runMain(Unknown Source)",
            "id": "5346"
        },
        "5369": {
            "ground_truth": "0",
            "bug_report": "Restricted Table Function support should pass NOT EQUAL restrictions to initScan\nRestricted Table Function support should pass NOT EQUAL restrictions to initScan. Currently any '!=' or '&lt;&gt;' constraints on the SQL used in the WHERE clause of a SELECT on a Restricted Table Funtion are not passed to the initScan method. These can be useful depending on how the Restricted Table Function is implemented.",
            "id": "5369"
        },
        "5377": {
            "ground_truth": "0",
            "bug_report": "AssertionFailedError in testCaseCS4595B_NonUniqueIndex in AccessTest\nThere was 1 failure:1) testCaseCS4595B_NonUniqueIndex(org.apache.derbyTesting.functionTests.tests.store.AccessTest)junit.framework.AssertionFailedError at org.apache.derbyTesting.functionTests.tests.store.AccessTest.assertStatsOK(AccessTest.java:402) at org.apache.derbyTesting.functionTests.tests.store.AccessTest.doTestCaseCS4595B(AccessTest.java:1720) at org.apache.derbyTesting.functionTests.tests.store.AccessTest.testCaseCS4595B_NonUniqueIndex(AccessTest.java:1830) at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39) at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25) at org.apache.derbyTesting.junit.BaseTestCase.runBare(BaseTestCase.java:112) at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24) at junit.extensions.TestSetup$1.protect(TestSetup.java:21) at junit.extensions.TestSetup.run(TestSetup.java:25) at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24) at junit.extensions.TestSetup$1.protect(TestSetup.java:21) at junit.extensions.TestSetup.run(TestSetup.java:25) at org.apache.derbyTesting.junit.BaseTestSetup.run(BaseTestSetup.java:57) at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24) at junit.extensions.TestSetup$1.protect(TestSetup.java:21) at junit.extensions.TestSetup.run(TestSetup.java:25)Cf. http://dbtg.foundry.sun.com/derby/test/Daily/jvm1.5/testing/Limited/testSummary-1154534.html",
            "id": "5377"
        },
        "5390": {
            "ground_truth": "1",
            "bug_report": "NPE in BasicDatabase.stop in replication slave mode (dd.clearSequenceCaches)\nTo reproduce  set up a replication pair and then stop the master (I used 'stopMaster=true').From derby.log on the slave:Replication slave role was stopped for database 'replicDB'.java.lang.NullPointerException at org.apache.derby.impl.db.BasicDatabase.stop(Unknown Source) at org.apache.derby.impl.db.SlaveDatabase.stop(SlaveDatabase.java:167) at org.apache.derby.impl.services.monitor.TopService.stop(TopService.java:443) at org.apache.derby.impl.services.monitor.TopService.shutdown(TopService.java:394) at org.apache.derby.impl.services.monitor.BaseMonitor.shutdown(BaseMonitor.java:229) at org.apache.derby.impl.db.DatabaseContextImpl.cleanupOnError(DatabaseContextImpl.java:77) at org.apache.derby.iapi.services.context.ContextManager.cleanupOnError(ContextManager.java:343) at org.apache.derby.impl.jdbc.TransactionResourceImpl.cleanupOnError(TransactionResourceImpl.java:437) at org.apache.derby.impl.jdbc.TransactionResourceImpl.handleException(TransactionResourceImpl.java:339) at org.apache.derby.impl.jdbc.EmbedConnection.handleException(EmbedConnection.java:2290) at org.apache.derby.impl.jdbc.EmbedConnection.internalStopReplicationSlave(EmbedConnection.java:1034) at org.apache.derby.impl.jdbc.EmbedConnection.&lt;init&gt;(EmbedConnection.java:353) at org.apache.derby.impl.jdbc.EmbedConnection30.&lt;init&gt;(EmbedConnection30.java:73) at org.apache.derby.impl.jdbc.EmbedConnection40.&lt;init&gt;(EmbedConnection40.java:51) at org.apache.derby.jdbc.Driver40.getNewEmbedConnection(Driver40.java:70) at org.apache.derby.jdbc.InternalDriver.connect(InternalDriver.java:248) at org.apache.derby.jdbc.AutoloadedDriver.connect(AutoloadedDriver.java:144) at org.apache.derby.impl.db.SlaveDatabase.handleShutdown(SlaveDatabase.java:428) at org.apache.derby.impl.db.SlaveDatabase.access$200(SlaveDatabase.java:72) at org.apache.derby.impl.db.SlaveDatabase$SlaveDatabaseBootThread.run(SlaveDatabase.java:328) at java.lang.Thread.run(Thread.java:722)The reason is that there is no data dictionary available when the database is in replication slave mode.Note that the exception is caught and simply printed to derby.log.",
            "id": "5390"
        },
        "5395": {
            "ground_truth": "1",
            "bug_report": "By default  only the DBO should be allowed to run several of the diagnostic VTIs.\nOnly the DBO should be allowed to run the following VTIs: syscs_diag.statement_cache syscs_diag.transaction_table syscs_diag.error_log_reader( ) syscs_diag.statement_duration()",
            "id": "5395"
        },
        "5406": {
            "ground_truth": "0",
            "bug_report": "Intermittent failures in CompressTableTest and TruncateTableTest\nThe test cases CompressTableTest.testConcurrentInvalidation() and TruncateTableTest.testConcurrentInvalidation() fail intermittently with errors such as:ERROR XSAI2: The conglomerate (2 720) requested does not exist.The problem has been analyzed in the comments on DERBY-4275  and a patch attached to that issue (invalidation-during-compilation.diff) fixes the underlying race condition. However  that patch only works correctly together with the fix for DERBY-5161  which was backed out because it caused the regression DERBY-5280.We will therefore need to find a way to fix DERBY-5161 without reintroducing DERBY-5280 in order to resolve this issue.",
            "id": "5406"
        },
        "5412": {
            "ground_truth": "1",
            "bug_report": "MemoryLeakFixesTest.testRepeatedDatabaseCreationWithAutoStats() fails on phoneME: java.lang.InternalError: Number of class names exceeds vm limit.\nSeen when running MemoryLeakFixesTest  both with trunk and with the 10.8.2.1 release candidate:1) testRepeatedDatabaseCreationWithAutoStats(org.apache.derbyTesting.functionTests.tests.memory.MemoryLeakFixesTest)java.lang.InternalError: Number of class names exceeds vm limit. at java.lang.ClassLoader.findLoadedClass0(Native Method) at java.lang.ClassLoader.findLoadedClass(Unknown Source) at java.lang.ClassLoader.loadClass(Unknown Source) at sun.misc.Launcher$AppClassLoader.loadClass(Unknown Source) at java.lang.ClassLoader.loadClass(Unknown Source) at java.util.ResourceBundle.loadBundle(Unknown Source) at java.util.ResourceBundle.findBundle(Unknown Source) at java.util.ResourceBundle.getBundleImpl(Unknown Source) at java.util.ResourceBundle.getBundle(Unknown Source) at org.apache.derby.iapi.services.i18n.MessageService.getBundleWithEnDefault(Unknown Source) at org.apache.derby.iapi.services.i18n.MessageService.getBundleForLocale(Unknown Source) at org.apache.derby.impl.services.monitor.BaseMonitor.getBundle(Unknown Source) at org.apache.derby.iapi.services.i18n.MessageService.getBundle(Unknown Source) at org.apache.derby.iapi.services.i18n.MessageService.getCompleteMessage(Unknown Source) at org.apache.derby.impl.jdbc.Util.newEmbedSQLException(Unknown Source) at org.apache.derby.impl.jdbc.Util.javaException(Unknown Source) at org.apache.derby.impl.jdbc.TransactionResourceImpl.wrapInSQLException(Unknown Source) at org.apache.derby.impl.jdbc.TransactionResourceImpl.handleException(Unknown Source) at org.apache.derby.impl.jdbc.EmbedConnection.handleException(Unknown Source) at org.apache.derby.impl.jdbc.EmbedConnection.&lt;init&gt;(Unknown Source) at org.apache.derby.impl.jdbc.EmbedConnection30.&lt;init&gt;(Unknown Source) at org.apache.derby.jdbc.Driver169.getNewEmbedConnection(Unknown Source) at org.apache.derby.jdbc.InternalDriver.connect(Unknown Source) at org.apache.derby.jdbc.EmbeddedSimpleDataSource.getConnection(Unknown Source) at org.apache.derby.jdbc.EmbeddedSimpleDataSource.getConnection(Unknown Source) at org.apache.derbyTesting.functionTests.tests.memory.MemoryLeakFixesTest.testRepeatedDatabaseCreationWithAutoStats(Unknown Source) at org.apache.derbyTesting.junit.BaseTestCase.runBare(Unknown Source) at junit.extensions.TestDecorator.basicRun(Unknown Source) at junit.extensions.TestSetup$1.protect(Unknown Source) at junit.extensions.TestSetup.run(Unknown Source) at org.apache.derbyTesting.junit.BaseTestSetup.run(Unknown Source) at sun.misc.CVM.runMain(Unknown Source)",
            "id": "5412"
        },
        "5414": {
            "ground_truth": "0",
            "bug_report": "SysDiagVTIMappingTest.test_5391() failed: java.text.ParseException: Unparseable date: 'Thu Sep 15 14:00:16 CEST 2011'\nSeen when testing the 10.8.2.1 release candidate on Windows 7:http://dbtg.foundry.sun.com/derby/test/10.8.2.1_RC/logs/jvm1.6/win7/suitesAll/report.txtThere were 2 errors:1) test_5391(org.apache.derbyTesting.functionTests.tests.lang.SysDiagVTIMappingTest)java.text.ParseException: Unparseable date: 'Thu Sep 15 14:00:16 CEST 2011' at java.text.DateFormat.parse(DateFormat.java:337) at org.apache.derbyTesting.functionTests.tests.lang.SysDiagVTIMappingTest.vetTimestamp(SysDiagVTIMappingTest.java:744) at org.apache.derbyTesting.functionTests.tests.lang.SysDiagVTIMappingTest.test_5391(SysDiagVTIMappingTest.java:728) at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39) at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25) at org.apache.derbyTesting.junit.BaseTestCase.runBare(BaseTestCase.java:113) at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24) at junit.extensions.TestSetup$1.protect(TestSetup.java:21) at junit.extensions.TestSetup.run(TestSetup.java:25) at org.apache.derbyTesting.junit.BaseTestSetup.run(BaseTestSetup.java:57) at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24) at junit.extensions.TestSetup$1.protect(TestSetup.java:21) at junit.extensions.TestSetup.run(TestSetup.java:25) at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24) at junit.extensions.TestSetup$1.protect(TestSetup.java:21) at junit.extensions.TestSetup.run(TestSetup.java:25) at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24) at junit.extensions.TestSetup$1.protect(TestSetup.java:21) at junit.extensions.TestSetup.run(TestSetup.java:25)2) test_5391(org.apache.derbyTesting.functionTests.tests.lang.SysDiagVTIMappingTest)java.text.ParseException: Unparseable date: 'Thu Sep 15 14:00:16 CEST 2011' at java.text.DateFormat.parse(DateFormat.java:337) at org.apache.derbyTesting.functionTests.tests.lang.SysDiagVTIMappingTest.vetTimestamp(SysDiagVTIMappingTest.java:744) at org.apache.derbyTesting.functionTests.tests.lang.SysDiagVTIMappingTest.test_5391(SysDiagVTIMappingTest.java:728) at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39) at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25) at org.apache.derbyTesting.junit.BaseTestCase.runBare(BaseTestCase.java:113) at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24) at junit.extensions.TestSetup$1.protect(TestSetup.java:21) at junit.extensions.TestSetup.run(TestSetup.java:25) at org.apache.derbyTesting.junit.BaseTestSetup.run(BaseTestSetup.java:57) at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24) at junit.extensions.TestSetup$1.protect(TestSetup.java:21) at junit.extensions.TestSetup.run(TestSetup.java:25) at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24) at junit.extensions.TestSetup$1.protect(TestSetup.java:21) at junit.extensions.TestSetup.run(TestSetup.java:25) at org.apache.derbyTesting.junit.BaseTestSetup.run(BaseTestSetup.java:57) at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24) at junit.extensions.TestSetup$1.protect(TestSetup.java:21) at junit.extensions.TestSetup.run(TestSetup.java:25) at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24) at junit.extensions.TestSetup$1.protect(TestSetup.java:21) at junit.extensions.TestSetup.run(TestSetup.java:25) at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24) at junit.extensions.TestSetup$1.protect(TestSetup.java:21) at junit.extensions.TestSetup.run(TestSetup.java:25)",
            "id": "5414"
        },
        "5419": {
            "ground_truth": "0",
            "bug_report": "Make Derby run on Oracle Java ME Embedded Client\nI tried running Derby on Oracle Java ME Embedded Client 1.0  and booting the engine failed:Caused by: java.lang.NoClassDefFoundError: java.nio.channels.OverlappingFileLockException at org.apache.derby.impl.io.DirStorageFactory4.newPersistentFile(DirStorageFactory4.java:57) at org.apache.derby.impl.io.DirStorageFactory.newStorageFile(DirStorageFactory.java:58) at org.apache.derby.impl.services.monitor.StorageFactoryService$1.run(StorageFactoryService.java:96) at java.security.AccessController.doPrivileged(Compiled Method)(AccessController.java:351) at java.security.AccessController.doPrivileged(AccessController.java:320) at org.apache.derby.impl.services.monitor.StorageFactoryService.&lt;init&gt;(StorageFactoryService.java:86) at org.apache.derby.impl.services.monitor.BaseMonitor.getPersistentService(BaseMonitor.java:1630) at org.apache.derby.impl.services.monitor.BaseMonitor.access$100(BaseMonitor.java:99) at org.apache.derby.impl.services.monitor.BaseMonitor$ProviderEnumeration.getNextStorageFactory(BaseMonitor.java:2146) at org.apache.derby.impl.services.monitor.BaseMonitor$ProviderEnumeration.hasMoreElements(BaseMonitor.java:2159) at org.apache.derby.impl.services.monitor.BaseMonitor.findProviderAndStartService(BaseMonitor.java:1516) at org.apache.derby.impl.services.monitor.BaseMonitor.startPersistentService(BaseMonitor.java:979) at org.apache.derby.iapi.services.monitor.Monitor.startPersistentService(Monitor.java:550) at org.apache.derby.impl.jdbc.EmbedConnection.bootDatabase(EmbedConnection.java:2697) at org.apache.derby.impl.jdbc.EmbedConnection.&lt;init&gt;(EmbedConnection.java:385)This seems to happen because Derby recognizes it as a Java 1.4 platform  whereas it's actually a CDC/FP 1.1.2 platform.",
            "id": "5419"
        },
        "5424": {
            "ground_truth": "0",
            "bug_report": "On z/OS testConnectWrongSubprotocolWithSystemProperty(org.apache.derbyTesting.functionTests.tests.tools.ConnectWrongSubprotocolTest)junit.framework.Asserti ailedError\nWith the release candidate 10.8.2.1 - (1170221) I saw the following two failures on z/OS in testConnectWrongSubprotoctestolWithoutSystemPropertyThere were 2 failures:1) testConnectWrongSubprotocolWithSystemProperty(org.apache.derbyTesting.functionTests.tests.tools.ConnectWrongSubprotocolTest)junit.framework.AssertionFailedError at org.apache.derbyTesting.functionTests.tests.tools.ConnectWrongSubprotocolTest.checkConnectWrongSubprotocol(ConnectWrongSubprotocolTest.java:82) at org.apache.derbyTesting.functionTests.tests.tools.ConnectWrongSubprotocolTest.testConnectWrongSubprotocolWithSystemProperty(ConnectWrongSubprotocolTest.java:68) at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:60) at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:37) at org.apache.derbyTesting.junit.BaseTestCase.runBare(BaseTestCase.java:113) at junit.extensions.TestDecorator.basicRun(TestDecorator.java:22) at junit.extensions.TestSetup$1.protect(TestSetup.java:19) at junit.extensions.TestSetup.run(TestSetup.java:16)2) testConnectWrongSubprotoctestolWithoutSystemProperty(org.apache.derbyTesting.functionTests.tests.tools.ConnectWrongSubprotocolTest)junit.framework.AssertionFailedError at org.apache.derbyTesting.functionTests.tests.tools.ConnectWrongSubprotocolTest.checkConnectWrongSubprotocol(ConnectWrongSubprotocolTest.java:82) at org.apache.derbyTesting.functionTests.tests.tools.ConnectWrongSubprotocolTest.testConnectWrongSubprotoctestolWithoutSystemProperty(ConnectWrongSubprotocolTest.java:76) at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:60) at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:37) at org.apache.derbyTesting.junit.BaseTestCase.runBare(BaseTestCase.java:113) at junit.extensions.TestDecorator.basicRun(TestDecorator.java:22) at junit.extensions.TestSetup$1.protect(TestSetup.java:19) at junit.extensions.TestSetup.run(TestSetup.java:16)FAILURES!!!Tests run: 13984  Failures: 2  Errors: 0The test is newly converted with DERBY-5084 so not likely a regression  but probably more likely an encoding issue related to this test: String ijResult = runIjScript(ijScript  useSystemProperties);  assertTrue(ijResult.indexOf('08001') &gt; -1);",
            "id": "5424"
        },
        "5427": {
            "ground_truth": "1",
            "bug_report": "Unauthorized shutdown should not generate thread dump and javacore. AuthenticationTest dumps over 20 javacores with IBM JVM for normal user errors\nIf jdbcapi.AuthenticationTest is run without changing the derby.stream.error.extendedDiagSeverityLevel as is done in the test  it generates thread dumps and javacores for IBM jvms. I beleive the errors in this test are expected user errors and not crashes so they should not generate a thread dump or javacore. To reproduce remove this line from test: //Derby-4856 set the property to avoid thread dump and diagnostic info sysprops.put('derby.stream.error.extendedDiagSeverityLevel' '50000');Until fixed  users can work around the issue by setting derby.stream.error.extendedDiagSeverityLevel to 50000 as is done in the test.",
            "id": "5427"
        },
        "5438": {
            "ground_truth": "0",
            "bug_report": "Empty MAPS table in toursdb\nThe toursdb that's bundled with 10.7.1.1 and 10.8.1.2 (and the 10.8.2.1 release candidate) has no rows in the MAPS table. Version 10.6.2.1 had three rows in that table:ij&gt; select * from maps;MAP_ID |MAP_NAME |REGION |AREA |PHOTO_FORMAT |PICTURE --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------1 |North Ocean |Cup Island |1776.1100 |gif |4749463839613601fe00f70000000000800000008000808000000080800080008080808080c0c0c0ff000000ff00ffff000000ffff00ff00ffffffffff00000&amp;2 |Middle Ocean |Small Island |1166.7700 |gif |47494638396192008e00f70000000000800000008000808000000080800080008080808080c0c0c0ff000000ff00ffff000000ffff00ff00ffffffffff00000&amp;3 |South Ocean |Witch Island |9117.9000 |gif |474946383961f602f301f70000000000800000008000808000000080800080008080808080c0c0c0ff000000ff00ffff000000ffff00ff00ffffffffff00000&amp;3 rows selectedBuilding it on a clean trunk and looking at generated/toursdb/toursdb.out gives the following hint:FAIL &#8211; unexpected exception: java.sql.SQLException: Database 'toursDB' not found.java.sql.SQLException: Database 'toursDB' not found. at org.apache.derby.impl.jdbc.SQLExceptionFactory40.getSQLException(SQLExceptionFactory40.java:98) at org.apache.derby.impl.jdbc.Util.newEmbedSQLException(Util.java:142) at org.apache.derby.impl.jdbc.Util.newEmbedSQLException(Util.java:148) at org.apache.derby.impl.jdbc.Util.generateCsSQLException(Util.java:227) at org.apache.derby.impl.jdbc.EmbedConnection.newSQLException(EmbedConnection.java:3085) at org.apache.derby.impl.jdbc.EmbedConnection.handleDBNotFound(EmbedConnection.java:735) at org.apache.derby.impl.jdbc.EmbedConnection.&lt;init&gt;(EmbedConnection.java:414) at org.apache.derby.impl.jdbc.EmbedConnection30.&lt;init&gt;(EmbedConnection30.java:73) at org.apache.derby.impl.jdbc.EmbedConnection40.&lt;init&gt;(EmbedConnection40.java:51) at org.apache.derby.jdbc.Driver40.getNewEmbedConnection(Driver40.java:70) at org.apache.derby.jdbc.InternalDriver.connect(InternalDriver.java:248) at org.apache.derby.jdbc.AutoloadedDriver.connect(AutoloadedDriver.java:146) at java.sql.DriverManager.getConnection(DriverManager.java:582) at java.sql.DriverManager.getConnection(DriverManager.java:207) at toursdb.insertMaps.main(insertMaps.java:51)Caused by: java.sql.SQLException: Database 'toursDB' not found. at org.apache.derby.impl.jdbc.SQLExceptionFactory.getSQLException(SQLExceptionFactory.java:45) at org.apache.derby.impl.jdbc.SQLExceptionFactory40.wrapArgsForTransportAcrossDRDA(SQLExceptionFactory40.java:122) at org.apache.derby.impl.jdbc.SQLExceptionFactory40.getSQLException(SQLExceptionFactory40.java:71) ... 14 moreI suspect this was introduced by the changes in DERBY-3986 when the destination directory for toursdb was changed.",
            "id": "5438"
        },
        "5444": {
            "ground_truth": "0",
            "bug_report": "SpawnedProcess.complete may fail to destroy the process when a timeout is specified\nThe logic in SpawnedProcess has a weakness that may result in the wrapped process not being destroyed if the destroy variable is false and a timeout is specified.The problem is that the while condition will shortcut the if condition in the catch clause (where destroy is set to true if the timeout is exceeded).",
            "id": "5444"
        },
        "5454": {
            "ground_truth": "0",
            "bug_report": "ERROR 40001 deadlock in nstest on select max(serialkey)\nnstest with 10.8.2 (both 10.8.2.1 RC2 (revision 1170221) and builds off the 10.8. tree at 10.8.2.2 level after backing out re DERBY-5448) show deadlock errors like the following:Caused by: ERROR 40001: A lock could not be obtained due to a deadlock  cycle of at org.apache.derby.impl.jdbc.EmbedConnection.handleException(Unknown Source) at org.apache.derby.impl.jdbc.ConnectionChild.handleException(Unknown Source) at org.apache.derby.impl.jdbc.EmbedResultSet.closeOnTransactionError(Unknown Source) at org.apache.derby.impl.jdbc.EmbedResultSet.movePosition(Unknown Source) at org.apache.derby.impl.jdbc.EmbedResultSet.next(Unknown Source) at org.apache.derbyTesting.system.nstest.utils.DbUtil.pick_one(DbUtil.java:491) at org.apache.derbyTesting.system.nstest.utils.DbUtil.delete_one_row(DbUtil.java:418) at org.apache.derbyTesting.system.nstest.tester.TesterObject.doIUDOperation(TesterObject.java:175) at org.apache.derbyTesting.system.nstest.tester.Tester2.startTesting(Tester2.java:109) at org.apache.derbyTesting.system.nstest.NsTest.run(NsTest.java:555)Caused by: java.sql.SQLException: A lock could not be obtained due to a deadlock  cycle of locks and waiters is:Lock : ROW  NSTESTTAB  (619 15) Waiting XID : {104564  S}   NSTEST  select max(serialkey) from nstesttab where serialkey &gt; ? Granted XID : {104179  X}Lock : ROW  NSTESTTAB  (619 16) Waiting XID : {104179  S}   NSTEST  select max(serialkey) from nstesttab where serialkey &gt; ? Granted XID : {104564  X}. The selected victim is XID : 104564. at org.apache.derby.impl.jdbc.SQLExceptionFactory.getSQLException(Unknown Source) at org.apache.derby.impl.jdbc.SQLExceptionFactory40.wrapArgsForTransportAcrossDRDA(Unknown Source) ... 14 moreFor more examples  see comments on DERBY-5448.",
            "id": "5454"
        },
        "5456": {
            "ground_truth": "0",
            "bug_report": "Problems running SecureServerTest and replication tests on Open JDK 7 for Mac OS X\nI see the following errors when I run the JUnit tests on Open JDK 7 for Mac OS X:sanity is sane..START-SPAWNED:sysinfo STANDARD OUTPUT: exit code=1Tue Oct 11 10:15:02 PDT 2011 : Error getting SysInfo information.END-SPAWNED :sysinfo STANDARD OUTPUT:FSTART-SPAWNED:SpawnedNetworkServer STANDARD OUTPUT: exit code=143Tue Oct 11 10:14:54 PDT 2011 : Security manager installed using the Basic server security policy.Tue Oct 11 10:15:01 PDT 2011 : Warning: UnknkownHostException: richard-hillegas-computer.local: richard-hillegas-computer.local: nodename nor servname provided  or not known.Tue Oct 11 10:15:01 PDT 2011 : Apache Derby Network Server - 10.8.2.2 - (1181258) started and ready to accept connections on port 1527Tue Oct 11 10:15:02 PDT 2011 : host: localhost is not local to the server running on 0.0.0.0  so cannot be used for NetworkServerControl commands Tue Oct 11 10:15:02 PDT 2011 : host: localhost is not local to the server running on 0.0.0.0  so cannot be used for NetworkServerControl commands END-SPAWNED :SpawnedNetworkServer STANDARD OUTPUT:E.START-SPAWNED:sysinfo STANDARD OUTPUT: exit code=1Tue Oct 11 10:15:50 PDT 2011 : Error getting SysInfo information.END-SPAWNED :sysinfo STANDARD OUTPUT:FSTART-SPAWNED:SpawnedNetworkServer STANDARD OUTPUT: exit code=143Tue Oct 11 10:15:43 PDT 2011 : Security manager installed using the Basic server security policy.Tue Oct 11 10:15:50 PDT 2011 : Warning: UnknkownHostException: richard-hillegas-computer.local: richard-hillegas-computer.local: nodename nor servname provided  or not known.Tue Oct 11 10:15:50 PDT 2011 : Apache Derby Network Server - 10.8.2.2 - (1181258) started and ready to accept connections on port 1527Tue Oct 11 10:15:50 PDT 2011 : host: localhost is not local to the server running on 0.0.0.0  so cannot be used for NetworkServerControl commands Tue Oct 11 10:15:50 PDT 2011 : host: localhost is not local to the server running on 0.0.0.0  so cannot be used for NetworkServerControl commands END-SPAWNED :SpawnedNetworkServer STANDARD.START-SPAWNED:SpawnedNetworkServer ERROR OUTPUT:Error: Exception thrown by the agent : java.net.MalformedURLException: Local host name unknown: java.net.UnknownHostException: richard-hillegas-computer.local: richard-hillegas-computer.local: nodename nor servname provided  or not knownEND-SPAWNED :SpawnedNetworkServer ERROR OUTPUT:F.START-SPAWNED:SpawnedNetworkServer ERROR OUTPUT:Error: Exception thrown by the agent : java.net.MalformedURLException: Local host name unknown: java.net.UnknownHostException: richard-hillegas-computer.local: richard-hillegas-computer.local: nodename nor servname provided  or not knownEND-SPAWNED :SpawnedNetworkServer ERROR OUTPUT:F.START-SPAWNED:SpawnedNetworkServer ERROR OUTPUT:Error: Exception thrown by the agent : java.net.MalformedURLException: Local host name unknown: java.net.UnknownHostException: richard-hillegas-computer.local: richard-hillegas-computer.local: nodename nor servname provided  or not knownEND-SPAWNED :SpawnedNetworkServer ERROR OUTPUT:F.START-SPAWNED:SpawnedNetworkServer ERROR OUTPUT:Error: Exception thrown by the agent : java.net.MalformedURLException: Local host name unknown: java.net.UnknownHostException: richard-hillegas-computer.local: richard-hillegas-computer.local: nodename nor servname provided  or not knownEND-SPAWNED :SpawnedNetworkServer ERROR OUTPUT:F.....START-SPAWNED:SpawnedNetworkServer ERROR OUTPUT:Error: Exception thrown by the agent : java.net.MalformedURLException: Local host name unknown: java.net.UnknownHostException: richard-hillegas-computer.local: richard-hillegas-computer.local: nodename nor servname provided  or not knownEND-SPAWNED :SpawnedNetworkServer ERROR OUTPUT:F......................START-SPAWNED:SpawnedNetworkServer ERROR OUTPUT:Error: Exception thrown by the agent : java.net.MalformedURLException: Local host name unknown: java.net.UnknownHostException: richard-hillegas-computer.local: richard-hillegas-computer.local: nodename nor servname provided  or not knownEND-SPAWNED :SpawnedNetworkServer ERROR OUTPUT:F.E.E.E.F.E.E.E.E.E.E.E.E.E.E.E.E.E.E.ETime: 5 033.075There were 20 errors:1) SecureServerTest( Opened = false  Authenticated= true  CustomDerbyProperties= null  WildCardHost= 0.0.0.0 )java.lang.Exception: DRDA_NeedLocalHost.S:host: localhost is not local to the server running on 0.0.0.0  so cannot be used for NetworkServerControl commands  at org.apache.derby.impl.drda.NetworkServerControlImpl.consolePropertyMessageWork(Unknown Source) at org.apache.derby.impl.drda.NetworkServerControlImpl.consolePropertyMessage(Unknown Source) at org.apache.derby.impl.drda.NetworkServerControlImpl.readResult(Unknown Source) at org.apache.derby.impl.drda.NetworkServerControlImpl.shutdown(Unknown Source) at org.apache.derby.drda.NetworkServerControl.shutdown(Unknown Source) at org.apache.derbyTesting.junit.NetworkServerTestSetup.tearDown(NetworkServerTestSetup.java:379) at junit.extensions.TestSetup$1.protect(TestSetup.java:22) at junit.extensions.TestSetup.run(TestSetup.java:25) at org.apache.derbyTesting.junit.BaseTestSetup.run(BaseTestSetup.java:57) at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24) at junit.extensions.TestSetup$1.protect(TestSetup.java:21) at junit.extensions.TestSetup.run(TestSetup.java:25) at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24) at junit.extensions.TestSetup$1.protect(TestSetup.java:21) at junit.extensions.TestSetup.run(TestSetup.java:25) at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24) at junit.extensions.TestSetup$1.protect(TestSetup.java:21) at junit.extensions.TestSetup.run(TestSetup.java:25)2) SecureServerTest( Opened = false  Authenticated= true  CustomDerbyProperties= null  WildCardHost= 0.00.000.0 )java.lang.Exception: DRDA_NeedLocalHost.S:host: localhost is not local to the server running on 0.0.0.0  so cannot be used for NetworkServerControl commands  at org.apache.derby.impl.drda.NetworkServerControlImpl.consolePropertyMessageWork(Unknown Source) at org.apache.derby.impl.drda.NetworkServerControlImpl.consolePropertyMessage(Unknown Source) at org.apache.derby.impl.drda.NetworkServerControlImpl.readResult(Unknown Source) at org.apache.derby.impl.drda.NetworkServerControlImpl.shutdown(Unknown Source) at org.apache.derby.drda.NetworkServerControl.shutdown(Unknown Source) at org.apache.derbyTesting.junit.NetworkServerTestSetup.tearDown(NetworkServerTestSetup.java:379) at junit.extensions.TestSetup$1.protect(TestSetup.java:22) at junit.extensions.TestSetup.run(TestSetup.java:25) at org.apache.derbyTesting.junit.BaseTestSetup.run(BaseTestSetup.java:57) at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24) at junit.extensions.TestSetup$1.protect(TestSetup.java:21) at junit.extensions.TestSetup.run(TestSetup.java:25) at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24) at junit.extensions.TestSetup$1.protect(TestSetup.java:21) at junit.extensions.TestSetup.run(TestSetup.java:25) at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24) at junit.extensions.TestSetup$1.protect(TestSetup.java:21) at junit.extensions.TestSetup.run(TestSetup.java:25)3) testReplication_Local_LogFilesSynched(org.apache.derbyTesting.functionTests.tests.replicationTests.ReplicationRun_Local)java.sql.SQLException: DERBY SQL error: SQLCODE: -1  SQLSTATE: XSAI2  SQLERRMC: 384XSAI2.S at org.apache.derby.client.am.SQLExceptionFactory40.getSQLException(Unknown Source) at org.apache.derby.client.am.SqlException.getSQLException(Unknown Source) at org.apache.derby.client.am.Statement.execute(Unknown Source) at org.apache.derbyTesting.functionTests.tests.replicationTests.ReplicationRun.bootMasterDatabase(ReplicationRun.java:868) at org.apache.derbyTesting.functionTests.tests.replicationTests.ReplicationRun_Local.testReplication_Local_LogFilesSynched(ReplicationRun_Local.java:195) at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57) at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) at org.apache.derbyTesting.junit.BaseTestCase.runBare(BaseTestCase.java:113) at org.apache.derbyTesting.functionTests.tests.replicationTests.ReplicationRun.runBare(ReplicationRun.java:206) at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24) at junit.extensions.TestSetup$1.protect(TestSetup.java:21) at junit.extensions.TestSetup.run(TestSetup.java:25)Caused by: org.apache.derby.client.am.SqlException: DERBY SQL error: SQLCODE: -1  SQLSTATE: XSAI2  SQLERRMC: 384XSAI2.S at org.apache.derby.client.am.Statement.completeSqlca(Unknown Source) at org.apache.derby.client.net.NetStatementReply.parsePrepareError(Unknown Source) at org.apache.derby.client.net.NetStatementReply.parsePRPSQLSTTreply(Unknown Source) at org.apache.derby.client.net.NetStatementReply.readPrepare(Unknown Source) at org.apache.derby.client.net.StatementReply.readPrepare(Unknown Source) at org.apache.derby.client.net.NetStatement.readPrepare_(Unknown Source) at org.apache.derby.client.am.Statement.readPrepare(Unknown Source) at org.apache.derby.client.am.Statement.flowExecute(Unknown Source) at org.apache.derby.client.am.Statement.executeX(Unknown Source) ... 32 more4) testReplication_Local_1_InsertUpdateDeleteOnMaster(org.apache.derbyTesting.functionTests.tests.replicationTests.ReplicationRun_Local_1)java.sql.SQLException: DERBY SQL error: SQLCODE: -1  SQLSTATE: XSAI2  SQLERRMC: 384XSAI2.S at org.apache.derby.client.am.SQLExceptionFactory40.getSQLException(Unknown Source) at org.apache.derby.client.am.SqlException.getSQLException(Unknown Source) at org.apache.derby.client.am.Statement.execute(Unknown Source) at org.apache.derbyTesting.functionTests.tests.replicationTests.ReplicationRun.bootMasterDatabase(ReplicationRun.java:868) at org.apache.derbyTesting.functionTests.tests.replicationTests.ReplicationRun_Local_1.testReplication_Local_1_InsertUpdateDeleteOnMaster(ReplicationRun_Local_1.java:77) at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57) at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) at org.apache.derbyTesting.junit.BaseTestCase.runBare(BaseTestCase.java:113) at org.apache.derbyTesting.functionTests.tests.replicationTests.ReplicationRun.runBare(ReplicationRun.java:206) at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24) at junit.extensions.TestSetup$1.protect(TestSetup.java:21) at junit.extensions.TestSetup.run(TestSetup.java:25)Caused by: org.apache.derby.client.am.SqlException: DERBY SQL error: SQLCODE: -1  SQLSTATE: XSAI2  SQLERRMC: 384XSAI2.S at org.apache.derby.client.am.Statement.completeSqlca(Unknown Source) at org.apache.derby.client.net.NetStatementReply.parsePrepareError(Unknown Source) at org.apache.derby.client.net.NetStatementReply.parsePRPSQLSTTreply(Unknown Source) at org.apache.derby.client.net.NetStatementReply.readPrepare(Unknown Source) at org.apache.derby.client.net.StatementReply.readPrepare(Unknown Source) at org.apache.derby.client.net.NetStatement.readPrepare_(Unknown Source) at org.apache.derby.client.am.Statement.readPrepare(Unknown Source) at org.apache.derby.client.am.Statement.flowExecute(Unknown Source) at org.apache.derby.client.am.Statement.executeX(Unknown Source) ... 32 more5) testReplication_Local_1_Indexing(org.apache.derbyTesting.functionTests.tests.replicationTests.ReplicationRun_Local_1Indexing)java.sql.SQLException: DERBY SQL error: SQLCODE: -1  SQLSTATE: XSAI2  SQLERRMC: 384XSAI2.S at org.apache.derby.client.am.SQLExceptionFactory40.getSQLException(Unknown Source) at org.apache.derby.client.am.SqlException.getSQLException(Unknown Source) at org.apache.derby.client.am.Statement.execute(Unknown Source) at org.apache.derbyTesting.functionTests.tests.replicationTests.ReplicationRun.bootMasterDatabase(ReplicationRun.java:868) at org.apache.derbyTesting.functionTests.tests.replicationTests.ReplicationRun.makeReadyForReplication(ReplicationRun.java:2518) at org.apache.derbyTesting.functionTests.tests.replicationTests.ReplicationRun_Local_1Indexing.testReplication_Local_1_Indexing(ReplicationRun_Local_1Indexing.java:70) at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57) at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) at org.apache.derbyTesting.junit.BaseTestCase.runBare(BaseTestCase.java:113) at org.apache.derbyTesting.functionTests.tests.replicationTests.ReplicationRun.runBare(ReplicationRun.java:206) at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24) at junit.extensions.TestSetup$1.protect(TestSetup.java:21) at junit.extensions.TestSetup.run(TestSetup.java:25)Caused by: org.apache.derby.client.am.SqlException: DERBY SQL error: SQLCODE: -1  SQLSTATE: XSAI2  SQLERRMC: 384XSAI2.S at org.apache.derby.client.am.Statement.completeSqlca(Unknown Source) at org.apache.derby.client.net.NetStatementReply.parsePrepareError(Unknown Source) at org.apache.derby.client.net.NetStatementReply.parsePRPSQLSTTreply(Unknown Source) at org.apache.derby.client.net.NetStatementReply.readPrepare(Unknown Source) at org.apache.derby.client.net.StatementReply.readPrepare(Unknown Source) at org.apache.derby.client.net.NetStatement.readPrepare_(Unknown Source) at org.apache.derby.client.am.Statement.readPrepare(Unknown Source) at org.apache.derby.client.am.Statement.flowExecute(Unknown Source) at org.apache.derby.client.am.Statement.executeX(Unknown Source) ... 33 more6) testReplication_Local_StateTest_part1_1(org.apache.derbyTesting.functionTests.tests.replicationTests.ReplicationRun_Local_StateTest_part1_1)java.sql.SQLException: DERBY SQL error: SQLCODE: -1  SQLSTATE: XSAI2  SQLERRMC: 384XSAI2.S at org.apache.derby.client.am.SQLExceptionFactory40.getSQLException(Unknown Source) at org.apache.derby.client.am.SqlException.getSQLException(Unknown Source) at org.apache.derby.client.am.Statement.execute(Unknown Source) at org.apache.derbyTesting.functionTests.tests.replicationTests.ReplicationRun.bootMasterDatabase(ReplicationRun.java:868) at org.apache.derbyTesting.functionTests.tests.replicationTests.ReplicationRun_Local_StateTest_part1_1.testReplication_Local_StateTest_part1_1(ReplicationRun_Local_StateTest_part1_1.java:96) at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57) at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) at org.apache.derbyTesting.junit.BaseTestCase.runBare(BaseTestCase.java:113) at org.apache.derbyTesting.functionTests.tests.replicationTests.ReplicationRun.runBare(ReplicationRun.java:206) at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24) at junit.extensions.TestSetup$1.protect(TestSetup.java:21) at junit.extensions.TestSetup.run(TestSetup.java:25)Caused by: org.apache.derby.client.am.SqlException: DERBY SQL error: SQLCODE: -1  SQLSTATE: XSAI2  SQLERRMC: 384XSAI2.S at org.apache.derby.client.am.Statement.completeSqlca(Unknown Source) at org.apache.derby.client.net.NetStatementReply.parsePrepareError(Unknown Source) at org.apache.derby.client.net.NetStatementReply.parsePRPSQLSTTreply(Unknown Source) at org.apache.derby.client.net.NetStatementReply.readPrepare(Unknown Source) at org.apache.derby.client.net.StatementReply.readPrepare(Unknown Source) at org.apache.derby.client.net.NetStatement.readPrepare_(Unknown Source) at org.apache.derby.client.am.Statement.readPrepare(Unknown Source) at org.apache.derby.client.am.Statement.flowExecute(Unknown Source) at org.apache.derby.client.am.Statement.executeX(Unknown Source) ... 32 more7) testReplication_Local_StateTest_part1_2(org.apache.derbyTesting.functionTests.tests.replicationTests.ReplicationRun_Local_StateTest_part1_2)java.sql.SQLException: DERBY SQL error: SQLCODE: -1  SQLSTATE: XSAI2  SQLERRMC: 384XSAI2.S at org.apache.derby.client.am.SQLExceptionFactory40.getSQLException(Unknown Source) at org.apache.derby.client.am.SqlException.getSQLException(Unknown Source) at org.apache.derby.client.am.Statement.execute(Unknown Source) at org.apache.derbyTesting.functionTests.tests.replicationTests.ReplicationRun.bootMasterDatabase(ReplicationRun.java:868) at org.apache.derbyTesting.functionTests.tests.replicationTests.ReplicationRun_Local_StateTest_part1_2.testReplication_Local_StateTest_part1_2(ReplicationRun_Local_StateTest_part1_2.java:104) at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57) at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) at org.apache.derbyTesting.junit.BaseTestCase.runBare(BaseTestCase.java:113) at org.apache.derbyTesting.functionTests.tests.replicationTests.ReplicationRun.runBare(ReplicationRun.java:206) at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24) at junit.extensions.TestSetup$1.protect(TestSetup.java:21) at junit.extensions.TestSetup.run(TestSetup.java:25)Caused by: org.apache.derby.client.am.SqlException: DERBY SQL error: SQLCODE: -1  SQLSTATE: XSAI2  SQLERRMC: 384XSAI2.S at org.apache.derby.client.am.Statement.completeSqlca(Unknown Source) at org.apache.derby.client.net.NetStatementReply.parsePrepareError(Unknown Source) at org.apache.derby.client.net.NetStatementReply.parsePRPSQLSTTreply(Unknown Source) at org.apache.derby.client.net.NetStatementReply.readPrepare(Unknown Source) at org.apache.derby.client.net.StatementReply.readPrepare(Unknown Source) at org.apache.derby.client.net.NetStatement.readPrepare_(Unknown Source) at org.apache.derby.client.am.Statement.readPrepare(Unknown Source) at org.apache.derby.client.am.Statement.flowExecute(Unknown Source) at org.apache.derby.client.am.Statement.executeX(Unknown Source) ... 32 more8) testReplication_Local_StateTest_part1_3(org.apache.derbyTesting.functionTests.tests.replicationTests.ReplicationRun_Local_StateTest_part1_3)java.sql.SQLException: DERBY SQL error: SQLCODE: -1  SQLSTATE: XSAI2  SQLERRMC: 384XSAI2.S at org.apache.derby.client.am.SQLExceptionFactory40.getSQLException(Unknown Source) at org.apache.derby.client.am.SqlException.getSQLException(Unknown Source) at org.apache.derby.client.am.Statement.execute(Unknown Source) at org.apache.derbyTesting.functionTests.tests.replicationTests.ReplicationRun.bootMasterDatabase(ReplicationRun.java:868) at org.apache.derbyTesting.functionTests.tests.replicationTests.ReplicationRun_Local_StateTest_part1_3.testReplication_Local_StateTest_part1_3(ReplicationRun_Local_StateTest_part1_3.java:95) at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57) at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) at org.apache.derbyTesting.junit.BaseTestCase.runBare(BaseTestCase.java:113) at org.apache.derbyTesting.functionTests.tests.replicationTests.ReplicationRun.runBare(ReplicationRun.java:206) at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24) at junit.extensions.TestSetup$1.protect(TestSetup.java:21) at junit.extensions.TestSetup.run(TestSetup.java:25)Caused by: org.apache.derby.client.am.SqlException: DERBY SQL error: SQLCODE: -1  SQLSTATE: XSAI2  SQLERRMC: 384XSAI2.S at org.apache.derby.client.am.Statement.completeSqlca(Unknown Source) at org.apache.derby.client.net.NetStatementReply.parsePrepareError(Unknown Source) at org.apache.derby.client.net.NetStatementReply.parsePRPSQLSTTreply(Unknown Source) at org.apache.derby.client.net.NetStatementReply.readPrepare(Unknown Source) at org.apache.derby.client.net.StatementReply.readPrepare(Unknown Source) at org.apache.derby.client.net.NetStatement.readPrepare_(Unknown Source) at org.apache.derby.client.am.Statement.readPrepare(Unknown Source) at org.apache.derby.client.am.Statement.flowExecute(Unknown Source) at org.apache.derby.client.am.Statement.executeX(Unknown Source) ... 32 more9) testReplication_Local_StateTest_part2(org.apache.derbyTesting.functionTests.tests.replicationTests.ReplicationRun_Local_StateTest_part2)java.sql.SQLException: DERBY SQL error: SQLCODE: -1  SQLSTATE: XSAI2  SQLERRMC: 384XSAI2.S at org.apache.derby.client.am.SQLExceptionFactory40.getSQLException(Unknown Source) at org.apache.derby.client.am.SqlException.getSQLException(Unknown Source) at org.apache.derby.client.am.Statement.execute(Unknown Source) at org.apache.derbyTesting.functionTests.tests.replicationTests.ReplicationRun.bootMasterDatabase(ReplicationRun.java:868) at org.apache.derbyTesting.functionTests.tests.replicationTests.ReplicationRun_Local_StateTest_part2.testReplication_Local_StateTest_part2(ReplicationRun_Local_StateTest_part2.java:97) at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57) at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) at org.apache.derbyTesting.junit.BaseTestCase.runBare(BaseTestCase.java:113) at org.apache.derbyTesting.functi",
            "id": "5456"
        },
        "5463": {
            "ground_truth": "0",
            "bug_report": "ant release should not modify drdamaint version\nant release automatically sets drdamaint version to 0 in release.properties.However  on the 10.8 branch  drdamaint version had been increased to trigger a difference in behavior with vs. without a particular check in; ant release caused this to get reset thus breaking the fix.ant release should somehow assess the value of drdamaint.",
            "id": "5463"
        },
        "5474": {
            "ground_truth": "0",
            "bug_report": "Speed up message splitting in build\nOn a slow machine I sometimes use to build Derby  running the org.apache.derbyBuild.splitmessages tool takes 30 seconds and accounts for 15% of the total time needed to run 'ant -q buildsource' (which builds the engine  the network server and the client  but not the tests or demos). The tool is invoked 15 times  and each time a new Java process is started because the Ant target has specified fork='yes'. By changing it to run the splitmessages tool in the same Java process as the one running Ant  the time is reduced to 3-4 seconds on the same machine.",
            "id": "5474"
        },
        "5478": {
            "ground_truth": "0",
            "bug_report": "Speed up creation of bin scripts\nThe binscripts build target takes around 3 seconds in the environments I use for building Derby. It looks like most of the time is spent running the chmod Ant task on the generated scripts. There are six invocations of the chmod task  one for each script. The chmod task can operate on multiple files  so one invocation should be enough (and one invocation on six files seems to have about the same cost as one invocation on a single file).A related problem is that the scripts are always regenerated in incremental builds  even when there's nothing to do  so the binscripts target accounts for a significant part of the time it takes to run an incremental build.",
            "id": "5478"
        },
        "5479": {
            "ground_truth": "0",
            "bug_report": "Don't run MessageVetter unless messages have changed\nContinuing my series of patches micro-optimizing the build scripts...MessageVetter is always run as part of the build  also in incremental builds when nothing has changed. Since it needs to go through more than 800 files  it may take a while (just half a second on the fastest machine I tested  so not a big deal  but that's still a significant portion of the total time in an incremental build). We should skip the message check in incremental builds if none of the messages have changed.",
            "id": "5479"
        },
        "5482": {
            "ground_truth": "0",
            "bug_report": "Reduce number of jar invocations in the buildjars target\nWhen building derby.jar  derbytools.jar and derbynet.jar  the build script runs the jar target twice for each of the jars. The first jar invocation creates the jar and adds some files  and the second one updates the jars with some more files. It would be simpler to create each of the jar files in a single invocation  and it would also cut off a few seconds on the time to build the jars.",
            "id": "5482"
        },
        "5492": {
            "ground_truth": "1",
            "bug_report": "Restrictive file permissions: permissions removed also for owner on NTFS if Acl does not contain explicit entry for owner\nIt turns out that the file owner does not necessarily get an explicit AclEntry; this depends on whether the created file has sufficient permissions already through  say  a permission for everybody to write. The present logic removes all AclEntries except those granted to the file's owner  erroneously presuming there would be such an entry always. This led to all AclEntries being removed. This error is seen in Oracle's nightly regressions for Windows  but did not reproduced when running manually on Windows. This was due to different default inherited permissions on the directories in which the regression tests were run.",
            "id": "5492"
        },
        "5493": {
            "ground_truth": "1",
            "bug_report": "Same value returned by successive calls to a sequence generator.\nThe following script shows the same value being returned from a sequence generator by two successive NEXT VALUE FOR calls. Thanks to Knut for finding this:connect 'jdbc:derby:memory:db;create=true';create table t (x int);create sequence s;autocommit off;select count from sys.syssequences with rs;values next value for s;drop table t;rollback;&#8211; same value as previous callvalues next value for s;",
            "id": "5493"
        },
        "5498": {
            "ground_truth": "1",
            "bug_report": "ClosedByInterruptException in AuthenticationTest\nAuthenticationTest failed with this error on trunk (intermittent error  passed when I reran suites.All):java.sql.SQLException: DERBY SQL error: SQLCODE: -1  SQLSTATE: XJ040  SQLERRMC: Failed to start database 'singleUse/oneuse2c' with class loader sun.misc.Launcher$AppClassLoader@1ff5ea7  see the next exception for details.::SQLSTATE: XJ001Java exception: 'ASSERT FAILED Unable to Acquire Exclusive Lock on /export/home/hudsond/.hudson/jobs/Derby-JUnit/workspace/test/system/singleUse/oneuse2c/dbex.lck: org.apache.derby.shared.common.sanity.AssertFailure'.::SQLSTATE: XJ001Java exception: ': java.nio.channels.ClosedByInterruptException'. at org.apache.derby.client.am.SQLExceptionFactory40.getSQLException(SQLExceptionFactory40.java:99) at org.apache.derby.client.am.SqlException.getSQLException(SqlException.java:364) at org.apache.derby.jdbc.ClientDriver.connect(ClientDriver.java:166) at java.sql.DriverManager.getConnection(DriverManager.java:579) at java.sql.DriverManager.getConnection(DriverManager.java:190) at org.apache.derbyTesting.junit.DriverManagerConnector.openConnection(DriverManagerConnector.java:81) at org.apache.derbyTesting.junit.DriverManagerConnector.openConnection(DriverManagerConnector.java:43) at org.apache.derbyTesting.junit.TestConfiguration.openDefaultConnection(TestConfiguration.java:1574) at org.apache.derbyTesting.junit.BaseJDBCTestSetup.getConnection(BaseJDBCTestSetup.java:72) at org.apache.derbyTesting.junit.DatabasePropertyTestSetup.tearDown(DatabasePropertyTestSetup.java:280) at junit.extensions.TestSetup$1.protect(TestSetup.java:24) at junit.extensions.TestSetup.run(TestSetup.java:27) at org.apache.derbyTesting.junit.BaseTestSetup.run(BaseTestSetup.java:57) at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24) at junit.extensions.TestSetup$1.protect(TestSetup.java:23) at junit.extensions.TestSetup.run(TestSetup.java:27) at org.apache.derbyTesting.junit.BaseTestSetup.run(BaseTestSetup.java:57) at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24) at junit.extensions.TestSetup$1.protect(TestSetup.java:23) at junit.extensions.TestSetup.run(TestSetup.java:27) at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24) at junit.extensions.TestSetup$1.protect(TestSetup.java:23) at junit.extensions.TestSetup.run(TestSetup.java:27) at org.apache.derbyTesting.junit.BaseTestSetup.run(BaseTestSetup.java:57) at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24) at junit.extensions.TestSetup$1.protect(TestSetup.java:23) at junit.extensions.TestSetup.run(TestSetup.java:27) at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24) at junit.extensions.TestSetup$1.protect(TestSetup.java:23) at junit.extensions.TestSetup.run(TestSetup.java:27) at org.apache.derbyTesting.junit.BaseTestSetup.run(BaseTestSetup.java:57) at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24) at junit.extensions.TestSetup$1.protect(TestSetup.java:23) at junit.extensions.TestSetup.run(TestSetup.java:27)Caused by: org.apache.derby.client.am.SqlException: DERBY SQL error: SQLCODE: -1  SQLSTATE: XJ040  SQLERRMC: Failed to start database 'singleUse/oneuse2c' with class loader sun.misc.Launcher$AppClassLoader@1ff5ea7  see the next exception for details.::SQLSTATE: XJ001Java exception: 'ASSERT FAILED Unable to Acquire Exclusive Lock on /export/home/hudsond/.hudson/jobs/Derby-JUnit/workspace/test/system/singleUse/oneuse2c/dbex.lck: org.apache.derby.shared.common.sanity.AssertFailure'.::SQLSTATE: XJ001Java exception: ': java.nio.channels.ClosedByInterruptException'. at org.apache.derby.client.am.Connection.completeSqlca(Connection.java:2125) at org.apache.derby.client.net.NetConnectionReply.parseRdbAccessFailed(NetConnectionReply.java:538) at org.apache.derby.client.net.NetConnectionReply.parseAccessRdbError(NetConnectionReply.java:431) at org.apache.derby.client.net.NetConnectionReply.parseACCRDBreply(NetConnectionReply.java:294) at org.apache.derby.client.net.NetConnectionReply.readAccessDatabase(NetConnectionReply.java:121) at org.apache.derby.client.net.NetConnection.readSecurityCheckAndAccessRdb(NetConnection.java:826) at org.apache.derby.client.net.NetConnection.flowSecurityCheckAndAccessRdb(NetConnection.java:762) at org.apache.derby.client.net.NetConnection.flowUSRIDPWDconnect(NetConnection.java:591) at org.apache.derby.client.net.NetConnection.flowConnect(NetConnection.java:406) at org.apache.derby.client.net.NetConnection.&lt;init&gt;(NetConnection.java:220) at org.apache.derby.client.net.NetConnection40.&lt;init&gt;(NetConnection40.java:74) at org.apache.derby.client.net.ClientJDBCObjectFactoryImpl40.newNetConnection(ClientJDBCObjectFactoryImpl40.java:269) at org.apache.derby.jdbc.ClientDriver.connect(ClientDriver.java:157)The server side log was not preserved because the failure happened inside a decorator.",
            "id": "5498"
        },
        "5501": {
            "ground_truth": "0",
            "bug_report": "Subquery is only allowed to return a single column - When using derby with hibernate (or JPA) queries are created per JPA spec. For tables with multi-column PK  subqueries are created with two columns in select clause.\nERROR: Subquery is only allowed to return a single column.PROBLEM: When using derby with hibernate (or JPA) queries are created by the JPA engine per JPA spec. For tables with multi-column PK  subqueries are created with two columns in select clause (see select colofassig6_.activityID  colofassig6_.assigneeID from Assignment in the query below).Without this support  I can not use Derby with JPA.Hibernate: select distinct activitybe0_.activityID as activityID69_  activitybe0_.createdBy as createdBy69_  activitybe0_.createdOn as createdOn69_  activitybe0_.lastModifiedBy as lastModi4_69_  activitybe0_.lastModifiedOn as lastModi5_69_  activitybe0_.activityDate as activity6_69_  activitybe0_.activityTypeHierarchyID as activity7_69_  activitybe0_.activityTypeID as activity8_69_  activitybe0_.campaignID as campaignID69_  activitybe0_.comments as comments69_  activitybe0_.description as descrip11_69_  activitybe0_.inputID as inputID69_  activitybe0_.inputTypeID as inputTy13_69_  activitybe0_.name as name69_  activitybe0_.notes as notes69_  activitybe0_.organizationID as organiz16_69_  activitybe0_.parentActivityTypeID as parentA17_69_ from Activity activitybe0_  Activity activitybe1_ inner join ActivitySchedule colofactiv2_ on activitybe1_.activityID=colofactiv2_.activityID inner join ActivityScheduleStatus colofactiv3_ on colofactiv2_.activityScheduleID=colofactiv3_.activityScheduleID inner join ActivityScheduleStatusType activitysc4_ on colofactiv3_.activityScheduleStatusTypeID=activitysc4_.activityScheduleStatusTypeID  ActivityTypeHierarchy activityty5_ where activitybe0_.activityTypeHierarchyID=activityty5_.activityTypeHierarchyID and activityty5_.activityTypeHierarchyID=? and not (exists (select colofassig6_.activityID  colofassig6_.assigneeID from Assignment colofassig6_ where activitybe0_.activityID=colofassig6_.activityID)) and (activitybe0_.activityID&lt;&gt;activitybe1_.activityID or activitysc4_.name&lt;&gt;'Route')2011-11-14 11:41:13 413 ERROR &#91;org.hibernate.util.JDBCExceptionReporter&#93; (EJB-Timer-1321288405420&#91;target=jboss.j2ee:ear=oecrm1.6.3RC1-derby-jboss.ear jar=builder-ejb.jar name=WorkflowActivatorBean service=EJB3&#93;) Subquery is only allowed to return a single column.",
            "id": "5501"
        },
        "5504": {
            "ground_truth": "0",
            "bug_report": "SecureServerTest  Driver40UnbootedTest and replication tests not prepared for space in java.home\nSecureServerTest  Driver40UnbootedTest and the replication tests fork JVMs by calling Runtime.exec() methods that take the command as a String parameter  not a String[]. This causes problems like the ones seen in DERBY-5490 when there's a space in ${java.home}.The tests should be rewritten to use the helper method BaseTestCase.execJavaCmd()  which handles this case correctly.",
            "id": "5504"
        },
        "5529": {
            "ground_truth": "0",
            "bug_report": "XATransactionTest: Table/View 'DERBY1016' already exists\nCf the test report on trunk.http://dbtg.foundry.sun.com/derby/test/Daily/jvm1.7/testing/Limited/testSummary-1211980.htmlIt looks like the ordering between testForgetExceptionDerby1016PROTO and testForgetExceptionDerby1016NOTA is inversed in this run on Windows  and the test currently requires testForgetExceptionDerby1016PROTO to be run ahead of testForgetExceptionDerby1016NOTA. JDK 7 can/will reorder the fixtures.",
            "id": "5529"
        },
        "5530": {
            "ground_truth": "1",
            "bug_report": "SQLChar.getCollationKey NPE in index-stat-thread\nWith this JDBC connection url is : jdbc:derby:directory:db_name;territory=fr_FR;collation=TERRITORY_BASED:PRIMARY;create=trueI get a NullPointerException in index-stat-threadSun Dec 11 19:33:11 CET 2011 Thread&#91;pool-3-thread-1 5 main&#93; {istat} 'PROXIFLEX'.'IDAXX_RES': update scheduled  reason=&#91;no stats  row-estimate=375&#93; (queueSize=1)Sun Dec 11 19:33:11 CET 2011 Thread&#91;index-stat-thread 5 main&#93; {istat trace@26130360} worker thread started (xid=12049) &#91;q/p/s=1/0/1 err:k/u/c=0/0/0 rej:f/d/o=0/0/0&#93;Sun Dec 11 19:33:11 CET 2011 Thread&#91;index-stat-thread 5 main&#93; {istat trace@26130360} processing 'PROXIFLEX'.'IDAXX_RES' Sun Dec 11 19:33:11 CET 2011 Thread&#91;index-stat-thread 5 main&#93; {istat} runtime exception during normal operationjava.lang.NullPointerException at org.apache.derby.iapi.types.SQLChar.getCollationKey(Unknown Source) at org.apache.derby.iapi.types.WorkHorseForCollatorDatatypes.stringCompare(Unknown Source) at org.apache.derby.iapi.types.CollatorSQLVarchar.stringCompare(Unknown Source) at org.apache.derby.iapi.types.SQLChar.compare(Unknown Source) at org.apache.derby.impl.services.daemon.IndexStatisticsDaemonImpl$KeyComparator.compareWithPrevKey(Unknown Source) at org.apache.derby.impl.services.daemon.IndexStatisticsDaemonImpl.updateIndexStatsMinion(Unknown Source) at org.apache.derby.impl.services.daemon.IndexStatisticsDaemonImpl.generateStatistics(Unknown Source) at org.apache.derby.impl.services.daemon.IndexStatisticsDaemonImpl.processingLoop(Unknown Source) at org.apache.derby.impl.services.daemon.IndexStatisticsDaemonImpl.run(Unknown Source) at java.lang.Thread.run(Thread.java:662)Sun Dec 11 19:33:11 CET 2011 Thread&#91;index-stat-thread 5 main&#93; {istat trace@26130360} worker thread exit &#91;q/p/s=0/0/1 err:k/u/c=0/0/0 rej:f/d/o=0/0/0&#93;If I remove territory and collation parameters I don't have the exception.In case you want to disable automatic statistics  set derby property : derby.storage.indexStats.auto to false.",
            "id": "5530"
        },
        "5539": {
            "ground_truth": "1",
            "bug_report": "Harden password hashing in the builtin authentication service\nThe Open Web Application Security Project has some suggestions on how to make it harder for an attacker to crack hashed passwords: https://www.owasp.org/index.php/Hashing_JavaThe builtin authentication service doesn't follow all the suggestions. In particular  it doesn't add a random salt  and it only performs the hash operation once.I propose that we add two new properties that makes it possible to configure builtin to use a random salt and run multiple iterations of the hash operation: derby.authentication.builtin.saltLength - the length of the random salt to add (in bytes) derby.authentication.builtin.iterations - the number of times to perform the hash operationI'd also suggest that we set the defaults so that random salt and multiple iterations are used by default. The OWASP page mentions 64 bits of salt (8 bytes) and a minimum of 1000 iterations. I consulted a security expert who thought that these recommendations sounded OK  but he believed the recommended salt length was likely to be revised and suggested 16 bytes instead. The only price we pay by going from 8 to 16 bytes  is that we'll need to store 8 bytes extra per user in the database  so I don't see any reason not to set the default for derby.authentication.builtin.saltLength as high as 16. Setting the default for derby.authentication.builtin.iterations to 1000 will make authentication of a user somewhat slower (which is the point  really)  but experiments on my machine suggest that running our default hash function (SHA-256) 1000 times takes around 1 ms. Since authentication only happens when establishing a new connection to the database  that would be a negligible cost  I think.If saltLength is set to 0 and iterations is set to 1  the hashing will be done in the exact same way as in previous versions.Both of the properties should only be respected when the data dictionary version is 10.9 or higher  so that users in soft-upgraded databases can still log in after a downgrade.",
            "id": "5539"
        },
        "5540": {
            "ground_truth": "0",
            "bug_report": "Call initCause() and getCause() without reflection in BaseJDBCTestCase\nBaseJDBCTestCase uses reflection to call Throwable.initCause() and Throwable.getCause(). This was needed when running the tests on Java 1.3 and on Foundation Profile 1.0  but those platforms aren't supported any more. Now we should call the methods directly.",
            "id": "5540"
        },
        "5541": {
            "ground_truth": "0",
            "bug_report": "Remove unnecessary field rwsOK in DirStorageFactory4\nDirStorageFactory4 has a field called rwsOK defined like this: private static final boolean rwsOK = JVMInfo.JDK_ID &gt;= JVMInfo.J2SE_142;The only supported platform whose JVMInfo.JDK_ID is less than JVMInfo.J2SE_142  is FP/CDC. But DirStorageFactory4 is not used on FP/CDC because it depends on NIO. This means that the field will always have the value true  and it can be eliminated.",
            "id": "5541"
        },
        "5547": {
            "ground_truth": "1",
            "bug_report": "NSSecurityMechanismTest fixture testNetworkServerSecurityMechanism fails intermittentlyt\nThere's an intermittent failure in NSSecurityMechanismTest fixture testNetworkServerSecurityMechanism  which I couldn't find was logged separately.This is the stack trace:1) testNetworkServerSecurityMechanism(org.apache.derbyTesting.functionTests.tests.derbynet.NSSecurityMechanismTest)junit.framework.AssertionFailedError: Timed out waiting for network server to start at org.apache.derbyTesting.junit.NetworkServerTestSetup.waitForServerStart(NetworkServerTestSetup.java:577) at org.apache.derbyTesting.functionTests.tests.derbynet.NSSecurityMechanismTest.setSecurityMechanism(NSSecurityMechanismTest.java:430) at org.apache.derbyTesting.functionTests.tests.derbynet.NSSecurityMechanismTest.testNetworkServerSecurityMechanism(NSSecurityMechanismTest.java:327) at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:79) at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) at org.apache.derbyTesting.junit.BaseTestCase.runBare(BaseTestCase.java:116) at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24) at junit.extensions.TestSetup$1.protect(TestSetup.java:21) at junit.extensions.TestSetup.run(TestSetup.java:25) at org.apache.derbyTesting.junit.BaseTestSetup.run(BaseTestSetup.java:57) at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24) at junit.extensions.TestSetup$1.protect(TestSetup.java:21) at junit.extensions.TestSetup.run(TestSetup.java:25)The test output printed out this in the console:(net)derbynet.NSSecurityMechanismTest.testNetworkServerSecurityMechanism java.net.SocketException: Connection reset at java.net.SocketInputStream.read(SocketInputStream.java:197) at java.net.SocketInputStream.read(SocketInputStream.java:116) at org.apache.derby.impl.drda.NetworkServerControlImpl.fillReplyBuffer(Unknown Source) at org.apache.derby.impl.drda.NetworkServerControlImpl.readResult(Unknown Source) at org.apache.derby.impl.drda.NetworkServerControlImpl.pingWithNoOpen(Unknown Source) at org.apache.derby.impl.drda.NetworkServerControlImpl.ping(Unknown Source) at org.apache.derby.drda.NetworkServerControl.ping(Unknown Source) at org.apache.derbyTesting.junit.NetworkServerTestSetup.pingForServerUp(NetworkServerTestSetup.java:625) at org.apache.derbyTesting.junit.NetworkServerTestSetup.pingForServerStart(NetworkServerTestSetup.java:694) at org.apache.derbyTesting.junit.NetworkServerTestSetup.waitForServerStart(NetworkServerTestSetup.java:576) at org.apache.derbyTesting.functionTests.tests.derbynet.NSSecurityMechanismTest.setSecurityMechanism(NSSecurityMechanismTest.java:430) at org.apache.derbyTesting.functionTests.tests.derbynet.NSSecurityMechanismTest.testNetworkServerSecurityMechanism(NSSecurityMechanismTest.java:327) at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:79) at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) at java.lang.reflect.Method.invoke(Method.java:618) at junit.framework.TestCase.runTest(TestCase.java:164) at junit.framework.TestCase.runBare(TestCase.java:130) at org.apache.derbyTesting.junit.BaseTestCase.runBare(BaseTestCase.java:116) at junit.framework.TestResult$1.protect(TestResult.java:106) at junit.framework.TestResult.runProtected(TestResult.java:124) at junit.framework.TestResult.run(TestResult.java:109) at junit.framework.TestCase.run(TestCase.java:120) at junit.framework.TestSuite.runTest(TestSuite.java:230) at junit.framework.TestSuite.run(TestSuite.java:225) at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24) at junit.extensions.TestSetup$1.protect(TestSetup.java:21) at junit.framework.TestResult.runProtected(TestResult.java:124) at junit.extensions.TestSetup.run(TestSetup.java:25) at org.apache.derbyTesting.junit.BaseTestSetup.run(BaseTestSetup.java:57) at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24) at junit.extensions.TestSetup$1.protect(TestSetup.java:21) at junit.framework.TestResult.runProtected(TestResult.java:124) at junit.extensions.TestSetup.run(TestSetup.java:25) at junit.framework.TestSuite.runTest(TestSuite.java:230) at junit.framework.TestSuite.run(TestSuite.java:225) at junit.framework.TestSuite.runTest(TestSuite.java:230) at junit.framework.TestSuite.run(TestSuite.java:225) at junit.framework.TestSuite.runTest(TestSuite.java:230) at junit.framework.TestSuite.run(TestSuite.java:225) at junit.framework.TestSuite.runTest(TestSuite.java:230) at junit.framework.TestSuite.run(TestSuite.java:225) at junit.textui.TestRunner.doRun(TestRunner.java:121) at junit.textui.TestRunner.start(TestRunner.java:185) at junit.textui.TestRunner.main(TestRunner.java:143)java.net.SocketException: Connection reset at java.net.SocketInputStream.read(SocketInputStream.java:197) at java.net.SocketInputStream.read(SocketInputStream.java:116) at org.apache.derby.impl.drda.NetworkServerControlImpl.fillReplyBuffer(Unknown Source) at org.apache.derby.impl.drda.NetworkServerControlImpl.readResult(Unknown Source) at org.apache.derby.impl.drda.NetworkServerControlImpl.pingWithNoOpen(Unknown Source) at org.apache.derby.impl.drda.NetworkServerControlImpl.ping(Unknown Source) at org.apache.derby.drda.NetworkServerControl.ping(Unknown Source) at org.apache.derbyTesting.junit.NetworkServerTestSetup.pingForServerUp(NetworkServerTestSetup.java:625) at org.apache.derbyTesting.junit.NetworkServerTestSetup.pingForServerStart(NetworkServerTestSetup.java:694) at org.apache.derbyTesting.junit.NetworkServerTestSetup.waitForServerStart(NetworkServerTestSetup.java:576) at org.apache.derbyTesting.functionTests.tests.derbynet.NSSecurityMechanismTest.setSecurityMechanism(NSSecurityMechanismTest.java:430) at org.apache.derbyTesting.functionTests.tests.derbynet.NSSecurityMechanismTest.testNetworkServerSecurityMechanism(NSSecurityMechanismTest.java:327) at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:79) at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) at java.lang.reflect.Method.invoke(Method.java:618) at junit.framework.TestCase.runTest(TestCase.java:164) at junit.framework.TestCase.runBare(TestCase.java:130) at org.apache.derbyTesting.junit.BaseTestCase.runBare(BaseTestCase.java:116) at junit.framework.TestResult$1.protect(TestResult.java:106) at junit.framework.TestResult.runProtected(TestResult.java:124) at junit.framework.TestResult.run(TestResult.java:109) at junit.framework.TestCase.run(TestCase.java:120) at junit.framework.TestSuite.runTest(TestSuite.java:230) at junit.framework.TestSuite.run(TestSuite.java:225) at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24) at junit.extensions.TestSetup$1.protect(TestSetup.java:21) at junit.framework.TestResult.runProtected(TestResult.java:124) at junit.extensions.TestSetup.run(TestSetup.java:25) at org.apache.derbyTesting.junit.BaseTestSetup.run(BaseTestSetup.java:57) at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24) at junit.extensions.TestSetup$1.protect(TestSetup.java:21) at junit.framework.TestResult.runProtected(TestResult.java:124) at junit.extensions.TestSetup.run(TestSetup.java:25) at junit.framework.TestSuite.runTest(TestSuite.java:230) at junit.framework.TestSuite.run(TestSuite.java:225) at junit.framework.TestSuite.runTest(TestSuite.java:230) at junit.framework.TestSuite.run(TestSuite.java:225) at junit.framework.TestSuite.runTest(TestSuite.java:230) at junit.framework.TestSuite.run(TestSuite.java:225) at junit.framework.TestSuite.runTest(TestSuite.java:230) at junit.framework.TestSuite.run(TestSuite.java:225) at junit.textui.TestRunner.doRun(TestRunner.java:121) at junit.textui.TestRunner.start(TestRunner.java:185) at junit.textui.TestRunner.main(TestRunner.java:143)I've looked through my nightly test records for earlier occurrences on trunk/linux (this apparently has not happened on windows)   and found the following occurrences:2011-12-02 (ibm15)Slightly different stack traces were seen in other runs:2011-09-22 (ibm15)2011-10-09 (ibm15)2011-10-21 (ibm15)2011-10-31 (ibm16)2011-11-10 (ibm15)2011-12-12 (ibm16)2011-12-14 (ibm15)",
            "id": "5547"
        },
        "5552": {
            "ground_truth": "1",
            "bug_report": "Derby threads hanging when using ClientXADataSource and a deadlock or lock timeout occurs\nThe issue arrives when multiple XA transactions are done in parallel and there is either a lock timeout or a lock deadlock detected. When this happens the connection is leaked in the Glassfish connection pool and the client thread hangs in 'org.apache.derby.client.netReply.fill(Reply.java:172)'. Shutting down the app server fails because the thread has a lock in 'org.apache.derby.client.net.NetConnection40' and another task is calling 'org.apache.derby.client.ClientPooledConnection.close(ClientPooledConnection.java:214)' which is waiting for the lock.Killing the appsever using 'kill' and then attempting to shutdown Derby network server causes the Network Server to hang. One of the threads hangs waiting for a lock at 'org.apache.derby.impl.drda.NeworkServerControlImpl.removeFromSessionTable(NetworkServerControlImpl.java:1525)' and the 'main' thread has this locked at 'org.apache.derby.impl.drda.NetworkServerControlImpl.executeWork(NetworkServerControlImpl.java:2242)' and it itself is waiting for a lock which belongs to a thread that is stuck at 'org.apache.derby.impl.services.locks.ActiveLock.waitForGrant(ActiveLock.java:118) which is in the TIMED_WAITING state.Only by killing the Network Server using 'kill' is possible at this point.There are transactions left even though all clients have been removed.",
            "id": "5552"
        },
        "5554": {
            "ground_truth": "1",
            "bug_report": "NullPointerException in generated VTI code\nWith the latest 10.8.2.2 binary distribution  the following short script produces a NullPointerException:java -Dij.exceptionTrace=true org.apache.derby.tools.ijij&gt; connect 'jdbc:derby:brydb;create=true';ij&gt; create table t1 (a int);ij&gt; SELECT T2.  systabs.  syscgs.conglomeratenumber FROM  SYS.SYSTABLES systabs  sys.sysconglomerates syscgs  TABLE (SYSCS_DIAG.SPACE_TABLE(systabs.tablename)) AS T2 WHERE systabs.tabletype = 'T' and systabs.tableid = syscgs.tableid;The exception trace is pasted below:ERROR 38000: The exception 'java.lang.NullPointerException' was thrown while evaluating an expression.java.sql.SQLException: The exception 'java.lang.NullPointerException' was thrown while evaluating an expression. at org.apache.derby.impl.jdbc.SQLExceptionFactory40.getSQLException(Unknown Source) at org.apache.derby.impl.jdbc.Util.newEmbedSQLException(Unknown Source) at org.apache.derby.impl.jdbc.Util.seeNextException(Unknown Source) at org.apache.derby.impl.jdbc.TransactionResourceImpl.wrapInSQLException(Unknown Source) at org.apache.derby.impl.jdbc.TransactionResourceImpl.handleException(Unknown Source) at org.apache.derby.impl.jdbc.EmbedConnection.handleException(Unknown Source) at org.apache.derby.impl.jdbc.ConnectionChild.handleException(Unknown Source) at org.apache.derby.impl.jdbc.EmbedStatement.executeStatement(Unknown Source) at org.apache.derby.impl.jdbc.EmbedStatement.execute(Unknown Source) at org.apache.derby.impl.jdbc.EmbedStatement.execute(Unknown Source) at org.apache.derby.impl.tools.ij.ij.executeImmediate(Unknown Source) at org.apache.derby.impl.tools.ij.utilMain.doCatch(Unknown Source) at org.apache.derby.impl.tools.ij.utilMain.runScriptGuts(Unknown Source) at org.apache.derby.impl.tools.ij.utilMain.go(Unknown Source) at org.apache.derby.impl.tools.ij.Main.go(Unknown Source) at org.apache.derby.impl.tools.ij.Main.mainCore(Unknown Source) at org.apache.derby.impl.tools.ij.Main.main(Unknown Source) at org.apache.derby.tools.ij.main(Unknown Source)Caused by: java.sql.SQLException: The exception 'java.lang.NullPointerException' was thrown while evaluating an expression. at org.apache.derby.impl.jdbc.SQLExceptionFactory.getSQLException(Unknown Source) at org.apache.derby.impl.jdbc.SQLExceptionFactory40.wrapArgsForTransportAcrossDRDA(Unknown Source) ... 18 moreCaused by: java.sql.SQLException: Java exception: ': java.lang.NullPointerException'. at org.apache.derby.impl.jdbc.SQLExceptionFactory.getSQLException(Unknown Source) at org.apache.derby.impl.jdbc.SQLExceptionFactory40.wrapArgsForTransportAcrossDRDA(Unknown Source) at org.apache.derby.impl.jdbc.SQLExceptionFactory40.getSQLException(Unknown Source) at org.apache.derby.impl.jdbc.Util.newEmbedSQLException(Unknown Source) at org.apache.derby.impl.jdbc.Util.javaException(Unknown Source) at org.apache.derby.impl.jdbc.TransactionResourceImpl.wrapInSQLException(Unknown Source) ... 15 moreCaused by: java.lang.NullPointerException at org.apache.derby.exe.acf81e0010x0134x6972x0511x0000033820000.g0(Unknown Source) at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57) at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) at java.lang.reflect.Method.invoke(Method.java:616) at org.apache.derby.impl.services.reflect.ReflectMethod.invoke(Unknown Source) at org.apache.derby.impl.sql.execute.VTIResultSet.openCore(Unknown Source) at org.apache.derby.impl.sql.execute.JoinResultSet.openRight(Unknown Source) at org.apache.derby.impl.sql.execute.JoinResultSet.openCore(Unknown Source) at org.apache.derby.impl.sql.execute.JoinResultSet.openCore(Unknown Source) at org.apache.derby.impl.sql.execute.ProjectRestrictResultSet.openCore(Unknown Source) at org.apache.derby.impl.sql.execute.BasicNoPutResultSetImpl.open(Unknown Source) at org.apache.derby.impl.sql.GenericPreparedStatement.executeStmt(Unknown Source) at org.apache.derby.impl.sql.GenericPreparedStatement.execute(Unknown Source) ... 11 moreERROR XJ001: Java exception: ': java.lang.NullPointerException'.java.sql.SQLException: Java exception: ': java.lang.NullPointerException'. at org.apache.derby.impl.jdbc.SQLExceptionFactory40.getSQLException(Unknown Source) at org.apache.derby.impl.jdbc.Util.newEmbedSQLException(Unknown Source) at org.apache.derby.impl.jdbc.Util.javaException(Unknown Source) at org.apache.derby.impl.jdbc.TransactionResourceImpl.wrapInSQLException(Unknown Source) at org.apache.derby.impl.jdbc.TransactionResourceImpl.wrapInSQLException(Unknown Source) at org.apache.derby.impl.jdbc.TransactionResourceImpl.handleException(Unknown Source) at org.apache.derby.impl.jdbc.EmbedConnection.handleException(Unknown Source) at org.apache.derby.impl.jdbc.ConnectionChild.handleException(Unknown Source) at org.apache.derby.impl.jdbc.EmbedStatement.executeStatement(Unknown Source) at org.apache.derby.impl.jdbc.EmbedStatement.execute(Unknown Source) at org.apache.derby.impl.jdbc.EmbedStatement.execute(Unknown Source) at org.apache.derby.impl.tools.ij.ij.executeImmediate(Unknown Source) at org.apache.derby.impl.tools.ij.utilMain.doCatch(Unknown Source) at org.apache.derby.impl.tools.ij.utilMain.runScriptGuts(Unknown Source) at org.apache.derby.impl.tools.ij.utilMain.go(Unknown Source) at org.apache.derby.impl.tools.ij.Main.go(Unknown Source) at org.apache.derby.impl.tools.ij.Main.mainCore(Unknown Source) at org.apache.derby.impl.tools.ij.Main.main(Unknown Source) at org.apache.derby.tools.ij.main(Unknown Source)Caused by: java.sql.SQLException: Java exception: ': java.lang.NullPointerException'. at org.apache.derby.impl.jdbc.SQLExceptionFactory.getSQLException(Unknown Source) at org.apache.derby.impl.jdbc.SQLExceptionFactory40.wrapArgsForTransportAcrossDRDA(Unknown Source) ... 19 moreCaused by: java.lang.NullPointerException at org.apache.derby.exe.acf81e0010x0134x6972x0511x0000033820000.g0(Unknown Source) at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57) at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) at java.lang.reflect.Method.invoke(Method.java:616) at org.apache.derby.impl.services.reflect.ReflectMethod.invoke(Unknown Source) at org.apache.derby.impl.sql.execute.VTIResultSet.openCore(Unknown Source) at org.apache.derby.impl.sql.execute.JoinResultSet.openRight(Unknown Source) at org.apache.derby.impl.sql.execute.JoinResultSet.openCore(Unknown Source) at org.apache.derby.impl.sql.execute.JoinResultSet.openCore(Unknown Source) at org.apache.derby.impl.sql.execute.ProjectRestrictResultSet.openCore(Unknown Source) at org.apache.derby.impl.sql.execute.BasicNoPutResultSetImpl.open(Unknown Source) at org.apache.derby.impl.sql.GenericPreparedStatement.executeStmt(Unknown Source) at org.apache.derby.impl.sql.GenericPreparedStatement.execute(Unknown Source) ... 11 more",
            "id": "5554"
        },
        "5559": {
            "ground_truth": "0",
            "bug_report": "AssertFailures (7  or 8) with ibm 1.6 and 1.5 on Windows XP in lang.NativeAuthProcs fixture testAll\nSince revision 1221569  on windows XP I see some failures in the nightly test like this:1) testAll(org.apache.derbyTesting.functionTests.tests.lang.NativeAuthProcs)junit.framework.AssertionFailedError at org.apache.derbyTesting.functionTests.tests.lang.NativeAuthProcs.vetResetPassword(NativeAuthProcs.java:364) at org.apache.derbyTesting.functionTests.tests.lang.NativeAuthProcs.resetPasswordTests(NativeAuthProcs.java:332) at org.apache.derbyTesting.functionTests.tests.lang.NativeAuthProcs.testAll(NativeAuthProcs.java:189) at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:60) at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:37) at org.apache.derbyTesting.junit.BaseTestCase.runBare(BaseTestCase.java:116) at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24) at junit.extensions.TestSetup$1.protect(TestSetup.java:21) at junit.extensions.TestSetup.run(TestSetup.java:25) at org.apache.derbyTesting.junit.BaseTestSetup.run(BaseTestSetup.java:57) at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24) at junit.extensions.TestSetup$1.protect(TestSetup.java:21) at junit.extensions.TestSetup.run(TestSetup.java:25) at org.apache.derbyTesting.junit.BaseTestSetup.run(BaseTestSetup.java:57) at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24) at junit.extensions.TestSetup$1.protect(TestSetup.java:21) at junit.extensions.TestSetup.run(TestSetup.java:25) at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24) at junit.extensions.TestSetup$1.protect(TestSetup.java:21) at junit.extensions.TestSetup.run(TestSetup.java:25) at org.apache.derbyTesting.junit.BaseTestSetup.run(BaseTestSetup.java:57) at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24) at junit.extensions.TestSetup$1.protect(TestSetup.java:21) at junit.extensions.TestSetup.run(TestSetup.java:25) at org.apache.derbyTesting.junit.BaseTestSetup.run(BaseTestSetup.java:57) at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24) at junit.extensions.TestSetup$1.protect(TestSetup.java:21) at junit.extensions.TestSetup.run(TestSetup.java:25) at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24) at junit.extensions.TestSetup$1.protect(TestSetup.java:21) at junit.extensions.TestSetup.run(TestSetup.java:25)See for instance: http://people.apache.org/~myrnavl/derby_test_results/main/windows/testlog/ibm15/1222901-suites.All_diff.txtThere might be an intermittent issue here  one of the runs lists only 7 failures. But mostly there's 8.This does not occur on Linux with the same jvm versions.The changes between this run and the previous one when these failures did not occur: ================SUBVERSION LOG FROM 1221076 TO 1221569:------------------------------------------------------------------------r1221456 | rhillegas | 2011-12-20 11:35:44 -0800 (Tue  20 Dec 2011) | 1 lineDERBY-866: Add regression tests for GRANT/REVOKE on new procedures supporting NATIVE authentication.------------------------------------------------------------------------r1221434 | rhillegas | 2011-12-20 10:59:09 -0800 (Tue  20 Dec 2011) | 1 lineDERBY-866: Adjust RolesTest to account for new tuple in SYSROUTINEPERMS.------------------------------------------------------------------------r1221423 | rhillegas | 2011-12-20 10:44:33 -0800 (Tue  20 Dec 2011) | 1 lineDERBY-866: Add syscs_reset_password() and syscs_modify_password() system procedures.================derby.log in the failed directory only shows a start and shutdown.",
            "id": "5559"
        },
        "5560": {
            "ground_truth": "0",
            "bug_report": "Java deadlock between LogicalConnection40 and ClientXAConnection40 (patch attached)\nThere is a Java deadlock between LogicalConnection40 and ClientXAConnection40. The order of calls that cause the deadlock are:Thread 1LogicalConnection.closeClientPooledConnection.recycleConnectionThread 2ClientPooledConnection.closeLogicalConnection.nullPhysicalConnectionThread 1 acquires a lock on the LogicalConnection and attempts to acquire a lock on the ClientPooledConnectionThread 2 acquires a lock on the ClientPooledConnection and attempts to acquire a lock on the LogicalConnectionIn production this occurs when one thread is committing a transaction and another thread is trying to close the connection. This occurred because the Glassfish connection pool is setup to close all connections on any error on any connection and an error has been detected on another connection in the pool.",
            "id": "5560"
        },
        "5561": {
            "ground_truth": "0",
            "bug_report": "Race conditions in LogicalConnection checking for a null physical connection\nThere are race conditions with checkForNullPhysicalConnection calls in LogicalConnection. checkForNullPhysicalConnection is not synchronized and it checks for the member 'phsyicalConnection' which can be cleared by 'nullPhsyicalConnection' (which is synchronized) and 'close' (which is synchronized) and 'closeWithoutRecyclingToPool' (which is synchronized).This affects 'nativeSQL'  'getAutoCommit'  'getTransactionIsolation'  'getWarnings'  'isReadOnly'  'getCatalog'  'getTypeMap'  'createStatement'  'prepareCall'  'prepareStatement'  'setHoldability'  'getHoldability'  'setSavePoint'  'rollBack'  'releaseSavePoint'  'getSchema'  'setSchema'.All of these call 'checkForNullPhysicalConnection' and then use the member 'physicalConnection' after that call returns. Because these methods are not synchronized  between the time 'checkForNullPhysicalConnectoin' returns and 'physicalConnection' is used  the 'physicalConnection' member could be set to null and then a NPE occurs.Probably all of these methods should be changed to synchronized.",
            "id": "5561"
        },
        "5565": {
            "ground_truth": "1",
            "bug_report": "Network Server should reject client connections that are not Derby Network Client\nSince there have been no other network clients besides Derby Network Client tested or supported with Derby since 10.1 and since any protocol based client needs to understand Derby's DRDA extensions  deviations  and stored procedure usage. I think it would be a good idea in 10.9 for Network Server to outright reject any network clients that are not Derby Network Client.This would eliminate confusion up front for those that might not be aware that the DB2 Universal JDBC Driver and DB2 Runtime Client are not supported. They would get a clean reasonable error instead of hitting various protocol errors.Also it would mean if someone does want to add support for some network client in the future they would at least need to add the one or two lines of code in AppRequester to identify it  which I think would be a good thing.I think the code change would not be hard but the biggest impact might be anyone who still runs tests with JCC on trunk would need to disable those tests. There is a separate issue DERBY-4785 that Jayaram is working on to complete remove the JCC related code from the tests and test infrastructure.",
            "id": "5565"
        },
        "5567": {
            "ground_truth": "0",
            "bug_report": "AlterTableTest#testDropColumn fails: drop view cannot be performed due to dependency\nSaw this when running suitesAll on 10.8.2.2:1) testDropColumn(org.apache.derbyTesting.functionTests.tests.lang.AlterTableTest)java.sql.SQLException: Operation 'DROP VIEW' cannot be performed on object 'ATDC_VW_5A_1' because VIEW 'ATDC_VW_5A_2' is dependent on that object. at org.apache.derby.client.am.SQLExceptionFactory40.getSQLException(Unknown Source) at org.apache.derby.client.am.SqlException.getSQLException(Unknown Source) at org.apache.derby.client.am.Statement.executeUpdate(Unknown Source) at org.apache.derbyTesting.functionTests.tests.lang.AlterTableTest.testDropColumn(AlterTableTest.java:2465) at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57) at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) at org.apache.derbyTesting.junit.BaseTestCase.runBare(BaseTestCase.java:113) at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24) at junit.extensions.TestSetup$1.protect(TestSetup.java:21) at junit.extensions.TestSetup.run(TestSetup.java:25) at org.apache.derbyTesting.junit.BaseTestSetup.run(BaseTestSetup.java:57) at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24) at junit.extensions.TestSetup$1.protect(TestSetup.java:21) at junit.extensions.TestSetup.run(TestSetup.java:25) at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24) at junit.extensions.TestSetup$1.protect(TestSetup.java:21) at junit.extensions.TestSetup.run(TestSetup.java:25) at org.apache.derbyTesting.junit.BaseTestSetup.run(BaseTestSetup.java:57) at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24) at junit.extensions.TestSetup$1.protect(TestSetup.java:21) at junit.extensions.TestSetup.run(TestSetup.java:25) at org.apache.derbyTesting.junit.BaseTestSetup.run(BaseTestSetup.java:57) at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24) at junit.extensions.TestSetup$1.protect(TestSetup.java:21) at junit.extensions.TestSetup.run(TestSetup.java:25) at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24) at junit.extensions.TestSetup$1.protect(TestSetup.java:21) at junit.extensions.TestSetup.run(TestSetup.java:25)Caused by: org.apache.derby.client.am.SqlException: Operation 'DROP VIEW' cannot be performed on object 'ATDC_VW_5A_1' because VIEW 'ATDC_VW_5A_2' is dependent on that object. at org.apache.derby.client.am.Statement.completeSqlca(Unknown Source) at org.apache.derby.client.am.Statement.completeExecuteImmediate(Unknown Source) at org.apache.derby.client.net.NetStatementReply.parseEXCSQLIMMreply(Unknown Source) at org.apache.derby.client.net.NetStatementReply.readExecuteImmediate(Unknown Source) at org.apache.derby.client.net.StatementReply.readExecuteImmediate(Unknown Source) at org.apache.derby.client.net.NetStatement.readExecuteImmediate_(Unknown Source) at org.apache.derby.client.am.Statement.readExecuteImmediate(Unknown Source) at org.apache.derby.client.am.Statement.flowExecute(Unknown Source) at org.apache.derby.client.am.Statement.executeUpdateX(Unknown Source) ... 55 morePrior to this  though  I saw this on the console  but no error/failure. Probably not related  I believe we have seen this before:java.lang.Exception: DRDA_InvalidReplyTooShort.S:Invalid reply from network server: Insufficient data. at org.apache.derby.impl.drda.NetworkServerControlImpl.consolePropertyMessageWork(Unknown Source) at org.apache.derby.impl.drda.NetworkServerControlImpl.consolePropertyMessage(Unknown Source) at org.apache.derby.impl.drda.NetworkServerControlImpl.fillReplyBuffer(Unknown Source) at org.apache.derby.impl.drda.NetworkServerControlImpl.readResult(Unknown Source) at org.apache.derby.impl.drda.NetworkServerControlImpl.pingWithNoOpen(Unknown Source) at org.apache.derby.impl.drda.NetworkServerControlImpl.ping(Unknown Source) at org.apache.derby.drda.NetworkServerControl.ping(Unknown Source) at org.apache.derbyTesting.junit.NetworkServerTestSetup.pingForServerUp(NetworkServerTestSetup.java:567) at org.apache.derbyTesting.functionTests.tests.derbynet.ServerPropertiesTest.canPingServer(ServerPropertiesTest.java:280) at org.apache.derbyTesting.functionTests.tests.derbynet.ServerPropertiesTest.ttestSetPortPriority(ServerPropertiesTest.java:472) at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57) at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) at java.lang.reflect.Method.invoke(Method.java:601) at junit.framework.TestCase.runTest(TestCase.java:164) at junit.framework.TestCase.runBare(TestCase.java:130) at org.apache.derbyTesting.junit.BaseTestCase.runBare(BaseTestCase.java:113) at junit.framework.TestResult$1.protect(TestResult.java:106) at junit.framework.TestResult.runProtected(TestResult.java:124) at junit.framework.TestResult.run(TestResult.java:109) at junit.framework.TestCase.run(TestCase.java:120) at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24) at junit.extensions.TestSetup$1.protect(TestSetup.java:21) at junit.framework.TestResult.runProtected(TestResult.java:124) at junit.extensions.TestSetup.run(TestSetup.java:25) at org.apache.derbyTesting.junit.BaseTestSetup.run(BaseTestSetup.java:57) at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24) at junit.extensions.TestSetup$1.protect(TestSetup.java:21) at junit.framework.TestResult.runProtected(TestResult.java:124) at junit.extensions.TestSetup.run(TestSetup.java:25) at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24) at junit.extensions.TestSetup$1.protect(TestSetup.java:21) at junit.framework.TestResult.runProtected(TestResult.java:124) at junit.extensions.TestSetup.run(TestSetup.java:25) at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24) at junit.extensions.TestSetup$1.protect(TestSetup.java:21) at junit.framework.TestResult.runProtected(TestResult.java:124) at junit.extensions.TestSetup.run(TestSetup.java:25) at junit.framework.TestSuite.runTest(TestSuite.java:230) at junit.framework.TestSuite.run(TestSuite.java:225) at junit.framework.TestSuite.runTest(TestSuite.java:230) at junit.framework.TestSuite.run(TestSuite.java:225) at junit.framework.TestSuite.runTest(TestSuite.java:230) at junit.framework.TestSuite.run(TestSuite.java:225) at junit.framework.TestSuite.runTest(TestSuite.java:230) at junit.framework.TestSuite.run(TestSuite.java:225) at junit.textui.TestRunner.doRun(TestRunner.java:121) at junit.textui.TestRunner.start(TestRunner.java:185) at junit.textui.TestRunner.main(TestRunner.java:143)",
            "id": "5567"
        },
        "5568": {
            "ground_truth": "0",
            "bug_report": "AssertionFailedError: Should not hold locks after commit in ResultSetMiscTest\nSaw this failure when running the 10.8.2.2 regression tests on Java 7u4-b06:1) testBug4810(org.apache.derbyTesting.functionTests.tests.jdbcapi.ResultSetMiscTest)junit.framework.AssertionFailedError: Should not hold locks after commit at org.apache.derbyTesting.functionTests.tests.jdbcapi.ResultSetMiscTest.checkLocksForAutoCommitSelect(ResultSetMiscTest.java:695) at org.apache.derbyTesting.functionTests.tests.jdbcapi.ResultSetMiscTest.testBug4810(ResultSetMiscTest.java:478) at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57) at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) at org.apache.derbyTesting.junit.BaseTestCase.runBare(BaseTestCase.java:113) at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24) at junit.extensions.TestSetup$1.protect(TestSetup.java:21) at junit.extensions.TestSetup.run(TestSetup.java:25) at org.apache.derbyTesting.junit.BaseTestSetup.run(BaseTestSetup.java:57) at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24) at junit.extensions.TestSetup$1.protect(TestSetup.java:21) at junit.extensions.TestSetup.run(TestSetup.java:25) at org.apache.derbyTesting.junit.BaseTestSetup.run(BaseTestSetup.java:57)",
            "id": "5568"
        },
        "5580": {
            "ground_truth": "0",
            "bug_report": "NativeAuthenticationServiceTest getting multiple errors trying to delete files/directories during teardown\nMultiple errors during teardown while trying to delete files/directories of the test databases on vista against sun jdk16 on vista  but passed against same jvm on sun nightly runs againstlinux and solaris.As of time of this report the tests against other sun jvms had not finished. Errors were also seen in ibm nightly runs  I'll rerport those in following comments.The following checkin that was included in the reported test failures changed the Native authentication tests  so seems likely to have caused the issues:r1233377 | rhillegas | 2012-01-19 14:51:13 +0100 (Thu  19 Jan 2012) | 1 lineFirst version of NATIVE authentication service  including first tranche of tests for it.vista run had 6 errors:http://dbtg.foundry.sun.com/derby/test/Daily/jvm1.6/testing/testlog/vista/1233467-suitesAll_diff.txt1) testAll(org.apache.derbyTesting.functionTests.tests.lang.NativeAuthenticationServiceTest)junit.framework.AssertionFailedError: Failed to delete 77 files (root=C:/cludev/jagtmp/autoderbyN_regression/suitesAll_7/log/system/singleUse/oneuse1d): C:/cludev/jagtmp/autoderbyN_regression/suitesAll_7/log/system/singleUse/oneuse1d/db.lck (isDir=false  canRead=true  canWrite=true  size=38)  C:/cludev/jagtmp/autoderbyN_regression/suitesAll_7/log/system/singleUse/oneuse1d/log/log1.dat (isDir=false  canRead=true  canWrite=true  size=1048576)  C:/cludev/jagtmp/autoderbyN_regression/suitesAll_7/log/system/singleUse/oneuse1d/log (isDir=true  canRead=true  canWrite=true  size=0)  C:/cludev/jagtmp/autoderbyN_regression/suitesAll_7/log/system/singleUse/oneuse1d/seg0/c10.dat (isDir=false  canRead=true  canWrite=true  size=8192)  C:/cludev/jagtmp/autoderbyN_regression/suitesAll_7/log/system/singleUse/oneuse1d/seg0/c101.dat (isDir=false  canRead=true  canWrite=true  size=8192)  C:/cludev/jagtmp/autoderbyN_regression/suitesAll_7/log/system/singleUse/oneuse1d/seg0/c111.dat (isDir=false  canRead=true  canWrite=true  size=8192)  C:/cludev/jagtmp/autoderbyN_regression/suitesAll_7/log/system/singleUse/oneuse1d/seg0/c121.dat (isDir=false  canRead=true  canWrite=true  size=8192)  C:/cludev/jagtmp/autoderbyN_regression/suitesAll_7/log/system/singleUse/oneuse1d/seg0/c130.dat (isDir=false  canRead=true  canWrite=true  size=8192)  C:/cludev/jagtmp/autoderbyN_regression/suitesAll_7/log/system/singleUse/oneuse1d/seg0/c141.dat (isDir=false  canRead=true  canWrite=true  size=8192)  C:/cludev/jagtmp/autoderbyN_regression/suitesAll_7/log/system/singleUse/oneuse1d/seg0/c150.dat (isDir=false  canRead=true  canWrite=true  size=8192)  C:/cludev/jagtmp/autoderbyN_regression/suitesAll_7/log/system/singleUse/oneuse1d/seg0/c161.dat (isDir=false  canRead=true  canWrite=true  size=8192)  C:/cludev/jagtmp/autoderbyN_regression/suitesAll_7/log/system/singleUse/oneuse1d/seg0/c171.dat (isDir=false  canRead=true  canWrite=true  size=8192)  C:/cludev/jagtmp/autoderbyN_regression/suitesAll_7/log/system/singleUse/oneuse1d/seg0/c180.dat (isDir=false  canRead=true  canWrite=true  size=36864)  C:/cludev/jagtmp/autoderbyN_regression/suitesAll_7/log/system/singleUse/oneuse1d/seg0/c191.dat (isDir=false  canRead=true  canWrite=true  size=16384)  C:/cludev/jagtmp/autoderbyN_regression/suitesAll_7/log/system/singleUse/oneuse1d/seg0/c1a1.dat (isDir=false  canRead=true  canWrite=true  size=16384)  C:/cludev/jagtmp/autoderbyN_regression/suitesAll_7/log/system/singleUse/oneuse1d/seg0/c1b1.dat (isDir=false  canRead=true  canWrite=true  size=16384)  C:/cludev/jagtmp/autoderbyN_regression/suitesAll_7/log/system/singleUse/oneuse1d/seg0/c1c0.dat (isDir=false  canRead=true  canWrite=true  size=8192)  C:/cludev/jagtmp/autoderbyN_regression/suitesAll_7/log/system/singleUse/oneuse1d/seg0/c1d1.dat (isDir=false  canRead=true  canWrite=true  size=8192)  C:/cludev/jagtmp/autoderbyN_regression/suitesAll_7/log/system/singleUse/oneuse1d/seg0/c1e0.dat (isDir=false  canRead=true  canWrite=true  size=8192)  C:/cludev/jagtmp/autoderbyN_regression/suitesAll_7/log/system/singleUse/oneuse1d/seg0/c1f1.dat (isDir=false  canRead=true  canWrite=true  size=8192)  C:/cludev/jagtmp/autoderbyN_regression/suitesAll_7/log/system/singleUse/oneuse1d/seg0/c20.dat (isDir=false  canRead=true  canWrite=true  size=28672)  C:/cludev/jagtmp/autoderbyN_regression/suitesAll_7/log/system/singleUse/oneuse1d/seg0/c200.dat (isDir=false  canRead=true  canWrite=true  size=8192)  C:/cludev/jagtmp/autoderbyN_regression/suitesAll_7/log/system/singleUse/oneuse1d/seg0/c211.dat (isDir=false  canRead=true  canWrite=true  size=8192)  C:/cludev/jagtmp/autoderbyN_regression/suitesAll_7/log/system/singleUse/oneuse1d/seg0/c221.dat (isDir=false  canRead=true  canWrite=true  size=8192)  C:/cludev/jagtmp/autoderbyN_regression/suitesAll_7/log/system/singleUse/oneuse1d/seg0/c230.dat (isDir=false  canRead=true  canWrite=true  size=114688)  C:/cludev/jagtmp/autoderbyN_regression/suitesAll_7/log/system/singleUse/oneuse1d/seg0/c241.dat (isDir=false  canRead=true  canWrite=true  size=8192)  C:/cludev/jagtmp/autoderbyN_regression/suitesAll_7/log/system/singleUse/oneuse1d/seg0/c251.dat (isDir=false  canRead=true  canWrite=true  size=20480)  C:/cludev/jagtmp/autoderbyN_regression/suitesAll_7/log/system/singleUse/oneuse1d/seg0/c260.dat (isDir=false  canRead=true  canWrite=true  size=8192)  C:/cludev/jagtmp/autoderbyN_regression/suitesAll_7/log/system/singleUse/oneuse1d/seg0/c271.dat (isDir=false  canRead=true  canWrite=true  size=8192)  C:/cludev/jagtmp/autoderbyN_regression/suitesAll_7/log/system/singleUse/oneuse1d/seg0/c281.dat (isDir=false  canRead=true  canWrite=true  size=8192)  C:/cludev/jagtmp/autoderbyN_regression/suitesAll_7/log/system/singleUse/oneuse1d/seg0/c290.dat (isDir=false  canRead=true  canWrite=true  size=8192)  C:/cludev/jagtmp/autoderbyN_regression/suitesAll_7/log/system/singleUse/oneuse1d/seg0/c2a1.dat (isDir=false  canRead=true  canWrite=true  size=8192)  C:/cludev/jagtmp/autoderbyN_regression/suitesAll_7/log/system/singleUse/oneuse1d/seg0/c2b1.dat (isDir=false  canRead=true  canWrite=true  size=8192)  C:/cludev/jagtmp/autoderbyN_regression/suitesAll_7/log/system/singleUse/oneuse1d/seg0/c2c1.dat (isDir=false  canRead=true  canWrite=true  size=8192)  C:/cludev/jagtmp/autoderbyN_regression/suitesAll_7/log/system/singleUse/oneuse1d/seg0/c2d0.dat (isDir=false  canRead=true  canWrite=true  size=8192)  C:/cludev/jagtmp/autoderbyN_regression/suitesAll_7/log/system/singleUse/oneuse1d/seg0/c2e1.dat (isDir=false  canRead=true  canWrite=true  size=8192)  C:/cludev/jagtmp/autoderbyN_regression/suitesAll_7/log/system/singleUse/oneuse1d/seg0/c2f0.dat (isDir=false  canRead=true  canWrite=true  size=8192)  C:/cludev/jagtmp/autoderbyN_regression/suitesAll_7/log/system/singleUse/oneuse1d/seg0/c300.dat (isDir=false  canRead=true  canWrite=true  size=8192)  C:/cludev/jagtmp/autoderbyN_regression/suitesAll_7/log/system/singleUse/oneuse1d/seg0/c31.dat (isDir=false  canRead=true  canWrite=true  size=8192)  C:/cludev/jagtmp/autoderbyN_regression/suitesAll_7/log/system/singleUse/oneuse1d/seg0/c311.dat (isDir=false  canRead=true  canWrite=true  size=8192)  C:/cludev/jagtmp/autoderbyN_regression/suitesAll_7/log/system/singleUse/oneuse1d/seg0/c321.dat (isDir=false  canRead=true  canWrite=true  size=8192)  C:/cludev/jagtmp/autoderbyN_regression/suitesAll_7/log/system/singleUse/oneuse1d/seg0/c331.dat (isDir=false  canRead=true  canWrite=true  size=8192)  C:/cludev/jagtmp/autoderbyN_regression/suitesAll_7/log/system/singleUse/oneuse1d/seg0/c340.dat (isDir=false  canRead=true  canWrite=true  size=8192)  C:/cludev/jagtmp/autoderbyN_regression/suitesAll_7/log/system/singleUse/oneuse1d/seg0/c351.dat (isDir=false  canRead=true  canWrite=true  size=8192)  C:/cludev/jagtmp/autoderbyN_regression/suitesAll_7/log/system/singleUse/oneuse1d/seg0/c361.dat (isDir=false  canRead=true  canWrite=true  size=8192)  C:/cludev/jagtmp/autoderbyN_regression/suitesAll_7/log/system/singleUse/oneuse1d/seg0/c371.dat (isDir=false  canRead=true  canWrite=true  size=8192)  C:/cludev/jagtmp/autoderbyN_regression/suitesAll_7/log/system/singleUse/oneuse1d/seg0/c380.dat (isDir=false  canRead=true  canWrite=true  size=8192)  C:/cludev/jagtmp/autoderbyN_regression/suitesAll_7/log/system/singleUse/oneuse1d/seg0/c391.dat (isDir=false  canRead=true  canWrite=true  size=8192)  C:/cludev/jagtmp/autoderbyN_regression/suitesAll_7/log/system/singleUse/oneuse1d/seg0/c3a1.dat (isDir=false  canRead=true  canWrite=true  size=8192)  C:/cludev/jagtmp/autoderbyN_regression/suitesAll_7/log/system/singleUse/oneuse1d/seg0/c3b1.dat (isDir=false  canRead=true  canWrite=true  size=8192)  C:/cludev/jagtmp/autoderbyN_regression/suitesAll_7/log/system/singleUse/oneuse1d/seg0/c3c0.dat (isDir=false  canRead=true  canWrite=true  size=8192)  C:/cludev/jagtmp/autoderbyN_regression/suitesAll_7/log/system/singleUse/oneuse1d/seg0/c3d1.dat (isDir=false  canRead=true  canWrite=true  size=8192)  C:/cludev/jagtmp/autoderbyN_regression/suitesAll_7/log/system/singleUse/oneuse1d/seg0/c3e1.dat (isDir=false  canRead=true  canWrite=true  size=8192)  C:/cludev/jagtmp/autoderbyN_regression/suitesAll_7/log/system/singleUse/oneuse1d/seg0/c3f1.dat (isDir=false  canRead=true  canWrite=true  size=8192)  C:/cludev/jagtmp/autoderbyN_regression/suitesAll_7/log/system/singleUse/oneuse1d/seg0/c400.dat (isDir=false  canRead=true  canWrite=true  size=8192)  C:/cludev/jagtmp/autoderbyN_regression/suitesAll_7/log/system/singleUse/oneuse1d/seg0/c41.dat (isDir=false  canRead=true  canWrite=true  size=16384)  C:/cludev/jagtmp/autoderbyN_regression/suitesAll_7/log/system/singleUse/oneuse1d/seg0/c411.dat (isDir=false  canRead=true  canWrite=true  size=8192)  C:/cludev/jagtmp/autoderbyN_regression/suitesAll_7/log/system/singleUse/oneuse1d/seg0/c421.dat (isDir=false  canRead=true  canWrite=true  size=8192)  C:/cludev/jagtmp/autoderbyN_regression/suitesAll_7/log/system/singleUse/oneuse1d/seg0/c430.dat (isDir=false  canRead=true  canWrite=true  size=8192)  C:/cludev/jagtmp/autoderbyN_regression/suitesAll_7/log/system/singleUse/oneuse1d/seg0/c441.dat (isDir=false  canRead=true  canWrite=true  size=8192)  C:/cludev/jagtmp/autoderbyN_regression/suitesAll_7/log/system/singleUse/oneuse1d/seg0/c451.dat (isDir=false  canRead=true  canWrite=true  size=8192)  C:/cludev/jagtmp/autoderbyN_regression/suitesAll_7/log/system/singleUse/oneuse1d/seg0/c461.dat (isDir=false  canRead=true  canWrite=true  size=8192)  C:/cludev/jagtmp/autoderbyN_regression/suitesAll_7/log/system/singleUse/oneuse1d/seg0/c470.dat (isDir=false  canRead=true  canWrite=true  size=8192)  C:/cludev/jagtmp/autoderbyN_regression/suitesAll_7/log/system/singleUse/oneuse1d/seg0/c481.dat (isDir=false  canRead=true  canWrite=true  size=8192)  C:/cludev/jagtmp/autoderbyN_regression/suitesAll_7/log/system/singleUse/oneuse1d/seg0/c51.dat (isDir=false  canRead=true  canWrite=true  size=8192)  C:/cludev/jagtmp/autoderbyN_regression/suitesAll_7/log/system/singleUse/oneuse1d/seg0/c60.dat (isDir=false  canRead=true  canWrite=true  size=8192)  C:/cludev/jagtmp/autoderbyN_regression/suitesAll_7/log/system/singleUse/oneuse1d/seg0/c71.dat (isDir=false  canRead=true  canWrite=true  size=8192)  C:/cludev/jagtmp/autoderbyN_regression/suitesAll_7/log/system/singleUse/oneuse1d/seg0/c81.dat (isDir=false  canRead=true  canWrite=true  size=8192)  C:/cludev/jagtmp/autoderbyN_regression/suitesAll_7/log/system/singleUse/oneuse1d/seg0/c90.dat (isDir=false  canRead=true  canWrite=true  size=20480)  C:/cludev/jagtmp/autoderbyN_regression/suitesAll_7/log/system/singleUse/oneuse1d/seg0/ca1.dat (isDir=false  canRead=true  canWrite=true  size=24576)  C:/cludev/jagtmp/autoderbyN_regression/suitesAll_7/log/system/singleUse/oneuse1d/seg0/cb1.dat (isDir=false  canRead=true  canWrite=true  size=8192)  C:/cludev/jagtmp/autoderbyN_regression/suitesAll_7/log/system/singleUse/oneuse1d/seg0/cc0.dat (isDir=false  canRead=true  canWrite=true  size=8192)  C:/cludev/jagtmp/autoderbyN_regression/suitesAll_7/log/system/singleUse/oneuse1d/seg0/cd1.dat (isDir=false  canRead=true  canWrite=true  size=8192)  C:/cludev/jagtmp/autoderbyN_regression/suitesAll_7/log/system/singleUse/oneuse1d/seg0/ce1.dat (isDir=false  canRead=true  canWrite=true  size=8192)  C:/cludev/jagtmp/autoderbyN_regression/suitesAll_7/log/system/singleUse/oneuse1d/seg0/cf0.dat (isDir=false  canRead=true  canWrite=true  size=8192)  C:/cludev/jagtmp/autoderbyN_regression/suitesAll_7/log/system/singleUse/oneuse1d/seg0 (isDir=true  canRead=true  canWrite=true  size=12288)  C:/cludev/jagtmp/autoderbyN_regression/suitesAll_7/log/system/singleUse/oneuse1d (isDir=true  canRead=true  canWrite=true  size=0) at org.apache.derbyTesting.junit.BaseJDBCTestCase.assertDirectoryDeleted(BaseJDBCTestCase.java:1491) at org.apache.derbyTesting.junit.DropDatabaseSetup.removeDir(DropDatabaseSetup.java:120) at org.apache.derbyTesting.junit.DropDatabaseSetup.access$000(DropDatabaseSetup.java:35) at org.apache.derbyTesting.junit.DropDatabaseSetup$1.run(DropDatabaseSetup.java:106) at java.security.AccessController.doPrivileged(Native Method) at org.apache.derbyTesting.junit.DropDatabaseSetup.removeDirectory(DropDatabaseSetup.java:103) at org.apache.derbyTesting.junit.DropDatabaseSetup.removeDirectory(DropDatabaseSetup.java:99) at org.apache.derbyTesting.junit.DropDatabaseSetup.removeDatabase(DropDatabaseSetup.java:92) at org.apache.derbyTesting.junit.TestConfiguration$6.tearDown(TestConfiguration.java:828) at junit.extensions.TestSetup$1.protect(TestSetup.java:22) at junit.extensions.TestSetup.run(TestSetup.java:25) at org.apache.derbyTesting.junit.BaseTestSetup.run(BaseTestSetup.java:57) at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24) at junit.extensions.TestSetup$1.protect(TestSetup.java:21) at junit.extensions.TestSetup.run(TestSetup.java:25) at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24) at junit.extensions.TestSetup$1.protect(TestSetup.java:21) at junit.extensions.TestSetup.run(TestSetup.java:25) at org.apache.derbyTesting.junit.BaseTestSetup.run(BaseTestSetup.java:57) at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24) at junit.extensions.TestSetup$1.protect(TestSetup.java:21) at junit.extensions.TestSetup.run(TestSetup.java:25) at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24) at junit.extensions.TestSetup$1.protect(TestSetup.java:21) at junit.extensions.TestSetup.run(TestSetup.java:25) at org.apache.derbyTesting.junit.BaseTestSetup.run(BaseTestSetup.java:57) at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24) at junit.extensions.TestSetup$1.protect(TestSetup.java:21) at junit.extensions.TestSetup.run(TestSetup.java:25) at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24) at junit.extensions.TestSetup$1.protect(TestSetup.java:21) at junit.extensions.TestSetup.run(TestSetup.java:25)2) testAll(org.apache.derbyTesting.functionTests.tests.lang.NativeAuthenticationServiceTest)junit.framework.AssertionFailedError: Failed to delete 77 files (root=C:/cludev/jagtmp/autoderbyN_regression/suitesAll_7/log/system/singleUse/oneuse1e): C:/cludev/jagtmp/autoderbyN_regression/suitesAll_7/log/system/singleUse/oneuse1e/db.lck (isDir=false  canRead=true  canWrite=true  size=38)  C:/cludev/jagtmp/autoderbyN_regression/suitesAll_7/log/system/singleUse/oneuse1e/log/log1.dat (isDir=false  canRead=true  canWrite=true  size=1048576)  C:/cludev/jagtmp/autoderbyN_regression/suitesAll_7/log/system/singleUse/oneuse1e/log (isDir=true  canRead=true  canWrite=true  size=0)  C:/cludev/jagtmp/autoderbyN_regression/suitesAll_7/log/system/singleUse/oneuse1e/seg0/c10.dat (isDir=false  canRead=true  canWrite=true  size=8192)  C:/cludev/jagtmp/autoderbyN_regression/suitesAll_7/log/system/singleUse/oneuse1e/seg0/c101.dat (isDir=false  canRead=true  canWrite=true  size=8192)  C:/cludev/jagtmp/autoderbyN_regression/suitesAll_7/log/system/singleUse/oneuse1e/seg0/c111.dat (isDir=false  canRead=true  canWrite=true  size=8192)  C:/cludev/jagtmp/autoderbyN_regression/suitesAll_7/log/system/singleUse/oneuse1e/seg0/c121.dat (isDir=false  canRead=true  canWrite=true  size=8192)  C:/cludev/jagtmp/autoderbyN_regression/suitesAll_7/log/system/singleUse/oneuse1e/seg0/c130.dat (isDir=false  canRead=true  canWrite=true  size=8192)  C:/cludev/jagtmp/autoderbyN_regression/suitesAll_7/log/system/singleUse/oneuse1e/seg0/c141.dat (isDir=false  canRead=true  canWrite=true  size=8192)  C:/cludev/jagtmp/autoderbyN_regression/suitesAll_7/log/system/singleUse/oneuse1e/seg0/c150.dat (isDir=false  canRead=true  canWrite=true  size=8192)  C:/cludev/jagtmp/autoderbyN_regression/suitesAll_7/log/system/singleUse/oneuse1e/seg0/c161.dat (isDir=false  canRead=true  canWrite=true  size=8192)  C:/cludev/jagtmp/autoderbyN_regression/suitesAll_7/log/system/singleUse/oneuse1e/seg0/c171.dat (isDir=false  canRead=true  canWrite=true  size=8192)  C:/cludev/jagtmp/autoderbyN_regression/suitesAll_7/log/system/singleUse/oneuse1e/seg0/c180.dat (isDir=false  canRead=true  canWrite=true  size=36864)  C:/cludev/jagtmp/autoderbyN_regression/suitesAll_7/log/system/singleUse/oneuse1e/seg0/c191.dat (isDir=false  canRead=true  canWrite=true  size=16384)  C:/cludev/jagtmp/autoderbyN_regression/suitesAll_7/log/system/singleUse/oneuse1e/seg0/c1a1.dat (isDir=false  canRead=true  canWrite=true  size=16384)  C:/cludev/jagtmp/autoderbyN_regression/suitesAll_7/log/system/singleUse/oneuse1e/seg0/c1b1.dat (isDir=false  canRead=true  canWrite=true  size=16384)  C:/cludev/jagtmp/autoderbyN_regression/suitesAll_7/log/system/singleUse/oneuse1e/seg0/c1c0.dat (isDir=false  canRead=true  canWrite=true  size=8192)  C:/cludev/jagtmp/autoderbyN_regression/suitesAll_7/log/system/singleUse/oneuse1e/seg0/c1d1.dat (isDir=false  canRead=true  canWrite=true  size=8192)  C:/cludev/jagtmp/autoderbyN_regression/suitesAll_7/log/system/singleUse/oneuse1e/seg0/c1e0.dat (isDir=false  canRead=true  canWrite=true  size=8192)  C:/cludev/jagtmp/autoderbyN_regression/suitesAll_7/log/system/singleUse/oneuse1e/seg0/c1f1.dat (isDir=false  canRead=true  canWrite=true  size=8192)  C:/cludev/jagtmp/autoderbyN_regression/suitesAll_7/log/system/singleUse/oneuse1e/seg0/c20.dat (isDir=false  canRead=true  canWrite=true  size=28672)  C:/cludev/jagtmp/autoderbyN_regression/suitesAll_7/log/system/singleUse/oneuse1e/seg0/c200.dat (isDir=false  canRead=true  canWrite=true  size=8192)  C:/cludev/jagtmp/autoderbyN_regression/suitesAll_7/log/system/singleUse/oneuse1e/seg0/c211.dat (isDir=false  canRead=true  canWrite=true  size=8192)  C:/cludev/jagtmp/autoderbyN_regression/suitesAll_7/log/system/singleUse/oneuse1e/seg0/c221.dat (isDir=false  canRead=true  canWrite=true  size=8192)  C:/cludev/jagtmp/autoderbyN_regression/suitesAll_7/log/system/singleUse/oneuse1e/seg0/c230.dat (isDir=false  canRead=true  canWrite=true  size=114688)  C:/cludev/jagtmp/autoderbyN_regression/suitesAll_7/log/system/singleUse/oneuse1e/seg0/c241.dat (isDir=false  canRead=true  canWrite=true  size=8192)  C:/cludev/jagtmp/autoderbyN_regression/suitesAll_7/log/system/singleUse/oneuse1e/seg0/c251.dat (isDir=false  canRead=true  canWrite=true  size=20480)  C:/cludev/jagtmp/autoderbyN_regression/suitesAll_7/log/system/singleUse/oneuse1e/seg0/c260.dat (isDir=false  canRead=true  canWrite=true  size=8192)  C:/cludev/jagtmp/autoderbyN_regression/suitesAll_7/log/system/singleUse/oneuse1e/seg0/c271.dat (isDir=false  canRead=true  canWrite=true  size=8192)  C:/cludev/jagtmp/autoderbyN_regression/suitesAll_7/log/system/singleUse/oneuse1e/seg0/c281.dat (isDir=false  canRead=true  canWrite=true  size=8192)  C:/cludev/jagtmp/autoderbyN_regression/suitesAll_7/log/system/singleUse/oneuse1e/seg0/c290.dat (isDir=false  canRead=true  canWrite=true  size=8192)  C:/cludev/jagtmp/autoderbyN_regression/suitesAll_7/log/system/singleUse/oneuse1e/seg0/c2a1.dat (isDir=false  canRead=true  canWrite=true  size=8192)  C:/cludev/jagtmp/autoderbyN_regression/suitesAll_7/log/system/singleUse/oneuse1e/seg0/c2b1.dat (isDir=false  canRead=true  canWrite=true  size=8192)  C:/cludev/jagtmp/autoderbyN_regression/suitesAll_7/log/system/singleUse/oneuse1e/seg0/c2c1.dat (isDir=false  canRead=true  canWrite=true  size=8192)  C:/cludev/jagtmp/autoderbyN_regression/suitesAll_7/log/system/singleUse/oneuse1e/seg0/c2d0.dat (isDir=false  canRead=true  canWrite=true  size=8192)  C:/cludev/jagtmp/autoderbyN_regression/suitesAll_7/log/system/singleUse/oneuse1e/seg0/c2e1.dat (isDir=false  canRead=true  canWrite=true  size=8192)  C:/cludev/jagtmp/autoderbyN_regression/suitesAll_7/log/system/singleUse/oneuse1e/seg0/c2f0.dat (isDir=false  canRead=true  canWrite=true  size=8192)  C:/cludev/jagtmp/autoderbyN_regression/suitesAll_7/log/system/singleUse/oneuse1e/seg0/c300.dat (isDir=false  canRead=true  canWrite=true  size=8192)  C:/cludev/jagtmp/autoderbyN_regression/suitesAll_7/log/system/singleUse/oneuse1e/seg0/c31.dat (isDir=false  canRead=true  canWrite=true  size=8192)  C:/cludev/jagtmp/autoderbyN_regression/suitesAll_7/log/system/singleUse/oneuse1e/seg0/c311.dat (isDir=false  canRead=true  canWrite=true  size=8192)  C:/cludev/jagtmp/autoderbyN_regression/suitesAll_7/log/system/singleUse/oneuse1e/seg0/c321.dat (isDir=false  canRead=true  canWrite=true  size=8192)  C:/cludev/jagtmp/autoderbyN_regression/suitesAll_7/log/system/singleUse/oneuse1e/seg0/c331.dat (isDir=false  canRead=true  canWrite=true  size=8192)  C:/cludev/jagtmp/autoderbyN_regression/suitesAll_7/log/system/singleUse/oneuse1e/seg0/c340.dat (isDir=false  canRead=true  canWrite=true  size=8192)  C:/cludev/jagtmp/autoderbyN_regression/suitesAll_7/log/system/singleUse/oneuse1e/seg0/c351.dat (isDir=false  canRead=true  canWrite=true  size=8192)  C:/cludev/jagtmp/autoderbyN_regression/suitesAll_7/log/system/singleUse/oneuse1e/seg0/c361.dat (isDir=false  canRead=true  canWrite=true  size=8192)  C:/cludev/jagtmp/autoderbyN_regression/suitesAll_7/log/system/singleUse/oneuse1e/seg0/c371.dat (isDir=false  canRead=true  canWrite=true  size=8192)  C:/cludev/jagtmp/autoderbyN_regression/suitesAll_7/log/system/singleUse/oneuse1e/seg0/c380.dat (isDir=false  canRead=true  canWrite=true  size=8192)  C:/cludev/jagtmp/autoderbyN_regression/suitesAll_7/log/system/singleUse/oneuse1e/seg0/c391.dat (isDir=false  canRead=true  canWrite=true  size=8192)  C:/cludev/jagtmp/autoderbyN_regression/suitesAll_7/log/system/singleUse/oneuse1e/seg0/c3a1.dat (isDir=false  canRead=true  canWrite=true  size=8192)  C:/cludev/jagtmp/autoderbyN_regression/suitesAll_7/log/system/singleUse/oneuse1e/seg0/c3b1.dat (isDir=false  canRead=true  canWrite=true  size=8192)  C:/cludev/jagtmp/autoderbyN_regression/suitesAll_7/log/system/singleUse/oneuse1e/seg0/c3c0.dat (isDir=false  canRead=true  canWrite=true  size=8192)  C:/cludev/jagtmp/autoderbyN_regression/suitesAll_7/log/system/singleUse/oneuse1e/seg0/c3d1.dat (isDir=false  canRead=true  canWrite=true  size=8192)  C:/cludev/jagtmp/autoderbyN_regression/suitesAll_7/log/system/singleUse/oneuse1e/seg0/c3e1.dat (isDir=false  canRead=true  canWrite=true  size=8192)  C:/cludev/jagtmp/autoderbyN_regression/suitesAll_7/log/system/singleUse/oneuse1e/seg0/c3f1.dat (isDir=false  canRead=true  canWrite=true  size=8192)  C:/cludev/jagtmp/autoderbyN_regression/suitesAll_7/log/system/singleUse/oneuse1e/seg0/c400.dat (isDir=false  canRead=true  canWrite=true  size=8192)  C:/cludev/jagtmp/autoderbyN_regression/suitesAll_7/log/system/singleUse/oneuse1e/seg0/c41.dat (isDir=false  canRead=true  canWrite=true  size=16384)  C:/cludev/jagtmp/autoderbyN_regression/suitesAll_7/log/system/singleUse/oneuse1e/seg0/c411.dat (isDir=false  canRead=true  canWrite=true  size=8192)  C:/cludev/jagtmp/autoderbyN_regression/suitesAll_7/log/system/singleUse/oneuse1e/seg0/c421.dat (isDir=false  canRead=true  canWrite=true  size=8192)  C:/cludev/jagtmp/autoderbyN_regression/suitesAll_7/log/system/singleUse/oneuse1e/seg0/c430.dat (isDir=false  canRead=true  canWrite=true  size=8192)  C:/cludev/jagtmp/autoderbyN_regression/suitesAll_7/log/system/singleUse/oneuse1e/seg0/c441.dat (isDir=false  canRead=true  canWrite=true  size=8192)  C:/cludev/jagtmp/autoderbyN_regression/suitesAll_7/log/system/singleUse/oneuse1e/seg0/c451.dat (isDir=false  canRead=true  canWrite=true  size=8192)  C:/cludev/jagtmp/autoderbyN_regression/suitesAll_7/log/system/singleUse/oneuse1e/seg0/c461.dat (isDir=false  canRead=true  canWrite=true  size=8192)  C:/cludev/jagtmp/autoderbyN_regression/suitesAll_7/log/system/singleUse/oneuse1e/seg0/c470.dat (isDir=false  canRead=true  canWrite=true  size=8192)  C:/cludev/jagtmp/autoderbyN_regression/suitesAll_7/log/system/singleUse/oneuse1e/seg0/c481.dat (isDir=false  canRead=true  canWrite=true  size=8192)  C:/cludev/jagtmp/autoderbyN_regression/suitesAll_7/log/system/singleUse/oneuse1e/seg0/c51.dat (isDir=false  canRead=true  canWrite=true  size=8192)  C:/cludev/jagtmp/autoderbyN_regression/suitesAll_7/log/system/singleUse/oneuse1e/seg0/c60.dat (isDir=false  canRead=true  canWrite=true  size=8192)  C:/cludev/jagtmp/autoderbyN_regression/suitesAll_7/log/system/singleUse/oneuse1e/seg0/c71.dat (isDir=false  canRead=true  canWrite=true  size=8192)  C:/cludev/jagtmp/autoderbyN_regression/suitesAll_7/log/system/singleUse/oneuse1e/seg0/c81.dat (isDir=false  canRead=true  canWrite=true  size=8192)  C:/cludev/jagtmp/autoderbyN_regression/suitesAll_7/log/system/singleUse/oneuse1e/seg0/c90.dat (isDir=false  canRead=true  canWrite=true  size=20480)  C:/cludev/jagtmp/autoderbyN_regression/suitesAll_7/log/system/singleUse/oneuse1e/seg0/ca1.dat (isDir=false  canRead=true  canWrite=true  size=24576)  C:/cludev/jagtmp/autoderbyN_regression/suitesAll_7/log/system/singleUse/oneuse1e/seg0/cb1.dat (isDir=false  canRead=true  canWrite=true  size=8192)  C:/cludev/jagtmp/autoderbyN_regression/suitesAll_7/log/system/singleUse/oneuse1e/seg0/cc0.dat (isDir=false  canRead=true  canWrite=true  size=8192)  C:/cludev/jagtmp/autoderbyN_regression/suitesAll_7/log/system/singleUse/oneuse1e/seg0/cd1.dat (isDir=false  canRead=true  canWrite=true  size=8192)  C:/cludev/jagtmp/autoderbyN_regression/suitesAll_7/log/system/singleUse/oneuse1e/seg0/ce1.dat (isDir=false  canRead=true  canWrite=true  size=8192)  C:/cludev/jagtmp/autoderbyN_regression/suitesAll_7/log/system/singleUse/oneuse1e/seg0/cf0.dat (isDir=false  canRead=true  canWrite=true  size=8192)  C:/cludev/jagtmp/autoderbyN_regression/suitesAll_7/log/system/singleUse/oneuse1e/seg0 (isDir=true  canRead=true  canWrite=true  size=12288)  C:/cludev/jagtmp/autoderbyN_regression/suitesAll_7/log/system/singleUse/oneuse1e (isDir=true  canRead=true  canWrite=true  size=0) at org.apache.derbyTesting.junit.BaseJDBCTestCase.assertDirectoryDeleted(BaseJDBCTestCase.java:1491) at org.apache.derbyTesting.junit.DropDatabaseSetup.removeDir(DropDatabaseSetup.java:120) at org.apache.derbyTesting.junit.DropDatabaseSetup.access$000(DropDatabaseSetup.java:35) at org.apache.derbyTesting.junit.DropDatabaseSetup$1.run(DropDatabaseSetup.java:106) at java.security.AccessController.doPrivileged(Native Method) at org.apache.derbyTesting.junit.DropDatabaseSetup.removeDirectory(DropDatabaseSetup.java:103) at org.apache.derbyTesting.junit.DropDatabaseSetup.removeDirectory(DropDatabaseSetup.java:99) at org.apache.derbyTesting.junit.DropDatabaseSetup.removeDatabase(DropDatabaseSetup.java:92) at org.apache.derbyTesting.junit.TestConfiguration$5.tearDown(TestConfiguration.java:798) at junit.extensions.TestSetup$1.protect(TestSetup.java:22) at junit.extensions.TestSetup.run(TestSetup.java:25) at org.apache.derbyTesting.junit.BaseTestSetup.run(BaseTestSetup.java:57) at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24) at junit.extensions.TestSetup$1.protect(TestSetup.java:21) at junit.extensions.TestSetup.run(TestSetup.java:25) at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24) at junit.extensions.TestSetup$1.protect(TestSetup.java:21) at junit.extensions.TestSetup.run(TestSetup.java:25) at org.apache.derbyTesting.junit.BaseTestSetup.run(BaseTestSetup.java:57) at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24) at junit.extensions.TestSetup$1.protect(TestSetup.java:21) at junit.extensions.TestSetup.run(TestSetup.java:25) at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24) at junit.extensions.TestSetup$1.protect(TestSetup.java:21) at junit.extensions.TestSetup.run(TestSetup.java:25)3) testAll(org.apache.derbyTesting.functionTests.tests.lang.NativeAuthenticationServiceTest)junit.framework.AssertionFailedError: Failed to delete 77 files (root=C:/cludev/jagtmp/autoderbyN_regression/suitesAll_7/log/system/singleUse/oneuse1f): C:/cludev/jagtmp/autoderbyN_regression/suitesAll_7/log/system/singleUse/oneuse1f/db.lck (isDir=false  canRead=true  canWrite=true  size=38)  C:/cludev/jagtmp/autoderbyN_regression/suitesAll_7/log/system/singleUse/oneuse1f/log/log1.dat (isDir=false  canRead=true  canWrite=true  size=1048576)  C:/cludev/jagtmp/autoderbyN_regression/suitesAll_7/log/system/singleUse/oneuse1f/log (isDir=true  canRead=true  canWrite=true  size=0)  C:/cludev/jagtmp/autoderbyN_regression/suitesAll_7/log/system/singleUse/oneuse1f/seg0/c10.dat (isDir=false  canRead=true  canWrite=true  size=8192)  C:/cludev/jagtmp/autoderbyN_regression/suitesAll_7/log/system/singleUse/oneuse1f/seg0/c101.dat (isDir=false  canRead=true  canWrite=true  size=8192)  C:/cludev/jagtmp/autoderbyN_regression/suitesAll_7/log/system/singleUse/oneuse1f/seg0/c111.dat (isDir=false  canRead=true  canWrite=true  size=8192)  C:/cludev/jagtmp/autoderbyN_regression/suitesAll_7/log/system/singleUse/oneuse1f/seg0/c121.dat (isDir=false  canRead=true  canWrite=true  size=8192)  C:/cludev/jagtmp/autoderbyN_regression/suitesAll_7/log/system/singleUse/oneuse1f/seg0/c130.dat (isDir=false  canRead=true  canWrite=true  size=8192)  C:/cludev/jagtmp/autoderbyN_regression/suitesAll_7/log/system/singleUse/oneuse1f/seg0/c141.dat (isDir=false  canRead=true  canWrite=true  size=8192)  C:/cludev/jagtmp/autoderbyN_regression/suitesAll_7/log/system/singleUse/oneuse1f/seg0/c150.dat (isDir=false  canRead=true  canWrite=true  size=8192)  C:/cludev/jagtmp/autoderbyN_regression/suitesAll_7/log/system/singleUse/oneuse1f/seg0/c161.dat (isDir=false  canRead=true  canWrite=true  size=8192)  C:/cludev/jagtmp/autoderbyN_regression/suitesAll_7/log/system/singleUse/oneuse1f/seg0/c171.dat (isDir=false  canRead=true  canWrite=true  size=8192)  C:/cludev/jagtmp/autoderbyN_regression/suitesAll_7/log/system/singleUse/oneuse1f/seg0/c180.dat (isDir=false  canRead=true  canWrite=true  size=36864)  C:/cludev/jagtmp/autoderbyN_regression/suitesAll_7/log/system/singleUse/oneuse1f/seg0/c191.dat (isDir=false  canRead=true  canWrite=true  size=16384)  C:/cludev/jagtmp/autoderbyN_regression/suitesAll_7/log/system/singleUse/oneuse1f/seg0/c1a1.dat (isDir=false  canRead=true  canWrite=true  size=16384)",
            "id": "5580"
        },
        "5582": {
            "ground_truth": "1",
            "bug_report": "Access denied (java.lang.RuntimePermission modifyThreadGroup) in IndexStatisticsDaemonImpl.schedule()\nI user reported this exception with 10.8.2.3 - (1212722) when running regression tests against 10.8.As soon as the Index Statistics Thread was initialized they got the stack trace below.There was some discussion of this issue on the dev list:http://old.nabble.com/Report-of-security-manager-issue-with-10.8-and-ndexStatisticsDaemonImpl.schedule-to33137398.htmlI assume the failure is in  runningThread = new Thread(this  'index-stat-thread');Stack Trace:java.security.AccessControlException: Access denied(java.lang.RuntimePermission modifyThreadGroup) atjava.security.AccessController.checkPermission(AccessController.java:108) atjava.lang.SecurityManager.checkPermission(SecurityManager.java:544) atcom.ibm.ws.security.core.SecurityManager.checkPermission(SecurityManager.java:208) atcom.ibm.ws.security.core.SecurityManager.checkAccess(SecurityManager.java:407) at java.lang.ThreadGroup.checkAccess(ThreadGroup.java:226) at java.lang.Thread.initialize(Thread.java:345) at java.lang.Thread.&lt;init&gt;(Thread.java:281) at java.lang.Thread.&lt;init&gt;(Thread.java:179) atorg.apache.derby.impl.services.daemon.IndexStatisticsDaemonImpl.schedule(UnknownSource) atorg.apache.derby.impl.sql.GenericStatement.prepMinion(Unknown Source) at org.apache.derby.impl.sql.GenericStatement.prepare(UnknownSource) atorg.apache.derby.impl.sql.conn.GenericLanguageConnectionContext.prepareInternalStatement(UnknownSource) atorg.apache.derby.impl.jdbc.EmbedPreparedStatement.&lt;init&gt;(Unknown Source) atorg.apache.derby.impl.jdbc.EmbedPreparedStatement20.&lt;init&gt;(Unknown Source) atorg.apache.derby.impl.jdbc.EmbedPreparedStatement30.&lt;init&gt;(Unknown Source) atorg.apache.derby.impl.jdbc.EmbedPreparedStatement40.&lt;init&gt;(Unknown Source) atorg.apache.derby.jdbc.Driver40.newEmbedPreparedStatement(Unknown Source) atorg.apache.derby.impl.jdbc.EmbedConnection.prepareStatement(Unknown Source) atorg.apache.derby.impl.jdbc.EmbedConnection.prepareStatement(Unknown Source) at",
            "id": "5582"
        },
        "5584": {
            "ground_truth": "0",
            "bug_report": "Select statement with subqueries with group by and count distinct statements returns wrong number of results\nSteps to reproduce:1. Create database  connect to database with any JDBC client2. create two tables:CREATE TABLE TEST_5 ( profile_id INTEGER NOT NULL  group_ref INTEGER NOT NULL  matched_count INTEGER NOT NULL ); CREATE TABLE TEST_6 ( profile_id INTEGER NOT NULL  group_ref INTEGER NOT NULL  matched_count INTEGER NOT NULL );3. Insert two records for each table:insert into test_5 values (1  10000 1);insert into test_5 values (2  10000  2);insert into test_6 values (1  10000 1);insert into test_6 values (2  10000  2);4. Run following statementSELECT *FROM (SELECT ps1.group_ref  COUNT(DISTINCT ps1.matched_count) AS matched_count FROM test_5 ps1 GROUP BY ps1.group_ref  ps1.profile_id ) a  (SELECT ps2.group_ref  COUNT( DISTINCT ps2.matched_count) AS matched_count FROM test_6 ps2 GROUP BY ps2.group_ref  ps2.profile_id ) bAs a result I've got 3 records instead of 4 - at least Oracle 10greturns 4 records for this statement. Maybe i'm doing something wrong.Do you have any suggestions / possible workarounds for this problem",
            "id": "5584"
        },
        "5604": {
            "ground_truth": "0",
            "bug_report": "[patch] access static constants with static references\ncode access static fields by fetching instances and getting the static variable from the object. Just use the class reference.",
            "id": "5604"
        },
        "5609": {
            "ground_truth": "0",
            "bug_report": "Prepare old test harness for running tests on Java 8\nWhen running an old harness test with a Java 8 preview (available from http://jdk8.java.net/download.html)  it'll fail like this:$ java org.apache.derbyTesting.functionTests.harness.RunTest lang/supersimple.sql&#8211; listing properties &#8211;derby.locks.deadlockTimeout=3 derby.locks.waitTimeout=3WHOA  javavm is NULLProcess exception: java.lang.ClassNotFoundException: org.apache.derbyTesting.functionTests.harness.jdk18     Start: supersimple jdk1.8.0-ea 2012-02-08 20:29:59 ***Exception in thread 'main' java.lang.ClassNotFoundException: org.apache.derbyTesting.functionTests.harness.jdk18 at java.net.URLClassLoader$1.run(URLClassLoader.java:359) at java.net.URLClassLoader$1.run(URLClassLoader.java:348) at java.security.AccessController.doPrivileged(Native Method) at java.net.URLClassLoader.findClass(URLClassLoader.java:347) at java.lang.ClassLoader.loadClass(ClassLoader.java:423) at sun.misc.Launcher$AppClassLoader.loadClass(Launcher.java:308) at java.lang.ClassLoader.loadClass(ClassLoader.java:356) at java.lang.Class.forName0(Native Method) at java.lang.Class.forName(Class.java:181) at org.apache.derbyTesting.functionTests.harness.jvm.getJvm(jvm.java:217) at org.apache.derbyTesting.functionTests.harness.RunTest.buildTestCommand(RunTest.java:2267) at org.apache.derbyTesting.functionTests.harness.RunTest.testRun(RunTest.java:490) at org.apache.derbyTesting.functionTests.harness.RunTest.main(RunTest.java:360)    We need to add the org.apache.derbyTesting.functionTests.harness.jdk18 class to make the tests run on Java 8.",
            "id": "5609"
        },
        "5610": {
            "ground_truth": "0",
            "bug_report": "ServerPropertiesTest prints .java.net.SocketException: Connection reset to console but test passes\nServerPropertiesTest showed the below output when running. The ping retries and the test passes. I am not sure if in fact a Connection reset is a valid response if the server is not fully up and the test is just being too verbose or if it is real problem that we get this Error......................java.net.SocketException: Connection reset at java.net.SocketInputStream.read(SocketInputStream.java:168) at java.net.SocketInputStream.read(SocketInputStream.java:90) at org.apache.derby.impl.drda.NetworkServerControlImpl.fillReplyBuffer(Unknown Source) at org.apache.derby.impl.drda.NetworkServerControlImpl.readResult(Unknown Source) at org.apache.derby.impl.drda.NetworkServerControlImpl.pingWithNoOpen(Unknown Source) at org.apache.derby.impl.drda.NetworkServerControlImpl.ping(Unknown Source) at org.apache.derby.drda.NetworkServerControl.ping(Unknown Source) at org.apache.derbyTesting.junit.NetworkServerTestSetup.pingForServerUp(NetworkServerTestSetup.java:567) at org.apache.derbyTesting.functionTests.tests.derbynet.ServerPropertiesTest.canPingServer(ServerPropertiesTest.java:280) at org.apache.derbyTesting.functionTests.tests.derbynet.ServerPropertiesTest.shutdownServer(ServerPropertiesTest.java:309) at org.apache.derbyTesting.functionTests.tests.derbynet.ServerPropertiesTest.ttestSetPortPriority(ServerPropertiesTest.java:484) at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:48) at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25) at java.lang.reflect.Method.invoke(Method.java:600) at junit.framework.TestCase.runTest(TestCase.java:154) at junit.framework.TestCase.runBare(TestCase.java:127) at org.apache.derbyTesting.junit.BaseTestCase.runBare(BaseTestCase.java:113) at junit.framework.TestResult$1.protect(TestResult.java:106) at junit.framework.TestResult.runProtected(TestResult.java:124) at junit.framework.TestResult.run(TestResult.java:109) at junit.framework.TestCase.run(TestCase.java:118) at junit.extensions.TestDecorator.basicRun(TestDecorator.java:22) at junit.extensions.TestSetup$1.protect(TestSetup.java:19) at junit.framework.TestResult.runProtected(TestResult.java:124) at junit.extensions.TestSetup.run(TestSetup.java:23) at org.apache.derbyTesting.junit.BaseTestSetup.run(BaseTestSetup.java:57) at junit.extensions.TestDecorator.basicRun(TestDecorator.java:22) at junit.extensions.TestSetup$1.protect(TestSetup.java:19) at junit.framework.TestResult.runProtected(TestResult.java:124) at junit.extensions.TestSetup.run(TestSetup.java:23) at junit.extensions.TestDecorator.basicRun(TestDecorator.java:22) at junit.extensions.TestSetup$1.protect(TestSetup.java:19) at junit.framework.TestResult.runProtected(TestResult.java:124) at junit.extensions.TestSetup.run(TestSetup.java:23) at junit.extensions.TestDecorator.basicRun(TestDecorator.java:22) at junit.extensions.TestSetup$1.protect(TestSetup.java:19) at junit.framework.TestResult.runProtected(TestResult.java:124) at junit.extensions.TestSetup.run(TestSetup.java:23) at junit.framework.TestSuite.runTest(TestSuite.java:208) at junit.framework.TestSuite.run(TestSuite.java:203) at junit.framework.TestSuite.runTest(TestSuite.java:208) at junit.framework.TestSuite.run(TestSuite.java:203) at junit.textui.TestRunner.doRun(TestRunner.java:116) at junit.textui.TestRunner.start(TestRunner.java:172) at junit.textui.TestRunner.main(TestRunner.java:138)java.net.SocketException: Connection reset at java.net.SocketInputStream.read(SocketInputStream.java:168) at java.net.SocketInputStream.read(SocketInputStream.java:90) at org.apache.derby.impl.drda.NetworkServerControlImpl.fillReplyBuffer(Unknown Source) at org.apache.derby.impl.drda.NetworkServerControlImpl.readResult(Unknown Source) at org.apache.derby.impl.drda.NetworkServerControlImpl.pingWithNoOpen(Unknown Source) at org.apache.derby.impl.drda.NetworkServerControlImpl.ping(Unknown Source) at org.apache.derby.drda.NetworkServerControl.ping(Unknown Source) at org.apache.derbyTesting.junit.NetworkServerTestSetup.pingForServerUp(NetworkServerTestSetup.java:567) at org.apache.derbyTesting.functionTests.tests.derbynet.ServerPropertiesTest.canPingServer(ServerPropertiesTest.java:280) at org.apache.derbyTesting.functionTests.tests.derbynet.ServerPropertiesTest.shutdownServer(ServerPropertiesTest.java:309) at org.apache.derbyTesting.functionTests.tests.derbynet.ServerPropertiesTest.ttestSetPortPriority(ServerPropertiesTest.java:484) at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:48) at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25) at java.lang.reflect.Method.invoke(Method.java:600) at junit.framework.TestCase.runTest(TestCase.java:154) at junit.framework.TestCase.runBare(TestCase.java:127) at org.apache.derbyTesting.junit.BaseTestCase.runBare(BaseTestCase.java:113) at junit.framework.TestResult$1.protect(TestResult.java:106) at junit.framework.TestResult.runProtected(TestResult.java:124) at junit.framework.TestResult.run(TestResult.java:109) at junit.framework.TestCase.run(TestCase.java:118) at junit.extensions.TestDecorator.basicRun(TestDecorator.java:22) at junit.extensions.TestSetup$1.protect(TestSetup.java:19) at junit.framework.TestResult.runProtected(TestResult.java:124) at junit.extensions.TestSetup.run(TestSetup.java:23) at org.apache.derbyTesting.junit.BaseTestSetup.run(BaseTestSetup.java:57) at junit.extensions.TestDecorator.basicRun(TestDecorator.java:22) at junit.extensions.TestSetup$1.protect(TestSetup.java:19) at junit.framework.TestResult.runProtected(TestResult.java:124) at junit.extensions.TestSetup.run(TestSetup.java:23) at junit.extensions.TestDecorator.basicRun(TestDecorator.java:22) at junit.extensions.TestSetup$1.protect(TestSetup.java:19) at junit.framework.TestResult.runProtected(TestResult.java:124) at junit.extensions.TestSetup.run(TestSetup.java:23) at junit.extensions.TestDecorator.basicRun(TestDecorator.java:22) at junit.extensions.TestSetup$1.protect(TestSetup.java:19) at junit.framework.TestResult.runProtected(TestResult.java:124) at junit.extensions.TestSetup.run(TestSetup.java:23) at junit.framework.TestSuite.runTest(TestSuite.java:208) at junit.framework.TestSuite.run(TestSuite.java:203) at junit.framework.TestSuite.runTest(TestSuite.java:208) at junit.framework.TestSuite.run(TestSuite.java:203) at junit.textui.TestRunner.doRun(TestRunner.java:116) at junit.textui.TestRunner.start(TestRunner.java:172) at junit.textui.TestRunner.main(TestRunner.java:138)....................",
            "id": "5610"
        },
        "5615": {
            "ground_truth": "1",
            "bug_report": "NPE in Store  when running SELECT in a read-only database accessed via the classpath subprotocol when authentication  authorization  and Java security are turned on\nI get an NPE trying to select from a table on which I don't have select privilege. The database is stored in a jar file accessed via the classpath protocol. BUILTIN authentication and sql authorization are turned on in the database. Running under a Java security manager. I will attach a repro. Here is the NPE:Failed Statement is: select * from KIWI.tjava.lang.NullPointerException at org.apache.derby.impl.store.raw.data.BaseDataFileFactory.openContainer(BaseDataFileFactory.java:661) at org.apache.derby.impl.store.raw.data.BaseDataFileFactory.openContainer(BaseDataFileFactory.java:591) at org.apache.derby.impl.store.raw.xact.Xact.openContainer(Xact.java:1316) at org.apache.derby.impl.store.access.btree.OpenBTree.init(OpenBTree.java:380) at org.apache.derby.impl.store.access.btree.BTreeController.init(BTreeController.java:1250) at org.apache.derby.impl.store.access.btree.index.B2IController.init(B2IController.java:140) at org.apache.derby.impl.store.access.btree.index.B2I.open(B2I.java:821) at org.apache.derby.impl.store.access.RAMTransaction.openConglomerate(RAMTransaction.java:476) at org.apache.derby.impl.store.access.RAMTransaction.openConglomerate(RAMTransaction.java:1308) at org.apache.derby.impl.sql.catalog.DataDictionaryImpl.debugGenerateInfo(DataDictionaryImpl.java:9584) at org.apache.derby.impl.sql.catalog.DataDictionaryImpl.getDescriptorViaIndexMinion(DataDictionaryImpl.java:9492) at org.apache.derby.impl.sql.catalog.DataDictionaryImpl.getDescriptorViaIndex(DataDictionaryImpl.java:9303) at org.apache.derby.impl.sql.catalog.DataDictionaryImpl.getColumnDescriptorsScan(DataDictionaryImpl.java:2887) at org.apache.derby.impl.sql.catalog.DataDictionaryImpl.getColumnDescriptorsScan(DataDictionaryImpl.java:2851) at org.apache.derby.impl.sql.catalog.DataDictionaryImpl.finishTableDescriptor(DataDictionaryImpl.java:2408) at org.apache.derby.impl.sql.catalog.DataDictionaryImpl.getTableDescriptorIndex1Scan(DataDictionaryImpl.java:2277) at org.apache.derby.impl.sql.catalog.DataDictionaryImpl.getUncachedTableDescriptor(DataDictionaryImpl.java:2293) at org.apache.derby.impl.sql.catalog.NameTDCacheable.setIdentity(NameTDCacheable.java:110) at org.apache.derby.impl.services.cache.ConcurrentCache.find(ConcurrentCache.java:295) at org.apache.derby.impl.sql.catalog.DataDictionaryImpl.getTableDescriptor(DataDictionaryImpl.java:2224) at org.apache.derby.impl.sql.catalog.DataDictionaryImpl.faultInTabInfo(DataDictionaryImpl.java:9905) at org.apache.derby.impl.sql.catalog.DataDictionaryImpl.getNonCoreTI(DataDictionaryImpl.java:9702) at org.apache.derby.impl.sql.catalog.DataDictionaryImpl.getUncachedPermissionsDescriptor(DataDictionaryImpl.java:13712) at org.apache.derby.impl.sql.catalog.DataDictionaryImpl.getUncachedTablePermsDescriptor(DataDictionaryImpl.java:13660) at org.apache.derby.impl.sql.catalog.PermissionsCacheable.setIdentity(PermissionsCacheable.java:71) at org.apache.derby.impl.services.cache.ConcurrentCache.find(ConcurrentCache.java:295) at org.apache.derby.impl.sql.catalog.DataDictionaryImpl.getPermissions(DataDictionaryImpl.java:13364) at org.apache.derby.impl.sql.catalog.DataDictionaryImpl.getTablePermissions(DataDictionaryImpl.java:13350) at org.apache.derby.iapi.sql.dictionary.StatementTablePermission.oneAuthHasPermissionOnTable(StatementTablePermission.java:239) at org.apache.derby.iapi.sql.dictionary.StatementTablePermission.hasPermissionOnTable(StatementTablePermission.java:160) at org.apache.derby.iapi.sql.dictionary.StatementColumnPermission.check(StatementColumnPermission.java:99) at org.apache.derby.impl.sql.conn.GenericAuthorizer.authorize(GenericAuthorizer.java:183) at org.apache.derby.exe.ac40348015x0135x7cc7x4621x0000040700000.fillResultSet(Unknown Source) at org.apache.derby.exe.ac40348015x0135x7cc7x4621x0000040700000.execute(Unknown Source) at org.apache.derby.impl.sql.GenericActivationHolder.execute(GenericActivationHolder.java:353) at org.apache.derby.impl.sql.GenericPreparedStatement.executeStmt(GenericPreparedStatement.java:441) at org.apache.derby.impl.sql.GenericPreparedStatement.execute(GenericPreparedStatement.java:324) at org.apache.derby.impl.jdbc.EmbedStatement.executeStatement(EmbedStatement.java:1242) at org.apache.derby.impl.jdbc.EmbedStatement.execute(EmbedStatement.java:630) at org.apache.derby.impl.jdbc.EmbedStatement.execute(EmbedStatement.java:559) at org.apache.derby.impl.tools.ij.ij.executeImmediate(ij.java:367) at org.apache.derby.impl.tools.ij.utilMain.doCatch(utilMain.java:527) at org.apache.derby.impl.tools.ij.utilMain.runScriptGuts(utilMain.java:372) at org.apache.derby.impl.tools.ij.utilMain.go(utilMain.java:245) at org.apache.derby.impl.tools.ij.Main.go(Main.java:229) at org.apache.derby.impl.tools.ij.Main.mainCore(Main.java:184) at org.apache.derby.impl.tools.ij.Main.main(Main.java:75) at org.apache.derby.tools.ij.main(ij.java:59)Cleanup action completed",
            "id": "5615"
        },
        "5624": {
            "ground_truth": "0",
            "bug_report": "System can run out of stack space while processing DropOnCommit requests.\nThe system currently recursively calls xact.notifyObservers() from DropOnCommit.update(). It does this because in some casesnew observers can be added while processing the list of notifyObservers and those were being missed before the change  causingAssertions in the tests and possibly files not properly dropped on commit.Multiple users on the Derby user list have had failures running SYSCS_UTIL.SYSCS_COMPRESS_TABLE()  running out of stack trackwith a heavily recursive stack trace of the form (see more detail from these reports in subsequent comments):Caused by: java.lang.StackOverflowErrorat java.lang.ThreadLocal.get(ThreadLocal.java:125)at java.lang.StringCoding.deref(StringCoding.java:46)at java.lang.StringCoding.encode(StringCoding.java:258)at java.lang.String.getBytes(String.java:946)at java.io.UnixFileSystem.getBooleanAttributes0(Native Method)at java.io.UnixFileSystem.getBooleanAttributes(UnixFileSystem.java:228)at java.io.File.exists(File.java:733)at org.apache.derby.impl.store.raw.data.StreamFileContainer.run(Unknown Source)at java.security.AccessController.doPrivileged(Native Method)at org.apache.derby.impl.store.raw.data.StreamFileContainer.privExists(Unknown Source)at org.apache.derby.impl.store.raw.data.StreamFileContainer.open(Unknown Source)at org.apache.derby.impl.store.raw.data.BaseDataFileFactory.openStreamContainer(Unknown Source)at org.apache.derby.impl.store.raw.xact.Xact.openStreamContainer(Unknown Source)at org.apache.derby.impl.store.raw.data.BaseDataFileFactory.dropStreamContainer(Unknown Source)at org.apache.derby.impl.store.raw.xact.Xact.dropStreamContainer(Unknown Source)at org.apache.derby.impl.store.raw.data.DropOnCommit.update(Unknown Source)at java.util.Observable.notifyObservers(Observable.java:142)at org.apache.derby.iapi.store.raw.xact.RawTransaction.notifyObservers(Unknown Source)at org.apache.derby.impl.store.raw.data.DropOnCommit.update(Unknown Source)at java.util.Observable.notifyObservers(Observable.java:142)at org.apache.derby.iapi.store.raw.xact.RawTransaction.notifyObservers(Unknown Source)at org.apache.derby.impl.store.raw.data.DropOnCommit.update(Unknown Source)at java.util.Observable.notifyObservers(Observable.java:142)at org.apache.derby.iapi.store.raw.xact.RawTransaction.notifyObservers(Unknown Source)at org.apache.derby.impl.store.raw.data.DropOnCommit.update(Unknown Source)at java.util.Observable.notifyObservers(Observable.java:142)",
            "id": "5624"
        },
        "5642": {
            "ground_truth": "1",
            "bug_report": "OutOfMemoryError in OCRecoveryTest on phoneME\nhttp://dbtg.foundry.sun.com/derby/test/Daily/javaME/testing/Limited/testSummary-1298470.htmlThere was 1 failure:1) testOCRecovery(org.apache.derbyTesting.functionTests.tests.store.OCRecoveryTest)junit.framework.AssertionFailedError: expectedExitValue:0 does not match exitValue:1expected output strings: &#91;0&#93;OK (1 test) actual output:&lt;STDOUT&gt;.ETime: 4.432There was 1 error:1) launchOCRecovery_1(org.apache.derbyTesting.functionTests.tests.store.OCRecoveryTest)&lt;END STDOUT&gt;&lt;STDERR&gt;java.lang.OutOfMemoryError: [C at java.io.BufferedReader.&lt;init&gt;(Unknown Source) at java.io.BufferedReader.&lt;init&gt;(Unknown Source) at junit.runner.BaseTestRunner.getFilteredTrace(Unknown Source) at junit.textui.ResultPrinter.printDefectTrace(Unknown Source) at junit.textui.ResultPrinter.printDefect(Unknown Source) at junit.textui.ResultPrinter.printDefects(Unknown Source) at junit.textui.ResultPrinter.printErrors(Unknown Source) at junit.textui.ResultPrinter.print(Unknown Source) at sun.misc.CVM.runMain(Unknown Source)&lt;END STDERR&gt; expected:&lt;0&gt; but was:&lt;1&gt; at org.apache.derbyTesting.junit.BaseTestCase.assertExecJavaCmdAsExpected(Unknown Source) at org.apache.derbyTesting.junit.BaseTestCase.assertLaunchedJUnitTestMethod(Unknown Source) at org.apache.derbyTesting.functionTests.tests.store.OCRecoveryTest.testOCRecovery(Unknown Source) at org.apache.derbyTesting.junit.BaseTestCase.runBare(Unknown Source) at junit.extensions.TestDecorator.basicRun(Unknown Source) at junit.extensions.TestSetup$1.protect(Unknown Source) at junit.extensions.TestSetup.run(Unknown Source) at org.apache.derbyTesting.junit.BaseTestSetup.run(Unknown Source) at junit.extensions.TestDecorator.basicRun(Unknown Source) at junit.extensions.TestSetup$1.protect(Unknown Source) at junit.extensions.TestSetup.run(Unknown Source) at sun.misc.CVM.runMain(Unknown Source)",
            "id": "5642"
        },
        "5646": {
            "ground_truth": "0",
            "bug_report": "Get upgrade tests to pass on OJEC 1.1\nThe upgrade tests fail on OJEC 1.1 because Derby 10.3.1.4 cannot be loaded. That version is ignored on phoneME for the exact same reason. We should do the same for OJEC.",
            "id": "5646"
        },
        "5647": {
            "ground_truth": "0",
            "bug_report": "NATIVE warns about password expiry for DBO\nThe DBO's password cannot expire. Still  NATIVE warns that the password is about to expire.ij&gt; connect 'jdbc:derby:authdb;create=true;user=admin';ij&gt; call syscs_util.syscs_set_database_property('derby.authentication.native.passwordLifetimeMillis'  '100');0 rows inserted/updated/deletedij&gt; call syscs_util.syscs_create_user('ADMIN'  '%*$');0 rows inserted/updated/deletedij&gt; call syscs_util.syscs_set_database_property('derby.authentication.provider'  'NATIVE::LOCAL');0 rows inserted/updated/deletedij&gt; connect 'jdbc:derby:authdb;shutdown=true';ERROR 08006: Database 'authdb' shutdown.ij&gt; connect 'jdbc:derby:authdb;user=admin;password=%*$';WARNING 01J15: Your password will expire in 0 day(s). Please use the SYSCS_UTIL.SYSCS_MODIFY_PASSWORD procedure to change your password.",
            "id": "5647"
        },
        "5679": {
            "ground_truth": "0",
            "bug_report": "Rolling back a transaction leads to an inconsistent state\nRolling back a transaction can leave a table in an inconsistent state if the table has been previously altered through the addition of new columns. It appears that if newly added columns have not been changed from their default value  then when a transaction which sets new values for these columns is rolled back the new columns are not restored to their previous values.Attached is an ij script with fairly minimal steps to reproduce the problem on Derby 10.6.2.0 and 10.8.2.2 (Win7 x64  Sun 32-bit JRE 1.6.0.26). Expected and observed output also attached.Would appreciate any suggestions as to a workaround for this issue. Running SYSCS_UTIL.SYSCS_COMPRESS_TABLE on the table after adding the columns seems to avoid the problem but may be just masking the issue.",
            "id": "5679"
        },
        "5681": {
            "ground_truth": "0",
            "bug_report": "When a foreign key constraint on a table is dropped  the associated statistics row for the conglomerate is not removed\nIf you drop the foreign key constraint for a table  the statistics row does not get removed. This affects the indexStat daemon because it now finds these statistics row which always appear as out of date  causing an update to be scheduled.Here is how to get it to happen:set schema app;CREATE TABLE TEST_TAB_1( ID INTEGER PRIMARY KEY NOT NULL);CREATE TABLE TEST_TAB_2( ID INTEGER PRIMARY KEY NOT NULL);ALTER TABLE TEST_TAB_2ADD CONSTRAINT TEST_TAB_2_FK_1FOREIGN KEY (ID) REFERENCES TEST_TAB_1(ID);insert into app.TEST_TAB_1 values (1);insert into test_tab_2 values(1);call syscs_util.syscs_update_statistics('APP'  'TEST_TAB_2'  null);selectc.TABLEID c.CONGLOMERATENUMBER c.CONGLOMERATENAME c.ISINDEX c.ISCONSTRAINT c.CONGLOMERATEID t.TABLEID t.TABLENAME t.TABLETYPE s.STATID s.REFERENCEID s.TABLEID s.CREATIONTIMESTAMP s.TYPE s.VALID s.COLCOUNT CAST(STATISTICS AS VARCHAR(40)) as STATISTICSfrom sys.SYSCONGLOMERATES c join sys.SYSTABLES t on c.TABLEID = t.TABLEID join sys.SYSSTATISTICS s on s.TABLEID = t.TABLEIDwhere t.TABLENAME = 'TEST_TAB_2' and c.ISINDEX = false;&#8211; At this point there are two statistic rowsTABLEID CONGLOMERATENUMBER CONGLOMERATENAME ISINDEX ISCONSTRAINT CONGLOMERATEID TABLEID TABLENAME TABLETYPE STATID REFERENCEID TABLEID CREATIONTIMESTAMP TYPE VALID COLCOUNT STATISTICS84490209-0136-6999-c1b4-000065089f97 348432 84490209-0136-6999-c1b4-000065089f97 false false cccb420a-0136-6999-c1b4-000065089f97 84490209-0136-6999-c1b4-000065089f97 TEST_TAB_2 T edbc8255-0136-6999-c1b4-000065089f97 55410238-0136-6999-c1b4-000065089f97 84490209-0136-6999-c1b4-000065089f97 2012-03-31 17:36:49.629 I true 1 numunique= 1 numrows= 184490209-0136-6999-c1b4-000065089f97 348432 84490209-0136-6999-c1b4-000065089f97 false false cccb420a-0136-6999-c1b4-000065089f97 84490209-0136-6999-c1b4-000065089f97 TEST_TAB_2 T 05278254-0136-6999-c1b4-000065089f97 63454207-0136-6999-c1b4-000065089f97 84490209-0136-6999-c1b4-000065089f97 2012-03-31 17:36:49.628 I true 1 numunique= 1 numrows= 1&#8211; Now drop the constraintalter table TEST_TAB_2drop constraint TEST_TAB_2_FK_1;selectc.TABLEID c.CONGLOMERATENUMBER c.CONGLOMERATENAME c.ISINDEX c.ISCONSTRAINT c.CONGLOMERATEID t.TABLEID t.TABLENAME t.TABLETYPE s.STATID s.REFERENCEID s.TABLEID s.CREATIONTIMESTAMP s.TYPE s.VALID s.COLCOUNT CAST(STATISTICS AS VARCHAR(40)) as STATISTICSfrom sys.SYSCONGLOMERATES c join sys.SYSTABLES t on c.TABLEID = t.TABLEID join sys.SYSSTATISTICS s on s.TABLEID = t.TABLEIDwhere t.TABLENAME = 'TEST_TAB_2' and c.ISINDEX = false;&#8211; There are still two statistic rowsTABLEID CONGLOMERATENUMBER CONGLOMERATENAME ISINDEX ISCONSTRAINT CONGLOMERATEID TABLEID TABLENAME TABLETYPE STATID REFERENCEID TABLEID CREATIONTIMESTAMP TYPE VALID COLCOUNT STATISTICS84490209-0136-6999-c1b4-000065089f97 348432 84490209-0136-6999-c1b4-000065089f97 false false cccb420a-0136-6999-c1b4-000065089f97 84490209-0136-6999-c1b4-000065089f97 TEST_TAB_2 T edbc8255-0136-6999-c1b4-000065089f97 55410238-0136-6999-c1b4-000065089f97 84490209-0136-6999-c1b4-000065089f97 2012-03-31 17:36:49.629 I true 1 numunique= 1 numrows= 184490209-0136-6999-c1b4-000065089f97 348432 84490209-0136-6999-c1b4-000065089f97 false false cccb420a-0136-6999-c1b4-000065089f97 84490209-0136-6999-c1b4-000065089f97 TEST_TAB_2 T 05278254-0136-6999-c1b4-000065089f97 63454207-0136-6999-c1b4-000065089f97 84490209-0136-6999-c1b4-000065089f97 2012-03-31 17:36:49.628 I true 1 numunique= 1 numrows= 1&#8211; Add another rowinsert into app.TEST_TAB_1 values (2);insert into test_tab_2 values(2);&#8211; Update the statisticscall syscs_util.syscs_update_statistics('APP'  'TEST_TAB_2'  null);selectc.TABLEID c.CONGLOMERATENUMBER c.CONGLOMERATENAME c.ISINDEX c.ISCONSTRAINT c.CONGLOMERATEID t.TABLEID t.TABLENAME t.TABLETYPE s.STATID s.REFERENCEID s.TABLEID s.CREATIONTIMESTAMP s.TYPE s.VALID s.COLCOUNT CAST(STATISTICS AS VARCHAR(40)) as STATISTICSfrom sys.SYSCONGLOMERATES c join sys.SYSTABLES t on c.TABLEID = t.TABLEID join sys.SYSSTATISTICS s on s.TABLEID = t.TABLEIDwhere t.TABLENAME = 'TEST_TAB_2' and c.ISINDEX = false;&#8211; There are still two rows but now one show 1 row and one shows 2 rowsTABLEID CONGLOMERATENUMBER CONGLOMERATENAME ISINDEX ISCONSTRAINT CONGLOMERATEID TABLEID TABLENAME TABLETYPE STATID REFERENCEID TABLEID CREATIONTIMESTAMP TYPE VALID COLCOUNT STATISTICS84490209-0136-6999-c1b4-000065089f97 348432 84490209-0136-6999-c1b4-000065089f97 false false cccb420a-0136-6999-c1b4-000065089f97 84490209-0136-6999-c1b4-000065089f97 TEST_TAB_2 T edbc8255-0136-6999-c1b4-000065089f97 55410238-0136-6999-c1b4-000065089f97 84490209-0136-6999-c1b4-000065089f97 2012-03-31 17:36:49.629 I true 1 numunique= 1 numrows= 184490209-0136-6999-c1b4-000065089f97 348432 84490209-0136-6999-c1b4-000065089f97 false false cccb420a-0136-6999-c1b4-000065089f97 84490209-0136-6999-c1b4-000065089f97 TEST_TAB_2 T 18438274-0136-6999-c1b4-000065089f97 63454207-0136-6999-c1b4-000065089f97 84490209-0136-6999-c1b4-000065089f97 2012-03-31 17:41:19.164 I true 1 numunique= 2 numrows= 2&#8211; Add the constraint back onALTER TABLE TEST_TAB_2ADD CONSTRAINT TEST_TAB_2_FK_1FOREIGN KEY (ID) REFERENCES TEST_TAB_1(ID);&#8211; Insert another rowinsert into app.TEST_TAB_1 values (3);insert into test_tab_2 values(3);&#8211; Update the statisticscall syscs_util.syscs_update_statistics('APP'  'TEST_TAB_2'  null);selectc.TABLEID c.CONGLOMERATENUMBER c.CONGLOMERATENAME c.ISINDEX c.ISCONSTRAINT c.CONGLOMERATEID t.TABLEID t.TABLENAME t.TABLETYPE s.STATID s.REFERENCEID s.TABLEID s.CREATIONTIMESTAMP s.TYPE s.VALID s.COLCOUNT CAST(STATISTICS AS VARCHAR(40)) as STATISTICSfrom sys.SYSCONGLOMERATES c join sys.SYSTABLES t on c.TABLEID = t.TABLEID join sys.SYSSTATISTICS s on s.TABLEID = t.TABLEIDwhere t.TABLENAME = 'TEST_TAB_2' and c.ISINDEX = false;&#8211; Now there are 3 rowsTABLEID CONGLOMERATENUMBER CONGLOMERATENAME ISINDEX ISCONSTRAINT CONGLOMERATEID TABLEID TABLENAME TABLETYPE STATID REFERENCEID TABLEID CREATIONTIMESTAMP TYPE VALID COLCOUNT STATISTICS84490209-0136-6999-c1b4-000065089f97 348432 84490209-0136-6999-c1b4-000065089f97 false false cccb420a-0136-6999-c1b4-000065089f97 84490209-0136-6999-c1b4-000065089f97 TEST_TAB_2 T edbc8255-0136-6999-c1b4-000065089f97 55410238-0136-6999-c1b4-000065089f97 84490209-0136-6999-c1b4-000065089f97 2012-03-31 17:36:49.629 I true 1 numunique= 1 numrows= 184490209-0136-6999-c1b4-000065089f97 348432 84490209-0136-6999-c1b4-000065089f97 false false cccb420a-0136-6999-c1b4-000065089f97 84490209-0136-6999-c1b4-000065089f97 TEST_TAB_2 T 45eb02e8-0136-6999-c1b4-000065089f97 63454207-0136-6999-c1b4-000065089f97 84490209-0136-6999-c1b4-000065089f97 2012-03-31 17:46:00.211 I true 1 numunique= 3 numrows= 384490209-0136-6999-c1b4-000065089f97 348432 84490209-0136-6999-c1b4-000065089f97 false false cccb420a-0136-6999-c1b4-000065089f97 84490209-0136-6999-c1b4-000065089f97 TEST_TAB_2 T 0ea502e9-0136-6999-c1b4-000065089f97 7ab90278-0136-6999-c1b4-000065089f97 84490209-0136-6999-c1b4-000065089f97 2012-03-31 17:46:00.212 I true 1 numunique= 3 numrows= 3Note that dropping that recreating the constraint or compressing the table does not fix the problem.",
            "id": "5681"
        },
        "5687": {
            "ground_truth": "0",
            "bug_report": "Back out the concurrency improvements for identity columns introduced by derby-4437\nDERBY-4437 attempted to improve the concurrency of identity columns by using SYSSEQUENCE-style sequence generators. These improvements caused NsTest to behave differently than it used to and they disclosed a problem in clearing the identity cache. The community lost confidence in this solution and it was backed out of the 10.8 branch under issue DERBY-5448. This new issue is filed to back the improvements out of the 10.9 trunk. Further useful discussion about how to improve the concurrency and correctness of identity columns has been taking place on DERBY-5443 and DERBY-5493.For the 10.9 release  identity columns will return to their old behavior of being ill-suited for high concurrency applications. Applications which need higher concurrency should be re-coded to use sequences rather than identity columns.",
            "id": "5687"
        },
        "5692": {
            "ground_truth": "0",
            "bug_report": "intermittent test failure in storetests/st_derby715.java\nI am seeing an irregularly occurring failure with ibm 1.4.2 on one machine - which happens to be the only 4 CPU machine and the only one running Windows 2008...And I've got 10.8 nightly tests running on it.I have not seen this with other jvms on the same machine.It's possible this would also happen on trunk  but we stopped supporting 1.4.2 with trunk and so I do not run tests against trunk with (ibm) 1.4.2.When the test passes  the output contains 5 identical lines 'Got a Deadlock'.The test failures are of 2 kinds: 1 (or more?) of the 'Got a Deadlock' lines is missing we get a '40XL1' error (timeout) instead of a deadlock.As the second situation seems to match what DERBY-715 was about  I thought it worthwhile reporting as a separate JIRA. We should check it's not somehow a regression.",
            "id": "5692"
        },
        "5705": {
            "ground_truth": "0",
            "bug_report": "Authorization decorators don't null out connections when done\nSome decorators used to test authorization don't close and null out references to Connection objects when they have completed. Since these tests often create/boot single-use databases  and the Connection objects have references to the database instance and  directly or indirectly  many of its modules  this prevents much garbage from being removed from the heap after the tests have completed and shut down their single-use databases. We should close the default connection and clear the reference to it when tearing down these decorators  so the space is released for subsequent tests to use.This problem affects decorators returned by the following methods:DatabasePropertyTestSetup.builtinAuthenticationNoTeardown()TestConfiguration.sqlAuthorizationDecorator()TestConfiguration.sqlAuthorizationDecoratorSingleUse()These methods return modified versions of DatabasePropertyTestSetup where the tearDown() method is a no-op.",
            "id": "5705"
        },
        "5706": {
            "ground_truth": "0",
            "bug_report": "Clean up statements in CreateTableFromQueryTest\nCreateTableFromQueryTest has a Statement field that it closes  but doesn't null out  in tearDown(). Since the field isn't nulled out  it cannot be garbage collected  and one Statement per test case will be left on the heap after completion.",
            "id": "5706"
        },
        "5709": {
            "ground_truth": "0",
            "bug_report": "ResultSetFromPreparedStatementTest keeps references to non-default connections\nResultSetFromPreparedStatementTest keeps references to non-default connections in the fields c2 and c3. c2 is closed and nulled out in tearDown(). c3 is only closed. It should be nulled out too in order to allow gc of resources after test completion.",
            "id": "5709"
        },
        "5710": {
            "ground_truth": "0",
            "bug_report": "BigDataTest.tearDown() doesn't call super.tearDown()\nBigDataTest's tearDown() method doesn't call super.tearDown()  causing it to leave statements and connections open and not eligible for gc.",
            "id": "5710"
        },
        "5712": {
            "ground_truth": "0",
            "bug_report": "CheckConstraintTest holds on to resources after completion\nCheckConstraintTest keeps connections  statements and result sets in instance variables  but never clears the variables  so they are kept forever.",
            "id": "5712"
        },
        "5714": {
            "ground_truth": "0",
            "bug_report": "ColumnDefaultsTest holds on to resources after completion\nColumnDefaultsTest keeps connections  statements and result sets in instance variables  but never clears the variables  so they are kept forever.",
            "id": "5714"
        },
        "5715": {
            "ground_truth": "0",
            "bug_report": "InbetweenTest holds on to resources after completion\nInbetweenTest keeps connections  statements and result sets in instance variables  but never clears the variables  so they are kept forever.",
            "id": "5715"
        },
        "5716": {
            "ground_truth": "0",
            "bug_report": "TimestampArithTest keeps references to statements after completion\nTimestampArithTest keeps references to statements in static fields  but never closes them or clears the fields.",
            "id": "5716"
        },
        "5717": {
            "ground_truth": "0",
            "bug_report": "TableFunctionTest keeps reference to connection after completion\nThe test cases in TableFunctionTest store a DatabaseMetaData instance in an instance variable. The DatabaseMetaData instance references the default connection  and the connection can therefore not be gc'ed after the test has completed.",
            "id": "5717"
        },
        "5720": {
            "ground_truth": "0",
            "bug_report": "UngroupedAggregatesNegativeTest doesn't call super.tearDown()\npublic void tearDown() throws SQLException { dropTable('t1'); dropTable('t2'); }Should call super.tearDown() to close and release connection and statements.",
            "id": "5720"
        },
        "5721": {
            "ground_truth": "0",
            "bug_report": "ParameterMappingTest lacks call to super.tearDown()\nParameterMappingTest.tearDown() should call super.tearDown() to release connections/statements.",
            "id": "5721"
        },
        "5722": {
            "ground_truth": "0",
            "bug_report": "InternationalConnectTest forgets to call super.tearDown()\nIts tearDown() method should call super.tearDown() to free resources.",
            "id": "5722"
        },
        "5724": {
            "ground_truth": "0",
            "bug_report": "EncryptionKeyTest sometimes keeps reference to connection\nEncryptionKeyTest has this code to clean up the connection: if (con != null &amp;&amp; !con.isClosed()) { con.rollback(); con.close(); con = null; }If the connection is already closed  it won't null out the reference. It should set con to null unconditionally.",
            "id": "5724"
        },
        "5729": {
            "ground_truth": "0",
            "bug_report": "Replication tests keep references to connections after completion\nThe base class for the replication tests  ReplicationRun  keeps references to connections used during the test also after the test has completed. The connections are referenced from these fields: masterConn slaveConn startSlaveException (which references a connection indirectly via client.am.SqlException -&gt; client.am.Sqlca)",
            "id": "5729"
        },
        "5732": {
            "ground_truth": "0",
            "bug_report": "ProtocolTest doesn't clean up its test resources\nProtocolTest doesn't clean up its test resources. A tearDown method should be added to make the referenced instances eligable for garbage collection. The test class instances currenlty retain more than 10 MB on the heap.",
            "id": "5732"
        },
        "5736": {
            "ground_truth": "1",
            "bug_report": "NullPointerException in GenericTriggerExecutor.executeSPS() caused by OutOfMemoryError\nIf I run TriggerTest with the flags -server and -Xmx150M passed to the JVM  I fairly consistently see a NPE being thrown:java.lang.NullPointerException at org.apache.derby.impl.sql.execute.GenericTriggerExecutor.executeSPS(GenericTriggerExecutor.java:221) at org.apache.derby.impl.sql.execute.RowTriggerExecutor.fireTrigger(RowTriggerExecutor.java:114) at org.apache.derby.impl.sql.execute.TriggerEventActivator.notifyEvent(TriggerEventActivator.java:281) at org.apache.derby.impl.sql.execute.UpdateResultSet.fireAfterTriggers(UpdateResultSet.java:818) at org.apache.derby.impl.sql.execute.UpdateResultSet.open(UpdateResultSet.java:280) at org.apache.derby.impl.sql.GenericPreparedStatement.executeStmt(GenericPreparedStatement.java:443) at org.apache.derby.impl.sql.GenericPreparedStatement.execute(GenericPreparedStatement.java:324) at org.apache.derby.impl.jdbc.EmbedStatement.executeStatement(EmbedStatement.java:1242) at org.apache.derby.impl.jdbc.EmbedPreparedStatement.executeStatement(EmbedPreparedStatement.java:1715) at org.apache.derby.impl.jdbc.EmbedPreparedStatement.execute(EmbedPreparedStatement.java:1370) at org.apache.derbyTesting.functionTests.tests.lang.TriggerTest.testBlobInTriggerTable(TriggerTest.java:880) at org.apache.derbyTesting.functionTests.tests.lang.TriggerTest.testBlobInTriggerTable(TriggerTest.java:779) at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57) at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) at java.lang.reflect.Method.invoke(Method.java:601) at junit.framework.TestCase.runTest(TestCase.java:164) at junit.framework.TestCase.runBare(TestCase.java:130) at org.apache.derbyTesting.junit.BaseTestCase.runBare(BaseTestCase.java:113) at junit.framework.TestResult$1.protect(TestResult.java:106) at junit.framework.TestResult.runProtected(TestResult.java:124) at junit.framework.TestResult.run(TestResult.java:109) at junit.framework.TestCase.run(TestCase.java:120) at junit.framework.TestSuite.runTest(TestSuite.java:230) at junit.framework.TestSuite.run(TestSuite.java:225) at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24) at junit.extensions.TestSetup$1.protect(TestSetup.java:21) at junit.framework.TestResult.runProtected(TestResult.java:124) at junit.extensions.TestSetup.run(TestSetup.java:25) at org.apache.derbyTesting.junit.BaseTestSetup.run(BaseTestSetup.java:57) at junit.textui.TestRunner.doRun(TestRunner.java:121) at junit.textui.TestRunner.start(TestRunner.java:185) at junit.textui.TestRunner.main(TestRunner.java:143)In derby.log  there is an OOME right before the NPE:java.lang.OutOfMemoryError: Java heap space at org.apache.derby.impl.jdbc.LOBStreamControl.updateData(LOBStreamControl.java:154) at org.apache.derby.impl.jdbc.LOBStreamControl.write(LOBStreamControl.java:247) at org.apache.derby.impl.jdbc.LOBStreamControl.&lt;init&gt;(LOBStreamControl.java:89) at org.apache.derby.impl.jdbc.EmbedBlob.&lt;init&gt;(EmbedBlob.java:189) at org.apache.derby.impl.jdbc.EmbedResultSet.getBlob(EmbedResultSet.java:4072) at org.apache.derby.impl.jdbc.EmbedResultSet.getObject(EmbedResultSet.java:1704) at org.apache.derby.exe.ac56961bb1x0137x0d04x3d17x00005ffb0f6356.e0(Unknown Source) at org.apache.derby.impl.services.reflect.DirectCall.invoke(ReflectGeneratedClass.java:139) at org.apache.derby.impl.sql.execute.RowResultSet.getNextRowCore(RowResultSet.java:148) at org.apache.derby.impl.sql.execute.DMLWriteResultSet.getNextRowCore(DMLWriteResultSet.java:127) at org.apache.derby.impl.sql.execute.InsertResultSet.open(InsertResultSet.java:507) at org.apache.derby.impl.sql.GenericPreparedStatement.executeStmt(GenericPreparedStatement.java:443) at org.apache.derby.impl.sql.GenericPreparedStatement.executeSubStatement(GenericPreparedStatement.java:313) at org.apache.derby.impl.sql.execute.GenericTriggerExecutor.executeSPS(GenericTriggerExecutor.java:176) at org.apache.derby.impl.sql.execute.RowTriggerExecutor.fireTrigger(RowTriggerExecutor.java:114)(...)The code that fails with NPE  is this call to cleanupOnError() in a catch block in GenericTriggerExecutor.executeSPS(): /* retrieve the current active SC */ StatementContext sc = lcc.getStatementContext(); /* make sure that the cleanup is on the new SC */ if (active_sc != sc)  { sc.cleanupOnError(e); }",
            "id": "5736"
        },
        "5740": {
            "ground_truth": "0",
            "bug_report": "Remove unsued code in AlterTableConstantaction.columnDroppedAndTriggerDependencies\nThe following code is executed  but the results are not used: CollectNodesVisitor visitor = new CollectNodesVisitor(ColumnReference.class); stmtnode.accept(visitor); Vector refs = visitor.getList(); &lt;--- never usedI plan to remove the code  but just want to record it here in case there are side-effects by using the visitor.",
            "id": "5740"
        },
        "5742": {
            "ground_truth": "1",
            "bug_report": "Native user authentication: improve wording of error message\nThis error message no longer has a correct string: XCY05(quote from English locale):Invalid setting of the derby.authentication.provider property. This property cannot be set to NATIVE::LOCAL unless credentials for the database owner have been stored in the database using the SYSCS_UTIL.SYSCS_CREATE_USER procedure.This property should no longer ever need to be set to NATIVE::LOCAL: it is done automatically when the first user is created via SYSCS_UTIL.SYSCS_CREATE_USER.The wording should be adjusted. Note: Now  the property should never be set manually for native authentication via SYSCS_UTIL.SYSCS_SET_DATABASE_PROPERTY  this is only meaningful for LOCAL credentials db  but this is done automatically since version 7 of the spec.",
            "id": "5742"
        },
        "5750": {
            "ground_truth": "0",
            "bug_report": "Sending an empty string as table name to compress table procedure or empty string as index name to update statistics procedure makes the parser throw an exception.\nWhen empty string is passed for the index name to the update statistics procedure  it throws following exception(passing an empty string for table to compress table procedure also gives simiar exception). The new stored procedure being created through DERBY-4115 for dropping the statistics also gave similar exceptionjava -Dij.exceptionTrace=true org.apache.derby.tools.ijconnect 'jdbc:derby:db1;create=true'; create table t1(c11 int  statistics int not null);call syscs_util.SYSCS_UPDATE_STATISTICS( 'APP'  'T1'  '' );ERROR 38000: The exception 'java.sql.SQLException: Syntax error: Encountered '/'' at line 1  column 42.' was thrown while evaluating an expression.java.sql.SQLException: The exception 'java.sql.SQLException: Syntax error: Encountered '/'' at line 1  column 42.' was thrown while evaluating an expression. at org.apache.derby.impl.jdbc.SQLExceptionFactory40.getSQLException(SQLExceptionFactory40.java:98) at org.apache.derby.impl.jdbc.Util.newEmbedSQLException(Util.java:142) at org.apache.derby.impl.jdbc.Util.seeNextException(Util.java:278) at org.apache.derby.impl.jdbc.TransactionResourceImpl.wrapInSQLException(TransactionResourceImpl.java:431) at org.apache.derby.impl.jdbc.TransactionResourceImpl.handleException(TransactionResourceImpl.java:353) at org.apache.derby.impl.jdbc.EmbedConnection.handleException(EmbedConnection.java:2360) at org.apache.derby.impl.jdbc.ConnectionChild.handleException(ConnectionChild.java:82) at org.apache.derby.impl.jdbc.EmbedStatement.executeStatement(EmbedStatement.java:1334) at org.apache.derby.impl.jdbc.EmbedStatement.execute(EmbedStatement.java:630) at org.apache.derby.impl.jdbc.EmbedStatement.execute(EmbedStatement.java:559) at org.apache.derby.impl.tools.ij.ij.executeImmediate(ij.java:367) at org.apache.derby.impl.tools.ij.utilMain.doCatch(utilMain.java:527) at org.apache.derby.impl.tools.ij.utilMain.runScriptGuts(utilMain.java:369) at org.apache.derby.impl.tools.ij.utilMain.go(utilMain.java:245) at org.apache.derby.impl.tools.ij.Main.go(Main.java:229) at org.apache.derby.impl.tools.ij.Main.mainCore(Main.java:184) at org.apache.derby.impl.tools.ij.Main.main(Main.java:75) at org.apache.derby.tools.ij.main(ij.java:59)Caused by: java.sql.SQLException: The exception 'java.sql.SQLException: Syntax error: Encountered '/'' at line 1  column 42.' was thrown while evaluating an expression. at org.apache.derby.impl.jdbc.SQLExceptionFactory.getSQLException(SQLExceptionFactory.java:42) at org.apache.derby.impl.jdbc.SQLExceptionFactory40.wrapArgsForTransportAcrossDRDA(SQLExceptionFactory40.java:122) at org.apache.derby.impl.jdbc.SQLExceptionFactory40.getSQLException(SQLExceptionFactory40.java:71) ... 17 moreCaused by: java.sql.SQLException: Syntax error: Encountered '/'' at line 1  column 42. at org.apache.derby.impl.jdbc.SQLExceptionFactory.getSQLException(SQLExceptionFactory.java:42) at org.apache.derby.impl.jdbc.SQLExceptionFactory40.wrapArgsForTransportAcrossDRDA(SQLExceptionFactory40.java:122) at org.apache.derby.impl.jdbc.SQLExceptionFactory40.getSQLException(SQLExceptionFactory40.java:71) at org.apache.derby.impl.jdbc.Util.generateCsSQLException(Util.java:256) at org.apache.derby.impl.jdbc.TransactionResourceImpl.wrapInSQLException(TransactionResourceImpl.java:424) at org.apache.derby.impl.jdbc.TransactionResourceImpl.handleException(TransactionResourceImpl.java:353) at org.apache.derby.impl.jdbc.EmbedConnection.handleException(EmbedConnection.java:2360) at org.apache.derby.impl.jdbc.ConnectionChild.handleException(ConnectionChild.java:82) at org.apache.derby.impl.jdbc.EmbedPreparedStatement.&lt;init&gt;(EmbedPreparedStatement.java:153) at org.apache.derby.jdbc.Driver40.newEmbedPreparedStatement(Driver40.java:107) at org.apache.derby.impl.jdbc.EmbedConnection.prepareStatement(EmbedConnection.java:1685) at org.apache.derby.impl.jdbc.EmbedConnection.prepareStatement(EmbedConnection.java:1513) at org.apache.derby.catalog.SystemProcedures.SYSCS_UPDATE_STATISTICS(SystemProcedures.java:753) at org.apache.derby.exe.acace4c0a3x0137x2f19xcc22x00000013e5704.g0(Unknown Source) at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:60) at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:37) at java.lang.reflect.Method.invoke(Method.java:611) at org.apache.derby.impl.services.reflect.ReflectMethod.invoke(ReflectMethod.java:46) at org.apache.derby.impl.sql.execute.CallStatementResultSet.open(CallStatementResultSet.java:75) at org.apache.derby.impl.sql.GenericPreparedStatement.executeStmt(GenericPreparedStatement.java:443) at org.apache.derby.impl.sql.GenericPreparedStatement.execute(GenericPreparedStatement.java:324) at org.apache.derby.impl.jdbc.EmbedStatement.executeStatement(EmbedStatement.java:1242) ... 10 moreCaused by: ERROR 42X01: Syntax error: Encountered '/'' at line 1  column 42. at org.apache.derby.iapi.error.StandardException.newException(StandardException.java:278) at org.apache.derby.impl.sql.compile.ParserImpl.parseStatement(ParserImpl.java:153) at org.apache.derby.impl.sql.GenericStatement.prepMinion(GenericStatement.java:357) at org.apache.derby.impl.sql.GenericStatement.prepare(GenericStatement.java:99) at org.apache.derby.impl.sql.conn.GenericLanguageConnectionContext.prepareInternalStatement(GenericLanguageConnectionContext.java:1103) at org.apache.derby.impl.jdbc.EmbedPreparedStatement.&lt;init&gt;(EmbedPreparedStatement.java:134) ... 24 moreERROR 42X01: Syntax error: Encountered '/'' at line 1  column 42.java.sql.SQLSyntaxErrorException: Syntax error: Encountered '/'' at line 1  column 42. at org.apache.derby.impl.jdbc.SQLExceptionFactory40.getSQLException(SQLExceptionFactory40.java:92) at org.apache.derby.impl.jdbc.Util.generateCsSQLException(Util.java:256) at org.apache.derby.impl.jdbc.TransactionResourceImpl.wrapInSQLException(TransactionResourceImpl.java:424) at org.apache.derby.impl.jdbc.TransactionResourceImpl.handleException(TransactionResourceImpl.java:353) at org.apache.derby.impl.jdbc.EmbedConnection.handleException(EmbedConnection.java:2360) at org.apache.derby.impl.jdbc.ConnectionChild.handleException(ConnectionChild.java:82) at org.apache.derby.impl.jdbc.EmbedPreparedStatement.&lt;init&gt;(EmbedPreparedStatement.java:153) at org.apache.derby.jdbc.Driver40.newEmbedPreparedStatement(Driver40.java:107) at org.apache.derby.impl.jdbc.EmbedConnection.prepareStatement(EmbedConnection.java:1685) at org.apache.derby.impl.jdbc.EmbedConnection.prepareStatement(EmbedConnection.java:1513) at org.apache.derby.catalog.SystemProcedures.SYSCS_UPDATE_STATISTICS(SystemProcedures.java:753) at org.apache.derby.exe.acace4c0a3x0137x2f19xcc22x00000013e5704.g0(Unknown Source) at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:60) at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:37) at java.lang.reflect.Method.invoke(Method.java:611) at org.apache.derby.impl.services.reflect.ReflectMethod.invoke(ReflectMethod.java:46) at org.apache.derby.impl.sql.execute.CallStatementResultSet.open(CallStatementResultSet.java:75) at org.apache.derby.impl.sql.GenericPreparedStatement.executeStmt(GenericPreparedStatement.java:443) at org.apache.derby.impl.sql.GenericPreparedStatement.execute(GenericPreparedStatement.java:324) at org.apache.derby.impl.jdbc.EmbedStatement.executeStatement(EmbedStatement.java:1242) at org.apache.derby.impl.jdbc.EmbedStatement.execute(EmbedStatement.java:630) at org.apache.derby.impl.jdbc.EmbedStatement.execute(EmbedStatement.java:559) at org.apache.derby.impl.tools.ij.ij.executeImmediate(ij.java:367) at org.apache.derby.impl.tools.ij.utilMain.doCatch(utilMain.java:527) at org.apache.derby.impl.tools.ij.utilMain.runScriptGuts(utilMain.java:369) at org.apache.derby.impl.tools.ij.utilMain.go(utilMain.java:245) at org.apache.derby.impl.tools.ij.Main.go(Main.java:229) at org.apache.derby.impl.tools.ij.Main.mainCore(Main.java:184) at org.apache.derby.impl.tools.ij.Main.main(Main.java:75) at org.apache.derby.tools.ij.main(ij.java:59)Caused by: java.sql.SQLException: Syntax error: Encountered '/'' at line 1  column 42. at org.apache.derby.impl.jdbc.SQLExceptionFactory.getSQLException(SQLExceptionFactory.java:42) at org.apache.derby.impl.jdbc.SQLExceptionFactory40.wrapArgsForTransportAcrossDRDA(SQLExceptionFactory40.java:122) at org.apache.derby.impl.jdbc.SQLExceptionFactory40.getSQLException(SQLExceptionFactory40.java:71) ... 30 moreCaused by: ERROR 42X01: Syntax error: Encountered '/'' at line 1  column 42. at org.apache.derby.iapi.error.StandardException.newException(StandardException.java:278) at org.apache.derby.impl.sql.compile.ParserImpl.parseStatement(ParserImpl.java:153) at org.apache.derby.impl.sql.GenericStatement.prepMinion(GenericStatement.java:357) at org.apache.derby.impl.sql.GenericStatement.prepare(GenericStatement.java:99) at org.apache.derby.impl.sql.conn.GenericLanguageConnectionContext.prepareInternalStatement(GenericLanguageConnectionContext.java:1103) at org.apache.derby.impl.jdbc.EmbedPreparedStatement.&lt;init&gt;(EmbedPreparedStatement.java:134) ... 24 moreIssue the 'help' command for general information on IJ command syntax.Any unrecognized commands are treated as potential SQL commands and executed directly.Consult your DBMS server reference documentation for details of the SQL syntax supported by your server.ij&gt;",
            "id": "5750"
        },
        "5760": {
            "ground_truth": "0",
            "bug_report": "Missing argument in some XJ022 errors\nEmbedBlob and EmbedClob some times wrap IOExceptions in an SQLException with SQLState XJ022 (SQLState.SET_STREAM_FAILURE)  but they don't always specify the message argument  so the error message ends up like this:java.sql.SQLException: Unable to set stream: '{0}'.(The detailed error message does appear in a chained exception  so it's not a very big problem  but it looks a bit odd.)I don't know of a way to expose these exceptions in a test. I just noticed it when I added some manual asserts to force a failure when investigating another issue.The fix should be simple: Use the helper method Util.setStreamFailure() that sets the message argument automatically.",
            "id": "5760"
        },
        "5771": {
            "ground_truth": "0",
            "bug_report": "Use TestNullOutputStream where possible\nDerby's test framework provides a stream class  TestNullOutputStream  that discards all data written to it. Utf8CcsidManagerClientTest's constructor and BaseJDBCTestCase.runScript() create their own anonymous classes that provide the same functionality. They should be changed to reuse TestNullOutputStream.",
            "id": "5771"
        },
        "5775": {
            "ground_truth": "0",
            "bug_report": "Upgrade tests should  print full IOException stack trace when it fails to access old versions\nWhen the Upgrade tests fail to access the oldVersions due to an IOException the message is not very clear as to what the IOException was. e g. can output ALARM: IOException msg: 'svn.apache.org'. Upgrade tests can NOT be run!ALARM: IOException msg: 'svn.apache.org'. Upgrade tests can NOT be run!ALARM: IOException msg: 'svn.apache.org'. Upgrade tests can NOT be run!ALARM: IOException msg: 'svn.apache.org'. Upgrade tests can NOT be run!ALARM: IOException msg: 'svn.apache.org'. Upgrade tests can NOT be run!ALARM: IOException msg: 'svn.apache.org'. Upgrade tests can NOT be run!ALARM: IOException msg: 'svn.apache.org'. Upgrade tests can NOT be run!ALARM: IOException msg: 'svn.apache.org'. Upgrade tests can NOT be run!ALARM: IOException msg: 'svn.apache.org'. Upgrade tests can NOT be run!ALARM: IOException msg: 'svn.apache.org'. Upgrade tests can NOT be run!ALARM: IOException msg: 'svn.apache.org'. Upgrade tests can NOT be run!ALARM: IOException msg: 'svn.apache.org'. Upgrade tests can NOT be run!ALARM: IOException msg: 'svn.apache.org'. Upgrade tests can NOT be run!ALARM: IOException msg: 'svn.apache.org'. Upgrade tests can NOT be run!ALARM: IOException msg: 'svn.apache.org'. Upgrade tests can NOT be run!Time: 0.008OK (0 tests)The code in OldVersions.getVersions() } } catch (IOException ioe) { alarm('Error reading from file: ' + oldVersionsPath + ioe.getMessage()); }should print the exception stack trace or possibly even fail on IOException.",
            "id": "5775"
        },
        "5779": {
            "ground_truth": "0",
            "bug_report": "Table functions should only accept arguments which are constant in their query block.\nDerby lets you invoke a table function in the FROM list of a query  passing in arguments built out of columns in other tables in the FROM list. This syntax is illegal and the resulting queries have no meaning under the SQL Standard. See the discussion on DERBY-5554. We should forbid this syntax. Similar syntax involving correlated subqueries in the FROM list is already forbidden. Fixing this will create a backward incompatibility which requires a release note.",
            "id": "5779"
        },
        "5783": {
            "ground_truth": "0",
            "bug_report": "Remove duplicated code for starting remote processes in replication tests\nReplicationRun has two copies of each of the methods runUserCommand()  runUserCommandRemotely() and processOutput(). One variant takes an id parameter (used only in debug output)  and one doesn't. It would be sufficient to have one copy of each of these methods.",
            "id": "5783"
        },
        "5791": {
            "ground_truth": "0",
            "bug_report": "Replication tests should use BaseTestCase.execJavaCmd() to run local commands\nThe replication tests invoke Runtime.exec() directly in order to spawn processes. The sub-processes that run on the same host as the main test process  should instead be started with the helper method BaseTestCase.execJavaCmd(). Having all the tests use the helper method would make it easier if we for example want to pass specific flags to all sub-processes created in a test run.Note that the replication tests also have code for starting processes on a remote host via ssh. BaseTestCase.execJavaCmd() cannot do that  so only local processes can be started with the helper method. When the replication tests run as part of suites.All  all the spawned processes run locally.",
            "id": "5791"
        },
        "5792": {
            "ground_truth": "1",
            "bug_report": "Make it possible to turn off encryption on an already encrypted database.\nCurrently  you can encrypt an unencrypted database and you can change the encryption key on an already encrypted database. However  Derby does not expose a way to turn off (unencrypt) an already encrypted database.",
            "id": "5792"
        },
        "5795": {
            "ground_truth": "0",
            "bug_report": "Documentation in release doesn't include stylesheets\nThe documentation that is bundled with the Derby releases does not include the three .css stylesheets that are copied into the out/&lt;manual-name&gt; directory by the Ant task that builds the HTML files. These need to be included in the docs/html/&lt;manual-name&gt; directories for the releases.I believe this problem has existed from the beginning &#8211; it certainly goes back several releases.",
            "id": "5795"
        },
        "5796": {
            "ground_truth": "0",
            "bug_report": "Remove unused methods in client.am.DateTime\nThe DateTime class contains two unused methods: timestampToDateBytes() and timestampToTimeBytes(). These methods also contain calls to deprecated methods in the java.util.Date class  so it would be good to get rid of them.",
            "id": "5796"
        },
        "5797": {
            "ground_truth": "0",
            "bug_report": "AssertionFailedError in functionTests.tests.lang.UpdateStatisticsTest.testDisposableStatsEagerness\nI noticed a test failure in UpdateStatisticsTest.testDisposableStatsEagerness.The link is: http://people.apache.org/~myrnavl/derby_test_results/main/windows/testlog/ibm16/1345812-suites.All_diff.txtThe stack trace: testDisposableStatsEagerness(org.apache.derbyTesting.functionTests.tests.lang.UpdateStatisticsTest)junit.framework.AssertionFailedError at org.apache.derbyTesting.functionTests.tests.lang.UpdateStatisticsTest.testDisposableStatsEagerness(UpdateStatisticsTest.java:594) at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:60) at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:37) at org.apache.derbyTesting.junit.BaseTestCase.runBare(BaseTestCase.java:113) at org.apache.derbyTesting.junit.BaseJDBCTestCase.runBareOverridable(BaseJDBCTestCase.java:424) at org.apache.derbyTesting.junit.BaseJDBCTestCase.runBare(BaseJDBCTestCase.java:441) at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24) at junit.extensions.TestSetup$1.protect(TestSetup.java:21) at junit.extensions.TestSetup.run(TestSetup.java:25) at org.apache.derbyTesting.junit.BaseTestSetup.run(BaseTestSetup.java:57) at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24) at junit.extensions.TestSetup$1.protect(TestSetup.java:21) at junit.extensions.TestSetup.run(TestSetup.java:25) at org.apache.derbyTesting.junit.BaseTestSetup.run(BaseTestSetup.java:57)",
            "id": "5797"
        },
        "5798": {
            "ground_truth": "0",
            "bug_report": "Disable i18n/JapanCodeConversion.sql on platforms that don't support EUC_JP or SJIS\nI ran derbyall on Java SE for Embedded 7  which doesn't support the EUC_JP or SJIS encodings. i18n/JapanCodeConversion.sql failed because of this:                 Diff file derbyall/i18nTest/JapanCodeConversion.diff             Start: JapanCodeConversion jdk1.7.0_04-ea derbyall:i18nTest 2012-05-31 15:10:02 ***55 del&lt; 0 rows inserted/updated/deleted55a55 58&gt; ERROR 38000: The exception 'java.sql.SQLException: The exception 'java.lang.reflect.InvocationTargetException' was thrown while evaluating an expression.' was thrown while evaluating an expression.&gt; ERROR 38000: The exception 'java.lang.reflect.InvocationTargetException' was thrown while evaluating an expression.&gt; ERROR XJ001: Java exception: ': java.lang.reflect.InvocationTargetException'.&gt; ERROR XJ001: Java exception: 'java.io.UnsupportedEncodingException: EUC_JP'.59 74d61(...)    We should skip the test on platforms that don't support these encodings.",
            "id": "5798"
        },
        "5802": {
            "ground_truth": "0",
            "bug_report": "Remove unused class ExecProcUtil\nThe class living in java/testing/org/apache/derbyTesting/functionTests/util/ExecProcUtil.java isn't used and can be removed.",
            "id": "5802"
        },
        "5815": {
            "ground_truth": "0",
            "bug_report": "Add replicationTests.ReplicationSuite to junit-core ant target\nThe replication tests aren't run as part of the junit-core ant target (nor in any of the other relevant targets).I suggest adding the suite such that is is run as part of the top-level ant targets for testing Derby.Note that it would have been simpler to simply run suites.All  but the special logic for JDBC 4 code may still be relevant for some platforms (JSR169). It is also nice to get some more feedback as the test cycle proceeds. The downside of not using suites.All is that we may forget adding new suites to the ant target(s)  but we're adding so few new suites that it shouldn't be much of a problem.",
            "id": "5815"
        },
        "5824": {
            "ground_truth": "1",
            "bug_report": "testOSReadOnly fails with k.AssertionFailedError: expected an error indicating the db is readonly on HP java 1.6\nThis failure was reported running suites.All on HP. Read only database is apparently not read only.1) testOSReadOnly(org.apache.derbyTesting.functionTests.tests.store.OSReadOnlyTest)junit.framework.AssertionFailedError: expected an error indicating the db is readonly at org.apache.derbyTesting.functionTests.tests.store.OSReadOnlyTest.assertExpectedInsertBehaviour(OSReadOnlyTest.java:261) at org.apache.derbyTesting.functionTests.tests.store.OSReadOnlyTest.testOSReadOnly(OSReadOnlyTest.java:139) at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39) at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25) at org.apache.derbyTesting.junit.BaseTestCase.runBare(BaseTestCase.java:109) at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24) at junit.extensions.TestSetup$1.protect(TestSetup.java:21) at junit.extensions.TestSetup.run(TestSetup.java:25) at org.apache.derbyTesting.junit.BaseTestSetup.run(BaseTestSetup.java:57) at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24) at junit.extensions.TestSetup$1.protect(TestSetup.java:21) at junit.extensions.TestSetup.run(TestSetup.java:25) at org.apache.derbyTesting.junit.BaseTestSetup.run(BaseTestSetup.java:57) at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24) at junit.extensions.TestSetup$1.protect(TestSetup.java:21) at junit.extensions.TestSetup.run(TestSetup.java:25)2) testOSReadOnly(org.apache.derbyTesting.functionTests.tests.store.OSReadOnlyTest)junit.framework.AssertionFailedError: Failed to copy directory from /local1/derbytest/test/system/singleUse/oneuse4b to /local1/derbytest/test/system/singleUse/readOnly at org.apache.derbyTesting.functionTests.tests.store.OSReadOnlyTest.copyDatabaseOnOS(OSReadOnlyTest.java:282) at org.apache.derbyTesting.functionTests.tests.store.OSReadOnlyTest.testOSReadOnly(OSReadOnlyTest.java:131) at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39) at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25) at org.apache.derbyTesting.junit.BaseTestCase.runBare(BaseTestCase.java:109) at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24) at junit.extensions.TestSetup$1.protect(TestSetup.java:21) at junit.extensions.TestSetup.run(TestSetup.java:25) at org.apache.derbyTesting.junit.BaseTestSetup.run(BaseTestSetup.java:57) at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24) at junit.extensions.TestSetup$1.protect(TestSetup.java:21) at junit.extensions.TestSetup.run(TestSetup.java:25) at org.apache.derbyTesting.junit.BaseTestSetup.run(BaseTestSetup.java:57) at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24) at junit.extensions.TestSetup$1.protect(TestSetup.java:21) at junit.extensions.TestSetup.run(TestSetup.java:25) at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24) at junit.extensions.TestSetup$1.protect(TestSetup.java:21) at junit.extensions.TestSetup.run(TestSetup.java:25) at org.apache.derbyTesting.junit.BaseTestSetup.run(BaseTestSetup.java:57) at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24) at junit.extensions.TestSetup$1.protect(TestSetup.java:21) at junit.extensions.TestSetup.run(TestSetup.java:25)FAILURES!!!Tests run: 11145  Failures: 2  Errors: 0bash-4.0#",
            "id": "5824"
        },
        "5830": {
            "ground_truth": "1",
            "bug_report": "Make DoubleProperties.propertyNames() thread-safe\nAs discussed in DERBY-4269  DoubleProperties.propertyNames() may throw a NullPointerException if properties are removed by another thread while the method is executing. Since DoubleProperties is a sub-class of  and used as a drop-in replacement for  java.util.Properties  it should be thread-safe just like the propertyNames() method in the parent class.",
            "id": "5830"
        },
        "5838": {
            "ground_truth": "0",
            "bug_report": "By using syscs_set_database_property  you can set the database version to a garbage string which prevents you from booting the database.\nThe following script shows this problem:connect 'jdbc:derby:db;create=true';values ( syscs_util.syscs_get_database_property( 'DataDictionaryVersion' ) );call syscs_util.syscs_set_database_property( 'DataDictionaryVersion'  'foobar' );values ( syscs_util.syscs_get_database_property( 'DataDictionaryVersion' ) );connect 'jdbc:derby:db;shutdown=true';&#8211; fails to bootconnect 'jdbc:derby:db';",
            "id": "5838"
        },
        "5847": {
            "ground_truth": "0",
            "bug_report": "Clean up IDE warnings in DRDAConnThread\nWhen I open DRDAConnThread in NetBeans  I see 49 warnings. Most of them are harmless (like static fields accessed via an instance  suggestions about using StringBuilder instead of StringBuffer  or using System.arraycopy() instead of for loops). Others indicate real problems  like the use of != to compare SQL states in writeSQLDIAGGRP().We should clean up the warnings so that it's easier to notice new warnings about potential problems.",
            "id": "5847"
        },
        "5860": {
            "ground_truth": "0",
            "bug_report": "Remove unused methods in DDMReader and DDMWriter\nMany of the methods in DDMReader and DDMWriter are not used anymore. Those methods could be removed.",
            "id": "5860"
        },
        "5874": {
            "ground_truth": "0",
            "bug_report": "Remove JDBC 3 constants from client.am.Statement\norg.apache.derby.client.am.Statement defines three constants  CLOSE_CURRENT_RESULT  KEEP_CURRENT_RESULT and CLOSE_ALL_RESULTS  that are also defined in java.sql.Statement. Since client.am.Statement implements java.sql.Statement  we could remove those constants and let it inherit them instead. The only reason why these constants are defined in client.am.Statement  is to make the client compile on JDKs predating JDBC 3 (that is  Java 1.3 and earlier). Since we don't support those JDKs anymore  the constants can be removed now.",
            "id": "5874"
        },
        "5877": {
            "ground_truth": "0",
            "bug_report": "Prune the brokered class tree\nThe brokered class tree still separates between the JDBC 2.0 functionality and JDBC 3.0. This leads to unnecessarily many levels of classes (for example  BrokeredPreparedStatement -&gt; BrokeredPreparedStatement30 -&gt; BrokeredStatement40). Another consequence is that BrokeredCallableStatement30 and BrokeredPreparedStatement30 don't have a common base class that could hold shared JDBC 3.0 methods (their common base class is BrokeredPreparedStatement  which is JDBC 2.0)  and therefore new JDBC 3.0 PreparedStatement methods are duplicated in the two classes.We should fold the JDBC 3.0 classes into the JDBC 2.0 classes so that we can reduce the number of classes and the duplication of code in the brokered statement sub-tree.",
            "id": "5877"
        },
        "5878": {
            "ground_truth": "0",
            "bug_report": "Add message argument names  as comments  to English message file produced by MessageBuilder.\nThe MessageBuilder program turns messages.xml into two output files:1) The DITA source for the Reference Guide section on error messages.2) The messages_en.properties file of engine messages.All of the translators I have dealt with want to use (2) as the English input for their translations. I believe this is because translators have written their own tools and those tools expect to work on properties files.Messages may have arguments. Those arguments appear as sub-elements of the messages in messages.xml. The arguments turn up in (1) but are thrown away when MessageBuilder produces (2). We can help translators do a better job by also writing the arguments as comments in (2).",
            "id": "5878"
        },
        "5883": {
            "ground_truth": "0",
            "bug_report": "Simplify JSR-169 implementation class tree\nThe JSR-169 interface is a subset of JDBC 3.0  but still the JDBC 3.0 implementation classes do not extend the JSR-169 implementation classes. Instead  the JSR-169 and JDBC 3.0 implementation classes extend a common base class. The reason for this structure  is that the JSR-169 compile targets used to be optional  so the JDBC 3.0 classes could not depend on them.For example  the class javadoc comment for EmbedResultSet169 says: ResultSet implementation for JSR169. Adds no functionality to its (abstract) parent class. If Derby could be compiled against JSR169 that the parent class could be the concrete class for the environment. Just like for the JDBC 2.0 specific classes. Until that is possible (ie. easily downloadable J2ME/CDC/Foundation/JSR169 jar files  this class is required and is only compiled by an optional target.Since the JSR-169 code is no longer optional  we should do as the comment suggests  and use the base class directly instead. This would allow us to simplify the class tree.",
            "id": "5883"
        },
        "5885": {
            "ground_truth": "0",
            "bug_report": "The order of argument names in messages.xml is sometimes wrong when the arguments occur in the message out of sequence.\nIn most Derby messages  arguments appear in ascending order. That is  {0} occurs in the message first  then {1}  then {2}  and so on. Sometimes  however  arguments occur out of sequence. When this happens  the names in the &lt;arg&gt; sub-elements may not agree with the order that the arguments actually occur in the message. This causes MessageBuilder to garble the dita source for the Reference Guide page titled 'SQL error messages and exceptions'.For instance  here is the messages.xml element for SQLState 22014: &lt;msg&gt; &lt;name&gt;22014&lt;/name&gt; &lt;text&gt;The start position for LOCATE is invalid; it must be a positive integer. The index to start the search from is '{2}'. The string to search for is '{0}'. The string to search from is '{1}'. &lt;/text&gt; &lt;arg&gt;startIndex&lt;/arg&gt; &lt;arg&gt;searchString&lt;/arg&gt; &lt;arg&gt;fromString&lt;/arg&gt; &lt;/msg&gt;This gives rise to the following garbled text in the generated reference guide page:'The start position for LOCATE is invalid; it must be a positive integer. The index to start the search from is '&lt;fromString&gt;'. The string to search for is '&lt;startIndex&gt;'. The string to search from is '&lt;searchString&gt;'. 'We should re-order the &lt;arg&gt; sub-elements so that the first &lt;arg&gt; sub-lement corresponds to {0}  the second &lt;arg&gt; sub-element corresponds to {1}  and so on.",
            "id": "5885"
        },
        "5897": {
            "ground_truth": "0",
            "bug_report": "Broken handling of paths with special characters in compatibility/VersionCombinationConfigurator\nSome of the code handling paths in compatibility/VersionCombinationConfigurator is broken.The issue is that the location of a given class is given as a URL. This means the path will be URL encoded  and  for instance  spaces will be encoded as '%20'.This bug typically shows itself as an NPE when invoking compatibility._Suite.",
            "id": "5897"
        },
        "5898": {
            "ground_truth": "0",
            "bug_report": "add ibm18 class to functionTests.harness\nThe 'old test harness'  in package java.org.apache.derbyTesting.functionTests.harness  needs an ibm18 class - similar to ibm17. I don't plan to run tests with this jvm against branches older than 10.8  but it will need to be backported to 10.9 and 10.8.",
            "id": "5898"
        },
        "5914": {
            "ground_truth": "0",
            "bug_report": "Incorrect list of compatible JRE versions in client trace #2\nThe list of compatible JRE versions is out of sync again. It currently says 1.4  1.5  and 1.6.For trunk I believe we must remove 1.4  and we should add 1.7.For 10.9  if we want to change it  I think we can keep 1.4? And 1.7 was out and supported before we released 10.9  right?This issue was logged as DERBY-5078 the previous time it was out of sync.",
            "id": "5914"
        },
        "5927": {
            "ground_truth": "0",
            "bug_report": "Add utility methods to query state of URL attributes in EmbedConnection\nAdd utility methods to determine whether URL attributes are set or have the value true.The motivation for the change is improved readability/formatting of the code.",
            "id": "5927"
        },
        "5951": {
            "ground_truth": "1",
            "bug_report": "Missing method exception raised when using Clobs with territory based collation\nWhen using territory-based collation with Clobs  Derby raises an error trying to invoke a missing method. The following script shows this problem:connect 'jdbc:derby:memory:db;create=true;collation=TERRITORY_BASED';create function makeClob( contents varchar( 32672 ) ) returns cloblanguage java parameter style java no sql deterministicexternal name 'org.apache.derbyTesting.functionTests.tests.lang.UserDefinedAggregatesTest.makeClob';create table clobTable( a clob );&#8211; fails with a java.lang.NoSuchMethodError exceptioninsert into clobTable( a ) values ( makeClob( 'a' ) );connect 'jdbc:derby:memory:db1;create=true';create function makeClob( contents varchar( 32672 ) ) returns cloblanguage java parameter style java no sql deterministicexternal name 'org.apache.derbyTesting.functionTests.tests.lang.UserDefinedAggregatesTest.makeClob';create table clobTable( a clob );&#8211; succeedsinsert into clobTable( a ) values ( makeClob( 'a' ) );Here is the error:ERROR 38000: The exception 'java.lang.NoSuchMethodError: org.apache.derby.iapi.types.DataValueFactory.getClobDataValue(Ljava/sql/Clob;Lorg/apache/derby/iapi/types/StringDataValue;I)Lorg/apache/derby/iapi/types/StringDataValue;' was thrown while evaluating an expression.ERROR XJ001: Java exception: 'org.apache.derby.iapi.types.DataValueFactory.getClobDataValue(Ljava/sql/Clob;Lorg/apache/derby/iapi/types/StringDataValue;I)Lorg/apache/derby/iapi/types/StringDataValue;: java.lang.NoSuchMethodError'....and here is the stack trace:Tue Oct 16 08:27:23 PDT 2012 Thread&#91;main 5 main&#93; (XID = 172)  (SESSIONID = 1)  (DATABASE = memory:db)  (DRDAID = null)  Failed Statement is: &#8211; fails with a java.lang.NoSuchMethodError exceptioninsert into clobTable( a ) values ( makeClob( 'a' ) )ERROR 38000: The exception 'java.lang.NoSuchMethodError: org.apache.derby.iapi.types.DataValueFactory.getClobDataValue(Ljava/sql/Clob;Lorg/apache/derby/iapi/types/StringDataValue;I)Lorg/apache/derby/iapi/types/StringDataValue;' was thrown while evaluating an expression. at org.apache.derby.iapi.error.StandardException.newException(Unknown Source) at org.apache.derby.iapi.error.StandardException.unexpectedUserException(Unknown Source) at org.apache.derby.impl.services.reflect.DirectCall.invoke(Unknown Source) at org.apache.derby.impl.sql.execute.RowResultSet.getNextRowCore(Unknown Source) at org.apache.derby.impl.sql.execute.DMLWriteResultSet.getNextRowCore(Unknown Source) at org.apache.derby.impl.sql.execute.InsertResultSet.open(Unknown Source) at org.apache.derby.impl.sql.GenericPreparedStatement.executeStmt(Unknown Source) at org.apache.derby.impl.sql.GenericPreparedStatement.execute(Unknown Source) at org.apache.derby.impl.jdbc.EmbedStatement.executeStatement(Unknown Source) at org.apache.derby.impl.jdbc.EmbedStatement.execute(Unknown Source) at org.apache.derby.impl.jdbc.EmbedStatement.execute(Unknown Source) at org.apache.derby.impl.tools.ij.ij.executeImmediate(Unknown Source) at org.apache.derby.impl.tools.ij.utilMain.doCatch(Unknown Source) at org.apache.derby.impl.tools.ij.utilMain.runScriptGuts(Unknown Source) at org.apache.derby.impl.tools.ij.utilMain.go(Unknown Source) at org.apache.derby.impl.tools.ij.Main.go(Unknown Source) at org.apache.derby.impl.tools.ij.Main.mainCore(Unknown Source) at org.apache.derby.impl.tools.ij.Main.main(Unknown Source) at org.apache.derby.tools.ij.main(Unknown Source)Caused by: java.lang.NoSuchMethodError: org.apache.derby.iapi.types.DataValueFactory.getClobDataValue(Ljava/sql/Clob;Lorg/apache/derby/iapi/types/StringDataValue;I)Lorg/apache/derby/iapi/types/StringDataValue; at org.apache.derby.exe.ace50d80a4x013ax6a2fxb54bx00000467ed600.e0(Unknown Source) ... 17 more",
            "id": "5951"
        },
        "5954": {
            "ground_truth": "0",
            "bug_report": "NPE in SELECT involving subselects and windows functions\nA user reports and I have verified an NPE on the following SELECT:connect 'jdbc:derby:memory:db;create=true';create table blah ( a int );insert into blah values (1)  (2)  (3)  (4)  (5)  (6)  (7);SELECT rn  (SELECT rn FROM (SELECT row_number() over() rn FROM blah ) as T2where T2.rn = T1.rn+1) rn2FROM (SELECT row_number() over() rn from blah) as T1;",
            "id": "5954"
        },
        "5964": {
            "ground_truth": "0",
            "bug_report": "Timestamp comparison failure in AutomaticIndexStatisticsTest.testStatisticsCorrectness\nhttp://dbtg.foundry.sun.com/derby/test/Daily/jvm1.5/testing/testlog/lin/1402814-suitesAll_diff.txt1) testStatisticsCorrectness(org.apache.derbyTesting.functionTests.tests.store.AutomaticIndexStatisticsTest)junit.framework.AssertionFailedError at org.apache.derbyTesting.functionTests.tests.store.AutomaticIndexStatisticsTest.testStatisticsCorrectness(AutomaticIndexStatisticsTest.java:324) at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39) at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25) at org.apache.derbyTesting.junit.BaseTestCase.runBare(BaseTestCase.java:117) at org.apache.derbyTesting.junit.BaseJDBCTestCase.runBareOverridable(BaseJDBCTestCase.java:424) at org.apache.derbyTesting.junit.BaseJDBCTestCase.runBare(BaseJDBCTestCase.java:441) at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24) at junit.extensions.TestSetup$1.protect(TestSetup.java:21) at junit.extensions.TestSetup.run(TestSetup.java:25) at org.apache.derbyTesting.junit.BaseTestSetup.run(BaseTestSetup.java:57) at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24) at junit.extensions.TestSetup$1.protect(TestSetup.java:21) at junit.extensions.TestSetup.run(TestSetup.java:25)The failure is caused by this assert: assertTrue(s.created.before(now));It might be a coincidence  but it happened the same night as Europe was switching from DST.It may also be related to DERBY-5046  where a similar assert failed because poor clock resolution made the two timestamps equal.",
            "id": "5964"
        },
        "5969": {
            "ground_truth": "1",
            "bug_report": "Encryption  re-encryption  and un-encryption silently fail if the database is already booted.\nIf the database is already booted  then the DBO's attempt to re-encrypt or un-encrypt the database will silently fail. It will appear to the DBO that the re(un)encryption succeeded but in fact the database will not be changed. Derby should raise an error if the database is already booted when the DBO attempts re(un)encryption.",
            "id": "5969"
        },
        "5972": {
            "ground_truth": "0",
            "bug_report": "Grammar doesn't accept OR operator without parentheses\nThe grammar doesn't accept the OR operator without parentheses in some constructs.For example  in a select list:ij&gt; create table t(b1 boolean  b2 boolean);0 rows inserted/updated/deletedij&gt; select b1 or b2 from t;ERROR 42X01: Syntax error: Encountered 'or' at line 1  column 11. (errorCode = 30000)Issue the 'help' command for general information on IJ command syntax.Any unrecognized commands are treated as potential SQL commands and executed directly.Consult your DBMS server reference documentation for details of the SQL syntax supported by your server.However  it does not fail if OR is replaced by AND  or if parentheses are used around the OR expression:ij&gt; select (b1 or b2) from t;1 0 rows selectedij&gt; select b1 and b2 from t;1 0 rows selectedSimilar behaviour is seen in VALUES statements:ij&gt; values true or false;ERROR 42X01: Syntax error: Encountered 'or' at line 1  column 13. (errorCode = 30000)Issue the 'help' command for general information on IJ command syntax.Any unrecognized commands are treated as potential SQL commands and executed directly.Consult your DBMS server reference documentation for details of the SQL syntax supported by your server.ij&gt; values (true or false);1 true 1 row selectedij&gt; values true and false;1 false1 row selected",
            "id": "5972"
        },
        "5989": {
            "ground_truth": "0",
            "bug_report": "Stop producing byte code for non-existent qualifiers\nFor all result set nodes that have predicate lists  Derby's compiler lays out byte code for fields to hold qualifiers  and also code to reinitialize the values in those fields on every execution. It does this even if there are no qualifiers. See PredicateList.generateQualifiers(). That method does actually check whether there are qualifiers  and it skips some of the code generation if there are none. It should be changed so that it skips all the code generation if there are no qualifiers.For an example  see the decompiled generated class for a natural join attached to DERBY-5947: https://issues.apache.org/jira/secure/attachment/12549514/natural-join-after-3a.txtThat class contains three Qualifier[][] fields: private Qualifier[][] e1; private Qualifier[][] e3; private Qualifier[][] e4;Only one of them (e4) is ever set to a non-null value. Still  the reinit() method  which is called on every execution  has code for each of the fields: protected void reinit() throws StandardException { BaseActivation.reinitializeQualifiers(e1); BaseActivation.reinitializeQualifiers(e3); BaseActivation.reinitializeQualifiers(e4); }",
            "id": "5989"
        },
        "5992": {
            "ground_truth": "0",
            "bug_report": "Use BaseTestCase.execJavaCmd() to start process from NetworkServerTestSetup\nNetworkServerTestSetup invokes Runtime.exec(String[]) manually when it needs to start a sub-process. It should use BaseTestCase.execJavaCmd(). In addition to reducing the amount of code  it would make the server processes pick up the flags they need to work well with EMMA and JaCoCo.",
            "id": "5992"
        },
        "5998": {
            "ground_truth": "0",
            "bug_report": "Replication tests fail on CDC platforms without optional JSSE package\nThe replication code uses the javax.net.ServerSocketFactory class  which is not part of the core API defined by Foundation Profile 1.1. It is however part of an optional security package (JSSE) defined by the same specification  so it may or may not be available on the CDC platforms that Derby runs on.Running the replication tests on phoneME without said optional package  results in NoClassDefFoundError:Caused by: java.lang.NoClassDefFoundError: javax.net.SocketFactory at org.apache.derby.impl.store.replication.net.ReplicationMessageTransmit$1.run(Unknown Source) at java.security.AccessController.doPrivileged(Unknown Source) at java.security.AccessController.doPrivileged(Unknown Source) at org.apache.derby.impl.store.replication.net.ReplicationMessageTransmit.initConnection(Unknown Source) at org.apache.derby.impl.store.replication.master.MasterController.setupConnection(Unknown Source) at org.apache.derby.impl.store.replication.master.MasterController.startMaster(Unknown Source) at org.apache.derby.impl.store.raw.RawStore.startReplicationMaster(Unknown Source) at org.apache.derby.impl.store.access.RAMAccessManager.startReplicationMaster(Unknown Source) at org.apache.derby.impl.db.BasicDatabase.startReplicationMaster(Unknown Source) at org.apache.derby.impl.jdbc.EmbedConnection.handleStartReplicationMaster(Unknown Source)We might fix this by rewriting the replication code so that it's not dependent on optional packages on CDC. However  there have not been any user requests for this functionality on platforms without that package  as far as I'm aware  so I suggest we just skip the replication tests for now if that package is missing.The tests I've run on Oracle Java Micro Edition Embedded Client 1.1 (OJEC) have not revealed this problem  as OJEC comes with the optional JSSE package (it's version output lists 'JSSE JSR219' under the components section). And since the reports from the weme 6.2 test runs don't show this failure  I think it's included there as well.",
            "id": "5998"
        },
        "6001": {
            "ground_truth": "0",
            "bug_report": "ErrorMessageTest assert failure: Only one of the waiters should be aborted\nI occasionally see this test failure on some ARM devices:junit.framework.AssertionFailedError: Only one of the waiters should be aborted at org.apache.derbyTesting.functionTests.tests.lang.ErrorMessageTest.testDeadlockTimeout(ErrorMessageTest.java:206) at org.apache.derbyTesting.junit.BaseTestCase.runBare(BaseTestCase.java:117) at org.apache.derbyTesting.junit.BaseJDBCTestCase.runBareOverridable(BaseJDBCTestCase.java:424) at org.apache.derbyTesting.junit.BaseJDBCTestCase.runBare(BaseJDBCTestCase.java:441) at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24) at junit.extensions.TestSetup$1.protect(TestSetup.java:21) at junit.extensions.TestSetup.run(TestSetup.java:25) at org.apache.derbyTesting.junit.BaseTestSetup.run(BaseTestSetup.java:57) at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24) at junit.extensions.TestSetup$1.protect(TestSetup.java:21) at junit.extensions.TestSetup.run(TestSetup.java:25) at org.apache.derbyTesting.junit.BaseTestSetup.run(BaseTestSetup.java:57)It's probably timing-dependent  since the failing test case runs two threads  and the devices where it's seen are slow compared to most other test servers.",
            "id": "6001"
        },
        "6006": {
            "ground_truth": "1",
            "bug_report": "NullPointerException in INSERT INTO ... SELECT FROM ... ORDER BY\nA NullPointerException was reported by Harm-Jan Zwinderman on derby-user:http://mail-archives.apache.org/mod_mbox/db-derby-user/201211.mbox/%3C50B66527.5040906%40gmail.com%3EI've managed to reproduce it on 10.9.1.0 like this:ij version 10.9ij&gt; connect 'jdbc:derby:memory:db;create=true';ij&gt; create table t(x double);0 rows inserted/updated/deletedij&gt; insert into t values (0);1 row inserted/updated/deletedij&gt; prepare ps as 'insert into t select 1 from t order by x';ij&gt; execute ps;1 row inserted/updated/deletedij&gt; execute ps;2 rows inserted/updated/deletedij&gt; execute ps;4 rows inserted/updated/deletedij&gt; execute ps;ERROR XJ001: Java exception: ': java.lang.NullPointerException'.Full stack trace:java.lang.NullPointerException at org.apache.derby.impl.store.access.conglomerate.ConglomerateUtil.createFormatIds(Unknown Source) at org.apache.derby.impl.store.access.heap.Heap.create(Unknown Source) at org.apache.derby.impl.store.access.heap.HeapConglomerateFactory.createConglomerate(Unknown Source) at org.apache.derby.impl.store.access.RAMTransaction.createConglomerate(Unknown Source) at org.apache.derby.impl.sql.execute.TemporaryRowHolderImpl.insert(Unknown Source) at org.apache.derby.impl.sql.execute.InsertResultSet.normalInsertCore(Unknown Source) at org.apache.derby.impl.sql.execute.InsertResultSet.open(Unknown Source) at org.apache.derby.impl.sql.GenericPreparedStatement.executeStmt(Unknown Source) at org.apache.derby.impl.sql.GenericPreparedStatement.execute(Unknown Source) at org.apache.derby.impl.jdbc.EmbedStatement.executeStatement(Unknown Source) at org.apache.derby.impl.jdbc.EmbedPreparedStatement.executeStatement(Unknown Source) at org.apache.derby.impl.jdbc.EmbedPreparedStatement.execute(Unknown Source) at org.apache.derby.impl.tools.ij.ij.ExecuteStatement(Unknown Source) at org.apache.derby.impl.tools.ij.ij.ijStatement(Unknown Source) at org.apache.derby.impl.tools.ij.utilMain.runScriptGuts(Unknown Source) at org.apache.derby.impl.tools.ij.utilMain.go(Unknown Source) at org.apache.derby.impl.tools.ij.Main.go(Unknown Source) at org.apache.derby.impl.tools.ij.Main.mainCore(Unknown Source) at org.apache.derby.impl.tools.ij.Main.main(Unknown Source) at org.apache.derby.tools.ij.main(Unknown Source) at org.apache.derby.iapi.tools.run.main(Unknown Source)",
            "id": "6006"
        },
        "6017": {
            "ground_truth": "0",
            "bug_report": "IN lists with mixed types may return wrong results\nGiven this table:ij&gt; connect 'jdbc:derby:memory:db;create=true';ij&gt; create table t(x bigint);0 rows inserted/updated/deletedij&gt; insert into t values 9223372036854775805  9223372036854775806  9223372036854775807;3 rows inserted/updated/deletedA query that uses an IN list that contains all the three values actually stored in the table  returns all three rows as expected:ij&gt; select * from t where x in (9223372036854775805  9223372036854775806  9223372036854775807);X --------------------9223372036854775805 9223372036854775806 9223372036854775807 3 rows selectedHowever  if we add a value whose type precedence is higher  like a DOUBLE value  and that value happens to be equal to the approximation of the other values in the IN list when they are cast from BIGINT to DOUBLE  only one row is returned:ij&gt; select * from t where x in (9223372036854775805  9223372036854775806  9223372036854775807  9.223372036854776E18);X --------------------9223372036854775805 1 row selectedI believe this query should return all three rows too.",
            "id": "6017"
        },
        "6033": {
            "ground_truth": "0",
            "bug_report": "Lift the arbitrary limit on the number of routine parameters.\nThe number of parameters to a Derby routine is arbitrarily limited to 90. This limit is causing difficulties for users (see http://apache-database.10148.n7.nabble.com/number-of-parameters-td126108.html). It ought to be safe to lift this limit. Changes need to be made to CreateAliasNode and to the corresponding dbManagerLimits.testMostParametersInStoredProcedures() test.",
            "id": "6033"
        },
        "6045": {
            "ground_truth": "0",
            "bug_report": "in list multi-probe by primary key not chosen on tables with >256 rows\nI have a table with a long integer primary key field and 11 million rows. I seem to be unable to load large chunks of rows via id in a reasonably efficient manner. 1. If I do individual lookups via the primary key  then a fast indexed lookup occurs. However  if I do large numbers of such queries  then the time is overwhelmed by round-trip overhead which makes everything incredibly slow. 2. If I use a single query with a disjunction of the primary keys of interest  then a table scan is performed (even if the clause only contains 1-3 items)  which walks over 11 million rows...incredibly inefficient. 3. If I use an IN clause  then a table scan is performed (even if the clause only contains 1-3 items)  which walks over 11 million rows...incredibly inefficient.I'm guessing that this might have something to do with the fact that I'm using large integers and really big numbers that don't start anywhere at or about 1 for my keys. Could this possibly be confusing the optimizer?Here are the unlimited query plans for the 3 cases that I enumerated:*********************************************************************************************&#91;EL Fine&#93;: 2013-01-17 11:09:53.384-ServerSession(582235416)Connection(1430986883)Thread(Thread&#91;&quot;Initial Lisp Listener&quot; 5 SubL Thread Group&#93;)-SELECT TERM_ID  ARG0  ARG1  ARG2  ARG3  FORMULA_HASH  FORMULA_LENGTH  FORMULA_TYPE  KB_STATUS FROM KB.FORMULA_TERM WHERE (TERM_ID = ?) bind =&gt; &#91;2251799814033500&#93;Thu Jan 17 11:09:53 CST 2013 Thread&#91;&quot;Initial Lisp Listener&quot; 5 SubL Thread Group&#93; (XID = 4711079)  (SESSIONID = 3)  SELECT TERM_ID  ARG0  ARG1  ARG2  ARG3  FORMULA_HASH  FORMULA_LENGTH  FORMULA_TYPE  KB_STATUS FROM KB.FORMULA_TERM WHERE (TERM_ID = ?) ******* Project-Restrict ResultSet (3):Number of opens = 1Rows seen = 1Rows filtered = 0restriction = falseprojection = true constructor time (milliseconds) = 0 open time (milliseconds) = 0 next time (milliseconds) = 0 close time (milliseconds) = 0 restriction time (milliseconds) = 0 projection time (milliseconds) = 0 optimizer estimated row count: 1.00 optimizer estimated cost: 6.59Source result set: Index Row to Base Row ResultSet for FORMULA_TERM: Number of opens = 1 Rows seen = 1 Columns accessed from heap = {1  2  3  4  5  6  7  8} constructor time (milliseconds) = 0 open time (milliseconds) = 0 next time (milliseconds) = 0 close time (milliseconds) = 0 optimizer estimated row count: 1.00 optimizer estimated cost: 6.59 Index Scan ResultSet for FORMULA_TERM using constraint KB_FORMULA_TERM_TERM_ID_PK at read committed isolation level using share row locking chosen by the optimizer Number of opens = 1 Rows seen = 1 Rows filtered = 0 Fetch Size = 1 constructor time (milliseconds) = 0 open time (milliseconds) = 0 next time (milliseconds) = 0 close time (milliseconds) = 0 next time in milliseconds/row = 0 scan information: Bit set of columns fetched=All Number of columns fetched=2 Number of deleted rows visited=0 Number of pages visited=3 Number of rows qualified=1 Number of rows visited=1 Scan type=btree Tree height=-1 start position: &gt;= on first 1 column(s). Ordered null semantics on the following columns:  stop position: &gt; on first 1 column(s). Ordered null semantics on the following columns:  qualifiers: None optimizer estimated row count: 1.00 optimizer estimated cost: 6.59&#91;EL Fine&#93;: 2013-01-17 11:01:00.732-ServerSession(1237006689)Connection(927179828)Thread(Thread&#91;&quot;Initial Lisp Listener&quot; 5 SubL Thread Group&#93;)-SELECT TERM_ID  ARG0  ARG1  ARG2  ARG3  FORMULA_HASH  FORMULA_LENGTH  FORMULA_TYPE  KB_STATUS FROM KB.FORMULA_TERM WHERE (((TERM_ID = ?) OR (TERM_ID = ?)) OR (TERM_ID = ?)) bind =&gt; &#91;2251799814033500  2251799814033501  2251799814033499&#93;Thu Jan 17 11:01:10 CST 2013 Thread&#91;&quot;Initial Lisp Listener&quot; 5 SubL Thread Group&#93; (XID = 4711078)  (SESSIONID = 3)  SELECT TERM_ID  ARG0  ARG1  ARG2  ARG3  FORMULA_HASH  FORMULA_LENGTH  FORMULA_TYPE  KB_STATUS FROM KB.FORMULA_TERM WHERE (((TERM_ID = ?) OR (TERM_ID = ?)) OR (TERM_ID = ?)) ******* Project-Restrict ResultSet (3):Number of opens = 1Rows seen = 3Rows filtered = 0restriction = falseprojection = true constructor time (milliseconds) = 0 open time (milliseconds) = 0 next time (milliseconds) = 0 close time (milliseconds) = 0 restriction time (milliseconds) = 0 projection time (milliseconds) = 0 optimizer estimated row count: 1176730.30 optimizer estimated cost: 5931065.54Source result set: Project-Restrict ResultSet (2): Number of opens = 1 Rows seen = 11767298 Rows filtered = 11767295 restriction = true projection = false constructor time (milliseconds) = 0 open time (milliseconds) = 0 next time (milliseconds) = 0 close time (milliseconds) = 0 restriction time (milliseconds) = 0 projection time (milliseconds) = 0 optimizer estimated row count: 1176730.30 optimizer estimated cost: 5931065.54 Source result set: Table Scan ResultSet for FORMULA_TERM at read committed isolation level using instantaneous share row locking chosen by the optimizer Number of opens = 1 Rows seen = 11767298 Rows filtered = 0 Fetch Size = 16 constructor time (milliseconds) = 0 open time (milliseconds) = 0 next time (milliseconds) = 0 close time (milliseconds) = 0 next time in milliseconds/row = 0 scan information: Bit set of columns fetched=All Number of columns fetched=9 Number of pages visited=34358 Number of rows qualified=11767298 Number of rows visited=11767298 Scan type=heap start position: null stop position: null qualifiers: None optimizer estimated row count: 1176730.30 optimizer estimated cost: 5931065.54&#91;EL Fine&#93;: 2013-01-17 11:27:00.627-ServerSession(1237006689)Connection(1688096771)Thread(Thread&#91;&quot;Initial Lisp Listener&quot; 5 SubL Thread Group&#93;)-SELECT TERM_ID  ARG0  ARG1  ARG2  ARG3  FORMULA_HASH  FORMULA_LENGTH  FORMULA_TYPE  KB_STATUS FROM KB.FORMULA_TERM WHERE (TERM_ID IN (? ? ?)) bind =&gt; &#91;2251799814033500  2251799814033501  2251799814033499&#93;Thu Jan 17 11:47:26 CST 2013 Thread&#91;&quot;Initial Lisp Listener&quot; 5 SubL Thread Group&#93; (XID = 4711080)  (SESSIONID = 3)  SELECT TERM_ID  ARG0  ARG1  ARG2  ARG3  FORMULA_HASH  FORMULA_LENGTH  FORMULA_TYPE  KB_STATUS FROM KB.FORMULA_TERM WHERE (TERM_ID IN (? ? ?)) ******* Project-Restrict ResultSet (3):Number of opens = 1Rows seen = 3Rows filtered = 0restriction = falseprojection = true constructor time (milliseconds) = 0 open time (milliseconds) = 0 next time (milliseconds) = 0 close time (milliseconds) = 0 restriction time (milliseconds) = 0 projection time (milliseconds) = 0 optimizer estimated row count: 1176730.30 optimizer estimated cost: 5931065.54Source result set: Project-Restrict ResultSet (2): Number of opens = 1 Rows seen = 11767298 Rows filtered = 11767295 restriction = true projection = false constructor time (milliseconds) = 0 open time (milliseconds) = 0 next time (milliseconds) = 0 close time (milliseconds) = 0 restriction time (milliseconds) = 0 projection time (milliseconds) = 0 optimizer estimated row count: 1176730.30 optimizer estimated cost: 5931065.54 Source result set: Table Scan ResultSet for FORMULA_TERM at read committed isolation level using instantaneous share row locking chosen by the optimizer Number of opens = 1 Rows seen = 11767298 Rows filtered = 0 Fetch Size = 16 constructor time (milliseconds) = 0 open time (milliseconds) = 0 next time (milliseconds) = 0 close time (milliseconds) = 0 next time in milliseconds/row = 0 scan information: Bit set of columns fetched=All Number of columns fetched=9 Number of pages visited=34358 Number of rows qualified=11767298 Number of rows visited=11767298 Scan type=heap start position: null stop position: null qualifiers: None optimizer estimated row count: 1176730.30 optimizer estimated cost: 5931065.54",
            "id": "6045"
        },
        "6064": {
            "ground_truth": "0",
            "bug_report": "Failures in upgradeTests.Changes10_9 related to index cardinality statistics\nThe upgrade test fails when run with 10.8.3. The reason is that a fix has been backported to 10.8.3  and older branches back to 10.3  and this fix invalidates assumptions made in some of the tests in Changes10_9.Example of failures:https://builds.apache.org/job/Derby-10.9-suites.All/60/testReport/As a side note  I'm wondering if we don't have good enough routines to make sure we run the upgrade tests with maintenance releases on older branches before releasing them. I don't know if we can avoid this situation in general  that would at least require very careful consideration on how to write the upgrade test.",
            "id": "6064"
        },
        "6079": {
            "ground_truth": "1",
            "bug_report": "100's of errors in nightly test run on weme after jacoco property/priviledges checkin\n100's of errors in nightly test  all seem to be a null pointer while processing policy files during setup. problem is in jvm code  and it seems specific to the weme6.2 jvm.The only change being tested in this run was  For instance:330) testAll(org.apache.derbyTesting.functionTests.tests.lang.NativeAuthenticationServiceTest)java.lang.NullPointerException at com.ibm.oti.util.DefaultPolicy.addGrant(DefaultPolicy.java:619) at com.ibm.oti.util.DefaultPolicy.readPolicy(DefaultPolicy.java:608) at com.ibm.oti.util.DefaultPolicy.getSystemPolicy(DefaultPolicy.java:922) at com.ibm.oti.util.DefaultPolicy.getPermissionsImpl(DefaultPolicy.java:114) at com.ibm.oti.util.DefaultPolicy$1.run(DefaultPolicy.java:67) at java.security.AccessController.doPrivileged(AccessController.java:204) at com.ibm.oti.util.DefaultPolicy.privateGetPermissions(DefaultPolicy.java:65) at com.ibm.oti.util.DefaultPolicy.getPermissions(DefaultPolicy.java:53) at java.security.Policy.getPermissions(Policy.java:131) at java.security.ProtectionDomain.implies(ProtectionDomain.java:177) at java.security.AccessController.checkPermission(AccessController.java:99) at java.lang.SecurityManager.checkPermission(SecurityManager.java:534) at java.lang.SecurityManager.checkPropertyAccess(SecurityManager.java:331) at java.lang.System.getProperty(System.java:384) at java.lang.System.getProperty(System.java:366) at org.apache.derbyTesting.junit.BaseTestCase$3.run(BaseTestCase.java:292) at java.security.AccessController.doPrivileged(AccessController.java:204) at org.apache.derbyTesting.junit.BaseTestCase.getSystemProperty(BaseTestCase.java:288) at org.apache.derbyTesting.junit.DropDatabaseSetup.removeDatabase(DropDatabaseSetup.java:86) at org.apache.derbyTesting.junit.TestConfiguration$5.tearDown(TestConfiguration.java:868) at junit.extensions.TestSetup$1.protect(TestSetup.java:22) at junit.extensions.TestSetup.run(TestSetup.java:25) at org.apache.derbyTesting.junit.BaseTestSetup.run(BaseTestSetup.java:57) at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24) at junit.extensions.TestSetup$1.protect(TestSetup.java:21) at junit.extensions.TestSetup.run(TestSetup.java:25) at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24) at junit.extensions.TestSetup$1.protect(TestSetup.java:21) at junit.extensions.TestSetup.run(TestSetup.java:25) at org.apache.derbyTesting.junit.BaseTestSetup.run(BaseTestSetup.java:57) at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24) at junit.extensions.TestSetup$1.protect(TestSetup.java:21) at junit.extensions.TestSetup.run(TestSetup.java:25) at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24) at junit.extensions.TestSetup$1.protect(TestSetup.java:21) at junit.extensions.TestSetup.run(TestSetup.java:25) at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24) at junit.extensions.TestSetup$1.protect(TestSetup.java:21) at junit.extensions.TestSetup.run(TestSetup.java:25) at org.apache.derbyTesting.junit.BaseTestSetup.run(BaseTestSetup.java:57)Here is link to all errors:http://people.apache.org/~myrnavl/derby_test_results/main/windows/testlog/weme6.2/1447575-suites.All_diff.txthttp://people.apache.org/~myrnavl/derby_test_results/main/windows/testlog/weme6.2/1447575-derbyall_diff.txt",
            "id": "6079"
        },
        "6090": {
            "ground_truth": "0",
            "bug_report": "Package javadoc publishedapi/jdbc4/index.html out of date\nQuote: ' Derby runs on any J2SE 1.4.2 or higher virtual machine and supports Java ME/CDC/Foundation. Derby's database format is platform independent allowing databases to be copied to any machine type. 'I think we have dropped 1.4.2  so we could omit that  but also include JDK 8 Profile 2 here  since we do mention CDC.",
            "id": "6090"
        },
        "6092": {
            "ground_truth": "0",
            "bug_report": "testPositionAgressive(org.apache.derbyTesting.functionTests.tests.jdbcapi.BlobClob4BlobTest)j fails with : 'The handle is invalid.: java.io.IOException'.\nThere was 1 error:http://people.apache.org/~myrnavl/derby_test_results/main/windows/testlog/ibm15/1449432-suites.All_diff.txt1) testPositionAgressive(org.apache.derbyTesting.functionTests.tests.jdbcapi.BlobClob4BlobTest)java.sql.SQLException: Java exception: 'The handle is invalid.: java.io.IOException'. at org.apache.derby.impl.jdbc.SQLExceptionFactory.getSQLException(Unknown Source) at org.apache.derby.impl.jdbc.Util.newEmbedSQLException(Unknown Source) at org.apache.derby.impl.jdbc.Util.javaException(Unknown Source) at org.apache.derby.impl.jdbc.EmbedConnection.clearLOBMapping(Unknown Source) at org.apache.derby.impl.jdbc.EmbedConnection.commit(Unknown Source) at org.apache.derbyTesting.junit.BaseJDBCTestCase.commit(BaseJDBCTestCase.java:393) at org.apache.derbyTesting.functionTests.tests.jdbcapi.BlobClob4BlobTest.testPositionAgressive(BlobClob4BlobTest.java:1070) at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:79) at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) at org.apache.derbyTesting.junit.BaseTestCase.runBare(BaseTestCase.java:117) at org.apache.derbyTesting.junit.BaseJDBCTestCase.runBareOverridable(BaseJDBCTestCase.java:424) at org.apache.derbyTesting.junit.BaseJDBCTestCase.runBare(BaseJDBCTestCase.java:441) at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24) at junit.extensions.TestSetup$1.protect(TestSetup.java:21) at junit.extensions.TestSetup.run(TestSetup.java:25) at org.apache.derbyTesting.junit.BaseTestSetup.run(BaseTestSetup.java:57) at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24) at junit.extensions.TestSetup$1.protect(TestSetup.java:21) at junit.extensions.TestSetup.run(TestSetup.java:25) at org.apache.derbyTesting.junit.BaseTestSetup.run(BaseTestSetup.java:57) at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24) at junit.extensions.TestSetup$1.protect(TestSetup.java:21) at junit.extensions.TestSetup.run(TestSetup.java:25) at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24) at junit.extensions.TestSetup$1.protect(TestSetup.java:21) at junit.extensions.TestSetup.run(TestSetup.java:25) at org.apache.derbyTesting.junit.BaseTestSetup.run(BaseTestSetup.java:57) at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24) at junit.extensions.TestSetup$1.protect(TestSetup.java:21) at junit.extensions.TestSetup.run(TestSetup.java:25)Caused by: java.io.IOException: The handle is invalid. at java.io.RandomAccessFile.close0(Native Method) at java.io.RandomAccessFile.close(RandomAccessFile.java:573) at org.apache.derby.impl.jdbc.LOBFile.close(Unknown Source) at org.apache.derby.impl.jdbc.EncryptedLOBFile.close(Unknown Source) ... 53 more",
            "id": "6092"
        },
        "6100": {
            "ground_truth": "0",
            "bug_report": "Upgrade tests fail on compact2\nThe upgrade tests fail on the compact2 profile because they use data sources to create databases with old Derby versions  and to shut down the old engines after the test. The data sources in Derby versions before 10.10 require JNDI to be present. Since JNDI is not present on compact2  the attempts to obtain data sources fail:1) 10.0.2.1 Upgrade Phase: CREATE java.lang.NoClassDefFoundError: javax/naming/Referenceable at java.lang.ClassLoader.defineClass1(Native Method) at java.lang.ClassLoader.defineClass(Unknown Source) at java.security.SecureClassLoader.defineClass(Unknown Source) at java.net.URLClassLoader.defineClass(Unknown Source) at java.net.URLClassLoader.access$100(Unknown Source) at java.net.URLClassLoader$1.run(Unknown Source) at java.net.URLClassLoader$1.run(Unknown Source) at java.security.AccessController.doPrivileged(Native Method) at java.net.URLClassLoader.findClass(Unknown Source) at java.lang.ClassLoader.loadClass(Unknown Source) at java.lang.ClassLoader.loadClass(Unknown Source) at java.lang.ClassLoader.defineClass1(Native Method) at java.lang.ClassLoader.defineClass(Unknown Source) at java.security.SecureClassLoader.defineClass(Unknown Source) at java.net.URLClassLoader.defineClass(Unknown Source) at java.net.URLClassLoader.access$100(Unknown Source) at java.net.URLClassLoader$1.run(Unknown Source) at java.net.URLClassLoader$1.run(Unknown Source) at java.security.AccessController.doPrivileged(Native Method) at java.net.URLClassLoader.findClass(Unknown Source) at java.lang.ClassLoader.loadClass(Unknown Source) at java.lang.ClassLoader.loadClass(Unknown Source) at java.lang.ClassLoader.loadClass(Unknown Source) at java.lang.Class.forName0(Native Method) at java.lang.Class.forName(Unknown Source) at org.apache.derbyTesting.junit.JDBCDataSource.getDataSourceObject(JDBCDataSource.java:162) at org.apache.derbyTesting.junit.JDBCDataSource.getDataSource(JDBCDataSource.java:108) at org.apache.derbyTesting.junit.JDBCDataSource.getDataSource(JDBCDataSource.java:93) at org.apache.derbyTesting.junit.JDBCDataSource.getDataSource(JDBCDataSource.java:47) at org.apache.derbyTesting.functionTests.tests.upgradeTests.PhaseChanger.setUp(PhaseChanger.java:93) at junit.extensions.TestSetup$1.protect(TestSetup.java:20) at junit.extensions.TestSetup.run(TestSetup.java:25) at org.apache.derbyTesting.junit.BaseTestSetup.run(BaseTestSetup.java:57) at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24) at junit.extensions.TestSetup$1.protect(TestSetup.java:21) at junit.extensions.TestSetup.run(TestSetup.java:25) at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24) at junit.extensions.TestSetup$1.protect(TestSetup.java:21) at junit.extensions.TestSetup.run(TestSetup.java:25) at org.apache.derbyTesting.junit.BaseTestSetup.run(BaseTestSetup.java:57) at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24) at junit.extensions.TestSetup$1.protect(TestSetup.java:21) at junit.extensions.TestSetup.run(TestSetup.java:25) at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24) at junit.extensions.TestSetup$1.protect(TestSetup.java:21) at junit.extensions.TestSetup.run(TestSetup.java:25) at org.apache.derbyTesting.junit.BaseTestSetup.run(BaseTestSetup.java:57) at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24) at junit.extensions.TestSetup$1.protect(TestSetup.java:21) at junit.extensions.TestSetup.run(TestSetup.java:25) at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24) at junit.extensions.TestSetup$1.protect(TestSetup.java:21) at junit.extensions.TestSetup.run(TestSetup.java:25) at org.apache.derbyTesting.junit.BaseTestSetup.run(BaseTestSetup.java:57) at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24) at junit.extensions.TestSetup$1.protect(TestSetup.java:21) at junit.extensions.TestSetup.run(TestSetup.java:25) at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24) at junit.extensions.TestSetup$1.protect(TestSetup.java:21) at junit.extensions.TestSetup.run(TestSetup.java:25) at org.apache.derbyTesting.junit.BaseTestSetup.run(BaseTestSetup.java:57) at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24) at junit.extensions.TestSetup$1.protect(TestSetup.java:21) at junit.extensions.TestSetup.run(TestSetup.java:25) at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24) at junit.extensions.TestSetup$1.protect(TestSetup.java:21) at junit.extensions.TestSetup.run(TestSetup.java:25) at org.apache.derbyTesting.junit.BaseTestSetup.run(BaseTestSetup.java:57) at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24) at junit.extensions.TestSetup$1.protect(TestSetup.java:21) at junit.extensions.TestSetup.run(TestSetup.java:25) at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24) at junit.extensions.TestSetup$1.protect(TestSetup.java:21) at junit.extensions.TestSetup.run(TestSetup.java:25) at org.apache.derbyTesting.junit.BaseTestSetup.run(BaseTestSetup.java:57) at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24) at junit.extensions.TestSetup$1.protect(TestSetup.java:21) at junit.extensions.TestSetup.run(TestSetup.java:25) at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24) at junit.extensions.TestSetup$1.protect(TestSetup.java:21) at junit.extensions.TestSetup.run(TestSetup.java:25) at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24) at junit.extensions.TestSetup$1.protect(TestSetup.java:21) at junit.extensions.TestSetup.run(TestSetup.java:25)Caused by: java.lang.ClassNotFoundException: javax.naming.Referenceable at java.net.URLClassLoader$1.run(Unknown Source) at java.net.URLClassLoader$1.run(Unknown Source) at java.security.AccessController.doPrivileged(Native Method) at java.net.URLClassLoader.findClass(Unknown Source) at java.lang.ClassLoader.loadClass(Unknown Source) at java.lang.ClassLoader.loadClass(Unknown Source) ... 107 more",
            "id": "6100"
        },
        "6107": {
            "ground_truth": "1",
            "bug_report": "Investigate why setting a login timeout causes NativeAuthenticationServiceTest to fail when run in a suite\nSee DERBY-6094 for the details of this problem.",
            "id": "6107"
        },
        "6112": {
            "ground_truth": "1",
            "bug_report": "SSL Test (and network server )  can hang if serverSocket.accept() fails for something other than an IOException\nIn starting a server with SSL as in SSLTest if serverSocket.accept() fails for some reason other than an IOException it may just print the error to console and hang. In this case it was:java.security.AccessControlException: Access denied (java.util.PropertyPermissionI saw this when debugging a java issue in serverSocket.accept() but I think it could be simulated by adding an unwrapped System.getProperty() of some sort before serverSocket.accept() to force a permission error. e.g.  System.getProperty('derby.system.home'); return serverSocket.accept(); } catch (IOException acceptE) {I have not verified that would work.",
            "id": "6112"
        },
        "6124": {
            "ground_truth": "0",
            "bug_report": "Marshalling error in JDBCDriverTest as part of CompatibilityTest\nInternal Oracle testing of RC 2 testing of 10.10 (Tendril Request 5574239 Tendril Task 3614491 ):                 Diff file derbyall/derbynetclientmats/DerbyNetClient/encodingTests/TestEnc.diff             Start: TestEnc jdk1.7.0 DerbyNetClient derbynetclientmats:encodingTests 2013-03-21 14:55:59 ***derbyTesting.encoding can only be used with jdk15  skipping test End: TestEnc jdk1.7.0 DerbyNetClient derbynetclientmats:encodingTests 2013-03-21 14:55:59 ***            Diff file derbyall/derbynetclientmats/DerbyNetClient/derbynetclientmats/CompatibilityTest.diff             Start: CompatibilityTest jdk1.7.0 DerbyNetClient derbynetclientmats:derbynetclientmats 2013-03-21 14:55:59 ***0 add&gt; .E.&gt; There was 1 error:&gt; 1) testJDBCDriver(org.apache.derbyTesting.functionTests.tests.junitTests.compatibility.JDBCDriverTest)java.sql.SQLException: Error marshalling or unmarshalling a user defined type: org.apache.derbyTesting.functionTests.tests.lang.Price; local class incompatible: stream classdesc serialVersionUID = 102726277789621992  local class serialVersionUID = 1827170030595550895&gt; Caused by: org.apache.derby.client.am.SqlException: Error marshalling or unmarshalling a user defined type: org.apache.derbyTesting.functionTests.tests.lang.Price; local class incompatible: stream classdesc serialVersionUID = 102726277789621992  local class serialVersionUID = 1827170030595550895&gt; ... 22 more&gt; Caused by: java.io.InvalidClassException: org.apache.derbyTesting.functionTests.tests.lang.Price; local class incompatible: stream classdesc serialVersionUID = 102726277789621992  local class serialVersionUID = 1827170030595550895&gt; ... 25 more&gt; FAILURES!!!&gt; Tests run: 2  Failures: 0  Errors: 1Test Failed. End: CompatibilityTest jdk1.7.0 DerbyNetClient derbynetclientmats:derbynetclientmats 2013-03-21 14:56:04 ***    Looking at the Price class I see it doesn't have an explicit serialVersionUID.",
            "id": "6124"
        },
        "6131": {
            "ground_truth": "0",
            "bug_report": "select from view with 'upper' and 'in' list throws a ClassCastException\nthe issue can be reproduced1. create table myTbl1 (name varchar(1000));2. create table myTbl2 (name varchar(1000));3. create view myView (name) as select t1.name from myTbl1 t1 union all select t2.name from myTbl2 t2;4. select name from myView where upper(name) in ('AA'  'BB');#4 failed with 'org.apache.derby.impl.sql.compile.SimpleStringOperatorNode incompatible with org.apache.derby.impl.sql.compile.ColumnReference: java.lang.ClassCastException'If the view is created as 'create myView (name) as select t1.name from myTbl1 t1'  the query worked fine.",
            "id": "6131"
        },
        "6144": {
            "ground_truth": "0",
            "bug_report": "nightly regression test failure  intermittent error : testStatisticsCorrectness(org.apache.derbyTesting.functionTests.tests.store.AutomaticIndexStatisticsTest)junit.framework.AssertionFailedError\nfailure in nightly regression test  candidate 10.10 branch  ibm17may be related to daylight savings time change  there were similar resolved bugs that were marked fixed so reporting new one in case this is different.http://people.apache.org/~myrnavl/derby_test_results/v10_10/windows/testlog/ibm17/1461391-suites.All_diff.txtThere was 1 failure:1) testStatisticsCorrectness(org.apache.derbyTesting.functionTests.tests.store.AutomaticIndexStatisticsTest)junit.framework.AssertionFailedError at org.apache.derbyTesting.functionTests.tests.store.AutomaticIndexStatisticsTest.testStatisticsCorrectness(AutomaticIndexStatisticsTest.java:332) at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:88) at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:55) at org.apache.derbyTesting.junit.BaseTestCase.runBare(BaseTestCase.java:117) at org.apache.derbyTesting.junit.BaseJDBCTestCase.runBareOverridable(BaseJDBCTestCase.java:424) at org.apache.derbyTesting.junit.BaseJDBCTestCase.runBare(BaseJDBCTestCase.java:441) at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24) at junit.extensions.TestSetup$1.protect(TestSetup.java:21) at junit.extensions.TestSetup.run(TestSetup.java:25) at org.apache.derbyTesting.junit.BaseTestSetup.run(BaseTestSetup.java:57) at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24) at junit.extensions.TestSetup$1.protect(TestSetup.java:21) at junit.extensions.TestSetup.run(TestSetup.java:25) at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24) at junit.extensions.TestSetup$1.protect(TestSetup.java:21) at junit.extensions.TestSetup.run(TestSetup.java:25) at org.apache.derbyTesting.junit.BaseTestSetup.run(BaseTestSetup.java:57)",
            "id": "6144"
        },
        "6146": {
            "ground_truth": "0",
            "bug_report": "nightly regression test failure: testMultipleLastKeyWaitsInMaxScan(org.apache.derbyTesting.functionTests.tests.store.IndexSplitDeadlockTest)junit.framework.AssertionFailedError: Column value mismatch @ column '1'\nhttp://people.apache.org/~myrnavl/derby_test_results/v10_8/windows/testlog/ibm16/1461387-suites.All_diff.txt1) testMultipleLastKeyWaitsInMaxScan(org.apache.derbyTesting.functionTests.tests.store.IndexSplitDeadlockTest)junit.framework.AssertionFailedError: Column value mismatch @ column '1'  row 1: Expected: &gt;4&lt; Found: &gt;3&lt; at org.apache.derbyTesting.junit.JDBC.assertRowInResultSet(JDBC.java:1213) at org.apache.derbyTesting.junit.JDBC.assertRowInResultSet(JDBC.java:1125) at org.apache.derbyTesting.junit.JDBC.assertFullResultSetMinion(JDBC.java:1012) at org.apache.derbyTesting.junit.JDBC.assertFullResultSet(JDBC.java:935) at org.apache.derbyTesting.junit.JDBC.assertFullResultSet(JDBC.java:892) at org.apache.derbyTesting.junit.JDBC.assertFullResultSet(JDBC.java:850) at org.apache.derbyTesting.junit.JDBC.assertSingleValueResultSet(JDBC.java:835) at org.apache.derbyTesting.functionTests.tests.store.IndexSplitDeadlockTest.testMultipleLastKeyWaitsInMaxScan(IndexSplitDeadlockTest.java:657) at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:60) at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:37) at org.apache.derbyTesting.junit.BaseTestCase.runBare(BaseTestCase.java:110) at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24) at junit.extensions.TestSetup$1.protect(TestSetup.java:21) at junit.extensions.TestSetup.run(TestSetup.java:25) at org.apache.derbyTesting.junit.BaseTestSetup.run(BaseTestSetup.java:57) at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24) at junit.extensions.TestSetup$1.protect(TestSetup.java:21) at junit.extensions.TestSetup.run(TestSetup.java:25) at org.apache.derbyTesting.junit.BaseTestSetup.run(BaseTestSetup.java:57)FAILURES!!!Tests run: 15197  Failures: 1  Errors: 0",
            "id": "6146"
        },
        "6150": {
            "ground_truth": "0",
            "bug_report": "Add automatic cleanup of connections opened with openDefaultConnection()\nIn JDBCBaseTestCase  the default connection is automatically rolled back and closed but connections opened with openDefaultConnection() can stay open and hold locks and affect other tests if the database can not be cleaned because locks are held. It would be good to clean up all the connections in tearDown().",
            "id": "6150"
        },
        "6151": {
            "ground_truth": "0",
            "bug_report": "Derby does not report warnings raised by table functions\nIf a table function raises warnings as the user loops through ResultSet.next()  those warnings are silently thrown away by Derby. Derby should return those warnings when the user calls ResultSet.getWarnings().",
            "id": "6151"
        },
        "6161": {
            "ground_truth": "1",
            "bug_report": "Simplify code that handles LOB files\nWhen investigating DERBY-6092  I found some code that could be simplified/cleaned up. Will make those changes here.",
            "id": "6161"
        },
        "6167": {
            "ground_truth": "0",
            "bug_report": "Interrupt restarts clock for login timeout\nIf a login takes time  and the thread that's blocked in Driver20.timeLogin() is interrupted  it will call Future.get() again with the same timeout value. This means that interrupting a getConnection() call will not make it terminate faster  as one might expect. Instead  it restarts the timeout clock and makes it terminate later than if it had not been interrupted.",
            "id": "6167"
        },
        "6168": {
            "ground_truth": "0",
            "bug_report": "Clean up registered format ids\nRegisteredFormatIds and StoredFormatIds contain identifiers for classes that implement the Formatable interfaces and are used when serializing/deserializing instances of those classes.Many of the classes referenced there do however not implement Formatable. The references to them could be removed. I've seen that many classes in the impl.sql.execute.rts package are there  none of which implement Formatable. There may be more.",
            "id": "6168"
        },
        "6178": {
            "ground_truth": "0",
            "bug_report": "AutoloadTest does not proprogate original jvm -D flags to spawned JVM  leading to LAB regression test failures\nIBM lab nightly regression testing is seeing numerious intermittent errors while running theAutoloadTest. This regression testing often runs multiple runs of Suites.all on the same machine atthe same time and uses the -Dderby.tests.basePort=3500 option to the tests to insure networkserver is created on different ports and don't intefere.I think the following code in this test that spawn a process is not going pass that port info onto the networkserver startup and then lead to problems: /** Run {@code AutoloadTest} in a separate JVM. */ public void spawnProcess() throws Exception { String[] cmd = { 'junit.textui.TestRunner'  spawnedTestClass.getName() }; SpawnedProcess proc = new SpawnedProcess(execJavaCmd(cmd)  spawnedTestClass.getName()); if (proc.complete() != 0) { fail(proc.getFailMessage('Test process failed')); } }",
            "id": "6178"
        },
        "6182": {
            "ground_truth": "0",
            "bug_report": "Cleanup suspect coding practices in org.apache.derby.iapi.error package\nSimilar to DERBY-6177.",
            "id": "6182"
        },
        "6185": {
            "ground_truth": "0",
            "bug_report": "Query against view  with 'where name LIKE 'Col1' ESCAPE '/' ' failed\nThe error can be reproduced 1) create table mytbl1 (name clob(10K));2) create table mytbl2 (name clob(10K));3) create view myview (name) as select t1.name from mytbl1 t1 union all select t2.name from mytbl2 t2;4) select name from myview where name LIKE 'Col1' ESCAPE '/';'4)' failed with error message 'ERROR 42818: Comparisons between 'CLOB (UCS_BASIC)' and 'CHAR (UCS_BASIC)' are not supported. Types must be comparable. String types must also have matching collation. If collation does not match  a possible solution is to cast operands to force them to the default collation (e.g. SELECT tablename FROM sys.systables WHERE CAST(tablename AS VARCHAR(128)) = 'T1') at org.apache.derby.iapi.error.StandardException.newException(Unknown Source) at org.apache.derby.impl.sql.compile.BinaryComparisonOperatorNode.bindComparisonOperator(Unknown Source) at org.apache.derby.impl.sql.compile.PredicateList.pushExpressionsIntoSelect(Unknown Source) at org.apache.derby.impl.sql.compile.UnionNode.pushExpressions(Unknown Source) at org.apache.derby.impl.sql.compile.UnionNode.pushExpressions(Unknown Source) at org.apache.derby.impl.sql.compile.ProjectRestrictNode.pushExpressions(Unknown Source) at org.apache.derby.impl.sql.compile.FromList.pushPredicates(Unknown Source) at org.apache.derby.impl.sql.compile.SelectNode.preprocess(Unknown Source) at org.apache.derby.impl.sql.compile.DMLStatementNode.optimizeStatement(Unknown Source) at org.apache.derby.impl.sql.compile.CursorNode.optimizeStatement(Unknown Source) at org.apache.derby.impl.sql.GenericStatement.prepMinion(Unknown Source) at org.apache.derby.impl.sql.GenericStatement.prepare(Unknown Source) at org.apache.derby.impl.sql.conn.GenericLanguageConnectionContext.prepareInternalStatement(Unknown Source) ... 19 more",
            "id": "6185"
        },
        "6188": {
            "ground_truth": "0",
            "bug_report": "Cleanup suspect coding practices in org.apache.derby.iapi.services.io package\nSimilar to DERBY-6177.",
            "id": "6188"
        },
        "6197": {
            "ground_truth": "0",
            "bug_report": "Cleanup suspect coding practices in the org.apache.derby.impl.tools.planexporter package\nSimilar to DERBY-6177.",
            "id": "6197"
        },
        "6200": {
            "ground_truth": "0",
            "bug_report": "Cleanup suspect coding practices in the org.apache.derby.iapi.types package\nSimilar to DERBY-6177.",
            "id": "6200"
        },
        "6202": {
            "ground_truth": "0",
            "bug_report": "Cleanup suspect coding practices in the org.apache.derby.iapi.sql.dictionary package\nSimilar to DERBY-6177.",
            "id": "6202"
        },
        "6206": {
            "ground_truth": "0",
            "bug_report": "Cleanup suspect coding practices in misc Derby packages\nSimilar to DERBY-6177.",
            "id": "6206"
        },
        "6211": {
            "ground_truth": "0",
            "bug_report": "Make Optimizer trace logic pluggable.\nRight now the trace logic in the optimizer is hard-coded to produce a stream of diagnostics. It would be good to be able to plug alternative trace logic into the optimizer. This would make the following possible:1) Plug in trace logic which produces formats which are easier to study and which can be analyzed mechanically. E.g.  xml formatted output.2) Plug in trace logic which can be used during unit testing to verify that the optimizer has picked the right plan. Over time this might make it easier to migrate canon-based tests to assertion-based tests.",
            "id": "6211"
        },
        "6212": {
            "ground_truth": "1",
            "bug_report": "NullPointerException when calling a procedure with sub-query as argument\nij version 10.10ij&gt; connect 'jdbc:derby:memory:db;create=true';ij&gt; call syscs_util.syscs_set_database_property('abc'  (values 'def'));ERROR XJ001: Java exception: ': java.lang.NullPointerException'. (errorCode = 0)The query should either compile and execute just fine  or it should raise a proper exception. It should not fail with a NullPointerException.",
            "id": "6212"
        },
        "6224": {
            "ground_truth": "1",
            "bug_report": "Issues with latest JDK 8 EA build because of missing SQLPermission\nWith the latest EA build of JDK 8 (build 1.8.0-ea-b89)  I see many failures in suites.All. For example:1) testStartNetworkServerFalse(org.apache.derbyTesting.functionTests.tests.derbynet.DerbyNetAutoStartTest)java.security.AccessControlException: access denied ('java.sql.SQLPermission' 'deregisterDriver') at java.security.AccessControlContext.checkPermission(AccessControlContext.java:364) at java.security.AccessController.checkPermission(AccessController.java:562) at java.lang.SecurityManager.checkPermission(SecurityManager.java:549) at java.sql.DriverManager.deregisterDriver(DriverManager.java:399) at org.apache.derby.jdbc.AutoloadedDriver.unregisterDriverModule(AutoloadedDriver.java:263) at org.apache.derby.jdbc.Driver20.stop(Driver20.java:105) at org.apache.derby.impl.services.monitor.TopService.stop(TopService.java:443) at org.apache.derby.impl.services.monitor.TopService.shutdown(TopService.java:394) at org.apache.derby.impl.services.monitor.BaseMonitor.shutdown(BaseMonitor.java:227) at org.apache.derby.impl.services.monitor.FileMonitor.shutdown(FileMonitor.java:44) at org.apache.derby.impl.services.monitor.BaseMonitor.shutdown(BaseMonitor.java:197) at org.apache.derby.impl.services.monitor.FileMonitor.shutdown(FileMonitor.java:44) at org.apache.derby.jdbc.InternalDriver.connect(InternalDriver.java:255) at org.apache.derby.jdbc.Driver20.connect(Driver20.java:246) at org.apache.derby.jdbc.AutoloadedDriver.connect(AutoloadedDriver.java:145) at java.sql.DriverManager.getConnection(DriverManager.java:661) at java.sql.DriverManager.getConnection(DriverManager.java:208) at org.apache.derbyTesting.junit.DriverManagerConnector.getConnectionByAttributes(DriverManagerConnector.java:204) at org.apache.derbyTesting.junit.DriverManagerConnector.shutEngine(DriverManagerConnector.java:171) at org.apache.derbyTesting.junit.TestConfiguration.shutdownEngine(TestConfiguration.java:1822) at org.apache.derbyTesting.functionTests.tests.derbynet.DerbyNetAutoStartTest.setUp(DerbyNetAutoStartTest.java:82) at org.apache.derbyTesting.junit.BaseTestCase.runBare(BaseTestCase.java:117) at org.apache.derbyTesting.junit.BaseJDBCTestCase.runBareOverridable(BaseJDBCTestCase.java:439) at org.apache.derbyTesting.junit.BaseJDBCTestCase.runBare(BaseJDBCTestCase.java:456)What's new in EA build 89 is that DriverManager.deregisterDriver() now requires an SQLPermission when running under a security manager. Most of suites.All runs under a security manager  and Derby's engine shutdown code calls deregisterDriver()  so this problem probably affects all tests that shut down the engine.",
            "id": "6224"
        },
        "6225": {
            "ground_truth": "1",
            "bug_report": "SecureServerTest assertion error on contents of stdout from subprocess\nSecureServerTest assertion error on contents of stdout from subprocess",
            "id": "6225"
        },
        "6230": {
            "ground_truth": "0",
            "bug_report": "Use the JVM's cache of Number instances in ReuseFactory\nReuseFactory has a cache of Byte  Short  Integer and Long instances to avoid excessive allocation of such instances.As of Java 5  the JVM has a cache of its own  available through static valueOf() methods in these classes.The JVM's cache is guaranteed to have at least all values in the range &#91;-128  127&#93;. ReuseFactory currently caches Integer instances in the range &#91;-1  18&#93; plus a few special values  and Byte  Short and Long instances in the range &#91;0  10&#93;.If we change ReuseFactory so that it uses the JVM's cache  the number of cache misses will be lower  and the code will become shorter.",
            "id": "6230"
        },
        "6231": {
            "ground_truth": "0",
            "bug_report": "Remove unnecessary checks for UnsupportedEncodingException in the client\nMany methods in the client need handling of UnsupportedEncodingException  typically because they call String methods that take the name of the encoding as argument. Most of these methods have overloads that take a Charset instead of a String to describe the encoding  and those methods don't throw UnsupportedEncodingException as the encoding is known to be supported once we have a Charset instance for it. We should use the methods that take a Charset and simplify the exception handling.",
            "id": "6231"
        },
        "6233": {
            "ground_truth": "0",
            "bug_report": "XMLBindingTest fails on latest JDK 8 EA\njava.sql.SQLDataException: Invalid XML Document: External DTD: Failed to read external DTD 'personal.dtd'  because 'file' access is not allowed. at org.apache.derby.impl.jdbc.SQLExceptionFactory40.getSQLException(SQLExceptionFactory40.java:79) at org.apache.derby.impl.jdbc.Util.newEmbedSQLException(Util.java:148) at org.apache.derby.impl.jdbc.Util.seeNextException(Util.java:349) at org.apache.derby.impl.jdbc.TransactionResourceImpl.wrapInSQLException(TransactionResourceImpl.java:431) at org.apache.derby.impl.jdbc.TransactionResourceImpl.handleException(TransactionResourceImpl.java:353) at org.apache.derby.impl.jdbc.EmbedConnection.handleException(EmbedConnection.java:2396) at org.apache.derby.impl.jdbc.ConnectionChild.handleException(ConnectionChild.java:85) at org.apache.derby.impl.jdbc.EmbedStatement.executeStatement(EmbedStatement.java:1438) at org.apache.derby.impl.jdbc.EmbedPreparedStatement.executeStatement(EmbedPreparedStatement.java:1695) at org.apache.derby.impl.jdbc.EmbedPreparedStatement.execute(EmbedPreparedStatement.java:1379) at org.apache.derbyTesting.junit.XML.insertDocWithDTD(XML.java:240) at org.apache.derbyTesting.functionTests.tests.lang.XMLBindingTest$XBindTestSetup.setUp(XMLBindingTest.java:301) at junit.extensions.TestSetup$1.protect(TestSetup.java:22) at junit.extensions.TestSetup.run(TestSetup.java:27) at org.apache.derbyTesting.junit.BaseTestSetup.run(BaseTestSetup.java:57) at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24) at junit.extensions.TestSetup$1.protect(TestSetup.java:23) at junit.extensions.TestSetup.run(TestSetup.java:27)Caused by: java.sql.SQLException: Invalid XML Document: External DTD: Failed to read external DTD 'personal.dtd'  because 'file' access is not allowed. at org.apache.derby.impl.jdbc.SQLExceptionFactory.getSQLException(SQLExceptionFactory.java:42) at org.apache.derby.impl.jdbc.SQLExceptionFactory40.wrapArgsForTransportAcrossDRDA(SQLExceptionFactory40.java:126) at org.apache.derby.impl.jdbc.SQLExceptionFactory40.getSQLException(SQLExceptionFactory40.java:71)Caused by: java.sql.SQLException: Java exception: 'External DTD: Failed to read external DTD 'personal.dtd'  because 'file' access is not allowed.: org.xml.sax.SAXException'. at org.apache.derby.impl.jdbc.SQLExceptionFactory.getSQLException(SQLExceptionFactory.java:42) at org.apache.derby.impl.jdbc.SQLExceptionFactory40.wrapArgsForTransportAcrossDRDA(SQLExceptionFactory40.java:126) at org.apache.derby.impl.jdbc.SQLExceptionFactory40.getSQLException(SQLExceptionFactory40.java:71) at org.apache.derby.impl.jdbc.Util.newEmbedSQLException(Util.java:148) at org.apache.derby.impl.jdbc.Util.javaException(Util.java:370) at org.apache.derby.impl.jdbc.TransactionResourceImpl.wrapInSQLException(TransactionResourceImpl.java:436) at org.apache.derby.impl.jdbc.TransactionResourceImpl.wrapInSQLException(TransactionResourceImpl.java:432)Caused by: org.xml.sax.SAXException: External DTD: Failed to read external DTD 'personal.dtd'  because 'file' access is not allowed.org.xml.sax.SAXParseException; lineNumber: 20; columnNumber: 119; External DTD: Failed to read external DTD 'personal.dtd'  because 'file' access is not allowed. at org.apache.derby.iapi.types.SqlXmlUtil$XMLErrorHandler.fatalError(SqlXmlUtil.java:767) at com.sun.org.apache.xerces.internal.util.ErrorHandlerWrapper.fatalError(ErrorHandlerWrapper.java:180) at com.sun.org.apache.xerces.internal.impl.XMLErrorReporter.reportError(XMLErrorReporter.java:441) at com.sun.org.apache.xerces.internal.impl.XMLErrorReporter.reportError(XMLErrorReporter.java:368) at com.sun.org.apache.xerces.internal.impl.XMLScanner.reportFatalError(XMLScanner.java:1388) at com.sun.org.apache.xerces.internal.impl.XMLDocumentScannerImpl$DTDDriver.dispatch(XMLDocumentScannerImpl.java:1158) at com.sun.org.apache.xerces.internal.impl.XMLDocumentScannerImpl$DTDDriver.next(XMLDocumentScannerImpl.java:1050) at com.sun.org.apache.xerces.internal.impl.XMLDocumentScannerImpl$PrologDriver.next(XMLDocumentScannerImpl.java:964) at com.sun.org.apache.xerces.internal.impl.XMLDocumentScannerImpl.next(XMLDocumentScannerImpl.java:606) at com.sun.org.apache.xerces.internal.impl.XMLNSDocumentScannerImpl.next(XMLNSDocumentScannerImpl.java:116) at com.sun.org.apache.xerces.internal.impl.XMLDocumentFragmentScannerImpl.scanDocument(XMLDocumentFragmentScannerImpl.java:509) at com.sun.org.apache.xerces.internal.parsers.XML11Configuration.parse(XML11Configuration.java:858) at com.sun.org.apache.xerces.internal.parsers.XML11Configuration.parse(XML11Configuration.java:787) at com.sun.org.apache.xerces.internal.parsers.XMLParser.parse(XMLParser.java:123) at com.sun.org.apache.xerces.internal.parsers.DOMParser.parse(DOMParser.java:237) at com.sun.org.apache.xerces.internal.jaxp.DocumentBuilderImpl.parse(DocumentBuilderImpl.java:329) at org.apache.derby.iapi.types.SqlXmlUtil$1.run(SqlXmlUtil.java:320) at org.apache.derby.iapi.types.SqlXmlUtil$1.run(SqlXmlUtil.java:317) at java.security.AccessController.doPrivileged(Native Method) at org.apache.derby.iapi.types.SqlXmlUtil.serializeToString(SqlXmlUtil.java:315) at org.apache.derby.iapi.types.XML.XMLParse(XML.java:632) at org.apache.derby.exe.acbfcc1aadx013exeff7x4f4fx000077cfc4780.e0(Unknown Source) at org.apache.derby.impl.services.reflect.DirectCall.invoke(ReflectGeneratedClass.java:101) at org.apache.derby.impl.sql.execute.RowResultSet.getNextRowCore(RowResultSet.java:148) at org.apache.derby.impl.sql.execute.NormalizeResultSet.getNextRowCore(NormalizeResultSet.java:185) at org.apache.derby.impl.sql.execute.DMLWriteResultSet.getNextRowCore(DMLWriteResultSet.java:128) at org.apache.derby.impl.sql.execute.InsertResultSet.open(InsertResultSet.java:520) at org.apache.derby.impl.sql.GenericPreparedStatement.executeStmt(GenericPreparedStatement.java:453) at org.apache.derby.impl.sql.GenericPreparedStatement.execute(GenericPreparedStatement.java:334) at org.apache.derby.impl.jdbc.EmbedStatement.executeStatement(EmbedStatement.java:1346)Caused by: org.xml.sax.SAXParseException; lineNumber: 20; columnNumber: 119; External DTD: Failed to read external DTD 'personal.dtd'  because 'file' access is not allowed. at com.sun.org.apache.xerces.internal.util.ErrorHandlerWrapper.createSAXParseException(ErrorHandlerWrapper.java:203) at com.sun.org.apache.xerces.internal.util.ErrorHandlerWrapper.fatalError(ErrorHandlerWrapper.java:177)",
            "id": "6233"
        },
        "6247": {
            "ground_truth": "0",
            "bug_report": "updatelocksJDBC30 test failing in nightly regression tests\nupdatelocksJDBC30 test failed intermittently in nightly regression tests  trunk  ibm16http://people.apache.org/~myrnavl/derby_test_results/main/windows/testlog/ibm16/1488447-derbyall_diff.txt                 Diff file derbyall/encryptionAll/storemats/storemats/updatelocksJDBC30.diff             Start: updatelocksJDBC30 jdk1.6.0 storemats:storemats 2013-05-31 19:48:20 ***15110d15109&lt; APP |UserTransaction|ROW |1 |U |A |(1 7) |GRANT|ACTIVE 15112a15112&gt; APP |UserTransaction|ROW |2 |U |A |(1 7) |GRANT|ACTIVE 15125d15124&lt; APP |UserTransaction|ROW |1 |U |A |(1 7) |GRANT|ACTIVE 15129a15129&gt; APP |UserTransaction|ROW |2 |U |A |(1 7) |GRANT|ACTIVE 15138d15137&lt; APP |UserTransaction|ROW |1 |U |A |(1 7) |GRANT|ACTIVE 15142a15142&gt; APP |UserTransaction|ROW |2 |U |A |(1 7) |GRANT|ACTIVE Test Failed. End: updatelocksJDBC30 jdk1.6.0 storemats:storemats 2013-05-31 19:48:32 ***",
            "id": "6247"
        },
        "6266": {
            "ground_truth": "0",
            "bug_report": "Add ability to print a Derby execution ResultSet as xml.\nAdd a method for printing an org.apache.derby.iapi.sql.ResultSet as xml. The idea is to get a quick snapshot of a plan shape without all of the overhead of PlanExporter and runtimestatistics. This method could be used by our tests to verify plan shapes.",
            "id": "6266"
        },
        "6267": {
            "ground_truth": "0",
            "bug_report": "Add ability to compactly specify a complete query plan in an optimizer override.\nIt would be nice to be able to override the optimizer's choice and specify a complete query plan using the compact summary syntax output by XMLOptTrace. Given how the optimizer handles a statement  this would require binding a query plan at the query block level. Two obvious candidates for such a feature are:1) Extend the use of DERBY-PROPERTIES in the comments of a query.2) Add an extra clause to query blocks. The clause would have to be a clearly marked Derby extension.(1) might look like this (here we add a new 'fullQueryPlan' property):select tablename from sys.systables t  sys.syscolumns c  sys.sysaliases awhere t.tablename = c.columnname and c.columnname = a.alias&#8211; DERBY-PROPERTIES fullQueryPlan = (SYSCOLUMNS_HEAP # SYSALIASES_INDEX1) # SYSTABLES_INDEX1union allselect tablename from sys.systables t  sys.syscolumns c  sys.sysaliases a  sys.syssequences swhere t.tablename = c.columnname and c.columnname = a.alias and a.alias = s.sequencename&#8211; DERBY-PROPERTIES fullQueryPlan = ((SYSCOLUMNS_HEAP # SYSTABLES_INDEX1) # SYSALIASES_INDEX1) # SYSSEQUENCES_INDEX2;(2) might look like this (here we add a new 'using derby join order' clause):select tablename from sys.systables t  sys.syscolumns c  sys.sysaliases awhere t.tablename = c.columnname and c.columnname = a.aliasusing derby join order (SYSCOLUMNS_HEAP # SYSALIASES_INDEX1) # SYSTABLES_INDEX1union allselect tablename from sys.systables t  sys.syscolumns c  sys.sysaliases a  sys.syssequences swhere t.tablename = c.columnname and c.columnname = a.alias and a.alias = s.sequencenameusing derby join order ((SYSCOLUMNS_HEAP # SYSTABLES_INDEX1) # SYSALIASES_INDEX1) # SYSSEQUENCES_INDEX2;Here's a comparison of these approaches:(1)+ Portability: the same query text can be used against different RDBMSes. Parsing of DERBY-PROPERTIES happens outside the grammer.(2)+ Parsing happens in the parser. Not portable.I slightly prefer approach (1). If I pursue that approach  I would like to see if I can move the parsing into the parser.I am interested in other opinions about how to address this feature. Thanks.",
            "id": "6267"
        },
        "6273": {
            "ground_truth": "1",
            "bug_report": "NullPointerException when using more than one parameter in COALESCE\nCalls to COALESCE fail with NullPointerExceptions if there are multiple ? parameters:ij version 10.10ij&gt; connect 'jdbc:derby:memory:db;create=true';ij&gt; prepare ps as 'values coalesce(? ? 1)';ERROR XJ001: Java exception: ': java.lang.NullPointerException'. (errorCode = 0)java.lang.NullPointerException at org.apache.derby.impl.sql.compile.ParameterNode.generateExpression(Unknown Source) at org.apache.derby.impl.sql.compile.CoalesceFunctionNode.generateExpression(Unknown Source) at org.apache.derby.impl.sql.compile.ResultColumn.generateExpression(Unknown Source) at org.apache.derby.impl.sql.compile.ResultColumnList.generateCore(Unknown Source) at org.apache.derby.impl.sql.compile.ResultColumnList.generate(Unknown Source) at org.apache.derby.impl.sql.compile.RowResultSetNode.generate(Unknown Source) at org.apache.derby.impl.sql.compile.ScrollInsensitiveResultSetNode.generate(Unknown Source) at org.apache.derby.impl.sql.compile.CursorNode.generate(Unknown Source) at org.apache.derby.impl.sql.compile.StatementNode.generate(Unknown Source) at org.apache.derby.impl.sql.GenericStatement.prepMinion(Unknown Source) at org.apache.derby.impl.sql.GenericStatement.prepare(Unknown Source) at org.apache.derby.impl.sql.conn.GenericLanguageConnectionContext.prepareInternalStatement(Unknown Source) at org.apache.derby.impl.jdbc.EmbedPreparedStatement.&lt;init&gt;(Unknown Source) at org.apache.derby.impl.jdbc.EmbedPreparedStatement20.&lt;init&gt;(Unknown Source) at org.apache.derby.impl.jdbc.EmbedPreparedStatement30.&lt;init&gt;(Unknown Source) at org.apache.derby.impl.jdbc.EmbedPreparedStatement40.&lt;init&gt;(Unknown Source) at org.apache.derby.jdbc.Driver40.newEmbedPreparedStatement(Unknown Source) at org.apache.derby.impl.jdbc.EmbedConnection.prepareStatement(Unknown Source) at org.apache.derby.impl.jdbc.EmbedConnection.prepareStatement(Unknown Source) at org.apache.derby.impl.tools.ij.ij.PrepareStatement(Unknown Source) at org.apache.derby.impl.tools.ij.ij.ijStatement(Unknown Source) at org.apache.derby.impl.tools.ij.utilMain.runScriptGuts(Unknown Source) at org.apache.derby.impl.tools.ij.utilMain.go(Unknown Source) at org.apache.derby.impl.tools.ij.Main.go(Unknown Source) at org.apache.derby.impl.tools.ij.Main.mainCore(Unknown Source) at org.apache.derby.impl.tools.ij.Main.main(Unknown Source) at org.apache.derby.tools.ij.main(Unknown Source)",
            "id": "6273"
        },
        "6292": {
            "ground_truth": "0",
            "bug_report": "Use Arrays.copyOf() in FormatableArrayHolder.getArray()\nFormatableArrayHolder.getArray() creates an array of the correct type using reflection and copies it manually. Java 6 introduced a copyOf() method in java.util.Arrays that could do all of this automatically. Now that Java 6 is the minimum level on trunk  we could take advantage of the library method and simplify the code.",
            "id": "6292"
        },
        "6295": {
            "ground_truth": "0",
            "bug_report": "Allow tests to show detailed error when spawning new process fails\nIn recent versions of Java  Runtime.exec() will hide the underlying exception unless the code base is granted read permission on the executable file.Example:These two failures probably have the same cause:http://download.java.net/javadesktop/derby/javadb-5579292-report/javadb-task-3689381.htmlhttp://download.java.net/javadesktop/derby/javadb-5579170-report/javadb-task-3688261.htmlThe former  running on an older JVM  shows the real cause:java.io.IOException: Cannot run program '/localhome/tendril4.2/work/install/sun-jdk-7u10-fcs-bin-b31/jdk7_10/jdk1.7.0_10/jre/bin/java': error=12  Not enough spaceCaused by: java.io.IOException: error=12  Not enough spaceThe latter  running on a more recent JVM  hides the real failure behind an AccessControlException:java.io.IOException: Cannot run program '/localhome/tendril4.2/work/install/sun-jdk-8-ea-bin-b93/jdk8/jdk1.8.0/jre/bin/java'Caused by: java.security.AccessControlException: access denied ('java.io.FilePermission' '/localhome/tendril4.2/work/install/sun-jdk-8-ea-bin-b93/jdk8/jdk1.8.0/jre/bin/java' 'read')We should consider changing the following grant in derby_tests.policy to include 'read' in order to make it easier to see why a test is failing: // Tests need to be able to exec a java program. permission java.io.FilePermission '${java.home}${/}-'  'execute';",
            "id": "6295"
        },
        "6296": {
            "ground_truth": "0",
            "bug_report": "Simplify PropertyUtil using Properties.stringPropertyNames()\nPropertyUtil should use Properties.stringPropertyNames() (new method in Java 6) instead of Properties.propertyNames() since a Set&lt;String&gt; view of the property names is easier to work with than an Enumeration&lt;?&gt;. The Set&lt;String&gt; view can be used with for-each loops and many of the helper methods in the standard library.",
            "id": "6296"
        },
        "6297": {
            "ground_truth": "0",
            "bug_report": "Intermittent failures in XplainStatisticsTest.testSimpleXplainOnly\nXplainStatisticsTest.testSimpleXplainOnly fails intermittently.Examples:http://download.java.net/javadesktop/derby/javadb-5579342-report/javadb-task-3689858.html junit.framework.AssertionFailedError: Column value mismatch @ column '1'  row 1: Expected: &gt;1&lt; Found: &gt;2&lt; at org.apache.derbyTesting.junit.JDBC.assertRowInResultSet(JDBC.java:1278) at org.apache.derbyTesting.junit.JDBC.assertRowInResultSet(JDBC.java:1190) at org.apache.derbyTesting.junit.JDBC.assertFullResultSetMinion(JDBC.java:1077) at org.apache.derbyTesting.junit.JDBC.assertFullResultSet(JDBC.java:1000) at org.apache.derbyTesting.junit.JDBC.assertFullResultSet(JDBC.java:957) at org.apache.derbyTesting.junit.JDBC.assertFullResultSet(JDBC.java:915) at org.apache.derbyTesting.junit.JDBC.assertSingleValueResultSet(JDBC.java:900) at org.apache.derbyTesting.functionTests.tests.lang.XplainStatisticsTest.testSimpleXplainOnly(XplainStatisticsTest.java:1148) at org.apache.derbyTesting.junit.BaseTestCase.runBare(BaseTestCase.java:117) at org.apache.derbyTesting.junit.BaseJDBCTestCase.runBareOverridable(BaseJDBCTestCase.java:439) at org.apache.derbyTesting.junit.BaseJDBCTestCase.runBare(BaseJDBCTestCase.java:456) at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24) at junit.extensions.TestSetup$1.protect(TestSetup.java:21) at junit.extensions.TestSetup.run(TestSetup.java:25) at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24) at junit.extensions.TestSetup$1.protect(TestSetup.java:21) at junit.extensions.TestSetup.run(TestSetup.java:25) at org.apache.derbyTesting.junit.BaseTestSetup.run(BaseTestSetup.java:57)http://download.java.net/javadesktop/derby/javadb-5579365-report/javadb-task-3690182.html junit.framework.AssertionFailedError: Column value mismatch @ column '1'  row 1: Expected: &gt;4&lt; Found: &gt;7&lt; at org.apache.derbyTesting.junit.JDBC.assertRowInResultSet(JDBC.java:1278) at org.apache.derbyTesting.junit.JDBC.assertRowInResultSet(JDBC.java:1190) at org.apache.derbyTesting.junit.JDBC.assertFullResultSetMinion(JDBC.java:1077) at org.apache.derbyTesting.junit.JDBC.assertFullResultSet(JDBC.java:1000) at org.apache.derbyTesting.junit.JDBC.assertFullResultSet(JDBC.java:957) at org.apache.derbyTesting.junit.JDBC.assertFullResultSet(JDBC.java:915) at org.apache.derbyTesting.junit.JDBC.assertSingleValueResultSet(JDBC.java:900) at org.apache.derbyTesting.functionTests.tests.lang.XplainStatisticsTest.testSimpleXplainOnly(XplainStatisticsTest.java:1183) at org.apache.derbyTesting.junit.BaseTestCase.runBare(BaseTestCase.java:117) at org.apache.derbyTesting.junit.BaseJDBCTestCase.runBareOverridable(BaseJDBCTestCase.java:439) at org.apache.derbyTesting.junit.BaseJDBCTestCase.runBare(BaseJDBCTestCase.java:456) at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24) at junit.extensions.TestSetup$1.protect(TestSetup.java:21) at junit.extensions.TestSetup.run(TestSetup.java:25) at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24) at junit.extensions.TestSetup$1.protect(TestSetup.java:21) at junit.extensions.TestSetup.run(TestSetup.java:25) at org.apache.derbyTesting.junit.BaseTestSetup.run(BaseTestSetup.java:57)",
            "id": "6297"
        },
        "6306": {
            "ground_truth": "0",
            "bug_report": "XplainStatisticsTest.testSimpleQuery: BEGIN_COMP_TIME unexpectedly NULL\nSeen on two platforms in nightly testing of trunk revision 1506904:http://download.java.net/javadesktop/derby/request_5579443/javadb-task-3691350.htmlhttp://download.java.net/javadesktop/derby/request_5579443/javadb-task-3691354.htmljunit.framework.AssertionFailedError: BEGIN_COMP_TIME unexpectedly NULL at org.apache.derbyTesting.functionTests.tests.lang.XplainStatisticsTest.getNonNullTimestamp(XplainStatisticsTest.java:1538) at org.apache.derbyTesting.functionTests.tests.lang.XplainStatisticsTest.verifySensibleStatementTimings(XplainStatisticsTest.java:1417) at org.apache.derbyTesting.functionTests.tests.lang.XplainStatisticsTest.testSimpleQuery(XplainStatisticsTest.java:1038) at org.apache.derbyTesting.junit.BaseTestCase.runBare(BaseTestCase.java:117) at org.apache.derbyTesting.junit.BaseJDBCTestCase.runBareOverridable(BaseJDBCTestCase.java:439) at org.apache.derbyTesting.junit.BaseJDBCTestCase.runBare(BaseJDBCTestCase.java:456) at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24) at junit.extensions.TestSetup$1.protect(TestSetup.java:21) at junit.extensions.TestSetup.run(TestSetup.java:25) at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24) at junit.extensions.TestSetup$1.protect(TestSetup.java:21) at junit.extensions.TestSetup.run(TestSetup.java:25) at org.apache.derbyTesting.junit.BaseTestSetup.run(BaseTestSetup.java:57)",
            "id": "6306"
        },
        "6320": {
            "ground_truth": "0",
            "bug_report": "Log a page dump to derby.log if ERROR nospc: nospc.U  is returned to the user\nERROR nospc: nospc.U should only be an internal error that is caught and handled. If returned to the user  it is likely a bug. It would be useful if this occurs to have a page dump printed to derby.log. Care should be taken to only do this if the error is returned to the user and not for the internal variety.",
            "id": "6320"
        },
        "6323": {
            "ground_truth": "0",
            "bug_report": "Fix incorrect @throws and @exception tags in javadoc\nMany javadoc comments have @throws or @exception tags that either misspell the name of the exception class or name an exception that is not actually thrown from the method. We should fix those references.",
            "id": "6323"
        },
        "6324": {
            "ground_truth": "0",
            "bug_report": "DatabaseMetaData.getJDBCMinorVersion() should return 2 now that we've implemented JDBC 4.2\nNow that the work on DERBY-6000 is done  DatabaseMetaData.getJDBCMinorVersion() should return 2 rather than 1. The following script shows that we're still returning 1:connect 'jdbc:derby:memory:db;create=true';call syscs_util.syscs_register_tool( 'databaseMetaData'  true );values getJDBCMajorVersion();values getJDBCMinorVersion();call syscs_util.syscs_register_tool( 'databaseMetaData'  false );",
            "id": "6324"
        },
        "6330": {
            "ground_truth": "0",
            "bug_report": "Simplify StringBuffer use  as they are mutable\ncode cleanup where code reasssigns StringBuffers for no reason. remove for easier code reading.",
            "id": "6330"
        },
        "6338": {
            "ground_truth": "0",
            "bug_report": "Remove Profile attribute from jar file manifests\nDERBY-5955 added a Profile attribute to the jar file manifests. Starting with JDK 8 b105  the attribute has no effect and can be removed.See here: http://bugs.sun.com/bugdatabase/view_bug.do?bug_id=8022921",
            "id": "6338"
        },
        "6342": {
            "ground_truth": "0",
            "bug_report": "failure in testConstraintDrops(org.apache.derbyTesting.functionTests.lang.ConglomerateSharingTest)junit.framework.AssertionFailedError: Error 23505 should have been caused by index/constraint...\nDon't think this failure has been reported before.The url for failure is http://people.apache.org/~myrnavl/derby_test_results/v10_10/windows/testlog/weme6.2/1520721-suites.All_diff.txt1) testConstraintDrops(org.apache.derbyTesting.functionTests.tests.lang.ConglomerateSharingTest)junit.framework.AssertionFailedError: Error 23505 should have been caused by index/constraint 'DROPC_UIX2' but 'DROPC_UIX2' did not appear in the following error message: 'The statement was aborted because it would have caused a duplicate key value in a unique or primary key constraint or unique index identified by 'DROPC_UC1' defined on 'DROPC_T2'.' at org.apache.derbyTesting.functionTests.tests.lang.ConglomerateSharingTest.checkStatementError(ConglomerateSharingTest.java:762) at org.apache.derbyTesting.functionTests.tests.lang.ConglomerateSharingTest.testConstraintDrops(ConglomerateSharingTest.java:272) at java.lang.reflect.AccessibleObject.invokeV(AccessibleObject.java:195) at org.apache.derbyTesting.junit.BaseTestCase.runBare(BaseTestCase.java:117) at org.apache.derbyTesting.junit.BaseJDBCTestCase.runBareOverridable(BaseJDBCTestCase.java:442) at org.apache.derbyTesting.junit.BaseJDBCTestCase.runBare(BaseJDBCTestCase.java:459) at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24) at junit.extensions.TestSetup$1.protect(TestSetup.java:21) at junit.extensions.TestSetup.run(TestSetup.java:25) at org.apache.derbyTesting.junit.BaseTestSetup.run(BaseTestSetup.java:57)",
            "id": "6342"
        },
        "6356": {
            "ground_truth": "1",
            "bug_report": "java.security.AccessControlException in i18n.LocalizedDisplayScriptTest\nSeeing more test failures because of an intentional security change in TimeZone.setDefault(). Therefore need to wrap Timezone.setDefault in a priv block in the test. 5) LocalizedDisplay(org.apache.derbyTesting.functionTests.tests.i18n.LocalizedDisplayScriptTest)java.security.AccessControlException: Access denied ('java.util.PropertyPermission' 'user.timezone' 'write') at java.security.AccessController.throwACE(AccessController.java:100) at java.security.AccessController.checkPermission(AccessController.java:174) at java.lang.SecurityManager.checkPermission(SecurityManager.java:549) at java.util.TimeZone.hasPermission(TimeZone.java:756) at java.util.TimeZone.setDefault(TimeZone.java:778) at org.apache.derbyTesting.functionTests.tests.i18n.LocalizedDisplayScriptTest.setUp(LocalizedDisplayScriptTest.java:140) at org.apache.derbyTesting.junit.BaseTestCase.runBare(BaseTestCase.java:117) at org.apache.derbyTesting.junit.BaseJDBCTestCase.runBareOverridable(BaseJDBCTestCase.java:439) at org.apache.derbyTesting.junit.BaseJDBCTestCase.runBare(BaseJDBCTestCase.java:456) at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24) at junit.extensions.TestSetup$1.protect(TestSetup.java:21) at junit.extensions.TestSetup.run(TestSetup.java:25) at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24) at junit.extensions.TestSetup$1.protect(TestSetup.java:21) at junit.extensions.TestSetup.run(TestSetup.java:25) at org.apache.derbyTesting.junit.BaseTestSetup.run(BaseTestSetup.java:57) at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24) at junit.extensions.TestSetup$1.protect(TestSetup.java:21) at junit.extensions.TestSetup.run(TestSetup.java:25)and:6) LocalizedDisplay(org.apache.derbyTesting.functionTests.tests.i18n.LocalizedDisplayScriptTest)java.security.AccessControlException: Access denied ('java.util.PropertyPermission' 'user.timezone' 'write') at java.security.AccessController.throwACE(AccessController.java:100) at java.security.AccessController.checkPermission(AccessController.java:174) at java.lang.SecurityManager.checkPermission(SecurityManager.java:549) at java.util.TimeZone.hasPermission(TimeZone.java:756) at java.util.TimeZone.setDefault(TimeZone.java:778) at org.apache.derbyTesting.functionTests.tests.i18n.LocalizedDisplayScriptTest.setUp(LocalizedDisplayScriptTest.java:140) at org.apache.derbyTesting.junit.BaseTestCase.runBare(BaseTestCase.java:117) at org.apache.derbyTesting.junit.BaseJDBCTestCase.runBareOverridable(BaseJDBCTestCase.java:439) at org.apache.derbyTesting.junit.BaseJDBCTestCase.runBare(BaseJDBCTestCase.java:456) at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24) at junit.extensions.TestSetup$1.protect(TestSetup.java:21) at junit.extensions.TestSetup.run(TestSetup.java:25) at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24) at junit.extensions.TestSetup$1.protect(TestSetup.java:21) at junit.extensions.TestSetup.run(TestSetup.java:25) at org.apache.derbyTesting.junit.BaseTestSetup.run(BaseTestSetup.java:57) at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24) at junit.extensions.TestSetup$1.protect(TestSetup.java:21) at junit.extensions.TestSetup.run(TestSetup.java:25) at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24) at junit.extensions.TestSetup$1.protect(TestSetup.java:21) at junit.extensions.TestSetup.run(TestSetup.java:25) at org.apache.derbyTesting.junit.BaseTestSetup.run(BaseTestSetup.java:57) at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24) at junit.extensions.TestSetup$1.protect(TestSetup.java:21) at junit.extensions.TestSetup.run(TestSetup.java:25)",
            "id": "6356"
        },
        "6357": {
            "ground_truth": "0",
            "bug_report": "CREATE TRIGGER doesn't detect all illegal references to SESSION schema\nThe reference manual's section on the DECLARE GLOBAL TEMPORARY TABLE statement says: Temporary tables cannot be referenced in a triggered-SQL-statementIt detects most cases and reports:ERROR XCL51: The requested function can not reference tables in SESSION schema.However  some references are not detected if they are in a subquery. For example:ij version 10.10ij&gt; connect 'jdbc:derby:memory:db;create=true';ij&gt; declare global temporary table temptable(x int) not logged;0 rows inserted/updated/deletedij&gt; create table t1(x int);0 rows inserted/updated/deletedij&gt; create table t2(b boolean);0 rows inserted/updated/deletedij&gt; create trigger tr1 after insert on t1 insert into t2 values exists(select * from session.temptable);0 rows inserted/updated/deletedThis CREATE TRIGGER statement should have raised an error.",
            "id": "6357"
        },
        "6386": {
            "ground_truth": "1",
            "bug_report": "Errors in jdbc4.LobStreamTest if derbyclient.jar is first in the classpath\nI see the following errors in jdbc4.LobStreamTest if derbyclient.jar is before derby.jar on trunk 10.11 Rev: 1533320There were 2 errors:1) testWriteWithInvalidParameterValues(org.apache.derbyTesting.functionTests.tests.jdbc4.LobStreamTest)java.lang.NoClassDefFoundError: org/apache/derby/iapi/error/ExceptionUtil at org.apache.derby.impl.jdbc.LOBStreamControl.write(LOBStreamControl.java:237) at org.apache.derby.impl.jdbc.LOBOutputStream.write(LOBOutputStream.java:108) at org.apache.derbyTesting.functionTests.tests.jdbc4.LobStreamTest.testWriteWithInvalidParameterValues(LobStreamTest.java:302) at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:60) at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:37) at org.apache.derbyTesting.junit.BaseTestCase.runBare(BaseTestCase.java:117) at org.apache.derbyTesting.junit.BaseJDBCTestCase.runBareOverridable(BaseJDBCTestCase.java:439) at org.apache.derbyTesting.junit.BaseJDBCTestCase.runBare(BaseJDBCTestCase.java:456) at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24) at junit.extensions.TestSetup$1.protect(TestSetup.java:21) at junit.extensions.TestSetup.run(TestSetup.java:25) at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24) at junit.extensions.TestSetup$1.protect(TestSetup.java:21) at junit.extensions.TestSetup.run(TestSetup.java:25) at org.apache.derbyTesting.junit.BaseTestSetup.run(BaseTestSetup.java:57) at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24) at junit.extensions.TestSetup$1.protect(TestSetup.java:21) at junit.extensions.TestSetup.run(TestSetup.java:25)2) testReadWithInvalidParameterValues(org.apache.derbyTesting.functionTests.tests.jdbc4.LobStreamTest)java.lang.NoClassDefFoundError: org/apache/derby/iapi/error/ExceptionUtil at org.apache.derby.impl.jdbc.LOBInputStream.read(LOBInputStream.java:133) at org.apache.derbyTesting.functionTests.tests.jdbc4.LobStreamTest.testReadWithInvalidParameterValues(LobStreamTest.java:384) at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:60) at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:37) at org.apache.derbyTesting.junit.BaseTestCase.runBare(BaseTestCase.java:117) at org.apache.derbyTesting.junit.BaseJDBCTestCase.runBareOverridable(BaseJDBCTestCase.java:439) at org.apache.derbyTesting.junit.BaseJDBCTestCase.runBare(BaseJDBCTestCase.java:456) at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24) at junit.extensions.TestSetup$1.protect(TestSetup.java:21) at junit.extensions.TestSetup.run(TestSetup.java:25) at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24) at junit.extensions.TestSetup$1.protect(TestSetup.java:21) at junit.extensions.TestSetup.run(TestSetup.java:25) at org.apache.derbyTesting.junit.BaseTestSetup.run(BaseTestSetup.java:57) at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24) at junit.extensions.TestSetup$1.protect(TestSetup.java:21) at junit.extensions.TestSetup.run(TestSetup.java:25)There were 2 failures:1) testWriteWithInvalidParameterValues(org.apache.derbyTesting.functionTests.tests.jdbc4.LobStreamTest)junit.framework.AssertionFailedError: Expected IndexOutOfBoundException at org.apache.derbyTesting.functionTests.tests.jdbc4.LobStreamTest.testWriteWithInvalidParameterValues(LobStreamTest.java:305) at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:60) at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:37) at org.apache.derbyTesting.junit.BaseTestCase.runBare(BaseTestCase.java:117) at org.apache.derbyTesting.junit.BaseJDBCTestCase.runBareOverridable(BaseJDBCTestCase.java:439) at org.apache.derbyTesting.junit.BaseJDBCTestCase.runBare(BaseJDBCTestCase.java:456)2) testReadWithInvalidParameterValues(org.apache.derbyTesting.functionTests.tests.jdbc4.LobStreamTest)junit.framework.AssertionFailedError: Expected IndexOutOfBoundException at org.apache.derbyTesting.functionTests.tests.jdbc4.LobStreamTest.testReadWithInvalidParameterValues(LobStreamTest.java:387) at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:60) at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:37) at org.apache.derbyTesting.junit.BaseTestCase.runBare(BaseTestCase.java:117) at org.apache.derbyTesting.junit.BaseJDBCTestCase.runBareOverridable(BaseJDBCTestCase.java:439) at org.apache.derbyTesting.junit.BaseJDBCTestCase.runBare(BaseJDBCTestCase.java:456)I notice derbyclient.jar contains Mon Oct 21 13:30:14 PDT 2013 org/apache/derby/iapi/error/ExceptionUtil$1.classMon Oct 21 13:30:14 PDT 2013 org/apache/derby/iapi/error/ExceptionUtil.classwhich I think is only supposed to be in derby.jar",
            "id": "6386"
        },
        "6396": {
            "ground_truth": "1",
            "bug_report": "NullPointerException in DirFile\nWe got a NullPointerException trying to start a Derby database in embedded mode; the stacktrace indicated it happened in org.apache.derby.impl.io.DirFile.deleteAll(); that method got called from org.apache.derby.impl.io.BaseStorageFactory.createTempDir().After investigating  it appears that the deleteAll() method calls 'super.list()'  which according to the java.io.File specifications  can return null. But the deleteAll() method doesn't handle that case gracefully.",
            "id": "6396"
        },
        "6410": {
            "ground_truth": "0",
            "bug_report": "ClassCastException when launching derby from windows subst drive\nWhen launching derby bundled with glassfish4 on a substed drive derby fails to startup and logs the following into the derby.log:Fri Nov 08 10:30:34 CET 2013 : Sicherheitsmanager mit einfacher Server-Sicherheitsrichtlinie installiert.java.lang.reflect.InvocationTargetException at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source) at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source) at java.lang.reflect.Method.invoke(Unknown Source) at com.sun.enterprise.admin.cli.optional.DerbyControl.invokeNetworkServerControl(DerbyControl.java:158) at com.sun.enterprise.admin.cli.optional.DerbyControl.main(DerbyControl.java:245)Caused by: java.lang.ExceptionInInitializerError at java.lang.Class.forName0(Native Method) at java.lang.Class.forName(Unknown Source) at org.apache.derby.impl.drda.NetworkServerControlImpl.startNetworkServer(Unknown Source) at org.apache.derby.impl.drda.NetworkServerControlImpl.blockingStart(Unknown Source) at org.apache.derby.impl.drda.NetworkServerControlImpl.executeWork(Unknown Source) at org.apache.derby.drda.NetworkServerControl.main(Unknown Source) ... 6 moreCaused by: java.lang.ClassCastException: java.nio.file.FileSystemException cannot be cast to java.lang.RuntimeException at org.apache.derby.iapi.services.io.FileUtil.limitAccessToOwnerViaACLs(Unknown Source) at org.apache.derby.iapi.services.io.FileUtil.limitAccessToOwner(Unknown Source) at org.apache.derby.impl.services.stream.SingleStream.PBmakeFileHPW(Unknown Source) at org.apache.derby.impl.services.stream.SingleStream.run(Unknown Source) at java.security.AccessController.doPrivileged(Native Method) at org.apache.derby.impl.services.stream.SingleStream.makeFileHPW(Unknown Source) at org.apache.derby.impl.services.stream.SingleStream.createDefaultStream(Unknown Source) at org.apache.derby.impl.services.stream.SingleStream.makeStream(Unknown Source) at org.apache.derby.impl.services.stream.SingleStream.boot(Unknown Source) at org.apache.derby.impl.services.monitor.BaseMonitor.boot(Unknown Source) at org.apache.derby.impl.services.monitor.TopService.bootModule(Unknown Source) at org.apache.derby.impl.services.monitor.BaseMonitor.startModule(Unknown Source) at org.apache.derby.iapi.services.monitor.Monitor.startSystemModule(Unknown Source) at org.apache.derby.impl.services.monitor.BaseMonitor.runWithState(Unknown Source) at org.apache.derby.impl.services.monitor.FileMonitor.&lt;init&gt;(Unknown Source) at org.apache.derby.iapi.services.monitor.Monitor.startMonitor(Unknown Source) at org.apache.derby.iapi.jdbc.JDBCBoot.boot(Unknown Source) at org.apache.derby.jdbc.EmbeddedDriver.boot(Unknown Source) at org.apache.derby.jdbc.EmbeddedDriver.&lt;clinit&gt;(Unknown Source) ... 12 moreDerby was started via the glassfish command:$ asadmin start-databaseThe asadmin command only fails if it is launched from a substed windows drive. The substed drive was created with the following command:$ subst d: c:/dWhen derby is started from drive 'C' everything is fine.",
            "id": "6410"
        },
        "6411": {
            "ground_truth": "1",
            "bug_report": "Minimal select privilege should be checked in subqueries\nDERBY-4191 added checks for minimal select privilege in cases where a SELECT query didn't access any actual column in the base table  such as SELECT COUNT FROM USER1.T and SELECT 1 FROM USER1.T. That privilege checking is only done for top-level SELECT statements. It should also be done for subqueries.Examples of queries where Derby does not currently check for minimal select privileges on the accessed tables (performed as USER2  which has no privileges on any of USER1's tables):SELECT * FROM (SELECT COUNT FROM USER1.T) SSELECT 1 FROM USER1.T UNION SELECT 2 FROM USER1.TINSERT INTO USER2.T SELECT 1 FROM USER1.TI believe that the above statements should have failed  but currently they succeed.",
            "id": "6411"
        },
        "6414": {
            "ground_truth": "0",
            "bug_report": "Incorrect handling when using an UPDATE to SET an identity column to DEFAULT\nDerby violates the SQL Standard when an UPDATE statement SETs an identity column to the value DEFAULT. Derby does the right thing for INSERTs  however.For INSERTs  the 2011 Standard defines the meaning of DEFAULT in part 2  section 15.10 (Effect of inserting tables into base tables)  general rule 2. For INSERTs  the DEFAULT value is the next value of the sequence generator which defines the identity column.For UPDATEs  the 2011 Standard defines the meaning of DEFAULT in part 2  section 15.13 (Effect of replacing rows in base tables)  general rule 5. For UPDATEs  the DEFAULT value is also the next value of the sequence generator which defines the identity column.Note also that the 2011 Standard says that a GENERATED ALWAYS identity column can be SET to DEFAULT. Furthermore  that is the only explicit value accepted. See the 2011 Standard  part 2  section 14.15 (set clause list)  syntax rule 5:{'If &lt;set clause&gt; SC specifies an &lt;object column&gt; that references a column of which some underlying column is either a generated column or an identity column whose descriptor indicates that values are always generated  then the &lt;update source&gt; specified in SC shall consist of a &lt;default specification&gt;.'}What Derby actually does for UPDATEs is the following:1) If the column was declared GENERATED ALWAYS  then Derby raises a compile-time error saying that the value of an identity column can't be overridden.2) If the column was declared GENERATED BY DEFAULT  then Derby raises an execution time-error when trying to stuff a null into the column.Correcting this bug would result in backwardly incompatible behavior. However  I think that the incompatibility is minor: it would mean the successful run of statements which previously raised errors.I tripped across this problem while implementing the UPDATE action of the MERGE statement (DERBY-3155). If we decide to fix this bug  we will want to make sure that the UPDATE actions of MERGE statements also correctly handle DEFAULT values for identity columns.The following script shows this problem:connect 'jdbc:derby:memory:db;create=true';create table t1( a int generated always as identity  b int );create table t2( a int generated by default as identity  b int );insert into t1( a  b ) values ( default  100 );insert into t2( a  b ) values ( default  100 );update t1 set a = default;update t2 set a = default;select * from t1;select * from t2;",
            "id": "6414"
        },
        "6434": {
            "ground_truth": "1",
            "bug_report": "Incorrect privileges may be required for INSERT and DELETE statements.\nThis issue is a place to address problems with INSERT and DELETE statements similar to the problems affecting UPDATE statements recorded on DERBY-6429. In particular  DERBY-6432 and DERBY-6433 list some of the problems with INSERT statements.",
            "id": "6434"
        },
        "6440": {
            "ground_truth": "1",
            "bug_report": "Connections opened by ForeignTableVTI never get released\nI noticed during a run of suites.All that one database instance never got garbage collected  even after it had been shut down. It turned out it could not get garbage collected because it was still referenced from the static HashMap _connections in ForeignTableVTI. Looking closer at ForeignTableVTI  it looks as if it only calls put() and get() on the HashMap  never remove()  so its memory footprint will keep increasing as it is used.It would be good to have some way (preferably automatic) of releasing the resources held by ForeignTableVTI when they are no longer needed.",
            "id": "6440"
        },
        "6443": {
            "ground_truth": "1",
            "bug_report": "ArrayIndexOutOfBoundsException when calling function from trigger\nI'm having problems will calling functions from within a trigger.The problem seems to be with the outer function call (FLOOR() in this case  but it also happens with other functions). It works fine in the SELECT statement  but when used in the trigger it throws a ArrayIndexOutOfBoundsException.Remove the FLOOR() part from the trigger and it works fine.-- create source table and some dataCREATE TABLE foo (name VARCHAR(20)  val DOUBLE);INSERT INTO foo (name  val) VALUES ('A'  10)  ('A'  20)  ('B'  30)  ('C'  40);-- calling the function works fine hereSELECT name  FLOOR(AVG(LOG10(val)))  COUNT(*)FROM fooGROUP BY name;-- create target table for triggerCREATE TABLE summary (name VARCHAR(20)  aver DOUBLE  size INT);-- create the triggerCREATE TRIGGER trg_foo AFTER INSERT ON fooREFERENCING NEW TABLE AS changed FOR EACH STATEMENT MODE DB2SQLINSERT INTO summary (name  aver  size)SELECT name  FLOOR(AVG(LOG10(val)))  COUNT(*)FROM changedGROUP BY name;-- insert rows to cause trigger to fireINSERT INTO foo (name  val) VALUES ('A'  10)  ('A'  20)  ('B'  30)  ('C'  40);SELECT * FROM foo;SELECT * FROM summary;",
            "id": "6443"
        },
        "6455": {
            "ground_truth": "0",
            "bug_report": "Infinite loop in NetworkServerControlImpl.ensureDataInBuffer\nNetworkServerControlImpl.ensureDataInBuffer missing check for return -1 (EOF) from 'clientIs.read'. When read returns -1 thread consumes 100% CPU. Method NetworkServerControlImpl.fillReplyBuffer correctly throw exception.Fix: add two lines: private void ensureDataInBuffer(int minimumBytesNeeded) throws Exception { // make sure the buffer is large enough while ((replyBufferCount - replyBufferPos) &lt; minimumBytesNeeded) { try { int bytesRead = clientIs.read(replyBuffer  replyBufferCount  replyBuffer.length - replyBufferCount);+ if (bytesRead == -1)+ consolePropertyMessage('DRDA_InvalidReplyTooShort.S'  true); replyBufferCount += bytesRead; } catch (IOException e) { clientSocketError(e); } } }StackTrace: java.lang.Thread.State: RUNNABLE at java.net.SocketInputStream.read(Unknown Source:-1) at org.apache.derby.impl.drda.NetworkServerControlImpl.ensureDataInBuffer(Unknown Source:-1) at org.apache.derby.impl.drda.NetworkServerControlImpl.readLDString(Unknown Source:-1) at org.apache.derby.impl.drda.NetworkServerControlImpl.readStringReply(Unknown Source:-1) at org.apache.derby.impl.drda.NetworkServerControlImpl.runtimeInfo(Unknown Source:-1) at org.apache.derby.drda.NetworkServerControl.getRuntimeInfo(Unknown Source:-1) at com.crcdata.dbadmin.server.DerbyEngine.getRuntimeInfo(DerbyEngine.java:134) at com.crcdata.dbadmin.server.DerbyEngine$DerbyServerMonitorTask.run(DerbyEngine.java:305) at java.util.concurrent.Executors$RunnableAdapter.call(Unknown Source:-1) at java.util.concurrent.FutureTask$Sync.innerRun(Unknown Source:-1) at java.util.concurrent.FutureTask.run(Unknown Source:-1) at java.util.concurrent.ThreadPoolExecutor.runWorker(Unknown Source:-1) at java.util.concurrent.ThreadPoolExecutor$Worker.run(Unknown Source:-1) at java.lang.Thread.run(Unknown Source:-1)",
            "id": "6455"
        },
        "6457": {
            "ground_truth": "0",
            "bug_report": "NetworkServerControl API breaks when username or password contains non-ascii characters\nIf you pass a non-ascii username/password combination to a NetworkServerControl API command  such as java -jar derbynet.jar shutdown -user Bjrn -password Dhlieit will hang forever.The reason is that NetworkServerControlImpl.writeLDString() writes the length of the string in characters  whereas NetworkServerControlImpl.readLDString() expects the length to be in number of bytes.",
            "id": "6457"
        },
        "6471": {
            "ground_truth": "0",
            "bug_report": "Create a regression test which will fail if classes from one Derby jar file leak into another jar file\nWe should write a test so that we find out early on when a checkin breaks the separation between Derby jar files.",
            "id": "6471"
        },
        "6482": {
            "ground_truth": "0",
            "bug_report": "Revamp the vti demo to look and behave more like the other demos.\nThe VTI demo began as a set of classes which could not be compiled by the normal build because they used Java 5 features. We hooked these classes into the ordinary build later on (see DERBY-3684). But the VTI demo still sticks out like a sore thumb. We ought to be able to make the VTI demo behave like the other demos now.",
            "id": "6482"
        },
        "6484": {
            "ground_truth": "0",
            "bug_report": "Include SQLState in client exception messages\nWhen the embedded driver raises an SQLException  it is linked to a iapi.error.StandardException whose toString() method adds the SQLState to the error message. An SQLException raised by the client driver is linked to a client.am.SqlException  which does not add the SQLState. Because of this  printStackTrace() gives more information when called on an embedded exception. You have to call getSQLState() on the client exception in order to see the SQLState.We should change client.am.SqlException's toString() method to work the same way as StandardException.toString().See also the discussion in DERBY-1997.",
            "id": "6484"
        },
        "6496": {
            "ground_truth": "1",
            "bug_report": "Optional tool registration may fail because the CompilerContext is not always available at execution time.\nFor reasons which elude me  the CompilerContext is sometimes available at execution time and sometimes not. When the CompilerContext is not available at execution time  optional tool loading fails on an NPE:Caused by: java.lang.NullPointerException at org.apache.derby.catalog.Java5SystemProcedures.SYSCS_REGISTER_TOOL(Java5SystemProcedures.java:104) at org.apache.derby.exe.ac4d3680a5x0144x93adx0136xffffe1d7aa3e0.g0(Unknown Source) at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) at org.apache.derby.impl.services.reflect.ReflectMethod.invoke(ReflectMethod.java:46) at org.apache.derby.impl.sql.execute.CallStatementResultSet.open(CallStatementResultSet.java:75) at org.apache.derby.impl.sql.GenericPreparedStatement.executeStmt(GenericPreparedStatement.java:470) at org.apache.derby.impl.sql.GenericPreparedStatement.execute(GenericPreparedStatement.java:349) at org.apache.derby.impl.jdbc.EmbedStatement.executeStatement(EmbedStatement.java:1338)",
            "id": "6496"
        },
        "6500": {
            "ground_truth": "0",
            "bug_report": "intermittent error in nightly regression tests: AutoIncrementTest\njunit.framework.AssertionFailedError: Column value mismatch @ column 'COLUMNNAME'  row 1: Expected: &gt;A_ZERO&lt; Found: &gt;A_ONE&lt; at org.apache.derbyTesting.junit.JDBC.assertRowInResultSet(JDBC.java:1277) at org.apache.derbyTesting.junit.JDBC.assertRowInResultSet(JDBC.java:1189) at org.apache.derbyTesting.junit.JDBC.assertFullResultSetMinion(JDBC.java:1076) at org.apache.derbyTesting.junit.JDBC.assertFullResultSet(JDBC.java:999) at org.apache.derbyTesting.junit.JDBC.assertFullResultSet(JDBC.java:956) at org.apache.derbyTesting.junit.JDBC.assertFullResultSet(JDBC.java:914) at org.apache.derbyTesting.functionTests.tests.lang.AutoIncrementTest.testderbyIncrementTest(AutoIncrementTest.java:167) at org.apache.derbyTesting.junit.BaseTestCase.runBare(BaseTestCase.java:118) at org.apache.derbyTesting.junit.BaseJDBCTestCase.runBareOverridable(BaseJDBCTestCase.java:442) at org.apache.derbyTesting.junit.BaseJDBCTestCase.runBare(BaseJDBCTestCase.java:459) at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24) at junit.extensions.TestSetup$1.protect(TestSetup.java:21) at junit.extensions.TestSetup.run(TestSetup.java:25) at org.apache.derbyTesting.junit.BaseTestSetup.run(BaseTestSetup.java:57)",
            "id": "6500"
        },
        "6503": {
            "ground_truth": "0",
            "bug_report": "Starting network server on a network drive fails with JDK 7 on Windows\nStarting a network server on a network drive with JDK 7 on Windows fails. The reported exception is a ClassCastException  but the underlying exception is the following:java.nio.file.AccessDeniedException: //host/path/derby.log at sun.nio.fs.WindowsException.translateToIOException(WindowsException.java:83) at sun.nio.fs.WindowsException.rethrowAsIOException(WindowsException.java:97) at sun.nio.fs.WindowsException.rethrowAsIOException(WindowsException.java:102) at sun.nio.fs.WindowsAclFileAttributeView.setAcl(WindowsAclFileAttributeView.java:221) at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57) at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) at java.lang.reflect.Method.invoke(Method.java:601) at org.apache.derby.iapi.services.io.FileUtil.limitAccessToOwnerViaACLs(FileUtil.java:897) at org.apache.derby.iapi.services.io.FileUtil.limitAccessToOwner(FileUtil.java:747) at org.apache.derby.impl.services.stream.SingleStream.PBmakeFileHPW(SingleStream.java:205) at org.apache.derby.impl.services.stream.SingleStream.run(SingleStream.java:401) at org.apache.derby.impl.services.stream.SingleStream.run(SingleStream.java:72) at java.security.AccessController.doPrivileged(Native Method) at org.apache.derby.impl.services.stream.SingleStream.makeFileHPW(SingleStream.java:394) at org.apache.derby.impl.services.stream.SingleStream.createDefaultStream(SingleStream.java:356) at org.apache.derby.impl.services.stream.SingleStream.makeStream(SingleStream.java:132) at org.apache.derby.impl.services.stream.SingleStream.boot(SingleStream.java:92) at org.apache.derby.impl.services.monitor.BaseMonitor.boot(BaseMonitor.java:1991) at org.apache.derby.impl.services.monitor.TopService.bootModule(TopService.java:334) at org.apache.derby.impl.services.monitor.BaseMonitor.startModule(BaseMonitor.java:541) at org.apache.derby.impl.services.monitor.FileMonitor.startModule(FileMonitor.java:44) at org.apache.derby.iapi.services.monitor.Monitor.startSystemModule(Monitor.java:362) at org.apache.derby.impl.services.monitor.BaseMonitor.runWithState(BaseMonitor.java:343) at org.apache.derby.impl.services.monitor.FileMonitor.&lt;init&gt;(FileMonitor.java:58) at org.apache.derby.iapi.services.monitor.Monitor.startMonitor(Monitor.java:285) at org.apache.derby.iapi.jdbc.JDBCBoot.boot(JDBCBoot.java:67) at org.apache.derby.jdbc.EmbeddedDriver.boot(EmbeddedDriver.java:199) at org.apache.derby.jdbc.EmbeddedDriver.&lt;clinit&gt;(EmbeddedDriver.java:95) at java.lang.Class.forName0(Native Method) at java.lang.Class.forName(Class.java:188) at org.apache.derby.impl.drda.NetworkServerControlImpl.startNetworkServer(NetworkServerControlImpl.java:1032) at org.apache.derby.impl.drda.NetworkServerControlImpl.blockingStart(NetworkServerControlImpl.java:732) at org.apache.derby.impl.drda.NetworkServerControlImpl.executeWork(NetworkServerControlImpl.java:2277) at org.apache.derby.drda.NetworkServerControl.main(NetworkServerControl.java:353)",
            "id": "6503"
        },
        "6511": {
            "ground_truth": "0",
            "bug_report": "java.lang.NoSuchMethodError chaining a function and procedure\njava.lang.NoSuchMethodError is raised when calling a procedure which takes an Integer argument and passing it the result of a function which returns an int. The error is raised in generated code.",
            "id": "6511"
        },
        "6534": {
            "ground_truth": "0",
            "bug_report": "Remove StorageFile.getURL() and its implementations\nStorageFile.getURL() is only called from CPFile  which is an implementation of StorageFile. The getURL() method could therefore be removed from the StorageFile interface and all its implementation classes except for CPFile  and it could be made private in CPFile.",
            "id": "6534"
        },
        "6535": {
            "ground_truth": "0",
            "bug_report": "Remove storageFactory field from subclasses of InputStreamFile\nThe InputStreamFile class has a field called storageFactory which holds the BaseStorageFactory instance that created it. This field is accessible by all subclasses of InputStream. Still  each subclass has its own storageFactory field which shadows the field in the parent class and holds a reference to the exact same factory instance as the parent.I'd like to remove the extra fields in the subclasses in order to simply the code and silence IDE warnings about the shadowing.",
            "id": "6535"
        },
        "6543": {
            "ground_truth": "0",
            "bug_report": "Syntax error when reference to transition variable has whitespace around it\nIf a trigger action references a transition variable and has whitespace around the period sign that separates the transition variable name from the column name  it fails with a syntax error.For example:ij&gt; create table t1(x int);0 rows inserted/updated/deletedij&gt; create table t2(x int);0 rows inserted/updated/deletedij&gt; --failscreate trigger tr1 after insert on t1 referencing new as newfor each row insert into t1 select x from t2 where x = new . x;ERROR 42X01: Syntax error: Encountered 'x' at line 1  column 150.Issue the 'help' command for general information on IJ command syntax.Any unrecognized commands are treated as potential SQL commands and executed directly.Consult your DBMS server reference documentation for details of the SQL syntax supported by your server.ij&gt; --succeedscreate trigger tr2 after insert on t1 referencing new as newfor each row insert into t1 select x from t2 where x = new.x;0 rows inserted/updated/deletedThe only difference between the failing trigger definition and the successful one  is that the former says 'new . x' and the latter 'new.x'.Both should succeed.",
            "id": "6543"
        },
        "6544": {
            "ground_truth": "0",
            "bug_report": "Non-english locale flunks LuceneSupportTest\nThe following error surfaced in the nightly tests on a windows machine with a Swedish locale. See http://download.java.net/javadesktop/derby/request_5589934/ junit.framework.AssertionFailedError: Column value mismatch @ column '1'  row 1: Expected: &gt;en&lt; Found: &gt;sv&lt; at org.apache.derbyTesting.junit.JDBC.assertRowInResultSet(JDBC.java:1303) at org.apache.derbyTesting.junit.JDBC.assertRowInResultSet(JDBC.java:1215) at org.apache.derbyTesting.junit.JDBC.assertFullResultSetMinion(JDBC.java:1102) at org.apache.derbyTesting.junit.JDBC.assertFullResultSet(JDBC.java:1025) at org.apache.derbyTesting.junit.JDBC.assertFullResultSet(JDBC.java:982) at org.apache.derbyTesting.junit.JDBC.assertFullResultSet(JDBC.java:940) at org.apache.derbyTesting.functionTests.tests.lang.LuceneSupportTest.testCreateAndQueryIndex(LuceneSupportTest.java:75) at org.apache.derbyTesting.junit.BaseTestCase.runBare(BaseTestCase.java:118) at org.apache.derbyTesting.junit.BaseJDBCTestCase.runBareOverridable(BaseJDBCTestCase.java:440) at org.apache.derbyTesting.junit.BaseJDBCTestCase.runBare(BaseJDBCTestCase.java:457) at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24) at junit.extensions.TestSetup$1.protect(TestSetup.java:21) at junit.extensions.TestSetup.run(TestSetup.java:25) at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24) at junit.extensions.TestSetup$1.protect(TestSetup.java:21) at junit.extensions.TestSetup.run(TestSetup.java:25)",
            "id": "6544"
        },
        "6547": {
            "ground_truth": "0",
            "bug_report": "testDERBY5120NumRowsInSydependsForTrigger fails when the starting version of the upgrade trajectory is 10.10.2.0\nWhen I run the upgrade tests with 10.10.2.0 as the starting point  I see the following error. I don't see this error when the starting point is 10.10.1.1. This may suggest that 10.10.2.0 has not been added as a starting point for the upgrade tests in the nightly/continuous-integration test runs.1) testDERBY5120NumRowsInSydependsForTrigger(org.apache.derbyTesting.functionTests.tests.upgradeTests.BasicSetup)junit.framework.AssertionFailedError: Expected error(s) ' 42802' but no error was thrown. at org.apache.derbyTesting.junit.BaseJDBCTestCase.assertStatementErrorMinion(BaseJDBCTestCase.java:1194) at org.apache.derbyTesting.junit.BaseJDBCTestCase.assertStatementError(BaseJDBCTestCase.java:1145) at org.apache.derbyTesting.junit.BaseJDBCTestCase.assertStatementError(BaseJDBCTestCase.java:1228) at org.apache.derbyTesting.functionTests.tests.upgradeTests.BasicSetup.testDERBY5120NumRowsInSydependsForTrigger(BasicSetup.java:514) at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) at org.apache.derbyTesting.junit.BaseTestCase.runBare(BaseTestCase.java:118) at org.apache.derbyTesting.junit.BaseJDBCTestCase.runBareOverridable(BaseJDBCTestCase.java:440) at org.apache.derbyTesting.junit.BaseJDBCTestCase.runBare(BaseJDBCTestCase.java:457) at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24) at junit.extensions.TestSetup$1.protect(TestSetup.java:21) at junit.extensions.TestSetup.run(TestSetup.java:25) at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24) at junit.extensions.TestSetup$1.protect(TestSetup.java:21) at junit.extensions.TestSetup.run(TestSetup.java:25) at org.apache.derbyTesting.junit.BaseTestSetup.run(BaseTestSetup.java:57) at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24) at junit.extensions.TestSetup$1.protect(TestSetup.java:21) at junit.extensions.TestSetup.run(TestSetup.java:25) at org.apache.derbyTesting.junit.BaseTestSetup.run(BaseTestSetup.java:57) at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24) at junit.extensions.TestSetup$1.protect(TestSetup.java:21) at junit.extensions.TestSetup.run(TestSetup.java:25) at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24) at junit.extensions.TestSetup$1.protect(TestSetup.java:21) at junit.extensions.TestSetup.run(TestSetup.java:25) at org.apache.derbyTesting.junit.BaseTestSetup.run(BaseTestSetup.java:57) at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24) at junit.extensions.TestSetup$1.protect(TestSetup.java:21) at junit.extensions.TestSetup.run(TestSetup.java:25) at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24) at junit.extensions.TestSetup$1.protect(TestSetup.java:21) at junit.extensions.TestSetup.run(TestSetup.java:25) at org.apache.derbyTesting.junit.BaseTestSetup.run(BaseTestSetup.java:57) at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24) at junit.extensions.TestSetup$1.protect(TestSetup.java:21) at junit.extensions.TestSetup.run(TestSetup.java:25) at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24) at junit.extensions.TestSetup$1.protect(TestSetup.java:21) at junit.extensions.TestSetup.run(TestSetup.java:25) at org.apache.derbyTesting.junit.BaseTestSetup.run(BaseTestSetup.java:57) at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24) at junit.extensions.TestSetup$1.protect(TestSetup.java:21) at junit.extensions.TestSetup.run(TestSetup.java:25) at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24) at junit.extensions.TestSetup$1.protect(TestSetup.java:21) at junit.extensions.TestSetup.run(TestSetup.java:25) at org.apache.derbyTesting.junit.BaseTestSetup.run(BaseTestSetup.java:57) at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24) at junit.extensions.TestSetup$1.protect(TestSetup.java:21) at junit.extensions.TestSetup.run(TestSetup.java:25) at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24) at junit.extensions.TestSetup$1.protect(TestSetup.java:21) at junit.extensions.TestSetup.run(TestSetup.java:25) at org.apache.derbyTesting.junit.BaseTestSetup.run(BaseTestSetup.java:57) at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24) at junit.extensions.TestSetup$1.protect(TestSetup.java:21) at junit.extensions.TestSetup.run(TestSetup.java:25) at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24) at junit.extensions.TestSetup$1.protect(TestSetup.java:21) at junit.extensions.TestSetup.run(TestSetup.java:25) at org.apache.derbyTesting.junit.BaseTestSetup.run(BaseTestSetup.java:57) at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24) at junit.extensions.TestSetup$1.protect(TestSetup.java:21) at junit.extensions.TestSetup.run(TestSetup.java:25) at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24) at junit.extensions.TestSetup$1.protect(TestSetup.java:21) at junit.extensions.TestSetup.run(TestSetup.java:25) at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24) at junit.extensions.TestSetup$1.protect(TestSetup.java:21) at junit.extensions.TestSetup.run(TestSetup.java:25)",
            "id": "6547"
        },
        "6553": {
            "ground_truth": "1",
            "bug_report": "Sequence generator makes CREATE TRIGGER fail with internal error\nI'm seeing this on trunk:ij version 10.11ij&gt; connect 'jdbc:derby:memory:db;create=true';ij&gt; create table t1(x int  y int  z int);0 rows inserted/updated/deletedij&gt; create table t2(x int  y int  z int);0 rows inserted/updated/deletedij&gt; create sequence seq;0 rows inserted/updated/deletedij&gt; values next value for seq;1 ------------21474836481 row selectedij&gt; create trigger tr1 after insert on t1 insert into t2(x) values (next value for seq);ERROR 40XT8: An internal error was identified by RawStore module. Internal state detail from the transaction is as follows: savedEndStatus = 0needSync = falsejustCreated = falsemyGlobalId = nullmyId = nullstate = 0inComplete = nullseenUpdates = falseinPostCommitProcessing = falselogStart = nulllogLast = nullrecoveryTransaction = falsepostCompleteMode = falsesanityCheck_xaclosed = falsetransName = UserTransactionreadOnly = falseflush_log_on_xact_end = truebackupBlocked = falsedontWaitForLocks = false",
            "id": "6553"
        },
        "6563": {
            "ground_truth": "0",
            "bug_report": "NOT elimination for CASE expressions is broken\nNOT elimination for CASE expressions seems to be broken. Take this example:ij&gt; select * from sysibm.sysdummy1 where not ( case when ibmreqd = 'Y' then true else true end );IBM&amp;----Y 1 row selectedBoth branches of the CASE expression evaluate to TRUE  so one would expect the predicate 'not ( case ... )' to evaluate to FALSE  and the query should return an empty result.",
            "id": "6563"
        },
        "6565": {
            "ground_truth": "1",
            "bug_report": "ROW_NUMBER function throws NullPointerException in UPDATE statement\nA NullPointerException is raised with this (possibly illegal?) UPDATE statement:ij version 10.10ij&gt; connect 'jdbc:derby:memory:db;create=true';ij&gt; create table t(x int);0 rows inserted/updated/deletedij&gt; insert into t values 1;1 row inserted/updated/deletedij&gt; update t set x = row_number() over ();ERROR XJ001: Java exception: ': java.lang.NullPointerException'.",
            "id": "6565"
        },
        "6566": {
            "ground_truth": "0",
            "bug_report": "Simplify handling of untyped nulls in CASE and NULLIF expressions\nThe parser translates both CASE and NULLIF expressions into ConditionalNodes  but it represents untyped NULLs differently in the two cases.In a CASE expression  any branch that is an untyped NULL  is translated into an UntypedNullConstantNode that's wrapped in a CastNode that casts the value to CHAR(1). The CastNode is replaced with a cast to the correct type during the bind phase.A NULLIF expression is turned into a CASE expression that has a THEN NULL clause. The parser simply creates an UntypedNullConstantNode for that clause  without wrapping it in a CastNode. A CastNode is instead added during the bind phase.This slight difference in how NULLs are represented by the parser in the two cases  means that ConditionalNode needs to handle the two cases differently during the bind phase. It would be better if the parser generated NULLs in the same way for the two cases  so that ConditionalNode didn't need to know if it was generated for a CASE expression or a NULLIF expression.",
            "id": "6566"
        },
        "6567": {
            "ground_truth": "0",
            "bug_report": "Incorrect nullability for CASE expression with parameter\nThis JUnit test code fails because it detects that the query returns null even though the result column is reported as not nullable: PreparedStatement ps = prepareStatement( 'values case when false then 1 else ? end'); ps.setNull(1  Types.INTEGER); JDBC.assertSingleValueResultSet(ps.executeQuery()  null);",
            "id": "6567"
        },
        "6585": {
            "ground_truth": "0",
            "bug_report": "add HoldForConnection ij command to match NoHoldForConnection\nDERBY-6515 was created to document the NoHoldForConnection ij command  which was used in some of Derby's sql style tests.In subsequent comments  it was felt there should be a matching HoldForConnection ij command to set the value back to the default (ResultSet.HOLD_CURSORS_OVER_COMMIT).",
            "id": "6585"
        },
        "6595": {
            "ground_truth": "1",
            "bug_report": "CheckToursDBTest failed while updating sequence value on disk\nI saw a failure in CheckToursDBTest while running the demo test suite on trunk. It was reported as an ArrayIndexOutOfBoundsException. The ArrayIndexOutOfBoundsException happened during cleanup and shadowed the original exception. The original exception in derby.log looked like this:ERROR XSTA2: A transaction was already active  when attempt was made to make another transaction active. at org.apache.derby.iapi.error.StandardException.newException(StandardException.java:290) at org.apache.derby.iapi.error.StandardException.newException(StandardException.java:285) at org.apache.derby.impl.store.raw.xact.XactFactory.pushTransactionContext(XactFactory.java:766) at org.apache.derby.impl.store.raw.xact.XactFactory.startCommonTransaction(XactFactory.java:293) at org.apache.derby.impl.store.raw.xact.XactFactory.startNestedUpdateUserTransaction(XactFactory.java:350) at org.apache.derby.impl.store.raw.RawStore.startNestedUpdateUserTransaction(RawStore.java:460) at org.apache.derby.impl.store.access.RAMTransaction.startNestedUserTransaction(RAMTransaction.java:2326) at org.apache.derby.impl.sql.catalog.SequenceUpdater.updateCurrentValueOnDisk(SequenceUpdater.java:486) at org.apache.derby.impl.sql.catalog.SequenceUpdater.clean(SequenceUpdater.java:218) at org.apache.derby.impl.sql.catalog.SequenceUpdater.clearIdentity(SequenceUpdater.java:257) at org.apache.derby.impl.services.cache.ConcurrentCache.removeEntry(ConcurrentCache.java:167) at org.apache.derby.impl.services.cache.ConcurrentCache.ageOut(ConcurrentCache.java:583) at org.apache.derby.impl.sql.catalog.DataDictionaryImpl.clearSequenceCaches(DataDictionaryImpl.java:8968) at org.apache.derby.impl.sql.catalog.DataDictionaryImpl.clearCaches(DataDictionaryImpl.java:8951) at org.apache.derby.impl.sql.catalog.DataDictionaryImpl.clearCaches(DataDictionaryImpl.java:8937) at org.apache.derby.impl.sql.catalog.DataDictionaryImpl.doneReading(DataDictionaryImpl.java:1184) at org.apache.derby.impl.sql.GenericStatement.prepMinion(GenericStatement.java:519) at org.apache.derby.impl.sql.GenericStatement.prepareStorable(GenericStatement.java:687) at org.apache.derby.iapi.sql.dictionary.SPSDescriptor.compileStatement(SPSDescriptor.java:373) at org.apache.derby.iapi.sql.dictionary.SPSDescriptor.prepareAndRelease(SPSDescriptor.java:264) at org.apache.derby.iapi.sql.dictionary.SPSDescriptor.getPreparedStatement(SPSDescriptor.java:739) at org.apache.derby.iapi.sql.dictionary.SPSDescriptor.getPreparedStatement(SPSDescriptor.java:655) at org.apache.derby.impl.sql.execute.GenericTriggerExecutor.executeSPS(GenericTriggerExecutor.java:171) at org.apache.derby.impl.sql.execute.GenericTriggerExecutor.executeWhenClauseAndAction(GenericTriggerExecutor.java:346) at org.apache.derby.impl.sql.execute.RowTriggerExecutor.fireTrigger(RowTriggerExecutor.java:113) at org.apache.derby.impl.sql.execute.TriggerEventActivator.notifyEvent(TriggerEventActivator.java:272) at org.apache.derby.impl.sql.execute.UpdateResultSet.fireAfterTriggers(UpdateResultSet.java:831) at org.apache.derby.impl.sql.execute.UpdateResultSet.open(UpdateResultSet.java:282) at org.apache.derby.impl.sql.GenericPreparedStatement.executeStmt(GenericPreparedStatement.java:470) at org.apache.derby.impl.sql.GenericPreparedStatement.execute(GenericPreparedStatement.java:349) at org.apache.derby.impl.jdbc.EmbedStatement.executeStatement(EmbedStatement.java:1338) at org.apache.derby.impl.jdbc.EmbedStatement.execute(EmbedStatement.java:704) at org.apache.derby.impl.jdbc.EmbedStatement.execute(EmbedStatement.java:631) at org.apache.derbyTesting.functionTests.tests.demo.CheckToursDBTest.doUpdate(CheckToursDBTest.java:163) at org.apache.derbyTesting.functionTests.tests.demo.CheckToursDBTest.testToursDB(CheckToursDBTest.java:108) at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) at java.lang.reflect.Method.invoke(Method.java:483) at junit.framework.TestCase.runTest(TestCase.java:168) at junit.framework.TestCase.runBare(TestCase.java:134) at org.apache.derbyTesting.junit.BaseTestCase.runBare(BaseTestCase.java:118) at org.apache.derbyTesting.junit.BaseJDBCTestCase.runBareOverridable(BaseJDBCTestCase.java:440) at org.apache.derbyTesting.junit.BaseJDBCTestCase.runBare(BaseJDBCTestCase.java:457) at junit.framework.TestResult$1.protect(TestResult.java:110) at junit.framework.TestResult.runProtected(TestResult.java:128) at junit.framework.TestResult.run(TestResult.java:113) at junit.framework.TestCase.run(TestCase.java:124) at junit.framework.TestSuite.runTest(TestSuite.java:232) at junit.framework.TestSuite.run(TestSuite.java:227) at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24) at junit.extensions.TestSetup$1.protect(TestSetup.java:23) at junit.framework.TestResult.runProtected(TestResult.java:128) at junit.extensions.TestSetup.run(TestSetup.java:27) at junit.framework.TestSuite.runTest(TestSuite.java:232) at junit.framework.TestSuite.run(TestSuite.java:227) at junit.framework.TestSuite.runTest(TestSuite.java:232) at junit.framework.TestSuite.run(TestSuite.java:227) at org.apache.tools.ant.taskdefs.optional.junit.JUnitTestRunner.run(JUnitTestRunner.java:518) at org.apache.tools.ant.taskdefs.optional.junit.JUnitTestRunner.launch(JUnitTestRunner.java:1052) at org.apache.tools.ant.taskdefs.optional.junit.JUnitTestRunner.main(JUnitTestRunner.java:906)",
            "id": "6595"
        },
        "6611": {
            "ground_truth": "0",
            "bug_report": "Broken link in API docs to derby.drda.keepAlive documentation\nIn the javadoc for NetworkServerMBean#getDrdaKeepAlive  there is a@see link which is broken. It points to:http://db.apache.org/derby/docs/dev/adminguide/radmindrdakeepalive.html",
            "id": "6611"
        },
        "6616": {
            "ground_truth": "1",
            "bug_report": "User procedures can call system procedures  circumventing SQL authorization.\nSystem procedures are implemented as public static methods in org.apache.derby.catalog.SystemProcedures. These methods can be called by code in user-written procedures. This allows a user-written procedure to circumvent the SQL authorization checks which are supposed to limit some procedures to being called only by the DBO. I will attach a repro.",
            "id": "6616"
        },
        "6624": {
            "ground_truth": "0",
            "bug_report": "Use javax.xml.xpath interfaces for XPath support\nCurrently  Derby uses the interfaces in the org.w3c.dom.xpath package to implement XPath support. That package is not part of the Java SE specification. Even though the package is included as an internal API in some of the major Java runtimes  using the standard javax.xml.xpath package instead would be better. It would be more portable  and less likely to break in the future if JVM vendors remove the internal API.",
            "id": "6624"
        },
        "6626": {
            "ground_truth": "1",
            "bug_report": "Check type of user-supplied modules before creating instances\nDerby allows users to specify names of classes to use for various pluggable modules.In some cases  it verifies that the class implements the expected interface before it creates an instance of the class. For example in SpecificAuthenticactionServiceImpl: Class sasClass = Class.forName(specificAuthenticationScheme); if (!UserAuthenticator.class.isAssignableFrom(sasClass)) { throw StandardException.newException(SQLState.AUTHENTICATION_NOT_IMPLEMENTED  specificAuthenticationScheme  'org.apache.derby.authentication.UserAuthenticator'); } UserAuthenticator aScheme = (UserAuthenticator) sasClass.newInstance();In other cases  it creates an instance without checking  and instead fails with a ClassCastException or some other exception when trying to use the instance of the incorrect type. Examples: Java5SystemProcedures SYSCS_REGISTER_TOOL()  JCECipherFactory  SequenceUpdater.makePreallocator().I think it would be good to have similar checks in these other cases too. That'll give clearer error messages which explain what the problem is  and it will be safer because it limits which constructors the users can force the Derby engine to invoke.",
            "id": "6626"
        },
        "6644": {
            "ground_truth": "0",
            "bug_report": "Support standard syntax for altering column nullability\nDerby supports altering the nullability of a column via an ALTER TABLE statement  but the supported syntax is different from what the SQL:2011 standard defines. We should add support for the standard syntax as well.The standard syntax is ALTER TABLE t ALTER COLUMN c SET NOT NULL ALTER TABLE t ALTER COLUMN c DROP NOT NULL",
            "id": "6644"
        },
        "6652": {
            "ground_truth": "0",
            "bug_report": "Compilation error using a view as the source data set for a MERGE statement\nMamta found the following problem when using a view as the source data set of a MERGE statement:connect 'jdbc:derby:memory:db;create=true';CREATE TABLE employee (employee_id int first_name VARCHAR(20) last_name VARCHAR(20) dept_no int salary int);create view v1employee as select * from employee;CREATE TABLE bonuses (employee_id int  bonus int DEFAULT 100);create view v2bonuses as select * from bonuses;-- compiles without the viewMERGE INTO bonuses BUSING employee EON B.employee_id = E.employee_idWHEN MATCHED AND E.dept_no=20 THEN UPDATE SET B.bonus = E.salary * 0.1WHEN NOT MATCHED AND dept_no=20 THEN INSERT (employee_id  bonus) VALUES (E.employee_id  E.salary * 0.05);-- compilation error with the viewMERGE INTO bonuses BUSING v1employee EON B.employee_id = E.employee_idWHEN MATCHED AND E.dept_no=20 THEN UPDATE SET B.bonus = E.salary * 0.1WHEN NOT MATCHED AND dept_no=20 THEN INSERT (employee_id  bonus) VALUES (E.employee_id  E.salary * 0.05);",
            "id": "6652"
        },
        "6670": {
            "ground_truth": "0",
            "bug_report": "Rollback to savepoint allows violation of deferrable constraints\nThe bug is illustrated by the following code snippet: Connection c = DriverManager.getConnection('jdbc:derby:memory:db;create=true'); c.setAutoCommit(false); Statement s = c.createStatement(); s.execute('create table t1(x int primary key initially deferred)'); s.execute('insert into t1 values 1 1 1 1'); Savepoint sp = c.setSavepoint(); s.execute('drop table t1'); c.rollback(sp); // Since there are four identical rows in T1  this call should have // failed because the primary key was violated. c.commit(); // Instead  it succeeds  and all four rows are committed  as can // be seen here: ResultSet rs = s.executeQuery('select * from t1'); while (rs.next()) { System.out.println(rs.getInt(1)); } // Insert yet another row  so that we have five identical rows ... s.execute('insert into t1 values 1'); // ... and now commit complains ... c.commit();With auto-commit off  add duplicates into a deferred primary key. Then set a savepoint  drop the table  and roll back to the savepoint.Apparently  when you drop the table  information about any constraint violations seen on that table is lost  and that information is not restored when the drop table operation is undone by the rollback to savepoint.So when you commit the transaction after having rolled back the drop operation  no deferred checking of constraints happens  and the duplicates you have inserted are committed.",
            "id": "6670"
        },
        "6672": {
            "ground_truth": "0",
            "bug_report": "Allow Derby to rename tables referenced by foreign keys\nHi  I'm on the Apache Roller team and we use database migration scripts to update databases between Roller releases. (We have a common template (http://svn.apache.org/viewvc/roller/trunk/app/src/main/resources/sql/500-to-510-migration.vm?view=co) that is run through Velocity to create specific scripts for the several databases that we support.) One handicap with Derby that we're not seeing with other databases is its inability to rename tables that have FK's on them. Renaming one of our tables returns this error from Derby:rename table website to weblog;Error: Operation 'RENAME' cannot be performed on object 'SQL140718163851800' because CONSTRAINT 'WP_WEBSITEID_FK' is dependent on that object.SQLState: X0Y25ErrorCode: 30000Error: Operation 'RENAME' cannot be performed on object 'SQL140718163851800' because CONSTRAINT 'WE_WEBSITEID_FK' is dependent on that object.SQLState: X0Y25ErrorCode: 99999Error: Operation 'RENAME' cannot be performed on object 'SQL140718163851800' because CONSTRAINT 'WC_WEBSITEID_FK' is dependent on that object.SQLState: X0Y25ErrorCode: 99999Error: Operation 'RENAME' cannot be performed on object 'SQL140718163851800' because CONSTRAINT 'FO_WEBSITEID_FK' is dependent on that object.SQLState: X0Y25ErrorCode: 99999Error: Operation 'RENAME' cannot be performed on object 'SQL140718163851800' because CONSTRAINT 'MF_WEBSITEID_FK' is dependent on that object.SQLState: X0Y25ErrorCode: 99999Error: Operation 'RENAME' cannot be performed on object 'SQL140718163851800' because CONSTRAINT 'NF_WEBSITEID_FK' is dependent on that object.SQLState: X0Y25ErrorCode: 99999Error: Operation 'RENAME' cannot be performed on object 'SQL140718163851800' because CONSTRAINT 'AP_WEBSITEID_FK' is dependent on that object.SQLState: X0Y25ErrorCode: 99999This results in the migration scripts needing to be messy  first dropping all constraints before recreating them  for the one RDBMS that requires it. It would be great if a future release of Derby could be coded to support table renames regardless of the constraints defined on it. Thanks!",
            "id": "6672"
        },
        "6685": {
            "ground_truth": "1",
            "bug_report": "Permission problems when running JUnit tests with Ant 1.9.4\nI saw many permission problems when I set up a build job for the 10.11 branch. See for example this log: https://builds.apache.org/job/Derby-10.11-suites.All/1/consoleFirst stack trace: [junit] Running org.apache.derby.PackagePrivateTestSuite [junit] Tests run: 67  Failures: 0  Errors: 0  Skipped: 0  Time elapsed: 5.662 sec [junit] Exception in thread 'main' java.security.AccessControlException: access denied ('java.io.FilePermission' '/home/jenkins/jenkins-slave/workspace/Derby-10.11-suites.All/10.11-head/junit_20140804_1122/TEST-org.apache.derby.PackagePrivateTestSuite.xml' 'write') [junit] at java.security.AccessControlContext.checkPermission(AccessControlContext.java:457) [junit] at java.security.AccessController.checkPermission(AccessController.java:884) [junit] at java.lang.SecurityManager.checkPermission(SecurityManager.java:549) [junit] at java.lang.SecurityManager.checkWrite(SecurityManager.java:979) [junit] at java.io.FileOutputStream.&lt;init&gt;(FileOutputStream.java:194) [junit] at java.io.FileOutputStream.&lt;init&gt;(FileOutputStream.java:156) [junit] at org.apache.tools.ant.taskdefs.optional.junit.FormatterElement$DelayedFileOutputStream.write(FormatterElement.java:381) [junit] at java.io.OutputStream.write(OutputStream.java:116) [junit] at sun.nio.cs.StreamEncoder.writeBytes(StreamEncoder.java:221) [junit] at sun.nio.cs.StreamEncoder.implFlushBuffer(StreamEncoder.java:291) [junit] at sun.nio.cs.StreamEncoder.implFlush(StreamEncoder.java:295) [junit] at sun.nio.cs.StreamEncoder.flush(StreamEncoder.java:141) [junit] at java.io.OutputStreamWriter.flush(OutputStreamWriter.java:229) [junit] at java.io.BufferedWriter.flush(BufferedWriter.java:254) [junit] at org.apache.tools.ant.util.DOMElementWriter.openElement(DOMElementWriter.java:371) [junit] at org.apache.tools.ant.util.DOMElementWriter.write(DOMElementWriter.java:209) [junit] at org.apache.tools.ant.util.DOMElementWriter.write(DOMElementWriter.java:222) [junit] at org.apache.tools.ant.util.DOMElementWriter.write(DOMElementWriter.java:222) [junit] at org.apache.tools.ant.taskdefs.optional.junit.XMLJUnitResultFormatter.endTestSuite(XMLJUnitResultFormatter.java:188) [junit] at org.apache.tools.ant.taskdefs.optional.junit.JUnitTestRunner.fireEndTestSuite(JUnitTestRunner.java:840) [junit] at org.apache.tools.ant.taskdefs.optional.junit.JUnitTestRunner.run(JUnitTestRunner.java:575) [junit] at org.apache.tools.ant.taskdefs.optional.junit.JUnitTestRunner.launch(JUnitTestRunner.java:1179) [junit] at org.apache.tools.ant.taskdefs.optional.junit.JUnitTestRunner.main(JUnitTestRunner.java:1030) [junit] Running org.apache.derby.PackagePrivateTestSuite [junit] Tests run: 1  Failures: 0  Errors: 1  Skipped: 0  Time elapsed: 0 sec [junit] Test org.apache.derby.PackagePrivateTestSuite FAILED (crashed)I can reproduce these failures in my environment by running the junit-single target with Ant 1.9.4. For example:ant -Dderby.junit.testclass=org.apache.derbyTesting.unitTests.junit.FormatableBitSetTest junit-singleIf I use an older Ant version (I've tried 1.9.0 and 1.8.2) it does not fail.",
            "id": "6685"
        },
        "6691": {
            "ground_truth": "0",
            "bug_report": "ROW_NUMBER should not be allowed as argument in a procedure call\nFails with assert/NPE instead of proper error:ij&gt; call syscs_util.syscs_compress_table('APP'  'T'  row_number() over ());ERROR XJ001: Java exception: 'ASSERT FAILED cannot get interface without operand: org.apache.derby.shared.common.sanity.AssertFailure'.",
            "id": "6691"
        },
        "6693": {
            "ground_truth": "1",
            "bug_report": "Assert failure/ArrayIndexOutOfBoundsException when using COUNT in MERGE matching clause\nThis (meaningless) statement gives NPE in insane builds andassert failure in sane builds:s.execute('create table t2(x int)');s.execute('create table t1(x int)');s.execute('insert into t2 values 3 4');s.executeUpdate('merge into t1 using t2 on (t1.x=t2.x) ' + 'when not matched then insert values (count(*))');I see it also applies to other aggregates  e.g. MAX.stack trace (insane):Exception in thread 'main' java.sql.SQLException: Java exception: '-1: java.lang.ArrayIndexOutOfBoundsException'. at org.apache.derby.impl.jdbc.SQLExceptionFactory.getSQLException(Unknown Source) at org.apache.derby.impl.jdbc.SQLExceptionFactory.getSQLException(Unknown Source) at org.apache.derby.impl.jdbc.Util.seeNextException(Unknown Source) at org.apache.derby.impl.jdbc.Util.javaException(Unknown Source) at org.apache.derby.impl.jdbc.TransactionResourceImpl.wrapInSQLException(Unknown Source) at org.apache.derby.impl.jdbc.TransactionResourceImpl.handleException(Unknown Source) at org.apache.derby.impl.jdbc.EmbedConnection.handleException(Unknown Source) at org.apache.derby.impl.jdbc.ConnectionChild.handleException(Unknown Source) at org.apache.derby.impl.jdbc.EmbedStatement.execute(Unknown Source) at org.apache.derby.impl.jdbc.EmbedStatement.executeLargeUpdate(Unknown Source) at org.apache.derby.impl.jdbc.EmbedStatement.executeUpdate(Unknown Source) at derby6565.Derby6565.main(Derby6565.java:46)Caused by: ERROR XJ001: Java exception: '-1: java.lang.ArrayIndexOutOfBoundsException'. at org.apache.derby.iapi.error.StandardException.newException(Unknown Source) at org.apache.derby.impl.jdbc.SQLExceptionFactory.wrapArgsForTransportAcrossDRDA(Unknown Source) ... 12 moreCaused by: java.lang.ArrayIndexOutOfBoundsException: -1 at org.apache.derby.impl.services.bytecode.BCMethod.popStack(Unknown Source) at org.apache.derby.impl.services.bytecode.BCMethod.callMethod(Unknown Source) at org.apache.derby.impl.sql.compile.ResultColumnList.generateEvaluatedRow(Unknown Source) at org.apache.derby.impl.sql.compile.MatchingClauseNode.generateInsertUpdateRow(Unknown Source) at org.apache.derby.impl.sql.compile.MatchingClauseNode.generate(Unknown Source) at org.apache.derby.impl.sql.compile.MergeNode.generate(Unknown Source) at org.apache.derby.impl.sql.compile.StatementNode.generate(Unknown Source) at org.apache.derby.impl.sql.GenericStatement.prepMinion(Unknown Source) at org.apache.derby.impl.sql.GenericStatement.prepare(Unknown Source) at org.apache.derby.impl.sql.conn.GenericLanguageConnectionContext.prepareInternalStatement(Unknown Source) ... 4 more",
            "id": "6693"
        },
        "6708": {
            "ground_truth": "0",
            "bug_report": "OOME when running ConstraintCharacteristicsTest with smaller heap\nWhen I ran suites.All on a device with little memory  so that I needed to reduce the heap (-Xmx160M)  it stopped and failed with an OOME when it came to ConstraintCharacteristicsTest.That test uses a memory database in order to speed it up. One of the test cases (testManySimilarDuplicates) has such a big data set that the database doesn't fit in the heap. It would be good if we could reduce the memory requirements of the test so that it passes on smaller devices to. Alternatively  we could add a switch that makes it easy to disable test cases that are known to have high memory requirements.",
            "id": "6708"
        },
        "6719": {
            "ground_truth": "0",
            "bug_report": "Add derbyoptionaltools.jar to the class paths of the scripts in the bin directory\nThe derbyoptionaltools.jar should be added to the class paths constructed by all of the scripts in the bin distros which include derby.jar. Otherwise  the Lucene plugin (and future features which we put in derbyoptionaltools.jar) won't be available when you use the scripts to run ij  the network server  and sysinfo.For instance  you will see information on this jar file if you run sysinfo this way...java -jar derbyrun.jar sysinfobut not if you run the sysinfo script in the bin directory of a Derby installation.",
            "id": "6719"
        },
        "6720": {
            "ground_truth": "0",
            "bug_report": "Add derbyoptionaltools.jar to the maven artifacts we publish\nThe new derbyoptionaltools.jar is not published to the maven repositories along with the other Derby jar files.",
            "id": "6720"
        },
        "6730": {
            "ground_truth": "0",
            "bug_report": "Cannot create a Lucene index if a key column's name is case-sensitive\nThe workaround is to create a view which gives the columns case-insensitive names. The following script shows this problem:connect 'jdbc:derby:memory:db;create=true';call syscs_util.syscs_register_tool( 'luceneSupport'  true );create schema 's';create table 's'.'t'( 'passageID' int  'text' varchar( 32672 ));-- fails because the trailing key id is case-sensitivecall luceneSupport.createIndex( ''s''  ''t''  ''text''  null  ''passageID'');create view 's'.'t_view' ( passageID  text ) as select * from 's'.'t';-- succeeds on a view with case-insensitive identifierscall luceneSupport.createIndex( ''s''  ''t_view''  'text'  null  'passageID');",
            "id": "6730"
        },
        "6736": {
            "ground_truth": "1",
            "bug_report": "The jacoco-junit target fails to store coverage data for some sub-suites\nThe console log for the code coverage test runs at https://builds.apache.org/job/Derby-JaCoCo/ shows that JaCoCo fails to write coverage data for the following test suites:langjdbcapistoreengineencryptionIt is caused by the following permissions-related exception: [junit] java.security.AccessControlException: access denied ('java.io.FilePermission' '/home/jenkins/jenkins-slave/workspace/Derby-JaCoCo/trunk/junit_20140912_1758/jacoco.exec' 'write') [junit] at java.security.AccessControlContext.checkPermission(AccessControlContext.java:372) [junit] at java.security.AccessController.checkPermission(AccessController.java:559) [junit] at java.lang.SecurityManager.checkPermission(SecurityManager.java:549) [junit] at java.lang.SecurityManager.checkWrite(SecurityManager.java:979) [junit] at java.io.FileOutputStream.&lt;init&gt;(FileOutputStream.java:203) [junit] at org.jacoco.agent.rt.internal_9dd1198.output.FileOutput.openFile(FileOutput.java:67) [junit] at org.jacoco.agent.rt.internal_9dd1198.output.FileOutput.writeExecutionData(FileOutput.java:53) [junit] at org.jacoco.agent.rt.internal_9dd1198.Agent.shutdown(Agent.java:143) [junit] at org.jacoco.agent.rt.internal_9dd1198.Agent$1.run(Agent.java:60)The result of this is that the coverage report shows lower coverage than what's actually covered by the tests.",
            "id": "6736"
        },
        "6742": {
            "ground_truth": "0",
            "bug_report": "For update statement  collect generated keys if Statement.RETURN_GENERATED_KEYS flag is supplied to the JDBC call.\nDERBY-6414 is providing SQL support to update identity columns using DEFAULT keyword. This jira will look into collecting generated keys if Statement.RETURN_GENERATED_KEYS flag is supplied to the JDBC call for an UPDATE sql.",
            "id": "6742"
        },
        "641": {
            "ground_truth": "0",
            "bug_report": "Remove need for db2jcc.jar for executing ij or upload it on ibiblio\nI'm trying to automate loading DDL files with Maven/Maven2 and all the derby are available on ibiblio except db2jcc.jar...Thanks!",
            "id": "641"
        },
        "1813": {
            "ground_truth": "0",
            "bug_report": "Fix hard-coded JDBC 4.0 type constants\nThe JDBC 4.0 driver has hard-coded type constants in JDBC40Translation. Some of these were changed in build 98 of jdk1.6 and should be updated. The nightly tests on jdk1.6 are failing because of this  see for instance http://www.multinet.no/~solberg/public/Apache/DerbyJDK16/testlog/JDK16Jvm1.6SunOS-5.10_i86pc-i386/440135-jdbc40_diff.txt.",
            "id": "1813"
        },
        "2985": {
            "ground_truth": "0",
            "bug_report": "In suites.All  certain test orders cause AccessControlException\nWhile working on DERBY-2925  order of tests in suites/AllPackages.java causedjava.security.AccessControlException. For related derby-dev discussion please see:http://www.nabble.com/forum/ViewPost.jtp?post=11835420&amp;framed=y",
            "id": "2985"
        },
        "5080": {
            "ground_truth": "0",
            "bug_report": "Utilize JQL to fetch JIRA issue list for release notes generation\nDERBY-4857 made it possible to use the JIRA SOAP API to fetch a list of issues fixed in a release. However  the release manager have to manually create a JIRA filter and feed the filter id to the tool.Now that the Apache JIRA instance has been updated to 4.x  we can use the JIRA Query Language (JQL) to avoid that manual step.",
            "id": "5080"
        },
        "5476": {
            "ground_truth": "0",
            "bug_report": "Remove unused parameter in splitmessages\nsplitmessages requires three parameters  but it only uses two of them. A comment in the class describing the parameters  only describe the first two of them: /** arg&#91;0&#93; is the destination directory arg&#91;1&#93; is the source file. */The third  unused parameter should be removed.",
            "id": "5476"
        }
    }
}