{"Wicket": {"12": {"ground_truth": "0", "bug_report": "open Modal Window without AjaxRequestTarget\nWicket 1.2.2 included a new Modal Window component. However  this component can only be used with a valid AjaxRequestTarget. It would be useful if Modal Windows could be opened programmatically at any time without an AjaxRequestTarget.", "id": "12"}, "16": {"ground_truth": "0", "bug_report": "missing base64/ URL encoding\nyesterday i showed the concept of omponents to a friend and stumled into something i dont understand and think it might be a bug. I have a small panelcompoment that holds a searchform (textfield + submit) nothing special here  the code behind looks like:  @Override public void onSubmit()  { String suchFeld = getSuchfeld(); if(suchFeld.length()&gt;0) { PageParameters params = new PageParameters(); params.add('finde' suchFeld); setResponsePage(Suche.class params); } else { setResponsePage(getPage().getClass()); }  }the component is put into a 'BasePage': public BasePage() { ....  add(bar); add(new SuchPanel('SuchPanel')); .....}wich is then extended by the real page:public class Foo extends BasePage{ /** Creates a new instance of Zigarren */ public Foo() { }wich works all fine  however if the class name contains non ascii letters(e.g:    etc.) it gives me a bug if nothing is entered into the search and the partpublic class Zubehr extends BasePage{ /** Creates a new instance of Zubehr */ public Zubehr() { }'setResponsePage(getPage().getClass());' comes to action  the trouble is that the page might have the URL:?wicket:bookmarkablePage=:de.pages.Zubeh%C3%B6rbut the form tries to go to : wicket:bookmarkablePage=:de.pages.Zubeh%F6rwich results in a CODE 404 in the App Server", "id": "16"}, "31": {"ground_truth": "0", "bug_report": "Wrong source paths in build.xml\nThe paths used in the ant build.xml don't match the actual file structure. In particular  the following changes should be made:The following lines should be changed &lt;property name='src.main.dir' value='src/java' /&gt; &lt;property name='src.test.dir' value='src/test' /&gt;into+ &lt;property name='src.main.dir' value='src/main/java' /&gt;+ &lt;property name='src.test.dir' value='src/test/java' /&gt;", "id": "31"}, "38": {"ground_truth": "0", "bug_report": "WicketTester fails when calling clickLink on a ResourceLink to a mounted resource\nBasics of the testcase are:// in WebApplicationapplication.getSharedResources().add('mountedResource'  new MountedResource());ResourceReference mountedResourceRef = new ResourceReference('mountedResource');application.mountSharedResource('/mountedLink'  mountedResourceRef.getSharedResourceKey());// in WebPageadd(new ResourceLink('mountedResourceLink'  new ResourceReference('mountedResource')));// in testcase itselftester.startPage(LinksPage.class);tester.clickLink('mountedResourceLink'); I've attached an Eclipse generated project  it has a build.xml which should work on the command line  and uses TestNG for the tests.The .war (which can be built using Eclipse) has working links.", "id": "38"}, "81": {"ground_truth": "0", "bug_report": "Make debug settings session dependent\nCurrently  the debug settings are global. i.e. everyone gets to see the ajax debug link  or nobody. For production systems it is not acceptable to generate the debug link for all users  but it might be beneficial to quickly see what is going wrong on a site if you can enable the debug link programmatically for a single user.I can imagine that other settings also benefit from this.", "id": "81"}, "82": {"ground_truth": "0", "bug_report": "Support case insensitive mount paths\nhttp://www.nabble.com/Non-case-sensitive-nice-URL-tf2643746.htmlI use nice URL to mount some page in the usual way :mountBookmarkablePage('/Organization'  Organization.class);That is great  but it will make an error if a user enter the url by hand and decide to not use case sensitive. I mean  I can mount organization without the capital letter  but it would make the same error if the user use Capital after that.Is there a way of using Nice URL that is not case sensitive?ThanksMarc", "id": "82"}, "85": {"ground_truth": "0", "bug_report": "FormTester does not set request parameters for unchanged form fields\nWhen using the FormTester  the Form is correctly having its field values  but FormTester does not call setFormComponentValue() for every field. Thus  the request parameters are not set for the next request  when submit() is called.The workaround is to call setValue() for every field.The attached patch fixes the problem for AbstractTextComponent. It also adds a new method getTextComponentValue() as a shortcut to access a field value.", "id": "85"}, "88": {"ground_truth": "0", "bug_report": "NPE in Check.java\nThe Forms examples fails with an NPE in Check.java if (group.hasRawInput()) { String[] inputs = group.getInputAsArray(); for (String input : inputs) &lt;&lt;&lt;&lt;&lt;&lt; NPE { if (value.equals(input)) { tag.put('checked'  'checked'); } } }Juergen", "id": "88"}, "91": {"ground_truth": "0", "bug_report": "Russian Application.properties\nRussian Application.properties", "id": "91"}, "100": {"ground_truth": "0", "bug_report": "extract IPageMap interface from PageMap\nIf we extract a IPageMap interface from PageMap  it will make it easier for clients to provide wrapped/ proxied implementions and gives them more options for implementing custom ISessionStores.", "id": "100"}, "101": {"ground_truth": "0", "bug_report": "Lazy-registration fails for mounted resources.\nIf you mount a CSS resource which has background image url() links  the lazy-resolution code in SharedResourceRequestTarget doesn't search class aliases when it tries to locate the image  which is rather annoying.", "id": "101"}, "105": {"ground_truth": "0", "bug_report": "Remove RequiredTextField from 2.0\nTo cut down on our API and remove some ultra-convenience stuff  Ipropose to remove RequiredTextField from our API. Requiredness iseasily achieved using 'setRequired(true)'  and therefore removes theneed for a special field.Vote was: 3 binding for removal only in 2.0", "id": "105"}, "142": {"ground_truth": "1", "bug_report": "NullPointerException after deserialize wicket.util.concurrent.CopyOnWriteArrayList\nwicket.feedback.FeedbackMessages by default using wicket.util.concurrent.CopyOnWriteArrayList for storage. however CopyOnWriteArrayList internally use a transient Object[] array_ without checking null and lazy initialization. This may cause NullPointerException after session replication or the like. Below is stack trace while testing terracotta session clustering :WicketMessage: unable to get object  model: Model:classname=&#91;wicket.feedback.FeedbackMessagesModel&#93;:attached=true  called with component [MarkupContainer &#91;Component id = messages  page = ngc.wicket.pages.MainPage   path = 7:globalFeedback:feedbackul:messages.FeedbackPanel$MessageListView  isVisible = true  isVersioned = false&#93;]Root cause:java.lang.NullPointerExceptionat wicket.util.concurrent.CopyOnWriteArrayList.size (CopyOnWriteArrayList.java:152)at wicket.feedback.FeedbackMessages.messages(FeedbackMessages.java:258)at wicket.feedback.FeedbackMessagesModel.onGetObject(FeedbackMessagesModel.java:101)at wicket.model.AbstractDetachableModel.getObject (AbstractDetachableModel.java:104)at wicket.Component.getModelObject(Component.java:990)at wicket.markup.html.panel.FeedbackPanel.updateFeedback(FeedbackPanel.java:234)at wicket.Page$2.component (Page.java:372)at wicket.MarkupContainer.visitChildren(MarkupContainer.java:744)at wicket.Page.renderPage(Page.java:368)", "id": "142"}, "144": {"ground_truth": "0", "bug_report": "wrong handling of exceptions for Resource#respond and ComponentResourceRequestTarget#respond\nResource's exception handling is too fragile. Currently (before fix) it looks like this: private final void respond(final IResourceStream resourceStream  final Response response) { try { final OutputStream out = response.getOutputStream(); try { Streams.copy(resourceStream.getInputStream()  out); } finally { resourceStream.close(); out.flush(); } } catch (Exception e) { Throwable throwable = e; boolean ignoreException = false; while (throwable != null) { if (throwable instanceof SocketException) { String message = throwable.getMessage(); ignoreException = message != null &amp;&amp; (message.indexOf('Connection reset by peer') != -1 || message .indexOf('Software caused connection abort') != -1); } else { ignoreException = throwable.getClass().getName() .indexOf('ClientAbortException') &gt;= 0; if (ignoreException) { if (log.isDebugEnabled()) { log.debug('Socket exception ignored for sending Resource ' + 'response to client (ClientAbort)'  e); } break; } } throwable = throwable.getCause(); } if (!ignoreException) { throw new WicketRuntimeException('Unable to render resource stream ' + resourceStream  e); } } }and ComponentResourceRequestTarget re-threw this exception  resulting in Wicket trying to render an error page. One problem with the above code is that it is simply does not cover all appservers/versions/os-ses  nor it that something we should want to support. For instance  an aborted request in Jetty on Linux/ OSX results in an IOException (or more concrete EofException).Besides the fact that this can get you weird behavior in general  handling the exception like we did there is never a good idea. We should never try to render an error page for any exception during a resource request but instead set an appropriate status code. I propose status code 500 (INTERNAL_SERVER_ERROR) for this and put that in ComponentResourceRequestTarget  and alter Resource so that it always re-throws any exception.", "id": "144"}, "149": {"ground_truth": "0", "bug_report": "mounted URLs fail if filterPath is blank\nThe path in RequestParameters needs to begin with a '/' or it will not be found when checking against mounted paths. The slash is prefixed in WicketFilter line 545 when checking isWicketRequest()  but it is not prefixed later when looking for the request target. Proposed fix in patch (to be attached) performs this operation in ServletWebRequest.getPath(); I'm not sure if that is the ideal spot  but I've confirmed that it fixes the problem.", "id": "149"}, "151": {"ground_truth": "0", "bug_report": "set session locale when constructing session object\nCurrently  we create the session objects like this:WebApplication#getSession:if (session == null){ // Create session using session factory session = getSessionFactory().newSession(request); // Set the client Locale for this session session.setLocale(request.getLocale());What I propose is to change the constructor from Session/ WebSession to take in a Locale parameter as well. That would make it possible for custom session classes to fix the locale by setting it in the constructor. Now that is only possible by overriding Session#getLocale", "id": "151"}, "154": {"ground_truth": "0", "bug_report": "Access to init parameters through getServletContext.getInitParameter() not working\nThe command WebApplication.get().getServletContext.getInitParameter('param'); always returns null.The init parameters can only be accessed with the WicketFilter class. A getter in the WebApplication class on the wicketFilter field could work. The previous command could then be replaced with:WebApplication.get().getWicketFilter().getFilterConfig().getInitParameter('param');", "id": "154"}, "155": {"ground_truth": "0", "bug_report": "Extend cases where the exception can be ignored due to an aborted request\nWe should either find more specific catches in Resource#respond or come up with some other way to ensure we can recognize a client abortion. For instance  Jetty 6 on unix-like platforms (tested here on OpenBSD/ OSX) throws EofExceptions which extend IOExceptions and thus are not marked as ignorable. The problem then is that a stack trace will be printed in ComponentResourceRequestTarget  and as many production systems will have some trigger installed that sends an error message/ SMS/ ... that can be quite annoying.Can't we instead of looking at the exception somehow look at the request/ response itself to figure out that a request was aborted? If that is possible  that seems like a much more robust way of solving this.", "id": "155"}, "159": {"ground_truth": "0", "bug_report": "Default code for popups should always try to bring the popped up window to the top (focus)\nThe default implementation of popups (the script generated by PopupSettings) should always try to focus on the popped up window.", "id": "159"}, "165": {"ground_truth": "0", "bug_report": "While testing with FormTester: onSelectionChanged is not being invoked if DropDownChoice is enabled for notifications\nMethod DropDownChoice.onSelectionChanged is never called when testing a drop down by calling formTester.select('dropDownChoiceNotified'  0);In my page: form.add(new DropDownChoice('dropDownChoiceNotified'  candidateChoices  bookChoiceRenderer) { private static final long serialVersionUID = 1L; protected boolean wantOnSelectionChangedNotifications() { return true; } protected void onSelectionChanged(Object arg0) { super.onSelectionChanged(arg0); throw new RuntimeException('notification '+arg0); } });In my unit Test I do: formTester.select('dropDownChoiceNotified'  0);and the drop down component is not being notified.It works fine when testing in a container though.", "id": "165"}, "171": {"ground_truth": "0", "bug_report": "table background='foo' url prefixing\nFor the src attribute of img tags in the html  the url is automatically prefixed by wicket.It would be nice if that happened for the background property of tables  too.", "id": "171"}, "172": {"ground_truth": "0", "bug_report": "Component reAttach and versioning\nI'm reAttaching a component doing something like: MyFooPanel p1 = new MyFooPanel(this  'panel'; MyBarPanel p2 = new MyBarPanel(this  'panel'); p1.reAttach(); When I try to restore to the initial page version I found that the component with id 'panel' is not a children component of the page. I have investigated it and I think it is because when the component is reAttached the order in which the changes are added to the ChangesList is:  Add p2. Remove p1.When the initial version is restored the undo functionality is done in reverse mode like   Add p1. Remove p2.The problem is p1 and p2 have the same id  so when p2 is removed what is removing is p1 that has just added. Oscar.", "id": "172"}, "178": {"ground_truth": "0", "bug_report": "Uncaught exception guesing urls using CryptedUrlWebRequestCodingStrategy\nWhen used the CryptedUrlWebRequestCodingStrategy strategy in my wicket application I get an uncaught exception when trying to hack urls in the browser address bar.Configuration: @Override protected IRequestCycleProcessor newRequestCycleProcessor() { return new CompoundRequestCycleProcessor(new CryptedUrlWebRequestCodingStrategy( new WebRequestCodingStrategy())  null  null  null  null); } // newRequestCycleProcessor Exception:java.lang.ArrayIndexOutOfBoundsException: 81 at wicket.util.crypt.Base64UrlSafe.decodeBase64(Base64UrlSafe.java:367) at wicket.util.crypt.AbstractCrypt.decryptUrlSafe(AbstractCrypt.java:87) at wicket.protocol.http.request.CryptedUrlWebRequestCodingStrategy.decodeURL(CryptedUrlWebRequestCodingStrategy.java:256) at wicket.protocol.http.request.CryptedUrlWebRequestCodingStrategy.decode(CryptedUrlWebRequestCodingStrategy.java:91) at wicket.Request.getRequestParameters(Request.java:163) at wicket.RequestCycle.step(RequestCycle.java:992) at wicket.RequestCycle.steps(RequestCycle.java:1084) at wicket.RequestCycle.request(RequestCycle.java:454) at wicket.protocol.http.WicketServlet.doGet(WicketServlet.java:219) at javax.servlet.http.HttpServlet.service(HttpServlet.java:697) at javax.servlet.http.HttpServlet.service(HttpServlet.java:810) at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:252) at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:173) at org.jboss.web.tomcat.filters.ReplyHeaderFilter.doFilter(ReplyHeaderFilter.java:96) at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:202) at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:173) at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:213) at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:178) at org.jboss.web.tomcat.security.SecurityAssociationValve.invoke(SecurityAssociationValve.java:175) at org.jboss.web.tomcat.security.JaccContextValve.invoke(JaccContextValve.java:74) at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:126) at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:105) at org.jboss.web.tomcat.tc5.jca.CachedConnectionValve.invoke(CachedConnectionValve.java:156) at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:107) at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:148) at org.apache.coyote.http11.Http11Processor.process(Http11Processor.java:869) at org.apache.coyote.http11.Http11BaseProtocol$Http11ConnectionHandler.processConnection(Http11BaseProtocol.java:664) at org.apache.tomcat.util.net.PoolTcpEndpoint.processSocket(PoolTcpEndpoint.java:527) at org.apache.tomcat.util.net.MasterSlaveWorkerThread.run(MasterSlaveWorkerThread.java:112) at java.lang.Thread.run(Thread.java:595)I'd except that this exception would be caught an a user is taken to a user friendly error page  possibly the default error page.", "id": "178"}, "215": {"ground_truth": "0", "bug_report": "creating a mountBookmarkablePage with PageMap\nfrom wicket-user@lists.sourceforge.net:On 1/18/07  Igor Vaynberg &lt;igor.vaynberg@gmail.com&gt; wrote:lol  yesi think someone got a bit overzealous with typesafety. please create a jira issue for it and we will change PageMap pageMap to String pageMapName-igorOn 1/17/07  Kadir Sener GUMUS &lt;chaoticknight@gmail.com&gt; wrote:Hi i want to mount a bookmarkablePage with custom pagemap parameter in Application.init() but as a normal result i am experiencing with no session error. Because PageMap.forName('') requires a session. so can i ask you what the method 'mountBookmarkablePage(String path  PageMap pageMap  Class bookmarkablePageClass)' is for? where do i have to define that? i couldnt find any usage description for the method. Thanks.Kadir", "id": "215"}, "218": {"ground_truth": "0", "bug_report": "Removing comments from markup can fail\nMarkup with comments in it sometimes causes Wicket to crash with a nasty StringIndexOutOfBoundsException.", "id": "218"}, "240": {"ground_truth": "1", "bug_report": "NPE in RequestLogger?\njava.lang.NullPointerException at java.util.LinkedList.writeObject(LinkedList.java:755) at sun.reflect.GeneratedMethodAccessor41.invoke(Unknown Source) at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25) at java.lang.reflect.Method.invoke(Method.java:585) at java.io.ObjectStreamClass.invokeWriteObject(ObjectStreamClass.java:917) at java.io.ObjectOutputStream.writeSerialData(ObjectOutputStream.java:1339) at java.io.ObjectOutputStream.writeOrdinaryObject(ObjectOutputStream.java:1290) at java.io.ObjectOutputStream.writeObject0(ObjectOutputStream.java:1079) at java.io.ObjectOutputStream.defaultWriteFields(ObjectOutputStream.java:1375) at java.io.ObjectOutputStream.writeSerialData(ObjectOutputStream.java:1347) at java.io.ObjectOutputStream.writeOrdinaryObject(ObjectOutputStream.java:1290) at java.io.ObjectOutputStream.writeObject0(ObjectOutputStream.java:1079) at java.io.ObjectOutputStream.writeObject(ObjectOutputStream.java:302) at wicket.util.lang.Objects.sizeof(Objects.java:1058) at wicket.Session.getSizeInBytes(Session.java:627) at wicket.protocol.http.RequestLogger.requestTime(RequestLogger.java:215) at wicket.RequestCycle.detach(RequestCycle.java:882) at wicket.RequestCycle.steps(RequestCycle.java:1118) at wicket.RequestCycle.request(RequestCycle.java:454) at wicket.protocol.http.WicketFilter.doGet(WicketFilter.java:243) at wicket.protocol.http.WicketServlet.doGet(WicketServlet.java:136) at javax.servlet.http.HttpServlet.service(HttpServlet.java:689)", "id": "240"}, "245": {"ground_truth": "0", "bug_report": "WicketServlet deprecation and WicketFilter\nHi I'm one of the maintainer of ops4j-pax-wicket. Atm  I'm trying tomigrate pax-wicket to wicket-2.0 that can be found at(https://scm.ops4j.org/repos/ops4j/branches/pax/wicket-2.0).One of the problem that I found during migration is the fact thatWicketFilter uses reflection to instantiate application factory byusing the FilterConfig.getInitParam( 'applicationFactoryClassName' ).Since this is not advisable in OSGi (Due to problem of ensuringwhoever export the wicket bundle must have it's classloader be able toload the application factory) and HttpService does not support Filter.It would be better if the old pattern of WicketServlet is supported.&lt;code&gt;public class WicketServlet{ protected WicketFilter newWicketFilter() { return new WicketFilter(); } public void init() { wicketFilter = newWicketFilter(); filter.init(new FilterConfig() { ... }); }}&lt;/code&gt;This way  I would be able to override the instantiation ofWicketFilter without having to reimplement my FilterConfig.For example  my wicket servlet will look like like:&lt;code&gt;final class MyWicketServlet extends WicketServlet{ private final IWebApplicationFactory m_appFactory; MyWicketServlet( IWebApplicationFactory factory ) { m_appFactory = factory; } protected final WicketFilter newWicketFilter() { return new WicketFilter() { protected IWebApplicationFactory getApplicationFactory() { return MyWicketServlet.this.m_appFactory; } }; }}&lt;/code&gt;This way  reflection will not be used anymore in both instantiatingWebApplication (bypassing ContextParamWebApplicationFactory class) andIWebApplicationFactory.Regards Edward YakopNote:Can we please remove the log.info part to mark WicketServlet is deprecated.&lt;code&gt;public WicketServlet(){ // log warning log.info('********************************************'); log.info('DEPRECATED! Please use WicketFilter instead.'); log.info('********************************************');}&lt;/code&gt;Reply from Johan Compagner (jcompagner@gmail.com)We will remove the warnings about the deprication when we will release 1.3/2.0for now we want to point people as much as possible to the wicket filter.The wicket servlet will still be there.So you just want a factory method in wicket servlet where you can make the wicket filter?can you add a RFE for this:https://issues.apache.org/jira/secure/IssueNavigator.jspa?reset=true&amp;mode=hide&amp;pid=12310561&amp;sorter/order=DESC&amp;sorter/field=priority&amp;resolution=-1&amp;component=12311420then i will add the factory method asap.johan", "id": "245"}, "254": {"ground_truth": "0", "bug_report": "Allow to set field values before submitting a form with Ajax in WicketTester\nI have code to validate {{TextField}}s one by one with ajax. While the code works  I wasn't able to assert it working with WicketTester.The attached quickstart can be used to reproduce the problem on a 2.0 snapshot. The code works in a browser (validity gets toggled true / false when changing the input length)  but WicketTester fails. With WicketTester  the ajax event gets triggered (and it calls validate on the field)  but isValid always returns true.", "id": "254"}, "255": {"ground_truth": "0", "bug_report": "pallete: ' is missing in HTML\nIndex: Palette.html===================================================================&#8212; Palette.html (revision 503672)+++ Palette.html (working copy)@@ -37 7 +37 7 @@ &lt;td class='buttons'&gt; &lt;button type='button' wicket:id='addButton' class='button add'&gt;&lt;img wicket:id='image' src='add.gif'/&gt;&lt;/button&gt;&lt;br/&gt; &lt;button type='button' wicket:id='removeButton' class='button remove'&gt;&lt;img wicket:id='image' src='remove.gif'/&gt;&lt;/button&gt;&lt;br/&gt; &lt;button type='button' wicket:id='moveUpButton' class button up'&gt;&lt;img wicket:id='image' src='up.gif'/&gt;&lt;/button&gt;&lt;br/&gt;+ &lt;button type='button' wicket:id='moveUpButton' class='button up'&gt;&lt;img wicket:id='image' src='up.gif'/&gt;&lt;/button&gt;&lt;br/&gt; &lt;button type='button' wicket:id='moveDownButton' class='button down'&gt;&lt;img wicket:id='image' src='down.gif'/&gt;&lt;/button&gt;&lt;br/&gt; &lt;/td&gt; &lt;td class='pane selection'&gt;", "id": "255"}, "269": {"ground_truth": "0", "bug_report": "Calls to enabled and visibleInHierarchy should not be done in component resolving.\nCurrently  the check(s) on whether a component may receive a call is done too early  namely during resolving the request target. This is a problem when components depend on things being initialized in the page or component using detachement. There is also some code duplication. The proper place for this check is in RequestListenerInterface#invoke.", "id": "269"}, "277": {"ground_truth": "0", "bug_report": "EmailAddressPatternValidator does not correctly identify TLDs with more than 3 letters\nThe following is already fixed in wicket-1.2  but doesn't seem to have made it into 2.0 yet. The following looks like a valid regex for this:^&#91;_A-Za-z0-9-&#93;(//.&#91;_A-Za-z0-9-&#93;)@&#91;A-Za-z0-9-&#93;(//.&#91;A-Za-z0-9-&#93;)((.&#91;A-Za-z&#93;{2 }){1}$)", "id": "277"}, "292": {"ground_truth": "0", "bug_report": "Remove IRequestTarget.getLock and the synchronize blocks using it\nSynchronization is now done in Session#getPage  which is a better place and makes IRequestTarget#getLock redundant. We should remove that method and the code that depends on it.", "id": "292"}, "293": {"ground_truth": "0", "bug_report": "PackageRequestTargetUrlCodingStrategy should interrupts the cycle and sends a 404 when a page/class cannot be found.\nUsing PackageRequestTargetUrlCodingStrategy and manually hacking the url in the browser will throw up a RuntimeException if it cannot load a corresponding page class. Same could happen if the bookmarkable page does not exist anymore  etc... see stacktrace below.The expected behavior is to interrupt the cycle and sends a 404.wicket.WicketRuntimeException: Unable to load class with name: com.mycompany.wicket.pages.xyzw at wicket.application.DefaultClassResolver.resolveClass(DefaultClassResolver.java:70) at wicket.request.target.coding.PackageRequestTargetUrlCodingStrategy.decode(PackageRequestTargetUrlCodingStrategy.java:80) at wicket.protocol.http.request.WebRequestCodingStrategy.targetForRequest(WebRequestCodingStrategy.java:363) at wicket.protocol.http.request.CryptedUrlWebRequestCodingStrategy.targetForRequest(CryptedUrlWebRequestCodingStrategy.java:154) at wicket.request.compound.DefaultRequestTargetResolverStrategy.resolve(DefaultRequestTargetResolverStrategy.java:84) at wicket.request.compound.AbstractCompoundRequestCycleProcessor.resolve(AbstractCompoundRequestCycleProcessor.java:47) at wicket.RequestCycle.step(RequestCycle.java:1008) at wicket.RequestCycle.steps(RequestCycle.java:1100) at wicket.RequestCycle.request(RequestCycle.java:454) at wicket.protocol.http.WicketFilter.doGet(WicketFilter.java:243) at wicket.protocol.http.WicketFilter.doFilter(WicketFilter.java:122)", "id": "293"}, "301": {"ground_truth": "0", "bug_report": "Translation for Czech language\nHi  here is translation of Application properties for Czech language (for wicket-1.2.5)  file name Application_cs.properties.", "id": "301"}, "323": {"ground_truth": "0", "bug_report": "AjaxEditableLabel on setModel does not update the labels model only the editors\nThe AjaxEditableLabel when you perform a setModel() it will go ahead and update the underlying model of the editor however  it does not update the underlying model of the Label", "id": "323"}, "327": {"ground_truth": "0", "bug_report": "Download link does not set Content-Type and Content-Length headers\nWhen using a wicket download link  response headers Content-Type and Content-Length headers are not set.", "id": "327"}, "330": {"ground_truth": "0", "bug_report": "CheckBox incorrectly converts its model value when a custom Boolean converter is installed\nWhen I use a custom localized Boolean converter (using my custom IConverterLocator) that converts 'Ano' to true and 'Ne' to false (Czech words for 'yes' and 'no') the CheckBox with 'true' getModelObject() will render unchecked. The problem is that CheckBox uses Strings.isTrue() to convert a value returned by getModelObjectAsString() which uses converters. The result is that true is incorrectly converted to false...true -&gt; convertToString() -&gt; 'Ano' -&gt; Strings.isTrue() -&gt; false", "id": "330"}, "336": {"ground_truth": "0", "bug_report": "Inheritable model cannot be a wrap model\nIn the code of Component:initModel()  when it comes accross an IWrapModel  it always gets its nested model  not considering if this model itself might be an IInheritableModel. for (Component current = getParent(); current != null; current = current.getParent()) { // Get model IModel model = current.getModel(); if (model instanceof IWrapModel) { model = ((IWrapModel)model).getNestedModel(); } if (model instanceof IInheritableModel) { .... } }Would it be correct do make the following correction ? if (model instanceof IWrapModel &amp;&amp; !(model instanceof IInheritableModel)) { model = ((IWrapModel)model).getNestedModel(); }", "id": "336"}, "344": {"ground_truth": "0", "bug_report": "clock component doesn't display seconds in some Locales\nThe Clock component used in ajax Clock and WorldClock examples do not show the seconds with some locales (at least with french locale). This make the example less easy to see in action (updated only once a minute).Replacing:df = DateFormat.getDateTimeInstance(DateFormat.FULL  DateFormat.FULL);by:df = DateFormat.getDateTimeInstance(DateFormat.FULL  DateFormat.FULL  Locale.US);would make it behave the same whatever the default locale is.", "id": "344"}, "345": {"ground_truth": "0", "bug_report": "BookmarkablePageLink only sets the target attribute when it exists in the markup\nBookmarkablePageLink adds an attribute modifier to itself when setPageMap is called. However  it creates the attribute modifier in such a fashion that it is only applied when the target attribute is already in the markup. The initial goal to implement it like that was to make the change unobtrusive. I'm backtracking on that now though  as I now think it is actually half baked. I'd like to change the behavior so that it /always/ sets the target when you call setPageMap on it. This would mean that you'll popup another window if you try to link to a different page map in the same screen  but you shouldn't do that anyway.See http://www.nabble.com/Re%3A-Extending-wicket.markup.html.tree.Tree-p9273422.html for a problem this would fix.", "id": "345"}, "362": {"ground_truth": "0", "bug_report": "Add ability to manage disabled items from subclasses of AbstractChoice\nAbstractChoice does almost everything but disabled items. This patch adds that ability.This is my first patch to Wicket. I had some question about whether to include a default implementation for isDisabled()  but that would have required a Map to be supplied. Then I started wondering about whether four more ctors should be provided to pass in the map. Then I decided it was better managed by the subclass. It can always be improved later.", "id": "362"}, "371": {"ground_truth": "0", "bug_report": "@SpringBean support of non-singleton beans\nTwo fixes:In wicket-spring: SpringBeanLocator got a new property called singletonBean  which is true if the bean is a singleton(the property is set in the constructor)In wicket-spring-annot:AnnotProxyFieldValueFactory is modified that if the bean is a non-singleton  then bypass the cache", "id": "371"}, "373": {"ground_truth": "0", "bug_report": "Some components miss localization (NavigatorLabel  Palette)\nwicket.extensions.markup.html.repeater.data.table.NavigatorLabel should be localized. Now there's hard coded string Showing xxx to yyy of zzzwicket.extensions.markup.html.form.palette.Palette - method newAvailableHeader and newSelectedHeader. It think it should be better to use localized model instead of hardcoded strings 'Available' and 'Selected'", "id": "373"}, "382": {"ground_truth": "0", "bug_report": "Converter misusage/mangling in RadioChoice\n1.x RadioChoice:433 is doing conversion. I don't think it should be.I think the default ChoiceRenderer should be doing the conversion  and that if you supply your own  no conversion should be done.", "id": "382"}, "394": {"ground_truth": "0", "bug_report": "[Patch] do not serialize choices and select in palette.\nIt takes a long useless time", "id": "394"}, "396": {"ground_truth": "0", "bug_report": "Wicket.Focus code utterly breaks AjaxEditableLabel\nThe Wicket.Focus javascript is nice and clever  but isn't clever enough - we've overlooked the use case where people want to set the focus in their AJAX callback to another component.This is particularly bad for the AjaxEditableLabel case  because onblur() on the text field that it pops up causes it to submit the value back to the server and finish the editing process and go away. So the text field pops up  and then wicket moves the focus somewhere else  so it goes away again immediately. Maybe a good stab at fixing 90% of the problem would be to see if the JS in the response has the word 'focus' in it  and not do the focusing if it does?Looking at the user list  I think Johan is the Wicket.Focus man  so I'm assigning this to him. Johan - if this isn't really your domain  obviously feel free to unassign and accept my apologies.", "id": "396"}, "397": {"ground_truth": "0", "bug_report": "DropDownChoice  empty Model wrong default encoding of special chars\nIv the DDChoice is empty at first  you get a 'Bitte Auswhlen' wich is wrongly decoded as 'Bitte Ausw?%len' - so the encoding needs to be checked that it gets correctly encoded according to HTML like &auml;", "id": "397"}, "404": {"ground_truth": "0", "bug_report": "Using Borders with Markup Inheritance causes component resolution failures\nIf a Border is used by the BasePage in a markup inheritance implementation  Wicket is unable to resolve any of the components in the child page.I will attach a simple testcase for this.", "id": "404"}, "416": {"ground_truth": "0", "bug_report": "Handle / servlet mapping or fail consistenly\nSee WICKET-395We should either handle the / mapping  or if it's too difficult  throw an exception in WicketFilter when / is met in web.xml.", "id": "416"}, "417": {"ground_truth": "0", "bug_report": "Be able to add string arrays to configuration of DatePicker\nAs it stands the DatePicker doesnt allow the user to configure anything but simple values as configuration for the YUI Calendar. This is problematic if you want to change the weekdays / month labels etc...", "id": "417"}, "418": {"ground_truth": "0", "bug_report": "Ajax requests don't detach component models\nAfter ajax request the component models are not detached. Page onDetach should detach those models  but since the page itself is not attached  the onDetach method is not called.It's necessary to always call page.detachModels after request. And we should only call page.detach from the request target. The ajax request target should not page.detach  as the behaviorrequesttarget should do that.", "id": "418"}, "429": {"ground_truth": "0", "bug_report": "NullPointerException in MarkupFragmentFinder.find()\nIf ID of any component in MarkupStream is null (for example in ends with tags)  the method MarkupFragmentFinder.find() may crash. See patch...", "id": "429"}, "433": {"ground_truth": "0", "bug_report": "improved reporting on locked page maps\nIt would be cool if we could log some more information on which request is locking another request when it times out. Currently  we get an error like:exception: After 1 minute the Pagemap null is still locked by: Thread&#91;Jetty thread-105 5 main&#93;  giving up trying to get the page for path: 0:1but Thread&#91;Jetty thread-105 5 main&#93; is hardly useful in a log. More useful would be e.g. the request target.", "id": "433"}, "455": {"ground_truth": "0", "bug_report": "mvn jetty:run; maven-jetty-plugin not configured\nmaven-jetty-plugin not configured for wicket-quickstart.", "id": "455"}, "464": {"ground_truth": "0", "bug_report": "Add global override to disable gzip compression (SAP double-compresses).\nIt should be possible to deactivate gzip compression. Sometimes gzip is already handled by a proxy server or gzip raises problems (like I experienced on SAP J2EE Enterprise Server).Default should be 'on'.It's always good to have an option.", "id": "464"}, "467": {"ground_truth": "0", "bug_report": "Feedback is not cleaned up upon AJAX-requests\nWhen doing validation with AjaxFormComponentUpdatingBehavior once an error message is attached to a component it gets sticky and is not refreshed upon new ajax requests. It seems as if feedback is not cleaned up so onEvent always takes the hasError branch  independently of validation results.", "id": "467"}, "499": {"ground_truth": "0", "bug_report": "Investigate whether we can use component meta data for the storage of feedback messages\nInvestigate this. See also http://www.nabble.com/Re%3A-svn-commit%3A-r530991---in--incubator-wicket-trunk-jdk-1.4-wicket-src-main-java-org-apache-wicket%3A-Session.java-feedback-FeedbackMessages.java-p10119808.htmlAdvantages of doing this: it is a one-one mapping of the concept that you set a message on a component; you'll never have to worry about cleanup up; just clean up rendered messages  and leave unrendered for whenever they are request or until the component is garbage collected.Disadvantages: no central storage place  making it harder to track. probably less efficient in both storage and processing.", "id": "499"}, "501": {"ground_truth": "0", "bug_report": "JavaScript comment stripping doesn't handle regexps\nThe following line is crippled when using javascript comment stripping(from jquery.js) // Handle the common XPath // expression if ( !t.indexOf('//') ) {it will be result in if ( !t.indexOf('the // inside the string quotes are taken as a comment instead of as a string...", "id": "501"}, "518": {"ground_truth": "0", "bug_report": "Change name of IFormProcessingListener\nSee http://www.nabble.com/what-is-the-use-case-for-IFormProcessingListener-tf3635720.html#a10152501", "id": "518"}, "536": {"ground_truth": "0", "bug_report": "ModalWindow does not function under Opera\nInitial ModalWindow appears  but with the title: 'Blank Page'. The window remains unpopulated.", "id": "536"}, "541": {"ground_truth": "0", "bug_report": "Better error message for problematic configuration\nUseful when for example build fails to set up configuration.", "id": "541"}, "549": {"ground_truth": "0", "bug_report": "HeaderContributions are missing if  is a Component.\n&#8212; issue copy-pasted from mailing list &#8212;On 5/9/07  Peter Ertl &lt;peter.ertl@gmx.net&gt; wrote:Hi folks I try to setup a multi-language website like that:&lt;? xml version= '1.0' encoding ='UTF-8' ?&gt;&lt;! DOCTYPE html PUBLIC '-//W3C//DTD XHTML 1.0 Strict//EN' 'http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd'&gt;&lt;html wicket:id='html' xmlns:wicket xmlns=' http://www.w3.org/1999/xhtml'xmlns:lang=&#91;current language&#93; lang=&#91;current language&#93;&gt;....However  accessing &lt;html&gt; using a wicket:id will fail:org.apache.wicket.WicketRuntimeException: Programmingerror: 'parent' should be a Page or a Border.changing the tag using a MarkupFilter will also fail as it requires tovalue of the current locale of WebSessionbut the markup filter seems to allow no access to it.It would be straightforward to just access html using a wicket:id...imho this would be a great enhancement!Can somebody think of a better solution?On 5/9/07  Johan Compagner &lt;jcompagner@gmail.com&gt; wrote:hmm this is because of the HtmlHeaderContainer that container wants a pageto be its parent.So you can't attach a wicket container to the html because then youencapsulate the complete page.i dont know immediantly how to solve this", "id": "549"}, "550": {"ground_truth": "0", "bug_report": "Use WebRequestEncoder everywhere a query string is constructed\nUse WebRequestEncoder everywhere a query string is constructed", "id": "550"}, "559": {"ground_truth": "0", "bug_report": "LocalizedImageResource escapes ampersands twice (regression)\nurlFor returns escaped ampersands (apparently  a change) so LocalizedImageResource should not do it a second time.", "id": "559"}, "566": {"ground_truth": "0", "bug_report": "tests should be test\nIn pom.xml for extension  the following is a typo: &lt;dependency&gt; &lt;groupId&gt;org.apache.wicket&lt;/groupId&gt; &lt;artifactId&gt;wicket&lt;/artifactId&gt; &lt;classifier&gt;tests&lt;/classifier&gt; &lt;scope&gt;tests&lt;/scope&gt;&lt;------------ should be &lt;scope&gt;test&lt;/scope&gt; &lt;/dependency&gt;Now when using mvn eclipse:eclipse and mvn war I get an extra unnecessary test jar", "id": "566"}, "574": {"ground_truth": "0", "bug_report": "WicketTester does not bind created Session to SessionStore\nThe WicketTester constructor  via a call to MockWebApplication.createRequestCycle()  creates a new session but fails to bind it: this.wicketSession = (WebSession) Session.findOrCreate();This means that the session subsequently gets over-written by a new one created in a later call to WicketTester.startPage(). This causes problems for any unit tests which want to set up session data after instantiating a WicketTester  but before calling WicketTester.startPage().The MockWebApplication.createRequestCycle() should probably bind the session immediately after creating it: this.wicketSession = (WebSession) Session.findOrCreate(); getApplication().getSessionStore().bind(getWicketRequest()  wicketSession);Then subsequent calls to startPage() will use this session rather than create a new one.", "id": "574"}, "595": {"ground_truth": "0", "bug_report": "TimeOfDay.next(Calendar) can return time on same day rather than next day\nCurrently code does: calendar.add(Calendar.DATE  1); return Time.valueOf(calendar  this);Because Time.valueOf(Calendar  TimeOfDay) always returns the time on the same day  the add is ignored. Instead this code should be the time of day today plus one day like this: return Time.valueOf(calendar  this).add(Duration.ONE_DAY);", "id": "595"}, "606": {"ground_truth": "0", "bug_report": "AbstractTextComponent#setConvertEmptyInputStringToNull(true) does not work with IObjectClassAwareModels (affects TextField  etc.)\nThe unit tests ought to cover this  but apparently don't. A TextField should convert empty strings to nulls if you call setConvertEmptyInputStringToNull(true) on it (which the constructors do by default).However  this doesn't currently work: AbstractTextComponent#getConvertEmptyInputStringToNull() is only called from AbstractTextComponent#convertValue(String[]). AbstractTextComponent#convertValue(String[]) is called from FormComponent#convert()  but only if the component doesn't have a type assigned to it. As soon as you use a PropertyModel (which implements IObjectClassAwareModel)  this means empty strings are no longer converted to nulls.This is obviously a great big blocker and needs fixing ASAP.", "id": "606"}, "612": {"ground_truth": "0", "bug_report": "HeaderContributor forces relative URL\nI consider this a bug  and was wondering if you do as well... If so  I will open a JIRA and attach a patch for it. Just let me know.In my 1.2.6 app  I have the following line:add(HeaderContributor.forCss('/resources/styles/global.css'));which generates this in the markup (correctly):&lt;link rel ='stylesheet' type='text/css' href='/resources/css/global.css' &gt;&lt;/link&gt;In 1.3  it generates this in the markup (incorrectly):&lt;link rel ='stylesheet' type='text/css' href='../../..//resources/styles/global.css' &gt;&lt;/link&gt;This is because of the change to have everything with relative URLs  I am assuming. But  I don't want a relative URL  I want an absolute one. I'm thinking that the following change would be appropriate:HeaderContributor.java (26)if (location.startsWith('http://') || location.startsWith('https://'))changed to:if (location.startsWith('http://') || location.startsWith('https://') || location.startsWith('/'))", "id": "612"}, "613": {"ground_truth": "0", "bug_report": "Prototype scoped Spring beans\nI copied the following text from my discussion on wicket-user  and was asked to open an issue  so here it is:http://www.nabble.com/Prototype-scoped-Spring-beans-tf3849285.htmlFor a more complex form I wanted to use a 'stateful' Springbean  to which I applied scope='prototype'. The idea is to have one bean instance for every Form instance. I would access the bean with PropertyModels and direct method calls during construction (i.e. setting initial state from input parameters) and during events  which would alter the state. I inject the bean into the Form with @SpringBean annotation.This works somehow  but sometimes  especially after using the backbutton  I had the problem that the internal state was reset. So I analyzed the stack in the constructor of the bean implementation  and found out that it was called twice during construction of the Form. First  during the super() call  and then again in the next line during a method call on that bean. I appended both stacktraces below. The proxy itself does not change.This happens again after going back and e.g. submitting again. This results in a NPE  because the internal state is reset.I understand from reading the mailing list that the Wicket-Proxy does nothing but a lookup in the Application context  and does not know or care about spring scope.And here I'm a little stuck. I am already considering to put the state into the Form  and make the Bean a singleton without any internal state. As that would mean some heavy refactoring  I would prefer a way where the Spring acces would work as I want. Or is this a wrong way altogether?", "id": "613"}, "628": {"ground_truth": "0", "bug_report": "WicketFilter tries to call setClassLoader() even if it's not changing the default - doesn't work on strict SecurityManagers.\nAs summary. Solution is to avoid setting the classloader if it's not actually changed.", "id": "628"}, "631": {"ground_truth": "0", "bug_report": "Resource.getParameters() empty when resource is mounted\nAfter migrating my application from 1.2.6 to 1.3.0-incubating-SNAPSHOT mounted shared resources (rss feeds  uploaded images) stopped working.DynamicWebResource.getParameters().getXXX() returns with null if the resource is mounted via Application.mountSharedResource but it works fine when the resource is not mounted.", "id": "631"}, "637": {"ground_truth": "0", "bug_report": "wicket-examples grey-on-white colour scheme is very hard to read\nThe current wicket-examples colour scheme is light grey text on a white background. This is very low in contrast  and difficult to read.In the source code views  which unlike the rest  use a smaller serif font  this is especially noticeable.Even something as simple as switching to plain black on white would be an immediate benefit.", "id": "637"}, "638": {"ground_truth": "0", "bug_report": "wicket-examples source code view is not resizable\nThe wicket-examples source code view is not resizable  and is rather small on larger screens.", "id": "638"}, "661": {"ground_truth": "0", "bug_report": "fire onchange event of associated component after date selection\nsometimes it's desirable to be notified after a date was selected.therefore the change event (onchange() method) of the associated component should be fired.to not break existing code  a second constructor should be added to specify whether the event should be fired  whereas the default behavior is to not fire the event.", "id": "661"}, "663": {"ground_truth": "0", "bug_report": "enhance ichoicerenderer with id->choice object lookup\nadd object idtochoice(string id) to ichoicerenderer and add class choicerenderer implements ichoicerenderer that encapsulate the default linear searchthen we can remove method added in WICKET-348 to support a custom lookup", "id": "663"}, "667": {"ground_truth": "0", "bug_report": "[PATCH] remove XX in firefox and palette\nI know it is a firefox bug but we can workaround (at least into palette) this with the attach patch", "id": "667"}, "669": {"ground_truth": "0", "bug_report": "AjaxEditableLabel needs Model for adding a IValidator\nIf you add a IValidator to a AjaxEditableLabel which has no model yet  one gets the following Exception:java.lang.IllegalStateException: No model found for this component  either pass one explicitly or make sure an inheritable model is available. This component is not added to a parent yet  so if this component is supposed to use the model of the parent (e.g. when it uses a compound property model)  add it first before further configuring the component calling methods like e.g. setType and addValidator. at org.apache.wicket.extensions.ajax.markup.html.AjaxEditableLabel.getParentModel(AjaxEditableLabel.java:450) at org.apache.wicket.extensions.ajax.markup.html.AjaxEditableLabel.getEditor(AjaxEditableLabel.java:310) at org.apache.wicket.extensions.ajax.markup.html.AjaxEditableLabel.add(AjaxEditableLabel.java:194)The error message is very clear. There should be a small hint in the JavaDoc for add(IValidator):/** Adds a validator to this form component. A model must be available for this component before Validators can be added. Either add this Component to its parent (already having a Model)  or provide one directly before this call via constructor {@link #AjaxEditableLabel(String IModel)} or {@link #setModel(IModel)}.  @param validator The validator @return This */", "id": "669"}, "672": {"ground_truth": "0", "bug_report": "DateTextField is too session-heavy\norg.apache.wicket.extensions.markup.html.form.DateTextField seems too heavy for http session - it holds SimpleDateFormat instance which in turn holds DateFormatSymbols instance which in turn has several arrays inside.", "id": "672"}, "685": {"ground_truth": "0", "bug_report": "ReloadingWicketFilter not working with markup inheritance\nThis is happening for latest snapshot (2007-06-22). Last time I refreshed from Maven was 2007-06-06 when things were working fine.Problem occurs when I use the ReloadingWicketFilter  does not matter if in Wicket development mode or not.My login page is not using markup inheritance  it works fine. But after login success  next page (home page) causes this error:=========2007-06-22 22:46:15 531 &#91;btpool0-6&#93; DEBUG &#91;org.apache.wicket.application.ReloadingClassLoader&#93; - clzLocation=/E:/peter/jtrac-trunk/jtrac/target/jtrac/WEB-INF/classes/info/jtrac/wicket/BasePage.class2007-06-22 22:46:15 562 &#91;btpool0-6&#93; INFO &#91;org.apache.wicket.application.ReloadingClassLoader&#93; - Watching changes of class E:/peter/jtrac-trunk/jtrac/target/jtrac/WEB-INF/classes/info/jtrac/wicket/BasePage.class2007-06-22 22:46:15 562 &#91;btpool0-6&#93; DEBUG &#91;org.apache.wicket.application.ReloadingClassLoader&#93; - clzLocation=/E:/peter/jtrac-trunk/jtrac/target/jtrac/WEB-INF/classes/info/jtrac/wicket/DashboardPage.class2007-06-22 22:46:15 562 &#91;btpool0-6&#93; INFO &#91;org.apache.wicket.application.ReloadingClassLoader&#93; - Watching changes of class E:/peter/jtrac-trunk/jtrac/target/jtrac/WEB-INF/classes/info/jtrac/wicket/DashboardPage.class2007-06-22 22:46:15 562 &#91;btpool0-6&#93; ERROR &#91;org.apache.wicket.RequestCycle&#93; - Markup of type 'html' for component 'info.jtrac.wicket.DashboardPage' not found. Enable debug messages for org.apache.wicket.util.resource to get a list of all filenames tried:&#91;Page class = info.jtrac.wicket.DashboardPage  id = 1  version = 0&#93;org.apache.wicket.markup.MarkupNotFoundException: Markup of type 'html' for component 'info.jtrac.wicket.DashboardPage' not found. Enable debug messages for org.apache.wicket.util.resource to get a list of all filenames tried:&#91;Page class = info.jtrac.wicket.DashboardPage  id = 1  version = 0&#93; at org.apache.wicket.MarkupContainer.getAssociatedMarkupStream(MarkupContainer.java:342) at org.apache.wicket.markup.html.WebPage.onBeforeRender(WebPage.java:363) at org.apache.wicket.Component.beforeRender(Component.java:846) at org.apache.wicket.Page.renderPage(Page.java:885) at org.apache.wicket.request.target.component.BookmarkablePageRequestTarget.respond(BookmarkablePageRequestTarget.java:225)============Root cause:org.apache.wicket.WicketRuntimeException: Parameter clazz must be instance of containerat org.apache.wicket.markup.MarkupCache.getMarkup(MarkupCache.java:244)at org.apache.wicket.markup.loader.InheritedMarkupMarkupLoader.checkForMarkupInheritance(InheritedMarkupMarkupLoader.java:99)at org.apache.wicket.markup.loader.InheritedMarkupMarkupLoader.loadMarkup(InheritedMarkupMarkupLoader.java:65)at org.apache.wicket.markup.loader.DefaultMarkupLoader.loadMarkup(DefaultMarkupLoader.java:56)at org.apache.wicket.markup.MarkupCache.loadMarkup(MarkupCache.java:389)at org.apache.wicket.markup.MarkupCache.loadMarkupAndWatchForChanges(MarkupCache.java:462)at org.apache.wicket.markup.MarkupCache.getMarkup(MarkupCache.java:282)at org.apache.wicket.markup.MarkupCache.getMarkupStream(MarkupCache.java:188)at org.apache.wicket.MarkupContainer.getAssociatedMarkupStream(MarkupContainer.java:331)at org.apache.wicket.markup.html.WebPage.onBeforeRender(WebPage.java:363)at org.apache.wicket.Component.beforeRender(Component.java:846)at org.apache.wicket.Page.renderPage(Page.java:885)at org.apache.wicket.request.target.component.BookmarkablePageRequestTarget.respond(BookmarkablePageRequestTarget.java:225)===========Couple of other points  if I now type in the URL of another page which is bookmarkable  that works and from there if I go to the home page things are fine. Looks like now the class + markup gets cached etc.Another thing is if in my extension of ReloadingWicketFilter I exclude the class that is the base page for markup inheritance  things start working but I get a different class conflict error somewhere deep in the navigation and component hierarchy  let me know if you need me to send the lof for this also.If this is of any relevance  I am using a custom AuthorizationStrategy - so that is how the login page comes up in the first place: throw new RestartResponseAtInterceptPageException(LoginPage.class) - and then from Login page I do continueToOriginalDestination() - maybe this has something to do with it?", "id": "685"}, "695": {"ground_truth": "0", "bug_report": "Border.resolve() should not attempt to render contents if bodyVisible is false\nBorder.resolve() should not attempt to render its nested components if setBorderBodyVisible(false) has been called. This way the behavior would be similar to Component.setVisible() - when the contents are not visible  wicket would not raise an exception if there are no corresponding components for the border's markup.", "id": "695"}, "698": {"ground_truth": "0", "bug_report": "If the model is List  PropertyResolver doesn't try to find fields.\nIf the model is List  PropertyResolver doesn't try to find fields.", "id": "698"}, "703": {"ground_truth": "0", "bug_report": "AjaxEditableChoiceLabel doesn't work\nAjaxEditableChoiceLabel doesn't init properly - it always creates DropDownChoice with null in the choices field. The newEditor() method is called from the AjaxEditableLabel constructor and at that time AjaxEditableChoiceLabel.choices is not initialized yet.", "id": "703"}, "707": {"ground_truth": "0", "bug_report": "Invoking a request listener on a page returns an Expired Error page\nThe Page object being a Component should support the Wicket request listener mechanism. But invoking a request listener on page defined listener object it results in a 'Page Expired' error page. To reproduce it try the following code:public interface IHelloListener extends IRequestListener{ public static final RequestListenerInterface INTERFACE = new RequestListenerInterface(IHelloListener.class); void onHello();}public class HelloWorld extends WebPage implements IHelloListener{ public HelloWorld() { add(new Label('message'  'Hello World!')); WebMarkupContainer link = new WebMarkupContainer('link'); link.add(new SimpleAttributeModifier('href'  RequestCycle.get().urlFor(this  IHelloListener.INTERFACE))); add(link); } public void onHello() { RequestCycle.get().setRequestTarget(new IRequestTarget() { public void detach(RequestCycle requestCycle) { } public void respond(RequestCycle requestCycle) { requestCycle.getResponse().write('&lt;html&gt;&lt;body&gt;HELLO!&lt;/body&gt;&lt;/html&gt;'); } public Object getLock(RequestCycle requestCycle) { return null; } }); }}", "id": "707"}, "709": {"ground_truth": "0", "bug_report": "Unable to remove an IFormValidator from a Form\nIt seems that there is no way to remove an IFormValidator from a Form. Because the fields in my Form are inside Panels (only one of which is present at any given time)  the Form fields are not necessarily children of the Form. When one of the Form's IFormValidators receives a getDependentFormComponents call  it (correctly  I believe) returns the form components that it validates. An exception occurs when getParent is called on these components (in attempt to find the Form somewhere up the hierarchy) up the call stack. Since the change in the Panel that's present is made via an Ajax update  the same update would be able to remove the offending IFormValidator when its Panel is removed. (That is  if there was a method in Form to remove an IFormValidator.) For now  I've hacked it so that my IFormValidator checks whether all its Form Components all have parents before any of its methods return non-null values. (I'm not just changing the Panel visibility because then the hidden Panels would still get validated  and I don't want that to happen.)", "id": "709"}, "716": {"ground_truth": "0", "bug_report": "make getConvertedInput final again and remove final from convert  which should be renamed to convertInput\nSee http://www.nabble.com/Re%3A-Use-getConverterInput-rather-than-updateModel-in-FormComponentPanel-p11399356.html", "id": "716"}, "726": {"ground_truth": "0", "bug_report": "make default maximum upload size an application setting\nCurrent  the default maximum upload size is defined in Form as: /** Maximum size of an upload in bytes */ private Bytes maxSize = Bytes.MAX;It would be better to make this an application setting.", "id": "726"}, "727": {"ground_truth": "0", "bug_report": "WicketTester cause SerializableChecker$WicketNotSerializableException\nWhen turn on logger level to info  testing with wicketTester see lots of SerializableChecker$WicketNotSerializableException stacktrace:ERROR - Objects - Error serializing object class org.apache.wicket.util.tester.DummyHomePage [object=&#91;Page class = org.apache.wicket.util.tester.DummyHomePage  id = 0  version = 0&#93;]org.apache.wicket.util.io.SerializableChecker$WicketNotSerializableException: Unable to serialize class: org.apache.wicket.util.tester.WicketTesterTestField hierarchy is: 0 &#91;class=org.apache.wicket.util.tester.DummyHomePage  path=0&#93; private org.apache.wicket.util.tester.ITestPageSource org.apache.wicket.util.tester.DummyHomePage.testPageSource &#91;class=org.apache.wicket.util.tester.WicketTesterTest$1&#93; final org.apache.wicket.util.tester.WicketTesterTest org.apache.wicket.util.tester.WicketTesterTest$1.this$0 &#91;class=org.apache.wicket.util.tester.WicketTesterTest&#93; &lt;----- field that is not serializable at org.apache.wicket.util.io.SerializableChecker.check(SerializableChecker.java:347) at org.apache.wicket.util.io.SerializableChecker.checkFields(SerializableChecker.java:615)The cause of error is annoymous inner class ITestPageSource:tester.startPage(new ITestPageSource(){ private static final long serialVersionUID = 1L; public Page getTestPage() { Book mockBook = new Book('xxId'  'xxName'); return new ViewBook(mockBook); }});annonymous ITestPageSource instance reference to TestCase and TestCase is not serializable.To avoid serialize TestCase  we can make ITestPageSource field of DummyHomePage transient:public class DummyHomePage extends WebPage{ private transient ITestPageSource testPageSource;....}", "id": "727"}, "728": {"ground_truth": "0", "bug_report": "WicketTester could not handle Multipart form without upload\nWhen testing the form that contains FileUploadField without upload  wicketTester throw exception with message: 'ServletRequest does not contain multipart content'// ex:public class FormTesterTest extends WicketTestCase{ /** Test that formTester deal with Multipart form correctly when no actual upload */ public void testSubmitWithoutUploadFile() { tester.startPage(MockFormFileUploadPage.class); MockFormFileUploadPage page = (MockFormFileUploadPage)tester.getLastRenderedPage(); Session.get().setLocale(Locale.US); FormTester formTester = tester.newFormTester('form'); // without file upload formTester.submit(); assertNull(page.getFileUpload()); tester.assertErrorMessages(new String[] { 'Field 'file' is required.' }); }}The cause is that Form contains FileUploadField is considered as multipart. But MockHttpServletRequest only generate Multipart contentType and contentLength when there is any upload file added via formTester.setFile(...). Thus without any file upload while testing  MultipartServletWebRequest throw exception.To solve this  I try to introduce a flag useMultiPartContentType in MockHttpServletRequest  so FormTester can change MockHttpServletRequest to generate correct contentType.attachment is patch", "id": "728"}, "729": {"ground_truth": "0", "bug_report": "OnChangeAjaxBehavior does not work with  when using Safari\nWith the latest 1.3.0-SNAPSHOT  the following does not work with Safari 2.0.4. The handler is never invoked and the AJAX debug console shows absolutely no activity. The exact same code works with Firefox 2.0.0.4.import java.io.Serializable;import org.apache.wicket.ajax.AjaxRequestTarget;import org.apache.wicket.ajax.form.OnChangeAjaxBehavior;import org.apache.wicket.markup.html.WebPage;import org.apache.wicket.markup.html.form.Form;import org.apache.wicket.markup.html.form.TextArea;import org.apache.wicket.model.Model;import org.apache.wicket.model.PropertyModel;public class WicketBugPage extends WebPage { public WicketBugPage() { super(new Model(new Item())); Form form = new Form('form'); add(form); TextArea description = new TextArea('description'  new PropertyModel(getModel()  'description')); description.add(new OnChangeAjaxBehavior() { @Override protected void onUpdate(AjaxRequestTarget target) { Item item = (Item) getModelObject(); System.out.println(item.getDescription()); } }); form.add(description); } public static class Item implements Serializable { private String description; public void setDescription(String description) { this.description = description; } public String getDescription() { return description; } }}&lt;html&gt;&lt;body&gt; &lt;form wicket:id='form'&gt; &lt;textarea wicket:id='description'&gt;&lt;/textarea&gt; &lt;/form&gt;&lt;/body&gt;&lt;/html&gt;", "id": "729"}, "732": {"ground_truth": "0", "bug_report": "Qualified resource key should take priority over unqualified one\nCurrently an unqualified resource key should take priority over a qualified one? eg  in a properties file:Required=The ${label} is missing!form.username.Required=You must provide your name!The first entry will take priority  while common intuition is that the first one is the default and the second one is overriding it.Please consider reversing it. Thanks!", "id": "732"}, "738": {"ground_truth": "1", "bug_report": "setVisible(false) on Page throws NPE\nFound this by accident while looking for a bug involving misplaced parenthesis add(..).setVisible(false) instead of add(.. .setVisible(false) );public class MyPage extends Page { MyPage() { ... setVisible(false); }...}GivesUnexpected RuntimeExceptionRoot cause:java.lang.NullPointerExceptionat org.apache.wicket.Component.render(Component.java:1977)at org.apache.wicket.Page.renderPage(Page.java:927)at org.apache.wicket.request.target.component.BookmarkablePageRequestTarget.respond(BookmarkablePageRequestTarget.java:225)at org.apache.wicket.request.AbstractRequestCycleProcessor.respond(AbstractRequestCycleProcessor.java:103)at org.apache.wicket.RequestCycle.processEventsAndRespond(RequestCycle.java:1037)at org.apache.wicket.RequestCycle.step(RequestCycle.java:1107)at org.apache.wicket.RequestCycle.steps(RequestCycle.java:1176)at org.apache.wicket.RequestCycle.request(RequestCycle.java:499)at org.apache.wicket.protocol.http.WicketFilter.doGet(WicketFilter.java:257)at org.apache.wicket.protocol.http.WicketFilter.doFilter(WicketFilter.java:127)at org.mortbay.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1089)at org.mortbay.jetty.servlet.ServletHandler.handle(ServletHandler.java:365)at org.mortbay.jetty.security.SecurityHandler.handle(SecurityHandler.java:216)at org.mortbay.jetty.servlet.SessionHandler.handle(SessionHandler.java:181)at org.mortbay.jetty.handler.ContextHandler.handle(ContextHandler.java:712)at org.mortbay.jetty.webapp.WebAppContext.handle(WebAppContext.java:405)at org.mortbay.jetty.handler.HandlerCollection.handle(HandlerCollection.java:114)at org.mortbay.jetty.handler.HandlerWrapper.handle(HandlerWrapper.java:139)at org.mortbay.jetty.Server.handle(Server.java:285)at org.mortbay.jetty.HttpConnection.handleRequest(HttpConnection.java:502)at org.mortbay.jetty.HttpConnection$RequestHandler.headerComplete(HttpConnection.java:821)at org.mortbay.jetty.HttpParser.parseNext(HttpParser.java:513)at org.mortbay.jetty.HttpParser.parseAvailable(HttpParser.java:208)at org.mortbay.jetty.HttpConnection.handle(HttpConnection.java:378)at org.mortbay.jetty.bio.SocketConnector$Connection.run(SocketConnector.java:226)at org.mortbay.thread.BoundedThreadPool$PoolThread.run(BoundedThreadPool.java:442)", "id": "738"}, "748": {"ground_truth": "0", "bug_report": "ServletWebRequest.getRelativePathPrefixToContextRoot generates wrong relative path if current page has URL-encoding in the params.\nActually  this is against 1.3.0-SNAPSHOT revision: 554607I have been trying to find a very annoying  seeminly sporadic  glitch where my images that are relative to the context wouldn't 'find' the image file. Looking at the source  they would have 11 sets of '..' versus the 5 sets that the other resources would have. Here is how I was trying to display the image:&lt;img src='images/find.png'/&gt; I was finally able to produce a scenario in a quickstart to prove the problem exists. It seems that getPath() and getServletPath() don't work the same way  in that I mean  getPath() had the '{' encoded as '%7B' whereas getServletPath() was not encoded.Therefore  this test fails and the path is not properly handled! if (servletPath.endsWith(path))", "id": "748"}, "754": {"ground_truth": "0", "bug_report": "add support for localization\ncurrently  the default language (english) of YUI calendar is used. this makes the datepicker in nonenglish applications quite unusable.i will soon submit a patch with a .properties-file approach.", "id": "754"}, "761": {"ground_truth": "0", "bug_report": "Disable line-precise exceptions for component use check\nvote here:http://www.nabble.com/-VOTE--disable-line-precise-error-reporting-by-default-tf4037146.html#a11469624while looking in the code i noticed that line-precise information is collected under the same setting as component-use-check. i think the exception part should be factored out into a separate setting. component use check is still very valuable without line-precise information and has no perceptible slow down like the line-precise exceptions.", "id": "761"}, "765": {"ground_truth": "0", "bug_report": "default pagemap name of null is not always properly encoded into the url\nwhen pagemap name happens to be the last url parameter and coding strategy is /param1/value1/ the url ends up looking like:/param1/value1/wicket:pageMapName/which when split on '/' produces{param1 value1 wicket:pageMapName}which causesjava.lang.IllegalStateException: URL fragment has unmatched key/value", "id": "765"}, "782": {"ground_truth": "0", "bug_report": "Select doesn't validate 'Required'\nThe Select-Component doesn't validate 'Required' if current user-selection points to an empty value in drop-down-mode.", "id": "782"}, "795": {"ground_truth": "0", "bug_report": "Easy access to final rendered page source\nI'd like a way to run pages through Wicket so that I can grab the final HTML and use it elsewhere (as an email body  for instance). I've been working on it and I've got a working solution  but there is still a snag.Spawned from this thread:http://www.nabble.com/How-to-get-HTML-source-code-from-a-wicket-page-tf3968790.html#a11265339Chunk of working code:http://www.nabble.com/How-to-get-HTML-source-code-from-a-wicket-page-tf3968790.html#a11548230Current existing hurdle:http://www.nabble.com/RequestCycle-goes-null-after-using-WicketTester-within-Wicket-page-tf4153591.htmlOnce I can get this simple bit to work  I'll add parameters and what not...", "id": "795"}, "796": {"ground_truth": "0", "bug_report": "setresponsepage() does not properly redirect from ajax requests\nif you are on a mounted page with parameters  lets say/context/page/param1/param2/and you call setresponsepage() from an NORMAL link on that page you will land on/context/?wicket:interface=...which is correct  however if you do it from an ajax link like so: onclick(ajaxrequesttarget target) { setresponsepage(new mypage()); } you will land on /context/page/param1/param2/?wicket:interface=...which is INCORRECTl. notice that the mount and params were not stripped. also now because wicket thinks url depth is 0 urls will break  for example a resource requested from that page will be:/context/page/param1/param2/resources/..... woopsiewhy this happens:when setresponsepage is called the ?wicket:interface:foo::: url is constructed and passed to webresponse.redirect(url) which in turn calls httpServletResponse.sendRedirect(url); for normal responses or httpServletResponse.addHeader('Ajax-Location'  url); for ajax responses. the big difference is how servletresponse handles this  and from the javadoc: This method can accept relative URLs; the servlet container will convert the relative URL to an absolute URL before sending the response to the client. so what needs to be done is that httpServletResponse.addHeader('Ajax-Location'  url); also needs to mangle the url and make it absolute.since you are the proxy guy and i dont know how this will play into that i am assigning it to you", "id": "796"}, "805": {"ground_truth": "0", "bug_report": "upgrade to SLF4J to version 1.4.2\nSLF4J 1.4.2 was released in July 2007. Can we upgrade SLF4J in the Maven pom?", "id": "805"}, "807": {"ground_truth": "0", "bug_report": "MockHttpServletRequest.addFile does not work with binary files\nhttp://www.nabble.com/Uploading-binary-files-via-MockHttpServletRequest-tf4192893.html#a11934991As stated in the thread  I can upload text (xml) files just fine but binary data does not work. I suspect there are some encoding issues which cause the binary data to be corrupted. buildRequest() looks like it is corrupting the binary data when it pushes the data into String format. I don't think this is right - you should treat the request as a byte array  not a String. I think the MIME or HTTP RFCs might have more info on how binary data is supposed to be packaged within an HTTP request.", "id": "807"}, "823": {"ground_truth": "0", "bug_report": "Empty content inserted into Border - throws ugly exceptions\nThis can be easily reproduced wirth wicket-examples/template/templating using border.Please open: org.apache.wicket.examples.template.border.Page1ant cut ALL the contents inside span  wicket:id='border'It should look like this: &lt;span wicket:id='border'&gt;&lt;/span&gt;After this  the page renders nicely.But if you change it to look like this: &lt;span wicket:id='border' /&gt;there are tons of exceptions that do not say anything useful.I have spent 1 full day fighting with this before I found the reason in my little app.", "id": "823"}, "824": {"ground_truth": "0", "bug_report": "Session id encoding problem in cookie-less mode\nIf I disable session cookies  the URL-encoding does not work. The problem appears in displaying 'page expired' when I click through 'wicket-exmples' . I discovered that HttpServletResponse.encodeUrl() called by WebRequestCodingStrategy.encode() does not encode the session id  if it is called with a relative URL like '?wicket:interface=:0:inputForm:IFormSubmitListener::'. i.e.. starting with '?'.", "id": "824"}, "826": {"ground_truth": "0", "bug_report": "No scrolling behaviour of source code viewer in IE 6\nThe source code viewer does not display scroll bars in IE 6.", "id": "826"}, "827": {"ground_truth": "0", "bug_report": "Ajax refresh fails when a fragment is included in the target\nAttached there is a package to drop into a quickstart project. If contains a panel that is a fragment provider and which also includes an ajax link to refresh the fragment contents. The main page just shows this panel and the provided fragment. Following the link raises the following exception:WicketMessage: Unable to find the markup for the component. That may be due to transparent containers or components implementing IComponentResolver: &#91;Component id = fragmentContent  page = web.fragment.Consumer  path = 0:container:fragment:fragmentContent.Label  isVisible = true  isVersioned = true&#93;Root cause:org.apache.wicket.WicketRuntimeException: Unable to find the markup for the component. That may be due to transparent containers or components implementing IComponentResolver: &#91;Component id = fragmentContent  page = web.fragment.Consumer  path = 0:container:fragment:fragmentContent.Label  isVisible = true  isVersioned = true&#93;at org.apache.wicket.MarkupFragmentFinder.find(MarkupFragmentFinder.java:111)at org.apache.wicket.Component.locateMarkupStream(Component.java:3274)", "id": "827"}, "837": {"ground_truth": "0", "bug_report": "Use -DpackageName if it is specified\nHi Wicket's archetype (http://svn.apache.org/repos/asf/wicket/trunk/archetypes) uses 'groupId' as a placeholder for the package name. If someone specifies Maven's option -DpackageName then this option will be neglected and the produced project will not compile.The attached patch resolves this problem. It works either when -DpackageName is not specified (then -DgroupId is being used).P.S. I put this issue at wicket-quickstart component since there is no such for the archetype.Kind regardsMartin", "id": "837"}, "838": {"ground_truth": "1", "bug_report": "AjaxFormChoiceComponentUpdatingBehavior not working\nI think this is because of its own component field that is hiding that of AbstractAjaxBehavior. Try to run the attached example and you will get:WicketMessage: Exception in rendering component: [MarkupContainer &#91;Component id = _header_  page = com.livra.web.user.RegistrationPage  path = 12:_header_.HtmlHeaderContainer  isVisible = true  isVersioned = true&#93;]Root cause:java.lang.NullPointerExceptionat org.apache.wicket.ajax.form.AjaxFormChoiceComponentUpdatingBehavior.renderHead(AjaxFormChoiceComponentUpdatingBehavior.java:71)at org.apache.wicket.Component.renderHead(Component.java:2266)at org.apache.wicket.markup.html.internal.HtmlHeaderContainer$1.component(HtmlHeaderContainer.java:209)at org.apache.wicket.MarkupContainer.visitChildren(MarkupContainer.java:843)at org.apache.wicket.MarkupContainer.visitChildren(MarkupContainer.java:858)at org.apache.wicket.MarkupContainer.visitChildren(MarkupContainer.java:883)", "id": "838"}, "841": {"ground_truth": "0", "bug_report": "More problems with ajax and transparent containers\nAttached is my attempt to get a list that is ajax refreshed just at the tail. It's implemented as a sort of linked list. There are two versions. 'list' implements each node as a Panel  having contents (a number) and a next container which is made visible and ajax refreshed when one new element is added to the list. 'list2' does the same but using a Fragment instead of a Panel. You guessed  panels works just fine  but for the fragments version I get the usual transparent containers exception when trying to append an element:WicketMessage: Unable to find the markup for the component. That may be due to transparent containers or components implementing IComponentResolver: [MarkupContainer &#91;Component id = nextContainer  page = web.list2.ListPage  path = 0:first:nextContainer.WebMarkupContainer  isVisible = true  isVersioned = true&#93;]Root cause:org.apache.wicket.WicketRuntimeException: Unable to find the markup for the component. That may be due to transparent containers or components implementing IComponentResolver: [MarkupContainer &#91;Component id = nextContainer  page = web.list2.ListPage  path = 0:first:nextContainer.WebMarkupContainer  isVisible = true  isVersioned = true&#93;]at org.apache.wicket.MarkupFragmentFinder.find(MarkupFragmentFinder.java:111)at org.apache.wicket.Component.locateMarkupStream(Component.java:3274)at org.apache.wicket.Component.renderComponent(Component.java:2087)at org.apache.wicket.ajax.AjaxRequestTarget.respondComponent(AjaxRequestTarget.java:772)at org.apache.wicket.ajax.AjaxRequestTarget.respondComponents(AjaxRequestTarget.java:672)at org.apache.wicket.ajax.AjaxRequestTarget.respond(AjaxRequestTarget.java:522)at org.apache.wicket.request.AbstractRequestCycleProcessor.respond(AbstractRequestCycleProcessor.java:103)at org.apache.wicket.RequestCycle.processEventsAndRespond(RequestCycle.java:1038)", "id": "841"}, "846": {"ground_truth": "0", "bug_report": "Javadocs for AbstractDefaultAjaxBehaviorPrecondition#getSuccessScript() and #getPreconditionScript() are swapped\nPrecondition and success description are swapped: /** @return javascript that will run when the ajax call finishes successfully */ protected CharSequence getPreconditionScript() { return null; } /** * @return an optional javacript expression that determines whether the request * will actually execute (in form of return XXX; */ protected CharSequence getSuccessScript() { return null; }", "id": "846"}, "859": {"ground_truth": "0", "bug_report": "DateField's/ DateTimeField's factory methods should pass in ids\nA very stupid mistake  but factory method:protected DateTextField newDateTextField(PropertyModel dateFieldModel)should of course pass in the id that the child component should use:protected DateTextField newDateTextField(String id  PropertyModel dateFieldModel)", "id": "859"}, "861": {"ground_truth": "0", "bug_report": "NumberFormatException with UrlCompressingWebRequestProcessor in WicketTester\nIn my Application I use UrlCompressingWebRequestProcessor. Now I have a JUnit test case with WicketTester and that Application like this:tester.startPage(new ITestPageSource() { public Page getTestPage() { PageParameters params = new PageParameters(); params.add('0'  'param'); return new MyPage(params); }});I get an Exception:java.lang.NumberFormatException: For input string: 'testPage' at java.lang.NumberFormatException.forInputString(NumberFormatException.java:48) at java.lang.Integer.parseInt(Integer.java:447) at java.lang.Integer.parseInt(Integer.java:497) at org.apache.wicket.protocol.http.request.urlcompressing.UrlCompressor.getComponentAndInterfaceForUID(UrlCompressor.java:124) at org.apache.wicket.protocol.http.request.urlcompressing.UrlCompressingWebRequestProcessor.resolveListenerInterfaceTarget(UrlCompressingWebRequestProcessor.java:81) at org.apache.wicket.request.AbstractRequestCycleProcessor.resolveRenderedPage(AbstractRequestCycleProcessor.java:440) at org.apache.wicket.protocol.http.WebRequestCycleProcessor.resolve(WebRequestCycleProcessor.java:139) at org.apache.wicket.RequestCycle.step(RequestCycle.java:1091) at org.apache.wicket.RequestCycle.steps(RequestCycle.java:1177) at org.apache.wicket.RequestCycle.request(RequestCycle.java:500) at org.apache.wicket.protocol.http.MockWebApplication.processRequestCycle(MockWebApplication.java:381) at org.apache.wicket.protocol.http.MockWebApplication.processRequestCycle(MockWebApplication.java:368) at org.apache.wicket.util.tester.BaseWicketTester.executeListener(BaseWicketTester.java:239) at org.apache.wicket.util.tester.BaseWicketTester.startPage(BaseWicketTester.java:224)I could work around this by using WebRequestCycleProcessor for my testing-application.", "id": "861"}, "864": {"ground_truth": "0", "bug_report": "HttpServletResponse.encodeRedirectURL() missing in WicketFilter\nIn class org.apache.wicket.protocol.http.WicketFilter in method doGet a redirect URL is not encoded with HttpServletResponse.encodeRedirectUrl(): 168 // Special-case for home page - we redirect to add a trailing slash. if (relativePath.length() == 0 &amp;&amp; !Strings.stripJSessionId(servletRequest.getRequestURI()).endsWith('/')) { final String redirectUrl = servletRequest.getRequestURI() + '/';--------&gt; servletResponse.sendRedirect(redirectUrl); return; }From Wicket's perspective this seems to be not necessary here to support cookie-less mode. But notice that an application may depend on a session outside the wicket scope e.g. by including a ServletFilter in front of WicketFilter  which handles data in session scope.", "id": "864"}, "871": {"ground_truth": "0", "bug_report": "Markup hirarchy gets messed up when value of  attribute 'background' is a relative path\n$ svn diff -r HEADIndex: src/main/java/org/apache/wicket/quickstart/Index.java===================================================================&#8212; src/main/java/org/apache/wicket/quickstart/Index.java (Revision 568574)+++ src/main/java/org/apache/wicket/quickstart/Index.java (Arbeitskopie)@@ -17 6 +17 7 @@ package org.apache.wicket.quickstart; import org.apache.wicket.PageParameters;+import org.apache.wicket.markup.html.basic.Label; /** Basic bookmarkable index page.@@ -35 5 +36 6 @@ */ public Index(final PageParameters parameters) {+ this.add(new Label('myname'  'Whishing that this is not a bug.')); } }Index: src/main/java/org/apache/wicket/quickstart/Index.html===================================================================    src/main/java/org/apache/wicket/quickstart/Index.html (Revision 568574)+++ src/main/java/org/apache/wicket/quickstart/Index.html (Arbeitskopie)@@ -5 6 +5 9 @@ &lt;body&gt; &lt;h1&gt;QuickStart&lt;/h1&gt; &lt;p&gt;This is your first Wicket application.&lt;/p&gt;+ &lt;span background='images/bg.jpg'&gt;+ &lt;p wicket:id='myname'&gt;Hello&lt;/p&gt;+ &lt;/span&gt; &lt;/body&gt; &lt;/html&gt;", "id": "871"}, "872": {"ground_truth": "0", "bug_report": "Typo in org.apache.wicket.markup.html.tree.res.tree.js causes AJAX tree node addition failures\nThere is a typo in the tree javascript which can sometimes cause node addition failures. Here is the patch:Index: tree.js===================================================================&#8212; tree.js (revision 568693)+++ tree.js (working copy)@@ -46 7 +46 7 @@ Wicket.Tree.createElement = function(elementId  afterId) { var existing = Wicket.$(elementId); if (typeof(existing) != 'undefined' &amp;&amp; exiting != null) {+ if (typeof(existing) != 'undefined' &amp;&amp; existing != null) { Wicket.Tree.askForReload(); }", "id": "872"}, "880": {"ground_truth": "0", "bug_report": "Option to align DatePicker to the left of icon\nwicket-1.3.0-SNAPSHOTI'm using the wicket YUI DatePicker on a DateTextField in my application  and it works quite nicely. The problem is that my date field is on the far right-hand side of the page. When set to align with icon  the DatePicker appears so that the left edge of the calendar is lined up with the left edge of the icon. When I open the DatePicker  the calendar appears mostly offscreen  and the user has to scroll horizontally to interact with it.I wanted my DatePicker to line up the other way - with the calendar's right edge aligned with the right edge of the icon - so the user doesn't have to scroll. I made a RightAlignedDatePicker that does this  but it's not good enough to be a patch  since it duplicates a lot of code unnecessarily. I would like to see this as a standard setting on the wicket DatePicker if possible!I created RightAlignedDatePicker.java only so I could replace DatePicker.js with RightAlignedDatePicker.js. The rest of the code from renderHead() is copied from DatePicker directly. Similarly  I replaced RightAlignedDatePicker.js so that I could replace the showCalendar() method  and introduce my Wicket.DateTime.positionRelativeToLeft() method. The important code that had to be changed was:function showCalendar() { Wicket.DateTime.positionRelativeToLeft = function(subject  target) { targetPos = YAHOO.util.Dom.getXY(target); targetHeight = YAHOO.util.Dom.get(target).offsetHeight; targetWidth = YAHOO.util.Dom.get(target).offsetWidth; var calWidth = YAHOO.util.Dom.get(subject).offsetWidth; YAHOO.util.Dom.setX(subject  targetPos[0] + targetWidth - calWidth); YAHOO.util.Dom.setY(subject  targetPos[1] + targetHeight + 1); } Wicket.DateTime.showCalendar(YAHOO.wicket.${widgetId}DpJs  YAHOO.util.Dom.get('${componentId}').value  '${datePattern}');// if (${alignWithIcon}) Wicket.DateTime.positionRelativeTo(YAHOO.wicket.${widgetId}DpJs.oDomContainer  '${widgetId}Icon'); if (${alignWithIcon}) Wicket.DateTime.positionRelativeToLeft(YAHOO.wicket.${widgetId}DpJs.oDomContainer  '${widgetId}Icon'); }I tried introducing the positionRelativeToLeft method elsewhere  but I started running into javascript errors  so I left it here. There could be an extra (optional) parameter added to Wicket.DateTime.positionRelativeTo() instead.Hope this seems like a helpful addition. I think it won't be too bad to implement.-Russ", "id": "880"}, "884": {"ground_truth": "0", "bug_report": "Add class or id to AjaxFallbackDefaultDataTable elements (NavigationToolbar  etc.) to facilitate CSS styling\nIt would be nice to have a CSS class or id assigned to various HTML elements of the more complex pre-fab components such as the AjaxFallbackDefaultDataTable. This would facilitate styling via CSS and increase re-usability.Link to mailing list archive here:http://www.nabble.com/forum/ViewPost.jtp?post=12321602&amp;framed=y", "id": "884"}, "886": {"ground_truth": "0", "bug_report": "InlineFrame with null PageMap raises exception\nThis constructor public InlineFrame(final String id  final Page page) { this(id  null  new IPageLink()is calling this other public InlineFrame(final String id  final IPageMap pageMap  IPageLink pageLink) { super(id); this.pageMapName = pageMap.getName();which of course raises a null pointer exception at 'pageMap.getName();'", "id": "886"}, "887": {"ground_truth": "0", "bug_report": "Unable to find InlineFrames when inside ListViews\nThere is a simple example attached. Even if the list is reusing items (and even with a RefreshingView with reuseifmodelequal strategy) the problem persists.", "id": "887"}, "895": {"ground_truth": "0", "bug_report": "If a form includes a DataTable with AjaxEditableLabels and the form should be refresh an exception occurs when a user switches between a changed label to another\nA normal Form includes a DataTable which includes some AjaxEditableLabels.If the user changes the contens of a label and the label has an effect of the whole DataTable the complete from has to be refreshed. But if the user switches between one label to another  an exception occurs.UseCase:click on label and change the valueto leave the label click another labe in the DataTabel--&gt; an exception should occur", "id": "895"}, "903": {"ground_truth": "0", "bug_report": "WicketServlet no longer sets application on current thread\nThe last changes made to WicketFilter (move Application.set(webApplication) from doGet() to doFilter()) have a side effect: if working with WicketServlet (due to OSGI)  the application is no longer set on the current thread  because it was moved to doFilter().Possible fixes: move Application.set() in WicketFilter back to doGet()  at the start if that's early enough expose the webApplication property  and add an extra Application.set() in the doGet() of WicketServlet", "id": "903"}, "908": {"ground_truth": "0", "bug_report": "There is no way to specify what exceptions to log in RequestCycle\nRequestCycle  line 1135 logs all exceptions except for PageExpiredException. This is not a wanted behavior for us (for example  it also logs AuthorizationException which is not a error).So we need some way to specify which exceptions should be treated as errors and which ones are just need to be handled by RequestCycleProcessor#respond(RuntimeException  RequestCycle).Maybe there is some way to globally catch application exceptions other than writing a custom RequestCycleProcessor. If so then tell me please.The possible solution is to move exception logging to RequestCycleProcessor#respond(RuntimeException  RequestCycle) because it can be overriden.", "id": "908"}, "909": {"ground_truth": "0", "bug_report": "onBeforeRender not called on ModalWindow contents\nModalWindow.onBeforeRender contains the following code: super.onBeforeRender(); getContent().setOutputMarkupId(true); getContent().setVisible(shown);This has the consequence that the content of the modal windows is still invisible when its onBeforeRender() method is called. The default implementation of onBeforeRender delegates to the window's children beforeRender() method. However  the contents beforeRender() method first checks if the component is visible  which is not the case  so the onBeforeRender() call is not propagated down the component tree. This is a problem if the content of the modal window is something like a table  which populates itself in the onBeforeRender call.", "id": "909"}, "914": {"ground_truth": "0", "bug_report": "Tree not 'redrawn' when resetting root node\nI have a tree that I reset the root node when a user selects on another component (Component A). However  the tree is not 'redrawn' until I click on the tree (the previous tree contents are shown).Have called Tree.invalidateAll() andDefaultTreeModel.nodeStructureChanged(tnode )DefaultTreeModel.nodeChanged( tnode )DefaultTreeModel.reload()", "id": "914"}, "916": {"ground_truth": "0", "bug_report": "inconsistent state after setting AjaxDebugModeEnabled to true in an AjaxRequest\nwhen the application debugsetting AjaxDebugModeEnabled is changed from false to true in an AjaxRequest (e.g. via JMX)  the following two statements in AbstractDefaultAjaxBehavior#renderHead are executed:response.renderJavascript('wicketAjaxDebugEnable=true;'  'wicket-ajax-debug-enable');response.renderJavascriptReference(JAVASCRIPT_DEBUG);as soon as the client recieves the response  the first javascript statement is executed and code in wicket-ajax.js 'thinks' that ajax debug is enabled.well it is  but wicket-ajax-debug.js has not arrived (or at least has not been processed) yet  and thus Wicket.Log.info() and Wicket.Log.error() will fail  because these methods access an object which is defined in wicket-ajax-debug.js.This problem seems to be solved by changing the order of the statements in AbstractDefaultAjaxBehavior#renderHead  so that the ResourceReference JAVASCRIPT_DEBUG is rendered before wicketAjaxDebugEnable is set to true.", "id": "916"}, "917": {"ground_truth": "0", "bug_report": "Minor patch in polish translation\nThe current PL translation is nice  just minor change to null value to give it universal meaning in some cases", "id": "917"}, "925": {"ground_truth": "0", "bug_report": "embedded jetty configuration stops working on beta3\nWhen using beta3 with embedded configuration  which means there is no web.xml  but wicket servlet instance is injected in jetty server context. During the startup application generates NPE in (DiskPageStore.java:486) which means that wicket servlet cannot retrieve temp dir... Adding the following line before string the application resolves the question:serverContext.setAttribute('javax.servlet.context.tempdir'  new File('.'));I am not sure if this is just treating effect and not the cause which can be related to recent WicketFilter/WicketServlet 'thread' questions ?Attached simple hello world application reproduce this...", "id": "925"}, "932": {"ground_truth": "0", "bug_report": "BaseWicketTester support for SubmitLink\nWhen the SubmitLink is used instead of the submit for forms  BaseWicketTester does not run through the onSubmit() code of the link.I have stepped through the debug of the test that's actually not getting called. All my validators on the text field are getting called as expected and in fact the form works as expected when deployed so I'm thinking that it might be a WicketTester issue or the more likely scenario that I'm doing something wrong?Things I've tried: debugging as mentioned  but this just shows me it's not getting called trying to call the link directly but I just get the below exception which I'm not really surpised about....", "id": "932"}, "946": {"ground_truth": "0", "bug_report": "WebRequestCodingStrategy is not synchronized\nThe WebRequestCodingStrategy class uses a TreeMap to store mounted pages however there is no synchronization done. This will cause problems if pages are being mounted/unmounted by one thread while web requests are being served from a different one. It could also cause problems if two threads try to mount/unmount pages at the same time.I'll include a patch to fix this as well as a new version of the java file that you can use if you wantKeep up the good work", "id": "946"}, "954": {"ground_truth": "0", "bug_report": "Default button does not provide button name\nWhen the default button is set in a form  the name property should be rendered too  so that the right button is executed rather than just the form's onsubmit method.", "id": "954"}, "960": {"ground_truth": "0", "bug_report": "FilteredAbstractColumn unary constructor expects Model instead of IModel\nWe have this now:public FilteredAbstractColumn(Model displayModel) { super(displayModel); }Here's the super constructor it delegates to:public AbstractColumn(IModel displayModel) { this(displayModel  null); }So I really don't see why the FilteredAbstractColumn would need Model descendants specifically.", "id": "960"}, "977": {"ground_truth": "0", "bug_report": "Static Pages -> Passing URI to a Wicket page == 404 Error\nBroken url", "id": "977"}, "986": {"ground_truth": "0", "bug_report": "Wicket Javadoc Standardization: org.apache.wicket.util.value\nJavadoc for the util.value package.", "id": "986"}, "991": {"ground_truth": "0", "bug_report": "StringIndexOutOfBoundsException in ServletWebRequest.getRelativePathPrefixToWicketHandler\nRequest attribute 'javax.servlet.forward.servlet_path' may be equals to empty string.See patch...", "id": "991"}, "1007": {"ground_truth": "0", "bug_report": "[PATCH] Javascript error in IE7 when selecting a date\nWhen selecting a date in IE7 I get a javascript error on line 227 in wicket-date.js. In this line there is the following check:if (typeof(field.onchange) != 'undefined' ) field.onchange();in IE7 this gives a warning due to field.onchange being null (which is user defined instead of undefined). Changing the check as follows solves this problem for me:if (typeof(field.onchange) != 'undefined' &amp;&amp; field.onchange != null) field.onchange();", "id": "1007"}, "1037": {"ground_truth": "0", "bug_report": "Text not visible in Wicket Ajax Debug window\nThe Wicket Ajax Debug (WAD) window has a background color set to white but the font color is not set (in wicket-ajax-debug.js) - it uses the base page defaults. So when I have in css for my page setting like this: body color: Color value is invalid  the text in WAD is not visible.Suggested solution: maybe add somewhere in wicket-ajax-debug.js setting: 'color: black;'", "id": "1037"}, "1040": {"ground_truth": "0", "bug_report": "setEnabled() does not work on YUI DateField\nCalling setEnabled(false) on a YUI DateField component doesn't seem to have any effect. The date field remains editable and the changes get propagated to the underlying model on submit.", "id": "1040"}, "1041": {"ground_truth": "0", "bug_report": "Fix a TODO for 1.3 at AjaxFormSubmitBehavior.onError()\nThere is the following TODO at org/apache/wicket/ajax/form/AjaxFormSubmitBehavior.onError(): /**  Listener method invoked when the form has been processed and errors occured  @param target  TODO 1.3: make abstract to be consistent with onsubmit()  */ protected void onError(AjaxRequestTarget target) {  } Should this be done for 1.3 or it will stay like it is now for the next major release ?", "id": "1041"}, "1043": {"ground_truth": "0", "bug_report": "javadoc typos\nI collected some javadoc typos I came across. See patch for simple ones. These are some other problems in javadocs: broken link in WebRequestCodingStrategy: @see org.apache.wicket.request.IRequestCodingStrategy#encode(java.lang.CharSequence) Application#getSessionStore: object for working getting/ storing session didn't find such classes RequestLogger: InspectorBug  InspectorPage  LiveSessionPage IWrapModel: model will be called detach on when the component is detached when the wrap model javadoc seems to be copied from another flag Component#FLAG_INHERITABLE_MODEL: /** Flag for escaping HTML in model strings */ Model does not implement AbstractModel anymore org.apache.wicket.model.Model: Model is the basic implementation of an AbstractModel", "id": "1043"}, "1046": {"ground_truth": "0", "bug_report": "FeedbackMessages don't get cleaned up in an AJAX request when renderstrategy is REDIRECT_TO_RENDER\nthe following check in Session#cleanupFeedbackMessages always fails for AjaxRequests when the renderstrategy REDIRECT_TO_RENDER is used.this leads to FeedbackMessages not being removed from the session.if (Application.get().getRequestCycleSettings().getRenderStrategy() != IRequestCycleSettings.REDIRECT_TO_RENDER || (!RequestCycle.get().isRedirect()))RequestCycle.get().isRedirect() in case of a WebRequestCycle returns true for Ajax requests.fix:mark Session#cleanupFeedbackMessages as abstract and implement it in WebSession with an additional check '|| ((WebRequest)RequestCycle.get().getResponse).isAjax()'", "id": "1046"}, "1051": {"ground_truth": "0", "bug_report": "StyleSheetReference doesn't take style/locale into account\nStyleSheetReference (in essence PackagedResourceReference) doesn't take the style and locale into account as is common for resource loaders.Changing PackagedResourceReference line 102 from ResourceReference ref = new ResourceReference(referer  f);to ResourceReference ref = new ResourceReference(referer  f  getLocale()  getStyle());fixes this issue", "id": "1051"}, "1052": {"ground_truth": "0", "bug_report": "Wicket Javadoc Standardization: org.apache.wicket.util.thread\norg.apache.wicket.util.thread Javadoc", "id": "1052"}, "1053": {"ground_truth": "0", "bug_report": "Wicket Javadoc Standardization: org.apache.wicket.util.tester\norg.apache.wicket.util.tester Javadoc", "id": "1053"}, "1057": {"ground_truth": "0", "bug_report": "Remove final from WebRequestCodingStrategy. urlCodingStrategyForPath\nI am trying to use my own encoding that does not depend on mounted paths. I want normal mounted paths and the default wicket paths to work as usual and for my strategy to be used after they have been tried.For encoding URLs with my strategy I can override WebRequestCodingStrategy .getMountEncoder(IRequestTarget) which allows the normal mounts to be tried first and then return my strategy if non are found.The default decoding works OK but WebRequestCycleProcessor will call WebRequestCodingStrategy .targetForRequest() after the default handling fails and I cannot return my own strategy because I cannot override urlCodingStrategyForPath() because it is final.I have removed this locally and it works as I expected.It seems like the only option at the moment is to use a subclass or WebRequestCodingStrategy AND create an adaptor (wrapper) for WebRequestCodingStrategy which detects when targetForRequest() returns null and returns my own strategy.If the final is removed from rlCodingStrategyForPath(String path) life would be a lot easier!", "id": "1057"}, "1067": {"ground_truth": "0", "bug_report": "Correct javadoc for Fragment\nThe Fragment constructors without markupProvider argument have been deprecated but the example in the class javadoc's is still using it.", "id": "1067"}, "1070": {"ground_truth": "0", "bug_report": "Missing img alt attribute in WicketAjaxIndicatorAppender\nMissing img alt attribute in WicketAjaxIndicatorAppender", "id": "1070"}, "1086": {"ground_truth": "0", "bug_report": "Extending PagingNavigator for stateless pages\nI am extending PagingNavigator to use stateless links but have found that the underlying PagingNavigation factory method newPagingNavigationLink() does not let me return a subclass of Link. I have tested the change below and it seems to work OK on my stateless pages.Index: /Users/John/Development/wicket/trunk/jdk-1.4/wicket/src/main/java/org/apache/wicket/markup/html/navigation/paging/PagingNavigation.java===================================================================&#8212; /Users/John/Development/wicket/trunk/jdk-1.4/wicket/src/main/java/org/apache/wicket/markup/html/navigation/paging/PagingNavigation.java (revision 585875)+++ /Users/John/Development/wicket/trunk/jdk-1.4/wicket/src/main/java/org/apache/wicket/markup/html/navigation/paging/PagingNavigation.java (working copy)@@ -17 6 +17 7 @@ package org.apache.wicket.markup.html.navigation.paging; import org.apache.wicket.markup.html.basic.Label;+import org.apache.wicket.markup.html.link.Link; import org.apache.wicket.markup.html.list.Loop; import org.apache.wicket.version.undo.Change;@@ -302 7 +303 7 @@ final int pageIndex = getStartIndex() + loopItem.getIteration(); // Add a page link pointing to the page final PagingNavigationLink link = newPagingNavigationLink('pageLink'  pageable  pageIndex);+ final Link link = newPagingNavigationLink('pageLink'  pageable  pageIndex); loopItem.add(link); // Add a page number label to the list which is enclosed by the link@@ -329 8 +330 7 @@ the page index the link points to @return the page navigation link. */ protected PagingNavigationLink newPagingNavigationLink(String id  IPageable pageable  int pageIndex)+ protected Link newPagingNavigationLink(String id  IPageable pageable  int pageIndex) { return new PagingNavigationLink(id  pageable  pageIndex); }", "id": "1086"}, "1118": {"ground_truth": "0", "bug_report": "DateTextField.setEnabled() is not propagated to attached DatePicker\nDatePicker stays enabled even if the DateTextField it is attached to is disabled.It is even able to change the DateTextField's shown value.Instead the DatePicker should be disabled to  or maybe not shown at all.Attached is a Quickstart-patch showing the effect.", "id": "1118"}, "1120": {"ground_truth": "0", "bug_report": "Problem closing a ModalWindow when used through an IFrame\nI'm doing some POC testing to find out how a wicket application could be used through an IFrame and noticed that closing of a ModalWindow fails.My setup:Application A: -a dummy html page that has an IFrame-the contents of the IFrame is requested from Application B&lt;iframe src='http://localhost:8080/mywicketapp/app/' width='100%' height='500'&gt;&lt;/iframe&gt;Application B:-a Wicket application that uses a ModalWindow-deployed to tomcat: http://localhost:8080/mywicketapp/Problem:The ModalWindow is not closed when OK ( or Cancel ) button is clicked when Application B is used throug IFrame of Application A.OK button performs the actual action (in my case deletes an item from a list) but is not closed after the execution of the action.Closing of the ModalWindow works normally when Application B is not used through an IFrame.Reproducing the problem:You can test this by creating a html page with this source:&lt;html&gt;&lt;body&gt;&lt;iframe src='http://www.wicket-library.com/wicket-examples/ajax/modal-window.1' width='100%' height='100%'&gt;&lt;/iframe&gt;&lt;/body&gt;&lt;/html&gt;And then open 'Show modal dialog with panel' and try to close the dialog.", "id": "1120"}, "1131": {"ground_truth": "0", "bug_report": "AjaxEditableLabel: defaultNullLabel() should really be a defaultNullorEmptyLabel()\ndefaultNullLabel() only inserts '...' when the model is NULL  not when the model contains an empty String.So right now it's impossible to get empty Strings edited with this component.", "id": "1131"}, "1135": {"ground_truth": "0", "bug_report": "XHTML validation failure for DatePicker\norg.apache.wicket.extensions.yui.calendar.DatePicker code generates an img tag that is missing the alt tag  which breaks XHTML validation.", "id": "1135"}, "1136": {"ground_truth": "0", "bug_report": "Change log in Form.handleMultiPart() from error to warn\nIf the upload fails in Form.handleMultipart  perhaps the error should be logged as a warning instead of an error  since the user is being informed that the upload failed.", "id": "1136"}, "1148": {"ground_truth": "0", "bug_report": "AbstractTree utilizes Collections.EMPTY_LIST for a node's children container which causes errors when adding children\nAbstractTree utilizes Collections.EMPTY_LIST for a node's children container. This assumes that this node will never have children during its lifecycle as EMPTY_LIST will always be empty since it does not support add(int  Object)To fix  change item = Collections.EMPTY_LIST with item = new ArrayList(0);private final void buildItemChildren(TreeItem item) { List items; // if the node is expanded if (isNodeExpanded((TreeNode)item.getModelObject())) { // build the items for children of the items' treenode. items = buildTreeItems(nodeChildren((TreeNode)item.getModelObject())  item.getLevel() + 1); } else { // it's not expanded  just set children to an empty list //items = Collections.EMPTY_LIST; items = new ArrayList(0); } item.setChildren(items); }", "id": "1148"}, "1166": {"ground_truth": "0", "bug_report": "add sanity check on form submit for request method\nWhen refreshing a frameset that includes an already POST submitted Wicket form in a frame  using the redirect to render strategy  Safari erroneously requests the form's original target by GET  rather than the location that was eventually redirected to. Therefore none of the form values are available in the request object and NPEs will occur trying to access them in places like AbstractConverter.java:55.Because Form allows for a particular request method to be specified  I think it should also confirm that the expected method was used instead of waiting for an NPE in validation. The outcome is the same  but the cause of the error (the client) would be more evident in server logs  etc. Patch to come...", "id": "1166"}, "1171": {"ground_truth": "0", "bug_report": "Tolerate malformed If-Modified-Since header\nSome kind of RSS aggregator is hitting an rc1 site of mine regularly with dates that don't follow the HTTP spec. Correct to the servlet spec  Jetty throws an exception in this instance which causes Wicket to abort processing the request and log an error. I think it would be better to log the exception as a warning and proceed as if the header had not been present.Example exception:ERROR btpool0-703 org.mortbay.log - /resources/com.typeturner.Typeturner/eat-rssjava.lang.IllegalArgumentException: Cannot convert date: 1194673976 at org.mortbay.jetty.HttpFields.getDateField(HttpFields.java:827) at org.mortbay.jetty.Request.getDateHeader(Request.java:460) at org.apache.wicket.protocol.http.WicketFilter.doFilter(WicketFilter.java:197)", "id": "1171"}, "1175": {"ground_truth": "1", "bug_report": "IDataProvider-Overflow with size()\nHi I get an Integer-overflow with my Dataprovider (yeah  there are a couple of entries in the database). Is there a reason why size() and iterator( first  count ) are limited to Integer?Regards  &#8212; Jan.", "id": "1175"}, "1176": {"ground_truth": "0", "bug_report": "AjaxEditableLabel and AjaxMultiLineEditableLabel do not honour enabled status\nOn AjaxEditableLabel and subclasses  setEnabled(false) has no effect.It should prevent the component from being editable (i.e. it should behave like a normal Label).", "id": "1176"}, "1186": {"ground_truth": "1", "bug_report": "Ajax Memory Leak in IE\nMemory Leak in IE6 (IE7?) when using a DataView with AjaxPagingNavigator and each entry of the DataView table contains an AjaxLink. Memory increases by more than 500KB when displaying 100 items per page. AjaxDebugMode is disabled. Configuration is set to deployment. Version 1.2.6 is working fine.", "id": "1186"}, "1193": {"ground_truth": "0", "bug_report": "i18n: Translation of resource files in Korean\nI'd like to upload a patch for Korean resource files.", "id": "1193"}, "1198": {"ground_truth": "1", "bug_report": "NPE in IndexedHybridUrlCodingStrategy during encoding\njava.lang.NullPointerException at org.apache.wicket.request.target.coding.IndexedHybridUrlCodingStrategy.appendParameters(IndexedHybridUrlCodingStrategy.java:51) at org.apache.wicket.request.target.coding.HybridUrlCodingStrategy.encode(HybridUrlCodingStrategy.java:409) at org.apache.wicket.protocol.http.request.WebRequestCodingStrategy.pathForTarget(WebRequestCodingStrategy.java:459) at org.apache.wicket.protocol.http.request.WebRequestCodingStrategy.encode(WebRequestCodingStrategy.java:236) at org.apache.wicket.RequestCycle.encodeUrlFor(RequestCycle.java:744) at org.apache.wicket.RequestCycle.urlFor(RequestCycle.java:847) at org.apache.wicket.Component.urlFor(Component.java:3086) at org.apache.wicket.protocol.http.WebRequestCycle.redirectTo(WebRequestCycle.java:144) at org.apache.wicket.request.target.component.PageRequestTarget.respond(PageRequestTarget.java:58) at org.apache.wicket.request.AbstractRequestCycleProcessor.respond(AbstractRequestCycleProcessor.java:103) at org.apache.wicket.RequestCycle.processEventsAndRespond(RequestCycle.java:1100) at org.apache.wicket.RequestCycle.step(RequestCycle.java:1169) at org.apache.wicket.RequestCycle.steps(RequestCycle.java:1248) at org.apache.wicket.RequestCycle.request(RequestCycle.java:489) at org.apache.wicket.protocol.http.WicketFilter.doGet(WicketFilter.java:343) at org.apache.wicket.protocol.http.WicketFilter.doFilter(WicketFilter.java:193)", "id": "1198"}, "1199": {"ground_truth": "0", "bug_report": "false positive or wrong unit tests unit tests when ajax is involved\nMockWebApplication#setupRequestAndResponse always sets up a non ajax requestcycle.this method is also used to setup the requestcycle for ajax related functionality (eg. BaseWicketTester#clickLink).the consequence are:a) the markup for expected ajax responses contains wicket tags and wicket attributes  although these are never rendered in ajax responses.b) some unit tests (eg. AjaxTimerBehaviorTest#testAddToAjaxUpdate  ComponentBorderTest#testHideableBorder) succeed  when the same code in non-unit-test environment doesn't work  because there is no ajax request during testing  while there is one during normal execution.", "id": "1199"}, "1204": {"ground_truth": "0", "bug_report": "Use X-Forwarded-For header for getting the IP address of the client in WebClientInfo\nWhen using Apache HTTP Server's ProxyPass to forward to other HTTP Servers  such as Jetty  the client's ip address defaults to the server that forwarded the request  usually being 127...", "id": "1204"}, "1208": {"ground_truth": "0", "bug_report": "upgrade to YUI 2.4.0\nYUI should be updated to version 2.4.0along with this release  there have been significant changes to YUI Calendar (CalendarNavigator) and YUI Loader.CalendarNavigator will replace the current customized  self-maintained month/year selection.", "id": "1208"}, "1215": {"ground_truth": "0", "bug_report": "WicketTester recreates session after setting attributes on it\nThe following test for internationalization doesn't work  as rendering the page will create a new session. WicketTester tester = new WicketTester(); tester.getWicketSession().setLocale(Locale.FRENCH); tester.startPage(HelloWorld.class); tester.assertLabel('message'  'Bonjour tout le monde!');But setting up the response and request first works around recreating the session WicketTester tester = new WicketTester(); tester.setupRequestAndResponse(); tester.getWicketSession().setLocale(Locale.FRENCH); tester.startPage(HelloWorld.class); tester.assertLabel('message'  'Bonjour tout le monde!');", "id": "1215"}, "1229": {"ground_truth": "0", "bug_report": "Inside a html tag wicket:message's attribute cannot contain colon : in it  it uses the first colon and tokenizes the rest to be the resource_identifier. Need some way to use colon in the attribute name.\nI am trying to use wicket:message inside a tag in the following format wicket:message='attribute:resource_identifier'The attribute:resource_identifier passed as a value to the wicket:message uses the colon to tokenize the attribute and the resource_identifier. Now  The attribute which I am using is a custom attribute 'ric:title' (without quotes) which also has a colon in it. Currently  I have a tag with a custom attribute ric:title and the resource_identifier for it is page.title &lt;div wicket:message='ric:title:page.title' /&gt;  the problem is wicket takes the first colon which is part of my attribute and takes the rest as the resource_identifier and looks for it in the property file and then throws an error.How can I tell wicket to ignore the colon in the attribute name...? and I've tried using slash in front of the colon and it didn't work  I've tried using ascii html entity encoding for colon  which is &#58; and didn't work.So  please make a way to use colon in the attribute.Something like the following would be nice &lt;div wicket:message=' 'ric:title' : page.title'&gt;  which allows the user to set the attribute name in the markup within single quoutes. I am hoping to see this fixed.Thanks", "id": "1229"}, "1230": {"ground_truth": "1", "bug_report": "Temporary files not deleting when multipart upload fails with IO error\nI just want to delete temporary files when upload fails (user cancelled or IO error occured)  this is really important when uploading files about 500Mb  and this bug makes security hole (anyone can eating my server's disk space by posting incomplete large files).I can't find simple workaround  and I think that fix by developers will more easy.For example you can handle IO error in class org.apache.wicket.util.upload.FileUploadBase  method parseRequest  when IO error occured  just delete all created temporary files  and only after deleting files throw your FileUploadException.I hope you will fix it soon.Thanks.", "id": "1230"}, "1239": {"ground_truth": "0", "bug_report": "java.lang.IllegalAccessError when changing AjaxEditableLabel\nWhen changing AjaxEditableLabel system throws:java.lang.IllegalAccessError: tried to access methodorg.apache.wicket.Component.onModelChanging()V from classorg.apache.wicket.extensions.ajax.markup.html.AjaxEditableLabel$1 atorg.apache.wicket.extensions.ajax.markup.html.AjaxEditableLabel$1.onModelChanging(AjaxEditableLabel.java:273) at org.apache.wicket.Component.modelChanging(Component.java:2058) at org.apache.wicket.Component.setModelObject(Component.java:2823) at org.apache.wicket.markup.html.form.FormComponent.updateModel(FormComponent.java:992) at org.apache.wicket.markup.html.form.FormComponent.processInput(FormComponent.java:874) &#91;...&#93;The probem is in methd: protected FormComponent newEditor(MarkupContainer parent  String componentId  IModel model) { TextField editor = new TextField(componentId  model) { private static final long serialVersionUID = 1L; protected void onModelChanged() { super.onModelChanged(); AjaxEditableLabel.this.onModelChanged(); //here is a bug } protected void onModelChanging() { super.onModelChanging(); AjaxEditableLabel.this.onModelChanging(); //here is a bug } }; editor.setOutputMarkupId(true); editor.setVisible(false); editor.add(new EditorAjaxBehavior()); return editor; } AjaxEditableLabel.this.XXXXXX is not visible.Artur", "id": "1239"}, "1264": {"ground_truth": "0", "bug_report": "assertComponentOnAjaxResponse does not work with WicketTester.clickLink\nassertComponentOnAjaxResponse does not work with clickLink. Workaround are to call wickettester..executeAjaxEvent(ajaxLink 'onclick'); instead.Reason why this fails has something todo with that clickLink creates a servlet response which are empty hence this will always fail: // Get the AJAX response String ajaxResponse = getServletResponse().getDocument(); // Test that the previous response was actually a AJAX response failMessage = 'The Previous response was not an AJAX response. ' + 'You need to execute an AJAX event  using clickLink  before using this assert'; boolean isAjaxResponse = ajaxResponse.startsWith('&lt;?xml version=/'1.0/' encoding=/'UTF-8/'?&gt;&lt;ajax-response&gt;');proposed fix are to rewrite wicketTester.clicklink(string path boolean ajax) to call executeAjaxEvent instead if possible?", "id": "1264"}, "1270": {"ground_truth": "1", "bug_report": "NPE in ListMultipleChoice.updateModel()\nI noticed a NullPointerException when I cleared a Form with a ListMultipleChoice to its original state.In updateModel() following statement causes a NPE when something was selected in the multiple select but in the original state nothing was selected:selectedValues.addAll((Collection)getConvertedInput());getConvertedInput() is null  so ArrayList.addAll() operates on the null value and throws the NPE.", "id": "1270"}, "1271": {"ground_truth": "0", "bug_report": "Script in RenderHead method of AjaxFormChoiceComponentUpdatingBehavior needs fixing\nThe script in the renderHead method of AjaxFormChoiceComponentUpdatingBehavior assumes that the Radio Component will be the immediate child of the RadioGroup Component  But in some or in most of the cases that is not correct.That is not the case even in the Wicket Examples  in examples the hierarchy is RadioGroup/ListView/Radio.I have maodied the rendered script to work for RadioGroup/ListView/Radio hierarchy. And the Patch is attached.RegardsDipu", "id": "1271"}, "1283": {"ground_truth": "0", "bug_report": "Allow to query component markup id without creating one\nAllow to query component markup id without creating one", "id": "1283"}, "1284": {"ground_truth": "0", "bug_report": "Report last focused element id on ajax request\nReport last focused element id on ajax request", "id": "1284"}, "1288": {"ground_truth": "0", "bug_report": "Make Cookie-Detection possible without JavaScript\ngetClientInfo().getProperties().isCookiesEnabled() returns always false  when JavaScript is disabled.It is possible to detect the availibility of cookies by just testing for JSESSIONID in the current Request. Unfortunately  this cookie is not yet set by the first Redirecting Response that sends the users browser to the HomePage.", "id": "1288"}, "1291": {"ground_truth": "0", "bug_report": "WicketTester Doesn't Support setDefaultFormProcessing(false)\nI was trying to use the WicketTester to click the button for an AjaxFallbackButton that has setDefaultFormProcessing(false). So I wanted to execute the onclick for the component  like this:tester.executeAjaxEvent('meetingForm:inputForm:rootViewPanel:addOrganization'  'onclick');What seems to happen is that the pages tries to update all the form fields and perform validation. This is incorrect in the context for the setDefaultFormProcessing(false) behavior.I was looking at the source for BaseWicketTester and noticed that in executeAjaxEvent()  it always tries to submit the form if the behavior is a AjaxFormSubmitBehavior. This wouldn't be correct in the case of when you set setDefaultFormProcessing(false) on the button. I think it needs to check for setDefaultFormProcessing at that point.", "id": "1291"}, "1293": {"ground_truth": "0", "bug_report": "Improve SelectOptions: allow customization of created SelectOption objects\nI've created a patch that makes SelectOptions more flexible  as it now allows customization ofthe created SelectOption objects (e.g. adding an AjaxEventBehavior).The patch also extends the javadoc of Select  I've added an example on how to use Select  SelectOptions and SelectOption", "id": "1293"}, "1299": {"ground_truth": "0", "bug_report": "HybridUrlCodingStrategy should throw a PageExpiredException if a RequestListenerInterface is targeted on a non-existent page-id/version\nlet's assume MyPage.class is mounted on /page and at some point the user is on /page.1.3if a click on a Link on that page  which results in a relative url '?wicket:interface...' but is ultimately sent to '/page.1.3?wicket:interface...'  is clicked after a session timeout the request is silently redirected to '/page.0' and the link callback is not processed.fix:before creating a new instance of a HybridBookmarkableRequestTarget  HybridUrlCodingStrategy should check if a RequestListenerInterface is present on the last request and throw a PageExpiredException if this is the case.", "id": "1299"}, "1302": {"ground_truth": "0", "bug_report": "Make substitutePropertyExpressions() in Localizer overridable\nI want to extend Localizer.substitutePropertyExpressions(final Component component  final String string  final IModel model) to add a special behaviour when the model for substitution is instance of a Interface which has the Method getMessage(Locale locale).In this case I want to use a custom PropertyVariableInterpolator.So please make the method protected.", "id": "1302"}, "1305": {"ground_truth": "0", "bug_report": "AbstractTextComponent requires itself to be rendered before conversion happens\nThe bug is reproduced as follows:1. Use StatelessForm.2. Use compound model  eg CompoundPropertyModel. In this case  form components are not initially aware of their model types.3. Use any text component inside  eg TextFieldWhat happens:1. In StatelessForm  form processing occurs BEFORE components were actually rendered.2. BUT AbstractTextComponent guesses its model type ONLY in onBeforeRender().3. onBeforeRender() never gets called  so text component doesn't know its actual type and cannot convert properly.4. Everything crashes because of incorrect type (validators and form submission is working wrong).Obviously  this processing sequence needs to be fixed (eg retrieve model type early or check for stateless forms explicitly).", "id": "1305"}, "1314": {"ground_truth": "0", "bug_report": "DateTimeField does not correct the timezone properly\nThe DateTimeField has a DateTextField which uses a styledateconverter with timezone correction set to true which is not needed since the DateTimeField accounts for the TimeZone correction. Another problem is that the DateTimeField only sets the timezone of the date (from local-&gt;client)  causing the date to be corrected to the local time. This should instead cause the local time to reflect that of the clients time.", "id": "1314"}, "1321": {"ground_truth": "0", "bug_report": "Javadoc error in QueryStringUrlCodingStrategy\nThe javadoc uses this as an example:mount(new QueryStringRequestTargetUrlCodingStrategy('/admin/productmanagement'  admin.ProductManagement.class));This does not work. It should say this instead:mount(new QueryStringUrlCodingStrategy('/admin/productmanagement'  admin.ProductManagement.class));", "id": "1321"}, "1323": {"ground_truth": "0", "bug_report": "AbstractPageableView has transient cachedItemCount  but doesn't set it to -1 on deserialization.\nAbstractPageableView declares:private transient int cachedItemCount;When this is deserialized  cachedItemCount gets set to 0. This means that the method isItemCountCached() will return true on a deserialized AbstractPageableView. This  in turn  causes getCurrentPage() to return 0  even when the user is not navigating the first page.For me  this is causing huge problems with the paging navigator.My current workaround is this is to add this method to my DataView implementation:private Object readResolve() throws ObjectStreamException { final Class&lt;?&gt; myClass = getClass(); final Class&lt;?&gt; dataView = myClass.getSuperclass(); final Class&lt;?&gt; dataViewBase = dataView.getSuperclass(); final Class&lt;?&gt; abstractPagableView = dataViewBase.getSuperclass(); try { final Field field; field = abstractPagableView.getDeclaredField('cachedItemCount'); field.setAccessible(true); field.setInt(this  -1); } catch (Exception e) { throw new RuntimeException(e); } return this;}Obviously it would be better if the AbstractPagingView could take care of this itself.", "id": "1323"}, "1332": {"ground_truth": "0", "bug_report": "AjaxFormChoiceComponentUpdatingBehavior just updates the group 'grandchildren'\nUp to 1.3.0  there was a bug in that AjaxFormChoiceComponentUpdatingBehavior updated just the group's direct children. Now it generates the header script quoted below  that iterates over the direct children and then over the children of these  triggering the event for the input grandchildren only. So the situation is even worse. I think that attachChoiceHandlers should descend recursively and search for input elements along all the group descendants  not just one arbitrarily chosen level.function attachChoiceHandlers(markupid  callbackscript) { var choiceElementGroup = document.getElementById(markupid); for( var x = 0; x &lt; choiceElementGroup.childNodes.length; x++ ) { var choiceElementList = choiceElementGroup.childNodes&#91;x&#93;; for( var y = 0; y &lt; choiceElementList.childNodes.length; y++ ) { if (choiceElementList.childNodes&#91;y&#93; &amp;&amp; choiceElementList.childNodes&#91;y&#93;.tagName) { var tag = choiceElementList.childNodes&#91;y&#93;.tagName.toLowerCase(); if (tag == 'input') { Wicket.Event.add(choiceElementList.childNodes[y] 'click'  callbackscript); } } } }}", "id": "1332"}, "1343": {"ground_truth": "0", "bug_report": "HybridUrlCodingStrategy and StatelessForm ( or StatelessLink ) results in invalid parameter encoding\nI put a header component on one of my pages which contains a statelessform ( or stateless link ) . I mounted the page with a HybridUrlCodingStrategy . When you request the page like thishttp://localhost:9696/mountpath/param1/param1value  stateless form attaches another parameter which shows the forms IFormListener target. The new url is like this :http://localhost:9696/mountpath/param1/param1value/wicket:interface/%3A0%3Aheader%3AloggedOutView%3AloginForm%3A%3AIFormSubmitListener%3A%3A/.0I haven't covered all the source code for now but i think the form changes the page parameters object so i think HybridUrlCodingStrategy must clone initial page parameters before putting it to page metadata. But not sure that this will cause any other problems", "id": "1343"}, "1344": {"ground_truth": "0", "bug_report": "BigDecimalConverter is not precise\nCurrently  if we use the BigDecimalConverter class  it converts the values by first letting the NumberFormat to parse the value into a Double  which the BigDecimalConverter class in turn turns into a BigDecimal.Unfortunately such an implementation loses precision  for example if we enter '123.45' in a form  it can be converted to '123.45000000000001' or '123.44999999999999999' thanks to the conversion to a Double.Fixing the issue is rather simple: check if the NumberFormat you get is a DecimalFormat  and if yes  simply call format.setParseBigDecimal(true) and the NumberFormat will interpret the values correctly.", "id": "1344"}, "1350": {"ground_truth": "0", "bug_report": "AutoCompleteTextField's *scrollable* suggestion list disappeared when a mouse pointing to the scroll bar in IE6/7\nif we define the following CCS to fix the height of the suggestion list  the list will become to be scrollable when it is overflow  for example  there are 100 suggestions should be shown.div.wicket-aa { height: 200px; overflow: auto;}if a user moves his mouse to the scroll bar  the suggestion list will disappear immediately in IE6/7 but in FF. The reason is that the onblur event of the text field is triggered in IE but in FF. At the moment the mouse pointing to the scroll bar  Wicket.AutoComplete.mouseactive is 0  therefore  hideAutoComplete() was called. That's why the suggestion list disappeared in IE6/7.", "id": "1350"}, "1361": {"ground_truth": "0", "bug_report": "Localizer doesn't honor style when caching property lookups\nIn Wicket 1.2.6  we created some properties files like:Foo.propertiesFoo_style1.propertiesFoo_style2.propertiesand used StringResourceModel to look up property values. This worked correctly as in 1.2.6  Localizer didn't cache the property lookups and respected the style. However  in 1.3  Localizer now caches the lookups but doesn't respect the style when creating the cache key (though it does append the locale to the end of the cache key).The side-effects of this are that whatever style is in use when a property is first looked up  that property value will be returned for all subsequent lookups regardless of style.", "id": "1361"}, "1365": {"ground_truth": "1", "bug_report": "Having instance variables referencing pages causes memory leaks  StackOverflowErrors and ClassCastExceptions\nHaving references (instance variables)  in objects reachable from the component hierarchy  to pages other than the 'current' page  causes memory leaks StackOverflowErrors and sometimes ClassCastExceptions.This seems to be due to the special serialization code implemented in Page  even if I haven't been able to pinpoint exactly where the problem lies. Standard serialization handles cycles between objects if the deserialization or serialization is done using the same ObjectInputStream or ObjectOutputStream  but here each Page is being deserialized in different ObjectInputStreams.Looking at the stack traces from the StackOverflowErrors it's easy to see that it's the deserialization that goes over the same pages over and over again (although it's new instances).The ClassCastExceptions where because the Page.numericId was zero when serializing them in Page.writeObject  causing the wrong Page to be deserialized in readObject. By looking at the code I can't really understand how the numericId can become zero  except for in the first page. The only thing I can think of is if it's being serialized by another thread before it's initialized.Our application is 'AJAX only' with a main page built up of quite a lot of components in a quite deep hierarchy. When discovering this problem  there was one panel with seven different AjaxLinks that opened ModalWindows  where some of the ModalWindows had fields referencing the contained iframe pages. Clicking around on the links soon made the memory and CPU consumption rise and after a while one of the mentioned errors occurred.Even if I thought that it would  neither turning off page versioning nor setting ISessionSettings.setPageIdUniquePerSession(true) seemed to have any effect.After redesigning the code a bit  removing all the field references to Pages  it seems to work fine again. I realize that having such references isn't a very good design even without this problem. Perhaps it shouldn't be supported at all. It might be  though  that some users have done this and don't know it's a problem (yet).Although in the above case it was only AJAX  I've made an example application that also shows that the same problems occurs using normal links  and pages with references between them. I'll attach that example in a couple of minutes.", "id": "1365"}, "1367": {"ground_truth": "0", "bug_report": "Not all of SignInPanel is properly localized\nWhen logging in without typing a password on the SignInPanel I get the message: veld 'password' is verplicht.instead of veld 'wachtwoord' is verplicht.Furthermore  when logging in fails  I get the message: Sign in failedinstead of 'Inloggen mislukt' or something like that. Maybe there should be properties files included?", "id": "1367"}, "1370": {"ground_truth": "1", "bug_report": "MarkupCache can 'leak' memory\nCurrently markup cache uses a cache without any capacity upper bound :| normally this would be ok  holding markup of an entire application doesnt require THAT much memory. However  suppose we have Index page with markup Index.html. the page is requested with local en_us and we cache contents of index.html in the cache. now Index is requested with locale en_gb and we cache it AGAIN. Now we have two entries in the cache caching the exact same thing. the more locales users request (we pull the locale from the user's browser) the more copies of the same thing we cache.Thomas Singer reported his application running out of memory  attached memory snapshot contained a MarkupCache instance of over 48MB retained size (the internal map had allocated 4096 keys). He has an application with about 64 pages  and they only support one locale. When I browsed the snapshot I noticed a lot of different locales in the markup cache keys....An ideal solution would be to have two caches. One for &#91;container.class locale style variation&#93;&gt;&#91;resource.name&#93; lookup  and the other for &#91;resource.name&#93;&gt;&#91;resource.contents&#93; lookup.A suboptimal solution would be to place an upper bound on the cache. See attached patch which contains a 1000 item lru cache. if looks ok we can roll it in as a solution for 1.3.2 branch - since it doesnt require any interfaces breakages.", "id": "1370"}, "1372": {"ground_truth": "0", "bug_report": "Input field with autocomplete behavior does not submit the form via enter key in some cases\nThis is related to WICKET-2 but wasn't fixed in that bug:When you enter nothing in an input field with autocomplete and press enter  type something that doesn't give results or press escape when the autocomplete box has appeared  you have to press enter twice to submit the form.The solution is quite simple: remove line 219 from wicket-autocomplete.js:hidingAutocomplete=1;This variable was introduced to keep enter from submitting  but by setting it here always to 1  enter is blocked in the above cases.", "id": "1372"}, "1377": {"ground_truth": "0", "bug_report": "AbstractCalendar use the wrong resources path\nI extends the AbstractCalendar  and want to show the calendar directly. But I got an 'YAHOO is not defined' javascript error  because the javascripts' url it generated are not correct.I find that the contributeDependencies methods in AbstractCalendar don't add the resources correctly. For example  the add(HeaderContributor.forJavaScript(YuiLib.class  'yahoo.js'));should be add(HeaderContributor.forJavaScript(YuiLib.class  'yahoo/yahoo.js'));and add(HeaderContributor.forJavaScript(YuiLib.class  'event.js')); should beadd(HeaderContributor.forJavaScript(YuiLib.class  'event/event.js'));and other resources.", "id": "1377"}, "1383": {"ground_truth": "0", "bug_report": "MiniMap IndexOutOfBoundsException when empty\nfindKey() assumes that there is at least one entry in the mapThis checks first:Index: /Users/John/Development/wicket/trunk/jdk-1.4/wicket/src/main/java/org/apache/wicket/util/collections/MiniMap.java===================================================================&#8212; /Users/John/Development/wicket/trunk/jdk-1.4/wicket/src/main/java/org/apache/wicket/util/collections/MiniMap.java (revision 614519)+++ /Users/John/Development/wicket/trunk/jdk-1.4/wicket/src/main/java/org/apache/wicket/util/collections/MiniMap.java (working copy)@@ -118 13 +118 16 @@ */ public Object get(final Object key) { // Search for key final int index = findKey(key);- if (index != -1)+ if (size &gt; 0) { // Return value return values&#91;index&#93;;+ // Search for key+ final int index = findKey(key);++ if (index != -1)+ {+ // Return value+ return values[index];+ } } // Failed to find key", "id": "1383"}, "1388": {"ground_truth": "0", "bug_report": "'charset=UTF-8' is appended to Content-Type of  DynamicWebResources\nAfter upgrading from wicket 1.2.6 to 1.3.1 we now have a big problem when opening PDF files inside the IE browser window. Instead the PDF file is now loaded as a separate window  leaving the Browser window empty.I traced the problem down wicket always appending ';charset=UTF-8' to the Content-Type  and this can be viewed by using a http debugger:Wicket 1.2.6: Works Content-Type: application/pdf Wicket 1.3.1: PDF opened outside the browser.Content-Type: application/pdf; charset=UTF-8 The ';charset=UTF-8' is appended in ResourceStreamRequestTarget  and I can't see a way to override it. Please make it possible to have the Content-Type as set by the DynamicWebResource", "id": "1388"}, "1391": {"ground_truth": "0", "bug_report": "bug: setObject(null) called for excplicitly invisible fields in a non-visible enclosure\nIt seems that the value for fields that are made invisible because a surrounding enclosure is actually lost on submit of the form.Consider the following code:public class HomePage extends WebPage { private MyObject myObject; public HomePage(final PageParameters parameters) { myObject = new MyObject(); myObject.setField1('field1Value'); myObject.setField2('field2Value'); Form f = new Form('f'  new CompoundPropertyModel(myObject)); add(f); f.add(new TextField('field1').setVisible(false)); f.add(new TextField('field2')); f.add(new Button('submit') { @Override public void onSubmit() { System.out.println('Field 2 value should be 'field2Value' but is : ' + myObject.getField2()); } }); } class MyObject implements Serializable { private String field1; private String field2; public String getField1() { return field1; } public void setField1(String field1) { this.field1 = field1; } public String getField2() { return field2; } public void setField2(String field2) { this.field2 = field2; } }}With the following markup:&lt;form wicket:id='f'&gt; &lt;wicket:enclosure child='field1'&gt; &lt;input type='text' wicket:id='field1'/&gt; &lt;input type='text' wicket:id='field2'/&gt; &lt;/wicket:enclosure&gt; &lt;input type='submit' wicket:id='submit'/&gt;&lt;/form&gt;Field1 keeps it's value onSubmit  but the value for field2 is lost  and my model object has null in field2. If I implicitly call setVisible(false) on the TextField for field2  the value is kept onSubmit.Igor put better like this I guess:when the page renders none of the fields are shown. after submit however  myobject.getfield1() is still 'field1value' butmyobject.getfield2() is null - which implies that textfield2 is stillprocessed even though it is inside an enclosure that has been hidden.", "id": "1391"}, "1397": {"ground_truth": "0", "bug_report": "AjaxSubmitLink doesn't always find enclosing form properly\nIf the AjaxSubmitLink constructor that doesn't take in a form is called  it calls the constructor that does take in a form with null for the form. This seems correct  and it passes the form argument into the constructor of the AjaxFormSubmitBehavior as also seems correct. AjaxFormSubmitBehavior has a private getForm() method that  if the form is null  sensibly searches through the component hierarchy to find a form that contains the component. This is also good. The bit that seems wrong is that the overridden onSubmit(AjaxRequestTarget) and onError(AjaxRequestTarget) methods in AjaxSubmitLink's version of AjaxFormSubmitBehavior call AjaxSubmitLink's onSubmit and onError with the form argument that was originally passed into the constructor. This means that if you originally called the one-argument constructor for AjaxSubmitLink  the onSubmit and onError methods will be called with a null form  rather than the actual form that was submitted.As far as I can see  an easy fix for this would be to make getForm() in AjaxFormSubmitBehavior protected rather than private  and then to call getForm() in the overridden onSubmit and onError in AjaxSubmitLink's version of AjaxFormSubmitBehavior. That way the AjaxSubmitLink's onSubmit and onError would always be called with the actual form that was submitted.", "id": "1397"}, "1399": {"ground_truth": "0", "bug_report": "Escaping DiskPageStore SessionFolder needed\nWhen sessionId=8y4bxNcyiScVVV6QtVp9lg**.node1 Wicket can't create the temp directory because the name contains invalid character (at least on windows).So a FileNotFoundException is thrown.The use case happens when tomcat is configured as (in order to work with apache module mod_jk) &lt;!-- Define an AJP 1.3 Connector on port 8009 --&gt; &lt;Connector port='8009' address='${jboss.bind.address}' protocol='AJP/1.3' emptySessionPath='true' enableLookups='false' redirectPort='8443' /&gt; &lt;Engine name='jboss.web' defaultHost='localhost' jvmRoute='node1'&gt;My very temp solution (to let things go) is  private File getSessionFolder(String sessionId  boolean create) { File storeFolder = getStoreFolder(); File sessionFolder = new File(storeFolder  sessionId.replace('*' '_')); if (create &amp;&amp; sessionFolder.exists() == false) { mkdirs(sessionFolder); } return sessionFolder; }I think that a global solution is needed to fix the problem.", "id": "1399"}, "1400": {"ground_truth": "0", "bug_report": "FormComponent.error(ivalidationerror) error needs to show tried resource keys\nPlease see the following discussion from Wicket forum http://www.nabble.com/Having-problems-with-resource-keys-in-a-form-which-has-two-panels-of-the-same-kind-td15881597.html", "id": "1400"}, "1401": {"ground_truth": "0", "bug_report": "StyleDateConverter does not use the components Locale when formatting.\nThe StyleDateConverter class does not use .withLocale(getLocale()) in the getFormat() method.This means that any 'LL' formatted dates do not have the correct translations present when outputting words (eg  month).protected DateTimeFormatter getFormat() { DateTimeFormatter dtf = DateTimeFormat.forPattern(getDatePattern()).withPivotYear(2000); return dtf;}should beprotected DateTimeFormatter getFormat() { DateTimeFormatter dtf = DateTimeFormat.forPattern(getDatePattern()).withLocale(getLocale()).withPivotYear(2000); return dtf;}", "id": "1401"}, "1402": {"ground_truth": "0", "bug_report": "External JAvascript references not included\nWhen using IHeaderResponse to include an external Javascript file  it is not included because of this bug:Index: /Users/John/Development/wicket/trunk/jdk-1.4/wicket/src/main/java/org/apache/wicket/markup/html/internal/HeaderResponse.java===================================================================&#8212; /Users/John/Development/wicket/trunk/jdk-1.4/wicket/src/main/java/org/apache/wicket/markup/html/internal/HeaderResponse.java (revision 614519)+++ /Users/John/Development/wicket/trunk/jdk-1.4/wicket/src/main/java/org/apache/wicket/markup/html/internal/HeaderResponse.java (working copy)@@ -177 7 +177 7 @@ { List token1 = Arrays.asList(new Object[] { 'javascript'  url }); List token2 = Arrays.asList(new Object[] { 'javascript'  id }); if (wasRendered(token1) == false &amp;&amp; wasRendered(token2))+ if (wasRendered(token1) == false &amp;&amp; wasRendered(token2) == false) { JavascriptUtils.writeJavascriptUrl(getResponse()  url  id); markRendered(token1);@@ -258 8 +258 7 @@ { if (!closed) { List token = Arrays .asList(new Object[] { 'javascript-event'  target  event  javascript });+ List token = Arrays.asList(new Object[] { 'javascript-event'  target  event  javascript }); if (wasRendered(token) == false) { renderJavascriptReference(WicketEventReference.INSTANCE);@@ -264 7 +263 7 @@ { renderJavascriptReference(WicketEventReference.INSTANCE); JavascriptUtils.writeJavascript(getResponse()  'Wicket.Event.add(' + target + '  /'' + event + '/'  function() { ' + javascript + ';});');+ '  /'' + event + '/'  function() { ' + javascript + ';});'); markRendered(token); } }@@ -275 7 +274 7 @@ */ public void close() {- this.closed = true;+ closed = true; } /**", "id": "1402"}, "1406": {"ground_truth": "0", "bug_report": "CheckGroupSelector should implement ILabelProvider\nThe CheckGroupSelector component (used to check all Checks within a Checkgroup) should implement ILabelProvider (or extend LabeledWebMarkupContainer) as currently no &lt;label&gt; can be bound to a CheckGroupSelector.", "id": "1406"}, "1420": {"ground_truth": "0", "bug_report": "Allow to change charset in StringRequestTarget\nIt's impossible to access the created StringBufferResourceStream charset without overriding the entire respond method.", "id": "1420"}, "1422": {"ground_truth": "0", "bug_report": "request to make RadioChoice getPrefix() and getSuffix() non-final\nI'm working on a project where we have subclassed RadioChoice  and would like to override the methods getPrefix() and getSuffix(). However these methods are declared as final. Please change them to be non-final  unless there is some particular reason for them to remain final.Thanks!", "id": "1422"}, "1423": {"ground_truth": "0", "bug_report": "AuthenticatedWebApplication uses deprecated constructor of AuthenticatedWebSession\nIn changing from 1.3.1 to 1.3.2 the AuthenticatedWebSession(AuthenticatedWebApplication  Request) method became deprecated  but AuthenticatedWebApplication#newSession still searches for this one.Simply a matter of changing lines 114-116 of AuthenticatedWebApplication.java from:return webSessionClassRef.get().getDeclaredConstructor( AuthenticatedWebApplication.class  Request.class).newInstance( AuthenticatedWebApplication.this  request);to:return webSessionClassRef.get().getDeclaredConstructor( Request.class).newInstance( request);", "id": "1423"}, "1427": {"ground_truth": "0", "bug_report": "make setAfter/BeforeDisabledLink return 'this' for chaining\nIs it possible to make setAfterDisabledLink on AbstractLink return 'this' so that chaining is possible. Now I have somthing similar to the following: fragment.add(new BookmarkablePageLink('season2Link'  ProgramsPage.class  new PageParameters('0=2008')) { { setAfterDisabledLink(''); setBeforeDisabledLink(''); } @Override public boolean isEnabled() { return '2008'.equals(season); } });But it would be nice if I could do: fragment.add(new BookmarkablePageLink('season2Link'  ProgramsPage.class  new PageParameters('0=2008')) { @Override public boolean isEnabled() { return '2008'.equals(season); } }.setBeforeDisabledLink('').setAfterDisabledLink(''));", "id": "1427"}, "1431": {"ground_truth": "0", "bug_report": "Make the Source Code pages for examples stateless\nPage expiry is very frustrating  especially when you tab back to the source code to see how something is achieved.Can we make the code pages either static or stateless  so we can bookmark them  send them to colleagues  or come back 30mins later and click a link without it saying 'page expired'?", "id": "1431"}, "1434": {"ground_truth": "0", "bug_report": "WicketTester.startPage(Class) does not trigger WebRequestCycle.onBeginRequest\nWhile using WicketTester to test my WebApplication that is using a custom WebRequestCycle and WebRequestCycleProcessor I noticed that WicketTester does not follow the same RequestCycle as it would do when running in a real live environment resulting in MyWebRequestCycle.onBeginRequest not being called.Using startPage(Page) will call MyWebRequestCycle.onBeginRequest but then the IRequestTarget that is resolved from the Request indicates the Request comes from the DummyHomePage.testPage link. Can startPage be implemented that it really resembles the real live environment? After some research and testing I came up with this implementation  maybe it can be used:public Page startPage(Class pageClass) { WebRequestCycle requestCycle = super.setupRequestAndResponse(); requestCycle.getRequest().getRequestParameters().setBookmarkablePageClass(pageClass.getName()); super.processRequestCycle(requestCycle); return super.getLastRenderedPage();}", "id": "1434"}, "1435": {"ground_truth": "0", "bug_report": "WicketTester.clickLink(String) only triggers the WebRequestCycle.onEndRequest\nThis issue is somewhat related to WICKET-1434.The WebRequestCycle.onBeginRequest is called in a real live environment.I created an implementation for WicketTester for clicking AjaxLink's that triggers the onBeginRequest but I can't really asses if it breaks something. Maybe it can be used as example or something:class MyWicketTester extends WicketTester { public void clickAjaxLink(String linkPath) { WebRequestCycle cycle = super.setupRequestAndResponse(); cycle.getRequest().getRequestParameters().setInterfaceName(IBehaviorListener.class.getSimpleName()); cycle.getRequest().getRequestParameters().setBehaviorId('0'); cycle.getRequest().getRequestParameters().setComponentPath(getComponentFromLastRenderedPage(linkPath).getPath()); super.processRequestCycle(cycle); }}", "id": "1435"}, "1436": {"ground_truth": "0", "bug_report": "Unable to use properties file when generating XML files\nPlease refer to this thread: http://www.nabble.com/Unable-to-use-wicket:message-when-generating-XML-files-td15779276.html", "id": "1436"}, "1438": {"ground_truth": "0", "bug_report": "detach behavior\nThis was originally posted as a ConcurrentModificationException during detach on the wicket user list (http://markmail.org/message/xnrot5hm4wvow7dq) but later investigations show that there is something else not right.Let me begin by restating the original problem:A couple of days ago Warren came to me with a problem. If he attacheda behavior to a component which potentially throws aRestartResponseAtInterceptPageException aConcurrentModificationException would bubble all the way into tomcatcode.Now you probably are going to say: 'Then don't do that'  but thefact that an exception escapes wicket is imo reason to investigate.So i did some digging. The situation is as follows:In the renderHead method of an IHeaderContributor a check is performedfor an authenticated user  if none is found a RRAIPE is thrown.One of the places that executes renderHead is the onDetach of WebPage.Now suppose we have a Page A which has a component decorated with thisheader contributor  the page also contains a Button to log off users.The onsubmit for this button is as simple as log user off andsetResponsePage(class).This page is usually only accessible if an authenticated user isavailable so everything works fine if that is the case.But then the user decides to log off  the onsubmit is triggered andexits normally. the request continues and reaches the point where theRequestCycle is detaching all RequestTargets (at that point there are2 targets  1 for the current page and 1 set during the onsubmit).During the detach the renderHead method is executed along with thecheck for an authenticated user. Since there isn't one anymore aRRAIPE is thrown  adding a 3rd target to the stack of RequestTargets.The RRAIPE bubbles up to RequestCycle.detach() and is caught andlogged there. Then wicket attempts to detach the next RequestTargetbut since an iterator is used to loop through all targets  theiterator detects the stack has been changed and throws aConcurrentModificationException. Ultimately resulting in a tomcaterror page.I tried changing the iterator loop to a regular for(int i=0;i &lt; .....)loop and this seems to fix the problem  even if later on morerequesttargets are added wicket happily executes them and comes upwith the desire page.There is one disadvantage i see with this solution: the requesttargetthrowing the RRAIPE is not fully detached. Perhaps the RRAIPE can beswallowed after it has added a RequestTarget and only in the case of adetach phase. That way the rest of the page could be normallydetached.Here is where it gets interesting:Johan noticed that WebPage.detach should not call renderHead during detach.In fact the only reason it does so is during development when it does not detect a header element. It then checks if there indeed should not be a header by visiting the behaviors and comparing the output to what it currently has. However as the code comments point out it then does nothing with that information because the code that should handle it does not work yet.So the question became why does the page does not have a header element. At first i thought this is because in this case a setResponsePage is done which would suppress any rendering of the current page.However this is not the case as renderhead is also called during detach in a normal page render. It does not matter if the markupfile contains a header element or not. As it turns out the presence of a header element is checked by getting a wicket component with id header This always returns null as there is no such child component. There is however a child component with an id like _header_0", "id": "1438"}, "1442": {"ground_truth": "0", "bug_report": "nested forms inside a multipart form can't be submitted via ajax\nnested forms can't be submitted via ajax if any of the parent forms contain a fileuploadfield (which makes the root form a multipart).fix: skip changing the request to a multipart request in Form#handleMultiPart  if it's an ajax request.these two types of requests mutually exclude each other anyway.", "id": "1442"}, "1445": {"ground_truth": "0", "bug_report": "StreamCorruptedException/PageStore/Serialization broken because ObjectOutputStream was not flushed\nThe Objects.objectToByteArray() method incorrectly forgets to flush/close the ObjectOutputStream it uses. This can create corrupt object streams.", "id": "1445"}, "1462": {"ground_truth": "0", "bug_report": "Problem with ajax form submission inside model window in IE and Safari\nProblem with ajax form submission inside model window in IE and Safari", "id": "1462"}, "1468": {"ground_truth": "0", "bug_report": "Add downloadSources option to quickstart page\nwould be cool to have a checkbox or a radio&#91;yes/no&#93; that will control -DdownloadSources=true param at http://wicket.apache.org/quickstart.html", "id": "1468"}, "1473": {"ground_truth": "0", "bug_report": "BaseWicketTester.isComponentOnAjaxResponse() test is too strong\nUsing 1.3.0 but still present in 1.3.2 source.The response i got from the ajax request was :&lt;?xml version='1.0' encoding='UTF-8'?&gt;&lt;ajax-response&gt;&lt;header-contribution encoding='wicket1' &gt;&lt;![CDATA[&lt;head xmlns:wicket='http://wicket.apache.org'&gt;&lt;script type='text/javascript' src='resources/org.apache.wicket.markup.html.WicketEventReference/wicket-event.js'&gt;&lt;/script&gt;&lt;script type='text/javascript' src='resources/org.apache.wicket.ajax.WicketAjaxReference/wicket-ajax.js'&gt;&lt;/script&gt;&lt;script type='text/javascript' src='resources/org.apache.wicket.ajax.AbstractDefaultAjaxBehavior/wicket-ajax-debug.js'&gt;&lt;/script&gt;&lt;script type='text/javascript' id='wicket-ajax-debug-enable'&gt;&lt;Unable to render embedded object: File (--/*--&gt;&lt;) not found.[CDATA[/&gt;&lt;!--/wicketAjaxDebugEnable=true;/--&gt;]]&gt;/&lt;/script&gt;&lt;script type='text/javascript' src='resources/org.apache.wicket.extensions.ajax.markup.html.autocomplete.AutoCompleteBehavior/wicket-autocomplete.js'&gt;&lt;/script&gt;&lt;script type='text/javascript' src='resources/com.amdm.ajf.wicket.component.autocomplete.ImprovedAutoCompleteBehavior/improved-autocomplete.js'&gt;&lt;/script&gt;&lt;/head&gt;]]&gt;&lt;/header-contribution&gt;&lt;component id='ville9' encoding='wicket1' &gt;&lt;![CDATA[&lt;input value='TOULOUSE' autocomplete='off' maxlength='26' type='text' onfocus='this.className='focus';' size='28' name='view:adresse:adresseInner:villeFrancaiseDiv:ville' onchange='wicketThrottler.throttle( 'th1'  200  function() { var wcall=wicketAjaxPost('?wicket:interface=:0:updateExpertWizard:form:view:adresse:adresseInner:villeFrancaiseDiv:ville::IBehaviorListener:3:-1'  wicketSerialize(Wicket.$('ville9')) null null  function() {return Wicket.$('ville9') != null;}.bind(this));});' id='ville9' onblur='this.className='normal';'/&gt;&lt;script type='text/javascript'&gt;&lt;Unable to render embedded object: File (--/*--&gt;&lt;) not found.[CDATA[/&gt;&lt;!--/new Wicket.AutoComplete('ville9' '?wicket:interface=:0:updateExpertWizard:form:view:adresse:adresseInner:villeFrancaiseDiv:ville::IActivePageBehaviorListener:1:-1&amp;wicket:ignoreIfNotActive=true' false);/--&gt;]]&gt;/&lt;/script&gt;]]&gt;&lt;/component&gt;&lt;component id='codePostalBinde8' encoding='wicket1' &gt;&lt;![CDATA[&lt;input value='34200' autocomplete='off' maxlength='5' type='text' onfocus='this.className='focus';' size='5' name='view:adresse:adresseInner:villeFrancaiseDiv:codePostalBinde' onchange='wicketThrottler.throttle( 'th2'  200  function() { var wcall=wicketAjaxPost('?wicket:interface=:0:updateExpertWizard:form:view:adresse:adresseInner:villeFrancaiseDiv:codePostalBinde::IBehaviorListener:3:-1'  wicketSerialize(Wicket.$('codePostalBinde8')) null null  function() {return Wicket.$('codePostalBinde8') != null;}.bind(this));});' id='codePostalBinde8' onblur='this.className='normal';'/&gt;&lt;script type='text/javascript'&gt;&lt;Unable to render embedded object: File (--/*--&gt;&lt;) not found.[CDATA[/&gt;&lt;!--/new Wicket.AutoComplete('codePostalBinde8' '?wicket:interface=:0:updateExpertWizard:form:view:adresse:adresseInner:villeFrancaiseDiv:codePostalBinde::IActivePageBehaviorListener:1:-1&amp;wicket:ignoreIfNotActive=true' false);/--&gt;]]&gt;/&lt;/script&gt;]]&gt;&lt;/component&gt;&lt;/ajax-response&gt;And my test is :tester.assertComponentOnAjaxResponse('updateExpertWizard:form:view:adresse:adresseInner:villeFrancaiseDiv:ville');It fails in BaseWicketTester.isComponentOnAjaxResponse() :// Look for that the component is on the response  using the markup id boolean isComponentInAjaxResponse = ajaxResponse.matches('(?s).*&lt;component id=/'' + markupId + '/' ?&gt;.*'); failMessage = 'Component wasn't found in the AJAX response';because of the attribut { encoding='wicket1' } present in the component tag. The regex must be sweeter like (for example):'(?s).&lt;component id=/'' + markupId + '/' . ?&gt;.*' (or much much better", "id": "1473"}, "1483": {"ground_truth": "0", "bug_report": "Unusual ClassCastException (SimpleAttributeModifier to IBehaviorListener) processing onError.\nBuild the application from the four class files and one html file below. Run class Start as an application. Go to your browser  to this URL:http://localhost:4280/behaviorbug/Type some text into the text field. After six characters  it will throw a ClassCastException.Source:package com.bugs.behaviorBug;import org.apache.wicket.ajax.AjaxRequestTarget;import org.apache.wicket.ajax.form.AjaxFormComponentUpdatingBehavior;import org.apache.wicket.behavior.SimpleAttributeModifier;import org.apache.wicket.markup.html.form.TextField;import org.apache.wicket.model.IModel;public class BehaviorBug extends TextField { public BehaviorBug(String id  IModel model) { super( id  model ); init(); } private int kc = 0; private int cc = 0; private final SimpleAttributeModifier blackBorder = new SimpleAttributeModifier( 'border-color'  'black' ); private final SimpleAttributeModifier redBorder = new SimpleAttributeModifier( 'border-color'  'red' ); private SimpleAttributeModifier currentBorder = null; private void init() { setBorder( this.blackBorder ); AjaxFormComponentUpdatingBehavior changeWarningBehavior = new AjaxFormComponentUpdatingBehavior( 'onchange' ) { @Override protected void onUpdate(AjaxRequestTarget target) { System.err.println( 'WarningTextField onUpdate onChange ' + BehaviorBug.this.cc++ ); reColor(); } }; // I'm trying to do something tricky here. I want it to validate after every // keystroke  so the user can get instant feedback on when the data is good. AjaxFormComponentUpdatingBehavior keyUpWarningBehavior = new AjaxFormComponentUpdatingBehavior( 'onkeyup' ) { @Override protected void onUpdate(AjaxRequestTarget target) { System.err.println( 'WarningTextField onUpdate onKeyUp ' + BehaviorBug.this.kc++ ); reColor(); // Thread.dumpStack(); } // The implementation of AjaxFormComponentUpdatingBehavior only calls // onUpdate // when the field is valid. Since it won't update when the field is // invalid  I // can't get my instant feedback unless I call onUpdate() when there's an // error. // Since I can't override onEvent() (It's final)  I override onError to // force // an update even when the field is invalid. This should be safe  since // onError() // is only called on invalid data with a null exception  in which case it // does // nothing. // This  however  seems to be what causes the bug. I have no idea why this // would cause the bug. @Override protected void onError(AjaxRequestTarget target  RuntimeException e) { // Called on validation error with a null e. super.onError( target  e ); // Throws e  if it's not null. Does nothing // otherwise. onUpdate( target ); } }; add( changeWarningBehavior ); add( keyUpWarningBehavior ); } private void reColor() { if ( isValid() ) { setBorder( BehaviorBug.this.blackBorder ); } else { setBorder( BehaviorBug.this.redBorder ); } } private void setBorder(SimpleAttributeModifier border) { if ( this.currentBorder != null &amp;&amp; this.currentBorder != border ) { remove( this.currentBorder ); } this.currentBorder = border; add( this.currentBorder ); }}package com.bugs.behaviorBug;import org.apache.wicket.Application;import org.apache.wicket.Page;import org.apache.wicket.Request;import org.apache.wicket.Response;import org.apache.wicket.Session;import org.apache.wicket.protocol.http.WebApplication;import org.apache.wicket.protocol.http.WebSession;/**  @author Miguel Muoz @version $Id$  */public class BehaviorBugApplication extends WebApplication { /** Constructor */ public BehaviorBugApplication() { // empty } @Override protected void init() { // empty } @Override public Class&lt;? extends Page&gt; getHomePage() { return Index.class; } /* (non-Javadoc)  @see org.apache.wicket.protocol.http.WebApplication#newSession(org.apache.wicket.Request  org.apache.wicket.Response) */ @Override public Session newSession(Request request  Response response) { return new BugSession( this  request ); } public class BugSession extends WebSession { public BugSession(Application application  Request request) { super(request); setApplication( application ); } }}package com.bugs.behaviorBug;import org.apache.wicket.markup.html.WebPage;import org.apache.wicket.markup.html.form.Form;import org.apache.wicket.markup.html.form.TextField;import org.apache.wicket.model.Model;import org.apache.wicket.validation.IValidator;import org.apache.wicket.validation.validator.StringValidator;/**  @author Miguel Muoz @version $Id$  */public class Index extends WebPage { /**  */ public Index() { Form form = new Form('form'); TextField textField = new BehaviorBug('testfield'  new Model()); IValidator lengthValidator = new StringValidator.MaximumLengthValidator(4); textField.add( lengthValidator ); form.add( textField ); add(form); }}package com.bugs.behaviorBug;import org.mortbay.jetty.Connector;import org.mortbay.jetty.Server;import org.mortbay.jetty.nio.SelectChannelConnector;import org.mortbay.jetty.webapp.WebAppContext;/**  @author Miguel Muoz @version $Id$  */public class Start { private static final int defaultPort = 4280; /**  @param args */ public static void main(String[] args) { int port = defaultPort; if (args.length != 0) Unknown macro: { try { port = Integer.valueOf( args[0] ); } catch ( NumberFormatException e ) { System.err.println('Unable to parse port parameter /'' + args[0] + '/' as an integer.'); System.err.println('Using default value of x ' + defaultPort); } }  Server server = new Server(); SelectChannelConnector connector = new SelectChannelConnector(); connector.setPort( port ); server.setConnectors( new Connector[] { connector } ); WebAppContext web = new WebAppContext();// web.setContextPath( '/workspace/WicketTutorial' ); web.setContextPath( '/behaviorbug' ); System.out.println( 'CP: ' + web.getContextPath() ); web.setWar( 'src/main/webapp' + port ); server.addHandler( web ); try { server.start(); // Who was the bozo who declared this to throw Exception? server.join(); } catch ( Exception e ) { e.printStackTrace(); System.exit( 1 ); } }}&lt;html&gt;&lt;head&gt;&lt;title&gt;Behavior Bug&lt;/title&gt;&lt;link href='style.css' rel='stylesheet' /&gt;&lt;/head&gt;&lt;body&gt;&lt;div id='container'&gt; &lt;div id='header'&gt;Behavior Bug&lt;/div&gt; &lt;div id='content'&gt; Type some text into the field below. After six characters  you'll get a stack trace. &lt;form wicket:id='form'&gt; &lt;input type='text' wicket:id='testfield' name='txt' width='35' size='25' /&gt;&lt;p&gt; submit: &lt;input type='submit' value='That's all  Folks!'/&gt;&lt;/p&gt; &lt;/form&gt; End of form. &lt;/div&gt;&lt;/div&gt;Test of Build Process.&lt;/body&gt;&lt;/html&gt;", "id": "1483"}, "1492": {"ground_truth": "0", "bug_report": "Allow form to specify prefix for formcomponent names\nAllow form to specify prefix for formcomponent names", "id": "1492"}, "1496": {"ground_truth": "0", "bug_report": "DataTable.html does not validate (HTML 4.01/XHTML-Strict)\nAccording to http://www.w3.org/TR/html401/struct/tables.html#h-11.2.3  &lt;tfoot&gt;..&lt;/tfoot&gt; must come before the start of &lt;tbody&gt;. The has not changed for XHTML.Proposed fix: just move &lt;tfoot&gt; up after &lt;thead&gt; and before &lt;tbody&gt;.", "id": "1496"}, "1499": {"ground_truth": "0", "bug_report": "AjaxEditableMultiLineLabel + race condition /\nThere are two issues concerning AjaxEditableMultiLineLabel:a) Race condition cancel editingUsing 'Esc' to cancel editing might lead to two events to be fired: first onKeypress is executed - which leads to bluring the component in Opera. This results in the onblur-event firing and the input is submitted!Changing the code in onComponentTag to protected void onComponentTag(ComponentTag tag) {  super.onComponentTag(tag); final String saveCall = '{wicketAjaxGet('' + getCallbackUrl() + '&amp;save=true&amp;'+this.name+'='+wicketEncode(this.value)); return false;}'; final String cancelCall = '{wicketAjaxGet('' + getCallbackUrl() + '&amp;save=false'); this.onblur=''; return false;}'; final String keypress = 'var kc=wicketKeyCode(event); if (kc==27) ' + cancelCall + '; '; tag.put('onblur'  saveCall); tag.put('onkeypress'  keypress); }stops onblur being fired.This might also apply for AjaxEditableLabel - though I haven't seen this happening there yet.b) Displaying defaultNullLabel on empty String Model:Should behave like AjaxEditableLabel  i.e.: protected void onComponentTagBody(MarkupStream markupStream  ComponentTag openTag) { Object modelObject = getModelObject(); if (modelObject == null || ''.equals(modelObject)) { replaceComponentTagBody(markupStream  openTag  defaultNullLabel()); } else { super.onComponentTagBody(markupStream  openTag); } }", "id": "1499"}, "1501": {"ground_truth": "0", "bug_report": "MarkupCache.putIntoCache doesn't behave correctly!!\n'putIntoCache' checks for the locationString not to be null instead of the cacheKey!This way you always get old markup returned instead of the freshly supplied markup which shouldn't be cached at all.", "id": "1501"}, "1504": {"ground_truth": "0", "bug_report": "AutoCompleteTextField - javascript error 'type mismatch' in line 227 in IE\nI just swithed from 1.3.2 to 1.3.3 and that resultet in a javascript error 'type mismatch' in line 227  wich is this line in wicket-autocomplete.js:  menu.style.zIndex=index=='auto'?index:Number(index)+1;Only in IE (6.0) - firefox works fine.", "id": "1504"}, "1507": {"ground_truth": "0", "bug_report": "MarkupCache style/variation/locale support broken\nWe're running into a problem with the change made for this issue: WICKET-1370Basically  if you have a situation like this where the Login page extends DefaultPage and uses &lt;wicket:extend&gt;:Login.htmlDefaultPage.htmlDefaultPage_style1.htmlDefaultPage_style2.htmlThe markup for DefaultPage will always be based on the first style the site is hit with. This is because the location string ('Login.html') hasn't changed with the style change.", "id": "1507"}, "1512": {"ground_truth": "0", "bug_report": "Widen Generics for Lists/Iteratos\nIt is important to widen the generics for collections.For example it is better (and sometimes necessary) to change the signature of org.apache.wicket.markup.repeater.data.IDataProvider#iterator to:Iterator&lt;? extends T&gt; iterator(int first  int count);I will create and add a patch later.", "id": "1512"}, "1538": {"ground_truth": "0", "bug_report": "WicketAjaxIndicatorAppender rename to AjaxIndicatorAppender\nJust a tiny niggle really... but other ajax components start with Ajax.... and I always forget this one! Perhaps rename and keep a deprecated subclass with the old name?", "id": "1538"}, "1583": {"ground_truth": "1", "bug_report": "NPE in EnclosureResolver\nif you put a single wicket:container in a wicket:enclosure  it will NPE looking for a 'child' attribute. you can work around by either changing the container to a div (in which case it will correctly default to the single child) or by adding a child='name' attribute to the enclosure to explicitly specify the single child.Caused by: java.lang.NullPointerException at org.apache.wicket.markup.resolver.EnclosureResolver.resolve(EnclosureResolver.java:59) at org.apache.wicket.MarkupContainer.renderNext(MarkupContainer.java:1324) at org.apache.wicket.MarkupContainer.renderComponentTagBody(MarkupContainer.java:1476) at org.apache.wicket.MarkupContainer.renderAssociatedMarkup(MarkupContainer.java:639) at org.apache.wicket.markup.html.panel.Panel.onComponentTagBody(Panel.java:112) at org.apache.wicket.Component.renderComponent(Component.java:2478) ... 47 common frames omitted", "id": "1583"}, "1607": {"ground_truth": "0", "bug_report": "addDomReadyEvent unreliable for Safari\nBecause Safari doesn't support an onDomReady event  wicket-event.js emulates that behavior using timeouts when that browser is detected. However  the timeout is only set once  for 10ms; window.setTimeout() does not produce a repeating timeout. If the document object is not ready at that point  the registered functions are never called. Often it is ready  so the bug is masked.I discovered this problem in a page that uses the DateTimeField component  which uses onDomReady for its initialization. Sometimes the component works fine  other times nothing happens when you click. It's a fairly complicated page that apparently Safari may spend more than 10ms building.", "id": "1607"}, "1608": {"ground_truth": "0", "bug_report": "make AutoCompleteBehavior's configuration more flexible\nadd AutoCompleteSettings which encapsulates all needed configuration options  so we don't need hundreds of constructors just to have every combination of configuration options available.", "id": "1608"}, "1618": {"ground_truth": "0", "bug_report": "Localizer API should be enhanced so that the cache implementation can be overwritten\n/** Create a new cache  override this method if you want a different map to store the cache keys  for example a map that hold only the last X number of elements..  By default it uses the {@link ConcurrentHashMap}  @return cache */ protected Map newCache() { return new ConcurrentHashMap(); }", "id": "1618"}, "1642": {"ground_truth": "0", "bug_report": "Fix default localizations\nThe english localizations for DateValidato are as follows:DateValidator.minimum='${input}' is less than the minimum of ${minimum}.DateValidator.maximum='${input}' is larger than the maximum of ${maximum}.However the finnish ones instruct that the value must be one-off its minimum or maximum. This is definitely confuses the user/developer.Here is the proposed translation:DateValidator.maximum='${input}' ei voi olla suurempi kuin ${maximum}.DateValidator.minimum='${input}' ei voi olla pienempi kuin ${minimum}.Instead of (Application_fi.properties):DateValidator.minimum='${input}' tulee olla j/u00E4lkeen ${minimum}.DateValidator.maximum='${input}' tulee olla ennen ${maximum}.", "id": "1642"}, "1643": {"ground_truth": "0", "bug_report": "Bookmarkable / Stateless form submit bug\nA stateless bookmarkable form submission isn't working correctly for submissions after reboot or session expiration. This may be due to the use of MixedParamUrlCodingStrategy: believe I've tracked down the problem to this code in BookmarkablePageRequestTargetUrlCodingStrategy:  // do some extra work for checking whether this is a normal request to a  // bookmarkable page  or a request to a stateless page (in which case a  // wicket:interface parameter should be available  final String interfaceParameter = (String)parameters  .remove(WebRequestCodingStrategy.INTERFACE_PARAMETER_NAME);  if (interfaceParameter != null)  { WebRequestCodingStrategy.addInterfaceParameters(interfaceParameter  requestParameters); return new BookmarkableListenerInterfaceRequestTarget(pageMapName  (Class)bookmarkablePageClassRef.get()  parameters  requestParameters .getComponentPath()  requestParameters.getInterfaceName()  requestParameters.getVersionNumber()); } The issue is that the 'parameters' will never contain the INTERFACE_PARAMETER_NAME because it would have been removed in WebRequestCodingStrategy:decode:215 which as far as I can tell is always called first (from RequestCycle.step.RESOLVE_TARGET:1233). The 'requestParameters' should already have the interface parameters  so it isn't clear why the addInterfaceParameters() logic is being called again (it is already called in WebRequestCodingStrategy:decode:200). I've got a patch forthcoming.", "id": "1643"}, "1645": {"ground_truth": "0", "bug_report": "Syntactic errors in the manifest OSGi headers\nHello  Not exactly sure about the error location  but upon deployment on a OSGi container (SpringSource Application Context  based on Equinox)  I get the following trace:&#91;2008-05-19 19:39:26.041&#93; fs-watcher &lt;SPOP0004W&gt; The bundle '/home/djo/Java/servers/springsource-ap-1.0.0.beta3/repository/bundles/usr/wicket-datetime-1.4-m2.jar' could not be provisioned is its manifest is malformed. The error encountered whilst parsing the manifest was: The manifest identified by Name 'Wicket Date/Time'  Symbolic Name 'org.apache.wicket.wicket-datetime'  and Version '1.4.0.m2' has the following errors [org.antlr.runtime.NoViableAltException on 'Package Header &#91;Import&#93;' at Char: 768 org.antlr.runtime.NoViableAltException on 'Package Header &#91;Export&#93;' at Char: 101]", "id": "1645"}, "1648": {"ground_truth": "0", "bug_report": "AbstractRequestTargetUrlCodingStrategy(line 174) throws confusing exception. It would be better redirect to 404-page in this case.\nSteps to reproduce: When user manually types incorrect URL  this confusing exception will be thrown.SEVERE: Internal error for /eshop/profile/pjava.lang.IllegalStateException: URL fragment has unmatched key/value pair: p at org.apache.wicket.request.target.coding.AbstractRequestTargetUrlCodingStrategy.decodeParameters(AbstractRequestTargetUrlCodingStrategy.java:174) at org.apache.wicket.request.target.coding.BookmarkablePageRequestTargetUrlCodingStrategy.decode(BookmarkablePageRequestTargetUrlCodingStrategy.java:76) at org.apache.wicket.protocol.http.request.WebRequestCodingStrategy.targetForRequest(WebRequestCodingStrategy.java:476) at org.apache.wicket.protocol.http.WebRequestCycleProcessor.resolve(WebRequestCycleProcessor.java:175)", "id": "1648"}, "1667": {"ground_truth": "1", "bug_report": "Memory leak in Localizer\nI noticed recently (and told on IRC) a problem with the Localizer and the way the getCacheKey() method works.I uses the component id of all component in the path to the component to create the key. But each page generation has a different id. This has been fixed recently by breaking outside of the loop which creates the key if the component's parent is a Page instance. This partially solves the always increasing cache. But it still has some issues: with the page completely outside of the path  it could introduce some rare bugs when searching for keys defined in the page properties file (it shouldn't break but skip the 'buffer.append(':').append(cursor.getId())' when the cursor is on a Page instance). there is still a bunch of ids generated when you loop over a repeater (the component of type Item has a new id for every item in the list). this is mitigated by the fact that when doing a normal refresh of the view  the starting id restarts at 1  but if you have an Ajax paging view  it's not restarted and starts again to fill the cache with unwanted keys.there are multiple options: never include the id in the key (I'm not convinced it is necessary; is it really used in the String loader?) don't include the id in the key if the cursor is on a component of type Page or Item don't include the id if it's numeric (is this costly?)In the meantime  I'll make a small fix in my local checkout of Wicket  not including the id if the cursor is on Page or Item", "id": "1667"}, "1669": {"ground_truth": "0", "bug_report": "TimeFrame.equals(Object)  does not work as expected\nthe equals() method should be implemented for the TimeFrame class", "id": "1669"}, "1679": {"ground_truth": "1", "bug_report": "Memory leak in DiskPageStore\nNo entries are removed from DiskPageStore.sessionIdToEntryMap. I guess  this should be added to the DiskPageStore.unbind(String sessionId) method: public void unbind(String sessionId) { // FIX: replace get() with remove() SessionEntry entry = (SessionEntry)sessionIdToEntryMap.get(sessionId); if (entry != null) { if (isSynchronous()) { entry.unbind(); } else { List pages = getPagesToSaveList(sessionId); synchronized (pages) { flushPagesToSaveList(sessionId  pages); entry.unbind(); } pagesToSaveAll.remove(sessionId); } } }", "id": "1679"}, "1682": {"ground_truth": "0", "bug_report": "HtmlHandler can't handle tags not requiring closed tags if the tag names are uppercase\nIn HtmlHandler.java  the requiresCloseTag() method only looks the tag name in the Map  without considering the char case: public static boolean requiresCloseTag(final String name) { return doesNotRequireCloseTag.get(name) == null; }Because the keys are all lower case: static { // Tags which are allowed not be closed in HTML doesNotRequireCloseTag.put('p'  Boolean.TRUE); doesNotRequireCloseTag.put('br'  Boolean.TRUE); doesNotRequireCloseTag.put('img'  Boolean.TRUE); doesNotRequireCloseTag.put('input'  Boolean.TRUE); doesNotRequireCloseTag.put('hr'  Boolean.TRUE); doesNotRequireCloseTag.put('link'  Boolean.TRUE); doesNotRequireCloseTag.put('meta'  Boolean.TRUE); }it will fail if uppercase tag names are used in the markup.I've verified that it dies with the following simple markup:&lt;html&gt;&lt;body&gt;&lt;BR&gt;&lt;/body&gt;&lt;/html&gt;", "id": "1682"}, "1684": {"ground_truth": "0", "bug_report": "FileUploadField should return FileUpload as its converted input\nFileUploadField should return FileUpload as its converted input so the file can be validated.Eg @Overrideprotected void convertInput() { setConvertedInput(getFileUpload());}Apparently MultiFileUploadField handles this (I've checked  it appears to be in the convertValue method).For more context see http://www.nabble.com/Best-way-of-validating-FileUploadField-td17662018.html", "id": "1684"}, "1694": {"ground_truth": "0", "bug_report": "wicket complains that ValueMap$NullSafeKeyComparator is not serializable\nwicket complains that ValueMap$NullSafeKeyComparator is not serializable:2070 ERROR &#91;btpool0-19&#93; org.apache.wicket.util.lang.Objects - Error serializing object class testapp.pages.ContactPage [object=&#91;Page class = testapp.pages.ContactPage  id = 0  version = 0&#93;]org.apache.wicket.util.io.SerializableChecker$WicketNotSerializableException: Unable to serialize class: org.apache.wicket.util.value.ValueMap$NullSafeKeyComparatorField hierarchy is: 0 &#91;class=testapp.pages.ContactPage  path=0&#93; java.lang.Object org.apache.wicket.Component.data [class=&#91;Lorg.apache.wicket.MetaDataEntry;&#93; java.lang.Object org.apache.wicket.Component.data&#91;0&#93; &#91;class=org.apache.wicket.MetaDataEntry&#93; java.lang.Object org.apache.wicket.MetaDataEntry.object &#91;class=org.apache.wicket.PageParameters&#93; private java.util.Comparator java.util.TreeMap.comparator &#91;class=org.apache.wicket.util.value.ValueMap$NullSafeKeyComparator&#93; &lt;----- field that is not serializable at org.apache.wicket.util.io.SerializableChecker.check(SerializableChecker.java:349) at org.apache.wicket.util.io.SerializableChecker.checkFields(SerializableChecker.java:618) at org.apache.wicket.util.io.SerializableChecker.check(SerializableChecker.java:541) at org.apache.wicket.util.io.SerializableChecker.checkFields(SerializableChecker.java:618) at org.apache.wicket.util.io.SerializableChecker.check(SerializableChecker.java:541) at org.apache.wicket.util.io.SerializableChecker.check(SerializableChecker.java:395) at org.apache.wicket.util.io.SerializableChecker.checkFields(SerializableChecker.java:618) at org.apache.wicket.util.io.SerializableChecker.check(SerializableChecker.java:541) at org.apache.wicket.util.io.SerializableChecker.writeObjectOverride(SerializableChecker.java:687) at java.io.ObjectOutputStream.writeObject(ObjectOutputStream.java:298) at org.apache.wicket.util.io.IObjectStreamFactory$DefaultObjectStreamFactory$2.writeObjectOverride(IObjectStreamFactory.java:127) at java.io.ObjectOutputStream.writeObject(ObjectOutputStream.java:298) at org.apache.wicket.util.lang.Objects.objectToByteArray(Objects.java:1100) at org.apache.wicket.protocol.http.pagestore.AbstractPageStore.serializePage(AbstractPageStore.java:200) at org.apache.wicket.protocol.http.pagestore.DiskPageStore.storePage(DiskPageStore.java:814) at org.apache.wicket.protocol.http.SecondLevelCacheSessionStore$SecondLevelCachePageMap.put(SecondLevelCacheSessionStore.java:327) at org.apache.wicket.Session.requestDetached(Session.java:1391) at org.apache.wicket.RequestCycle.detach(RequestCycle.java:1113) at org.apache.wicket.RequestCycle.steps(RequestCycle.java:1384) at org.apache.wicket.RequestCycle.request(RequestCycle.java:499) at org.apache.wicket.protocol.http.WicketFilter.doGet(WicketFilter.java:387) at org.apache.wicket.protocol.http.WicketFilter.doFilter(WicketFilter.java:199) at org.mortbay.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1084) at org.mortbay.jetty.servlet.ServletHandler.handle(ServletHandler.java:360) at org.mortbay.jetty.servlet.SessionHandler.handle(SessionHandler.java:181) at org.mortbay.jetty.handler.ContextHandler.handle(ContextHandler.java:726) at org.mortbay.jetty.handler.HandlerWrapper.handle(HandlerWrapper.java:152) at org.mortbay.jetty.Server.handle(Server.java:324) at org.mortbay.jetty.HttpConnection.handleRequest(HttpConnection.java:505) at org.mortbay.jetty.HttpConnection$RequestHandler.headerComplete(HttpConnection.java:828) at org.mortbay.jetty.HttpParser.parseNext(HttpParser.java:514) at org.mortbay.jetty.HttpParser.parseAvailable(HttpParser.java:211) at org.mortbay.jetty.HttpConnection.handle(HttpConnection.java:380) at org.mortbay.io.nio.SelectChannelEndPoint.run(SelectChannelEndPoint.java:395) at org.mortbay.thread.BoundedThreadPool$PoolThread.run(BoundedThreadPool.java:450)Caused by: java.io.NotSerializableException: org.apache.wicket.util.value.ValueMap$NullSafeKeyComparator at java.io.ObjectOutputStream.writeObject0(ObjectOutputStream.java:1081) at java.io.ObjectOutputStream.defaultWriteFields(ObjectOutputStream.java:1375) at java.io.ObjectOutputStream.defaultWriteObject(ObjectOutputStream.java:391) at java.util.TreeMap.writeObject(TreeMap.java:1466) at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39) at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25) at java.lang.reflect.Method.invoke(Method.java:585) at java.io.ObjectStreamClass.invokeWriteObject(ObjectStreamClass.java:917) at java.io.ObjectOutputStream.writeSerialData(ObjectOutputStream.java:1339) at java.io.ObjectOutputStream.writeOrdinaryObject(ObjectOutputStream.java:1290) at java.io.ObjectOutputStream.writeObject0(ObjectOutputStream.java:1079) at java.io.ObjectOutputStream.defaultWriteFields(ObjectOutputStream.java:1375) at java.io.ObjectOutputStream.writeSerialData(ObjectOutputStream.java:1347) at java.io.ObjectOutputStream.writeOrdinaryObject(ObjectOutputStream.java:1290) at java.io.ObjectOutputStream.writeObject0(ObjectOutputStream.java:1079) at java.io.ObjectOutputStream.writeArray(ObjectOutputStream.java:1251) at java.io.ObjectOutputStream.writeObject0(ObjectOutputStream.java:1075) at java.io.ObjectOutputStream.defaultWriteFields(ObjectOutputStream.java:1375) at java.io.ObjectOutputStream.defaultWriteObject(ObjectOutputStream.java:391) at org.apache.wicket.protocol.http.pagestore.AbstractPageStore$PageSerializer.serializePage(AbstractPageStore.java:319) at org.apache.wicket.Page.writePageObject(Page.java:1335) at org.apache.wicket.Component.writeObject(Component.java:4303) at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39) at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25) at java.lang.reflect.Method.invoke(Method.java:585) at java.io.ObjectStreamClass.invokeWriteObject(ObjectStreamClass.java:917) at java.io.ObjectOutputStream.writeSerialData(ObjectOutputStream.java:1339) at java.io.ObjectOutputStream.writeOrdinaryObject(ObjectOutputStream.java:1290) at java.io.ObjectOutputStream.writeObject0(ObjectOutputStream.java:1079) at java.io.ObjectOutputStream.writeObject(ObjectOutputStream.java:302) at org.apache.wicket.util.io.IObjectStreamFactory$DefaultObjectStreamFactory$2.writeObjectOverride(IObjectStreamFactory.java:119) ... 24 more", "id": "1694"}, "1700": {"ground_truth": "0", "bug_report": "Make functionality of ContextImage a behavior so that other types of components can utilize its functionality\nIt would be better if ContextImage was a behavior rather than an actual component. For instance  if you have an html input of type=image (or a link for that matter) you can still utilize the behavior whereas a component you cannot.", "id": "1700"}, "1705": {"ground_truth": "0", "bug_report": "GuiceComponentInjector mishandles static fields\nGuiceComponentInjector mistakenly wraps static fields with serializable proxies. These CGLIB proxies impose limitations (must have default constructor  may not have final methods  etc) on fields which are not strictly necessary. The new implementation allows the use of Binder.requestStaticInjection() which is more flexible.", "id": "1705"}, "1706": {"ground_truth": "0", "bug_report": "org.apache.wicket.util.lang.Objects.convertValue returns null if it cannot convert the value\nIn the javadoc comment of the method it says that this method should return the value given as parameter if the value cannot be converted to the given type  but actually it returns null if it cannot convert the value. I had a problem with a TextField which had a model value of type java.io.Serializable and I had unfortunately not defined a special converter for the text field so it used org.apache.wicket.util.convert.ConverterLocator.DefaultConverter.convertToObject to convert to the object type. convertToObject uses Objects.convertValue so whenever model object was updated it was set to null. When retrieved from the model  model object was properly shown in the TextField so I had no idea why the value could not be properly setted but only getted.In many cases it would probably help if the Objects.convertValue did what it promises in javadoc (returns the value unconverted)  but how about throwing exception (at some method) if the converter does not know how to convert some kind of objects? This would make it a lot easier to spot the kind of mistakes I had made.", "id": "1706"}, "1709": {"ground_truth": "0", "bug_report": "Allow configuration of the guice Stage for GuiceWebApplicationFactory\nI would like to be able to use a init parameter to configure what Stage guice will use simillar to the way that WebApplication get it's configuration type from the wicket.configuration parameter. The parameter name could be wicket-guice.stage to keep with the pattern used by wicket core.", "id": "1709"}, "1711": {"ground_truth": "0", "bug_report": "Improve Locale fallback in BundleStringResourceLoader\nWhile https://issues.apache.org/jira/browse/WICKET-1415 fixed the NPE in BundleStringResourceLoader Locale.getDefault() is a bad choice to get the locale from  as it is determined by the default locale of the jvmrunning the servlet container. I think it's a big coincidence if the jvm default locale is actually the one the user wantsto see in the webapp - Session#getLocale() would probably be a better default.Attached is a patch against current trunk (1.4)", "id": "1711"}, "1714": {"ground_truth": "0", "bug_report": "PackagedTextTemplate does not load resource from application resource stream locator\nHere is my post to the dev list...file a jira issue-igorOn Wed  Jun 25  2008 at 11:23 AM  Ritz123 &lt;ritesh.trivedi@...&gt; wrote:&gt;&gt; I did some investigation and seems like there is a bug.&gt;&gt; PackagedTextTemplate @line:92 is creating a new ResourceStreamLocator()&gt; instead of using the one from the application. This is causing resources to&gt; be not found if you have custom resource stream loader registered with the&gt; application.&gt;&gt; line 92: private static final IResourceStreamLocator streamLocator = new&gt; ResourceStreamLocator();&gt;&gt; Can Wicket dev confirm?&gt;&gt;&gt; Ritz123 wrote:&gt;&gt;&gt;&gt; Hi &gt;&gt;&gt;&gt; I am trying to use PackagedTextTemplate to load the template  but seems&gt;&gt; like its not looking for the resource in the application registered&gt;&gt; resource stream locator. I get resource not found exception.&gt;&gt;&gt;&gt; HeaderContributor.forCss and forJavascript has worked fine and has found&gt;&gt; resource in the folders for application stream location without any&gt;&gt; issues.&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; &#8211;&gt; View this message in context: http://www.nabble.com/Re%3A-PackagedTextTemplate-does-not-load-resource-from-application-resource-stream-locator----BUG---tp18116540p18116540.html&gt; Sent from the Wicket - Dev mailing list archive at Nabble.com.&gt;", "id": "1714"}, "1719": {"ground_truth": "0", "bug_report": "StringResourceModel may fail to format numbers using MessageFormat\nStringResourceModel API seems to suggest it's possible to use it without a Component reference using the following approach:m = new StringResourceModel('key'  null  new Model(...)  new Object[] {p1  p2  ...});m.setLocalizer(xxxApplication.get().getResourceSettings().getLocalizer());return m.toString()Unfortunately the above will fail with an exception if the message uses the MessageFormat approach and one of the parametersis a number  since the locale field in StringResourceModel won't be initialized  and will then be passed as null to new MessageFormat(value  locale) at line 514 of StringResourceFormat.I'm using the following crude workaround:StringResourceModel rm = new StringResourceModel(key  null  model  params) { @Override public void setLocalizer(Localizer localizer) { super.setLocalizer(localizer); // crude hack to force into the StringResoruceLoader to grab a locale  // which is needed to format numbers with the MessageFormat approach load(); } }; rm.setLocalizer(GeoServerApplication.get().getResourceSettings().getLocalizer()); return rm.getString();but boy  this looks ugly... Creating a custom subclass that does locale loading in theconstructor would look better  but still quite ugly...", "id": "1719"}, "1730": {"ground_truth": "0", "bug_report": "RfcCompliantEmailAddressValidator accepts whitespace and tab\nThe RfcCompliantEmailAddressValidator in the org.apache.wicket.extensions.validation.validator package accepts whitespace and tab characters as it uses the regex provided on http://www.ex-parrot.com/~pdw/Mail-RFC822-Address.html which '..will only validate addresses that have had any comments stripped and replaced with whitespace'.", "id": "1730"}, "1750": {"ground_truth": "0", "bug_report": "Inconsisting Handling of id mismatch on wicket:container\nGiven this simple case:public class Home extends WebPage { public Home() { add(new EmptyPanel('test')); }}and the following HTML page:&lt;span wicket:id='test2'/&gt;Please notice that the ids do not match.Executing this app will give the following Exception:WicketMessage: Unable to find component with id 'test2' in [Page class =com.myapp.wicket.Home  id = 0  version = 0]. This means that you declaredwicket:id=test2 in your markup  but that you either did not add thecomponent to your page at all  or that the hierarchy does not match.Whereas when using a wicket:container instead of a HTML tag  like this:&lt;wicket:container wicket:id='test2'/&gt;And when the ids doesn't match  Wicket throws the following exception:WicketMessage: Failed to handle: &lt;wicket:container wicket:id='test2'/&gt;Which is quite cryptic at the first glance.Original: http://mail-archives.apache.org/mod_mbox/wicket-dev/200803.mbox/%3c15908468.post@talk.nabble.com%3eWe ran across same problem too.", "id": "1750"}, "1754": {"ground_truth": "0", "bug_report": "form action URLs in non-Wicket forms not rewritten\nWicket's RelativePathPrefixHandler rewrites 'href'  'src'  and 'background'URLs in non-Wicket markup but does not rewrite 'action' URLs in forms.There are workarounds but it would be cleaner if Wicket handled this caseby default.Discussion at:http://www.nabble.com/RelativePathPrefixHandler-and-form-'action'-attributes-tt18537680.htmlhttp://www.nabble.com/RelativePathPrefixHandler-and-form-'action'-attributes-tt18536692.html", "id": "1754"}, "1755": {"ground_truth": "0", "bug_report": "In html Include component isAbsolute method returns false for an absolute path in unix-like systems\nIn isAbsolute method  if colon position is -1 then this url MAY STILL be an absolute url. In unix systems there may not be colon in absolute paths. For example: /home/someuser.somefile.htmlSo  in order to fix this  a leading / (slash) may be checked to exist like:int colonPos = url.indexOf(':');int slashPos = url.indexOf('/');if (colonPos == -1 &amp;&amp; slashPos == -1) {return false; //Relative} else if (colonPos == -1 &amp;&amp; slashPos == 0) {return true; //Absolute}//Original Code//org.apache.wicket.markup.html.include.Include.javaprotected final boolean isAbsolute(String url) { if (url == null) { return false; } // do a fast  simple check first int colonPos; if ((colonPos = url.indexOf(':')) == -1) { return false; /*PROBLEM IS HERE*/ }...", "id": "1755"}, "1756": {"ground_truth": "0", "bug_report": "Generify PropertyColumn\nPropertyColumn overrides populateItem incorrectly. PropertyColumn has:public void populateItem(Item item  String componentId  IModel model)whereas ICellPopulator has: void populateItem(final Item&lt;ICellPopulator&lt;T&gt;&gt; cellItem  final String componentId  final IModel&lt;T&gt; rowModel);This makes it hard to extend PropertyColumn.", "id": "1756"}, "1777": {"ground_truth": "0", "bug_report": "Overflow when setting Expires header in WebResource\nproblematic code:response.setDateHeader('Expires'  System.currentTimeMillis() + (getCacheDuration() * 1000));getCacheDuration() * 1000 is an integer operation causing an overflow if getCacheDuration() is set to be &gt; MAX_INT/1000 seconds (approx. 25 days) which is by far less than the w3c recommendation for 'never expires': 'To mark a response as 'never expires ' an origin server sends an Expires date approximately one year from the time the response is sent. HTTP/1.1 servers SHOULD NOT send Expires dates more than one year in the future.'http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.21changing getCacheDuration() to return long or forcing a long operation fixes the problem:response.setDateHeader('Expires'  System.currentTimeMillis() + getCacheDuration() * 1000L);", "id": "1777"}, "1780": {"ground_truth": "1", "bug_report": "NPE in feedback panel\nWicketMessage: Error attaching this container for rendering: [MarkupContainer &#91;Component id = feedbackul  page = nl.topicus.tripleapoc.web.pages.deelnemer.intake.IntakeStap1Personalia  path = 11:layLeft:feedback:feedbackul.FeedbackPanel$2  isVisible = true  isVersioned = false&#93;]Root cause:java.lang.NullPointerException at org.apache.wicket.markup.html.panel.FeedbackPanel.newMessageDisplayComponent(FeedbackPanel.java:324) at org.apache.wicket.markup.html.panel.FeedbackPanel$MessageListView.populateItem(FeedbackPanel.java:88) at org.apache.wicket.markup.html.list.ListView.onPopulate(ListView.java:573) at org.apache.wicket.markup.repeater.AbstractRepeater.onBeforeRender(AbstractRepeater.java:127) at org.apache.wicket.Component.internalBeforeRender(Component.java:1003) at org.apache.wicket.Component.beforeRender(Component.java:1035) at org.apache.wicket.MarkupContainer.onBeforeRenderChildren(MarkupContainer.java:1589) at org.apache.wicket.Component.onBeforeRender(Component.java:3684) at org.apache.wicket.Component.internalBeforeRender(Component.java:1003) at org.apache.wicket.Component.beforeRender(Component.java:1035) at org.apache.wicket.MarkupContainer.onBeforeRenderChildren(MarkupContainer.java:1589) at org.apache.wicket.Component.onBeforeRender(Component.java:3684) at org.apache.wicket.Component.internalBeforeRender(Component.java:1003) at org.apache.wicket.Component.prepareForRender(Component.java:2168) at org.apache.wicket.ajax.AjaxRequestTarget.respondComponent(AjaxRequestTarget.java:747) at org.apache.wicket.ajax.AjaxRequestTarget.respondComponents(AjaxRequestTarget.java:649) at org.apache.wicket.ajax.AjaxRequestTarget.respond(AjaxRequestTarget.java:564) at org.apache.wicket.request.AbstractRequestCycleProcessor.respond(AbstractRequestCycleProcessor.java:104) at org.apache.wicket.RequestCycle.processEventsAndRespond(RequestCycle.java:1177) at org.apache.wicket.RequestCycle.step(RequestCycle.java:1248) at org.apache.wicket.RequestCycle.steps(RequestCycle.java:1349) at org.apache.wicket.RequestCycle.request(RequestCycle.java:493) at org.apache.wicket.protocol.http.WicketFilter.doGet(WicketFilter.java:387) at org.apache.wicket.protocol.http.WicketFilter.doFilter(WicketFilter.java:199)", "id": "1780"}, "1788": {"ground_truth": "0", "bug_report": "'Invalid procedure call or argument' on AJAX call with IE7\nI have a Button that shows a JS alert and then executes an AJAX call.It works fine under Firefox 2  but fails under IE7.. The alert appears  I click 'ok' and then I get the 'Initiating Ajax GET request...' inside 'WICKET AJAX DEBUG'  but it doesn't reach my serverside handler.After clicking 'ok'  in the bottom-left corner of the window appears a javascript error: 'Invalid procedure call or argument'  line 849  code 0.Original discussion: http://www.nabble.com/Button-with-confirmation-with-IE7-td18944137.htmlI'll add a quickstart and a patch in a moment.", "id": "1788"}, "1794": {"ground_truth": "0", "bug_report": "WicketTester.clickLink and IndexedParamUrlCodingStrategy don't work together\nIndexedParamUrlCodingStrategy.appendParameters expects String-&gt;String map:.... while (parameters.containsKey(String.valueOf)) { String value = (String)parameters.get(String.valueOf);...but BaseWicketTester.clickLink converts page params to String-&gt;String[] map:.... PageParameters parameters = (PageParameters)getParametersMethod.invoke( bookmarkablePageLink  (Object[])null); setParametersForNextRequest(parameters.toRequestParameters());...And as result we have type cast exception.", "id": "1794"}, "1806": {"ground_truth": "0", "bug_report": "JavascriptStripper ignores context when looking for multiline comments\norg.apache.wicket.util.string.JavascriptStripper#stripCommentsAndWhitespace doesn't check the context when looking for multiline comments. In my case  it interprets the default accept header in the jQuery source code as a multiline comment:accepts: { xml: 'application/xml  text/xml'  html: 'text/html'  script: 'text/javascript  application/javascript'  json: 'application/json  text/javascript'  text: 'text/plain'  _default: '/'}The culprit being this string: '/'I don't have a patch and I wouldn't try to write my own JS parser. Maybe replacing the current implementation with a Rhino-based one is an option. Its available via Maven:&lt;dependency&gt; &lt;groupId&gt;rhino&lt;/groupId&gt; &lt;artifactId&gt;js&lt;/artifactId&gt; &lt;version&gt;1.7R1&lt;/version&gt;&lt;/dependency&gt;", "id": "1806"}, "1816": {"ground_truth": "0", "bug_report": "Wicket 1.3.4 violates servlet standard  Glassfish spews warnings\nWicketFilter.java line 194 invokes getLastModified() which invokes 'request.getParameterMap()' on line 962. Later on in that same request  WicketFilter.java line 222 invokes doGet() which invokes response.setCharacterEncoding() on line 376.This is just one case where this problem occurs but I believe others might exist. Whenever Wicket violates the standard Glassfish spews out this warning:PWC4011: Unable to set request character encoding to UTF-8 from context &lt;context-path&gt;  because request parameters have already been read  or ServletRequest.getReader() has already been called... you literally end up with tens of these warnings per request  and supposedly  the wrong behavior  Glassfish's FAQ discusses this in more detail: http://wiki.glassfish.java.net/Wiki.jsp?page=FaqWebAppUnableToSetRequestCharEncoding", "id": "1816"}, "1845": {"ground_truth": "0", "bug_report": "WicketRuntimeException when using wicket-auth-roles in a frameset\nHi All I seem to have a very strange exception when using wicket-auth-roles in a frameset.Let me try and sketch out the setup:1) Application home page is called FramesetPage.java &#8211; it extends org.apache.wicket.markup.html.WebPage &#8211; corresponding HTML contains simple frameset with 2 rows2) Top row of frameset contains TopFramePage.java &#8211; it extends org.apache.wicket.markup.html.WebPage &#8211; corresponding HTML contains only an image component as follows: &#8211; add(new Image('bannerImage'  'logo.png'));3) Bottom row of frameset contains BottomFramePage.java &#8211; it extends org.apache.wicket.markup.html.WebPage &#8211; it requires authentication/authorization using wicket-auth-roles (as is  straight out of the jar) &#8211; if not already authenticated/authorized then redirected to MySignInPage.java &#8211; it extends org.apache.wicket.authentication.pages.SignInPage &#8211; corresponding HTML contains standard &lt;span wicket:id='signInPanel'/&gt; tagHere's the strange part: After completing the 'Username' and 'Password' fields of thesignInPanel then the exception displayed in the attached stack trace is thrown. Further  if I replace the imagecomponent in TopFramePage with some CSS that loads the same image then no exception is thrown.Any thoughts on what is causing this problem?Thanks Steve", "id": "1845"}, "1855": {"ground_truth": "0", "bug_report": "Using an AjaxSubmitLink outside of a Form does not set the form property\nWhen constructing an AjaxSubmitLink outside of a form using the constructor:public AjaxSubmitLink(String id  final Form form)The form argument is not set in the link. This prevents the form from seeing the link as its submitting component  which in turn means that using thing like enableDefaultFormProcessing() on the link don't work.Changing the constructor of AjaxSubmitLink to:public AjaxSubmitLink(String id  final Form form){ super(id  form) /* was: super(id) */ ...}will probably fix the problem.A temporary workaround is to implement a getForm() method in the subclass of the submit link which answers the form of the link", "id": "1855"}, "1856": {"ground_truth": "0", "bug_report": "AbstractTree XHTML Strict validation\n&#91;Notice: Adapted from http://markmail.org/message/afuxccwazkzwc7bz &#93;I have a rootless BaseTree and see it output &lt;table style='display:none' id='tree1f_0'&gt;&lt;/table&gt;&lt;table class='wicket-tree-content' id='tree1f_1'&gt;&lt;tr&gt;...which according to http://validator.w3.org is invalid strict XHTML. Looking at thecomment in the code  AbstractTree.onRender()  // is this root and tree is in rootless mode? if (this == rootItem &amp;&amp; isRootLess() == true) { // yes  write empty div with id // this is necessary for createElement js to work correctly String tagName = ((ComponentTag)markupStream.get()).getName(); getResponse().write( '&lt;' + tagName + ' style=/'display:none/' id=/'' + getMarkupId() + '/'&gt;&lt;/' + tagName + '&gt;'); markupStream.skipComponent(); }it appears from the comment that the indention was to output a div and not a table. Witha div  we would get valid markup: &lt;div style='display:none' id='tree1f_0'&gt;&lt;/div&gt;&lt;table class='wicket-tree-content' id='tree1f_1'&gt;&lt;tr&gt;...Is there a particular reason to fetch the tagName from the markupStream instead of just hardcodingit to 'div'?Thanks Kaspar", "id": "1856"}, "1857": {"ground_truth": "0", "bug_report": "Unfound markup information is not entirely cached even in deployment mode\nUnfound markup information is not entirely cached even in deployment mode  which causes performance problems. The problem has a very broad effect  because checking for non-existent localised versions of markup causes a lot of cases of unfound markup. This showed up first in our load tests  and was later confirmed by profiling.If you don't have the localised version of your markup to your current locale  this markup is looked for but never found. This bug causes the lookup to repeat on every request when the component is repainted  which becomes a major problem in a case with a lot of ajax repaints.You can reproduce the problem with Wicket 1.3.3 easily  for example by putting the log4j.logger.org.apache.wicket.markup.MarkupCache=DEBUG setting in log4j.properties and running Wicket examples in deployment mode. I added several items to the Ajax todo list and this appeared in console repeatedlyDEBUG - MarkupCache - Load markup: cacheKey=org.apache.wicket.examples.ajax.builtin.TodoList$AddItemsContaineren_UShtmlDEBUG - MarkupCache - Markup not found: org.apache.wicket.examples.ajax.builtin.TodoList$AddItemsContaineren_UShtmlThis is caused by the bug that in MarkupCache  the unfound markup information is stored only in markupCache and not in markupKeyCache. I fixed this in the nave way but we should really refactor the cache handling so that it does not rely on the same calls being duplicated to markupCache and markupKeyCache .", "id": "1857"}, "1863": {"ground_truth": "0", "bug_report": "DateTimeField: small bugs\nHello  I found 2 different bugs that makes my applications react in the wrong way : onBeforeRender:378When the modelobject-date is null  the hours and minutes are not set to null to. Now only date is set to null. I use this object with ajax  and when the DateTimeField loads with a new modelobject  the hours- and minutesfield holds the old value. If not clear  I can make a quickstart. setDate:231This function adjusts the modelobject with the filled in date. But the hours and minutes aren't add.I have overridden the function so it would work correctly. My code:public void setDate(Date date) Unknown macro: { super.setDate(date); System.out.println(&quot;setDate [&quot; + date + &quot;]&quot;); MutableDateTime modelDate = new MutableDateTime(date); Integer hours = getHours(); Integer minutes = getMinutes(); boolean use12HourFormat = use12HourFormat(); if (hours != null) { modelDate.set(DateTimeFieldType.hourOfDay()  hours.intValue() % (use12HourFormat ? 12 : 24)); modelDate.setMinuteOfHour((minutes != null) ? minutes.intValue() : 0); } setDefaultModelObject(modelDate.toDate()); } Thanks a lot ! Marieke.", "id": "1863"}, "1868": {"ground_truth": "0", "bug_report": "i18n package resource resolving depends too much on available locale\nInstead of just depending on the session's locale  our i18n resolving algorithm should look at the form of the file names as well. For instance  if we get a request for /web/resources/foo.Bar/test_en_US.css  it should recognize that test is the base form  and try en and en_US on top of that  regardless of the locale that is was set in the session.", "id": "1868"}, "1871": {"ground_truth": "0", "bug_report": "org.apache.wicket.util.string.Strings#stripJSessionId StringIndexOutOfBoundsException\ninput:http://abc.com/xx/yy.html?code=a%E2%8C%A9=en&amp;amp;section=DDD&amp;amp;d=173amp;passing the about input to methodorg.apache.wicket.util.string.Strings#stripJSessionIdwill introduce StringIndexOutOfBoundsExceptionbecause '?' appears before ';'", "id": "1871"}, "1886": {"ground_truth": "0", "bug_report": "WicketTester Cookie handling\nWhile trying to test my SecureForm implementation (https://issues.apache.org/jira/browse/WICKET-1885) with WicketTester I ran into this issue: A cookie set in the response never shows up in the 'next' request  because both have their own lists of cookies that aren't shared.Afaik both should share the same List instance to handle cookies. That way its possible to set a cookie in the response and read it from the request.A simple testcase is attached.", "id": "1886"}, "1888": {"ground_truth": "0", "bug_report": "FormComponents (and subclasses) should be able to provide their own resource bundles\nIn order to fully support the idea to break down a large application into small reusable components it seems necessary that FormComponents provide their own resource bundles. We have a project that uses a customized subclass of Checkbox that needs to provide customized error messages. The ideal place for those error messages would be a resource bundle living next to the Checkbox subclass but this is not yet supported. Unfortunately the JavaDoc for ComponentStringResourceLoader indicates (see example: input1.properties =&gt; Required) that support for this already exists.A small change to FormComponent$MessageSource.getMessage(String key) could add support for this. Instead of using the formComponent.getParent() as the base for searching the resource string  simply use the formComponent itself.", "id": "1888"}, "1894": {"ground_truth": "0", "bug_report": "AjaxFallbackButton: inconsistent submit order\nI just stumbled upon a problem with a Form containing a nested Form and two AjaxFallbackButtons (submit and preview). I need to implement different onSubmit() behavior of the nested Form depending on the clicked button.The order of onSubmit() calls is:without JS: AjaxFallbackButton.onSubmit(AjaxRequestTarget Form) OuterForm.onSubmit() // not used Inner Form.onSubmit()with JS: Inner Form.onSubmit() OuterForm.onSubmit() // not used AjaxFallbackButton.onSubmit(AjaxRequestTarget Form)With JS  it is therefore not possible to determine which button was clicked from inside a form's onSubmit() method. see also http://www.nabble.com/AjaxFallbackButton%3A-inconsistend-submit-order-td20131329.html", "id": "1894"}, "1897": {"ground_truth": "0", "bug_report": "StatelessForm submitted to the wrong page\nI made a small application to reproduce the problem. You can download it from http://aditsu.net/wickettest.zip   I'll try to attach it too.Dependencies: jetty 6  wicket 1.4-m3  slf4j  log4jSteps to reproduce:1. Run the test.Start class2. Open http://localhost:8080 in a browser3. Open http://localhost:8080/page2 in a new tab4. Go to the first tab and click submitResult:WicketRuntimeException: unable to find component with path form on stateless page &#91;Page class = test.Page2  id = 0  version = 0&#93;It looks like the 2 pages are created with the same id in 2 different pagemaps  but when I submit the form  it goes to the second pagemap and finds the second page (with no form on it).", "id": "1897"}, "1898": {"ground_truth": "0", "bug_report": "WebRequestCycleProcessor.resolveHomePageTarget for empty path with enforceMounts=true provokes 403 - 'Direct access not allowed for mounted targets'\nScenario: WebApplication.getHomePage() returns a page that is also mounted to a non-empty path by WebApplication.mountBookmarkablePage(). Besides  we have getSecuritySettings().setEnforceMounts(true). Upon a request for the servlet's root URL (i.e.  with requestParameters.getPath()=='')  the methodWebRequestCycleProcessor.resolve will throw a AbortWithWebErrorCodeException(403) with error message 'Direct access not allowed for mounted targets'.This is because WebRequestCycleProcessor.resolveHomePageTarget correctly returns a non-null target  so that the else-branch starting in line 190 of file WebRequestCycleProcessor.java is reached. The comment says 'a target was found  but not by looking up a mount'  which is misleading  because the szenario should desirably work even though property enforceMounts has been set to true.The only (terrible) workaound I have found is to override WebRequestCycleProcessor.resolveHomePageTarget() to return null and establish a home-page-like thing by overriding WebRequestCodingStrategy.urlCodingStrategyForPath() for the empty path.", "id": "1898"}, "1903": {"ground_truth": "0", "bug_report": "RadioChoice disable certain choice bug\nI want to disable certain values of a dropdown choice.But the isDisabled is never called only the isEnabled and i don't know the choice in here.", "id": "1903"}, "1904": {"ground_truth": "0", "bug_report": "CheckBox incorrectly converts its model value when a custom Boolean converter is installed - again\nHi I tried the last version of wicket (built from trunk svn) and there is one old bug again:see https://issues.apache.org/jira/browse/WICKET-330There was removed the default Boolean converter ... and the bug is again active.Thx for fixing H.", "id": "1904"}, "1915": {"ground_truth": "0", "bug_report": "wicket:message sometimes broken\nThe behavior described here: http://cwiki.apache.org/WICKET/wickets-xhtml-tags.html (use wicket:message as attribute) sometimes doesn't work  depending on the hierarchy and the tag where it applies.I've reproduced it using a repeater and applying wicket:message it to a &lt;td&gt; tag.Instead of correctly modifying the attribute  it throws the usual MarkupException 'WicketMessage: Unable to find component with id 'label' in [MarkupContainer'", "id": "1915"}, "1919": {"ground_truth": "0", "bug_report": "MarkupContainer.setEnabled() doesn't enable/disable child components\n1. Create any components that is derived from MarkupContainer  for example  create Panel. 2. Put some components to the Panel  for example  TextInput  Label etc.3. Call panel.setEnabled(false) Result: all controls on panel are still enabled.Notes: after some investigation I found that MarkupContainer doesn't override setEnabled and therefore it cannot enable/disable components stored in the container. Workaround: manually disable all components that are displayed on the panel  for example:public void setEnabledForChildren(boolean enabled) { setEnabledRecursive(this  enabled); } private void setEnabledRecursive(MarkupContainer container  boolean enabled) { Iterator&lt;? extends Component&gt; iterator = container.iterator(); while (iterator.hasNext()) { Component component = iterator.next(); component.setEnabled(enabled); if (component instanceof MarkupContainer) { setEnabledRecursive((MarkupContainer) component  enabled); } } }I think that MarkupContainer must be responsible for disabling/enabling child components.", "id": "1919"}, "1930": {"ground_truth": "0", "bug_report": "FileUpload.writeToTempFile uses field Id as filename - Windows doesn't support some characters\nThe component FileUpload tries to create a temporary file using the multipart fieldname's id.That id has invalid characters - not supported on Windows environments  for example.", "id": "1930"}, "1941": {"ground_truth": "0", "bug_report": "Add getter and setter for data provider to  AjaxFallbackDefaultDataTable\nAdding at least getter (and a setter too) for data provider would allow for a lot better handling of customized data providers. For example if data provider's results are dependant on external values like  say  boolean stating if table should contain only rows with some specific statistic ('show only items which are on sale' or anything like that) I'd rather do ((ShopDataProvider)table.getDataProvider()).setShowOnlyItemsOnSale(true); instead of recreating the object and replacing it on the page by doing something like get('table').replace(new AjaxFallbackDefaultDataTable('table'  columns  new ShopDataProvider(true)));", "id": "1941"}, "1946": {"ground_truth": "0", "bug_report": "Please make RequestLogger.log(RequestData  SessionData) protected\nCould we please make the method above protected (rather than private). This makes it very simple to do something like this: @Override protected IRequestLogger newRequestLogger() { return new RequestLogger() { @Override protected void log(RequestData rd  SessionData sd) { // do my custom logging HERE } }; }ALSO - it would be real nice if at the same time you extract that creation of the AppendingStringBuffer to a method  so that the log method now looks like:protected void log(RequestData rd  SessionData sd){ if (log.isInfoEnabled()) { log.info(createStringBuffer(rd  sd  true); }}protected final void createStringBuffer(RequestData rd  SessionData sd  boolean includeRuntimeInfo) { ... all of the stuff that was taken out of log that creates the ASB if (includeRuntimeInfo) { Runtime runtime = Runtime.getRuntime(); long max = runtime.maxMemory() / 1000000; long total = runtime.totalMemory() / 1000000; long used = total - runtime.freeMemory() / 1000000; asb.append(' maxmem='); asb.append(max); asb.append('M total='); asb.append(total); asb.append('M used='); asb.append(used); asb.append('M'); } return asb;}", "id": "1946"}, "1947": {"ground_truth": "0", "bug_report": "rc1 generics - LabelTree\nLabelTree.getNodeTextModel requires IModel&lt;Object&gt; and returns IModel&lt;Object&gt;. I was overriding it and returning a Model&lt;String&gt;  but I can't do that anymore. Why not just return IModel&lt;?&gt; ?", "id": "1947"}, "1954": {"ground_truth": "0", "bug_report": "Component.isVisibilityAllowed() not consulted before calling onBeforeRender()\nI have a component whose parent does this:class Parent extends Panelprivate Component child;onBeforeRender(){child.setVisibilityAllowed(false);super.onBeforeRender();}I would expect child's onBeforeRender() to not be executed but it is  because Component.internalBeforeRender calls isVisible() rather than determineVisibility().Shouldn't the following line in Component.internalBeforeRender(): if ((isVisible() || callOnBeforeRenderIfNotVisible()) &amp;&amp; !getFlag(FLAG_RENDERING) &amp;&amp; !getFlag(FLAG_PREPARED_FOR_RENDER))be this: if ((determineVisibility() || callOnBeforeRenderIfNotVisible()) &amp;&amp; !getFlag(FLAG_RENDERING) &amp;&amp; !getFlag(FLAG_PREPARED_FOR_RENDER))", "id": "1954"}, "1960": {"ground_truth": "0", "bug_report": "AutoCompleteTextField - gives a type mismatch error on IE - version wicket-1.4-rc1\nwicket-autocomplete.jsfunction function showAutoComplete()line 291 container.style.zIndex=(!isNaN(Number(index))?Number(index)+1:index);looks like IE doesn't like big i in zIndex  IE seem to be be happy with zindex not sure if that's the correct way to resolve the issue.", "id": "1960"}, "1962": {"ground_truth": "0", "bug_report": "setters on FeedbackPanel do not return self  which prevents chaining\nThe setters on FeedbackPanel do not return 'this'.This makes chaining impossible  i.e. add(new FeedbackPanel('id').setFilter(filter).setRenderBodyOnly(true));I think it would be more consistent with the rest of wicket  and useful  if the setters are changed to support chaining.", "id": "1962"}, "1985": {"ground_truth": "0", "bug_report": "AbstractTree breaks on multiple tree model events in the same request\nWhen multiple events are fired by the treemodel  e.g. an expandNode and selectNode  unreachable treeitems end up times in the dirtyitems list.Their children will be added to the treeitemcontainer in ontargetrespond  leading to the situation where it has children that are not rendered.(in development  an 'unrendered component' exception is thrown)", "id": "1985"}, "1988": {"ground_truth": "0", "bug_report": "DatePicker is not thread-safe\nDatePicker uses 2 SimpleDateFormats as static final fields. That causes random failures under load because SimpleDateFormat is not thread-safe. From its javadocs: 'Date formats are not synchronized. It is recommended to create separate format instances for each thread. If multiple threads access a format concurrently  it must be synchronized externally.'For example:18:34:06 214 (TP-Processor3) ERROR &#91;org.apache.wicket.RequestCycle&#93; - Exception in rendering component: [MarkupContainer &#91;Component id = _header_0&#93;]org.apache.wicket.WicketRuntimeException: Exception in rendering component: [MarkupContainer &#91;Component id = _header_0&#93;] at org.apache.wicket.Component.renderComponent(Component.java:2519) at org.apache.wicket.MarkupContainer.onRender(MarkupContainer.java:1411) at org.apache.wicket.Component.render(Component.java:2317) at org.apache.wicket.MarkupContainer.autoAdd(MarkupContainer.java:223) at org.apache.wicket.markup.resolver.HtmlHeaderResolver.resolve(HtmlHeaderResolver.java:78) at org.apache.wicket.MarkupContainer.renderNext(MarkupContainer.java:1324) at org.apache.wicket.MarkupContainer.renderAll(MarkupContainer.java:1427) at org.apache.wicket.Page.onRender(Page.java:1470) at org.apache.wicket.Component.render(Component.java:2317) at org.apache.wicket.Page.renderPage(Page.java:904) at org.apache.wicket.request.target.component.BookmarkablePageRequestTarget.respond(BookmarkablePageRequestTarget.java:231) at org.apache.wicket.request.AbstractRequestCycleProcessor.respond(AbstractRequestCycleProcessor.java:104) at org.apache.wicket.RequestCycle.processEventsAndRespond(RequestCycle.java:1181) at org.apache.wicket.RequestCycle.step(RequestCycle.java:1252) at org.apache.wicket.RequestCycle.steps(RequestCycle.java:1353) at org.apache.wicket.RequestCycle.request(RequestCycle.java:493) at org.apache.wicket.protocol.http.WicketFilter.doGet(WicketFilter.java:355) at org.apache.wicket.protocol.http.WicketFilter.doFilter(WicketFilter.java:200) at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:235) at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:206) at com.huitale.marketplace.security.SessionHijackingFilter.doFilter(SessionHijackingFilter.java:51) at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:235) at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:206) at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:233) at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:175) at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:128) at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:102) at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:109) at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:263) at org.apache.jk.server.JkCoyoteHandler.invoke(JkCoyoteHandler.java:190) at org.apache.jk.common.HandlerRequest.invoke(HandlerRequest.java:283) at org.apache.jk.common.ChannelSocket.invoke(ChannelSocket.java:767) at org.apache.jk.common.ChannelSocket.processConnection(ChannelSocket.java:697) at org.apache.jk.common.ChannelSocket$SocketConnection.runIt(ChannelSocket.java:889) at org.apache.tomcat.util.threads.ThreadPool$ControlRunnable.run(ThreadPool.java:690) at java.lang.Thread.run(Thread.java:619)Caused by: java.lang.ArrayIndexOutOfBoundsException: 14 at sun.util.calendar.BaseCalendar.getCalendarDateFromFixedDate(BaseCalendar.java:436) at java.util.GregorianCalendar.computeFields(GregorianCalendar.java:2081) at java.util.GregorianCalendar.computeFields(GregorianCalendar.java:1996) at java.util.Calendar.setTimeInMillis(Calendar.java:1104) at java.util.Calendar.setTime(Calendar.java:1070) at java.text.SimpleDateFormat.format(SimpleDateFormat.java:859) at java.text.SimpleDateFormat.format(SimpleDateFormat.java:852) at java.text.DateFormat.format(DateFormat.java:316) at org.apache.wicket.extensions.yui.calendar.DatePicker.configure(DatePicker.java:390) at org.apache.wicket.extensions.yui.calendar.DateTimeField$1.configure(DateTimeField.java:128) at org.apache.wicket.extensions.yui.calendar.DatePicker.renderHead(DatePicker.java:224) at org.apache.wicket.Component.renderHead(Component.java:2568) at org.apache.wicket.markup.html.internal.HtmlHeaderContainer$1.component(HtmlHeaderContainer.java:220) at org.apache.wicket.MarkupContainer.visitChildren(MarkupContainer.java:829) at org.apache.wicket.MarkupContainer.visitChildren(MarkupContainer.java:844) at org.apache.wicket.MarkupContainer.visitChildren(MarkupContainer.java:844) at org.apache.wicket.MarkupContainer.visitChildren(MarkupContainer.java:869) at org.apache.wicket.markup.html.internal.HtmlHeaderContainer.renderHeaderSections(HtmlHeaderContainer.java:211) at org.apache.wicket.markup.html.internal.HtmlHeaderContainer.onComponentTagBody(HtmlHeaderContainer.java:136) at org.apache.wicket.Component.renderComponent(Component.java:2480) ... 35 morehappens because one internal SimpleDateFormat's field changes while the class is formatting a date.", "id": "1988"}, "2011": {"ground_truth": "0", "bug_report": "FormComponent cookie persistent issue\nThe FormComponent doesnt persistent the cookie correct when there is no context path and the cookie is created on a mounted page. The cookie is created by cannot be retrieved again from the formcomponent. Either the retrieval logic is wrong or the cookie is created wrongly.See this thread for more information:http://www.nabble.com/FormComponent-cookie-persistent-issue-td21197389.html", "id": "2011"}, "2015": {"ground_truth": "0", "bug_report": "Empty File Upload field breaks validation of other fields in WicketTester.\nSubmitting form with empty FileUpload -field break validations of other fields in WicketTester: TextField mandatority (field.setRequired(true)). TextField input length validation (field.add(StringValidator(lengthBetween(...)))). DropDownChoice validation does not 'see' selection.If File Upload -field is filled  then validations above work.Form submits manually without a problem in web browser.", "id": "2015"}, "2016": {"ground_truth": "0", "bug_report": "FormTester (BaseWicketTester.executeAjaxEvent[component event]) submits also buttons that are hidden (isVisible=false) resulting in exception\nFormTester (BaseWicketTester.executeAjaxEvent&#91;component event&#93;) submits also buttons that are hidden (isVisible=false) resulting in exception.I am trying to ajax-click the visible button  but the formTester arranges even the hidden button to be submitted.. the form processing assumes the hidden button is now the submitting button.. and it is hidden  so an exception is thrown:org.apache.wicket.WicketRuntimeException: Submit Button hiddenButton (path=form:hiddenButton) is not visible at org.apache.wicket.markup.html.form.Form$2.component(Form.java:604) at org.apache.wicket.MarkupContainer.visitChildren(MarkupContainer.java:859) at org.apache.wicket.MarkupContainer.visitChildren(MarkupContainer.java:874) at org.apache.wicket.markup.html.form.Form.findSubmittingButton(Form.java:588) at org.apache.wicket.markup.html.form.Form.onFormSubmitted(Form.java:852) at org.apache.wicket.ajax.form.AjaxFormSubmitBehavior.onEvent(AjaxFormSubmitBehavior.java:132) at org.apache.wicket.ajax.AjaxEventBehavior.respond(AjaxEventBehavior.java:166) at org.apache.wicket.ajax.AbstractDefaultAjaxBehavior.onRequest(AbstractDefaultAjaxBehavior.java:299) at org.apache.wicket.util.tester.BaseWicketTester.executeAjaxEvent(BaseWicketTester.java:1170) at org.apache.wicket.util.tester.BaseWicketTester.executeAjaxEvent(BaseWicketTester.java:1080) at com.mycompany.TestHomePage.testAjaxSubmitWhileAnotherButtonIsNotVisible(TestHomePage.java:33) at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39) at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25) at java.lang.reflect.Method.invoke(Method.java:597) at junit.framework.TestCase.runTest(TestCase.java:164) at junit.framework.TestCase.runBare(TestCase.java:130) at junit.framework.TestResult$1.protect(TestResult.java:106) at junit.framework.TestResult.runProtected(TestResult.java:124) at junit.framework.TestResult.run(TestResult.java:109) at junit.framework.TestCase.run(TestCase.java:120) at junit.framework.TestSuite.runTest(TestSuite.java:230) at junit.framework.TestSuite.run(TestSuite.java:225) at org.eclipse.jdt.internal.junit.runner.junit3.JUnit3TestReference.run(JUnit3TestReference.java:130) at org.eclipse.jdt.internal.junit.runner.TestExecution.run(TestExecution.java:38) at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:460) at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:673) at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.run(RemoteTestRunner.java:386) at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.main(RemoteTestRunner.java:196)I would assume this is an easy fix to the BaseWicketTester.executeAjaxEvent&#91;component event&#93;) method where it visits the form components...An invasive workaround: Just set your hidden button temporarily visible (from within your wickettest) while executing the ajax event", "id": "2016"}, "2019": {"ground_truth": "0", "bug_report": "Validation messages aren't cleared on success.\nWhen triggering validation messages on a form component  they aren't cleared anymore when afterward we fix our validation problem.The following code demonstrates this issue by making a form with a single text field that is set as required. First  we submit the form without filling in the field. We expect that to cause an error. Which it does. Then  we set a value in the field  and submit again. We expect that to pass validation. It does not  however.Instead  we get this exception:junit.framework.AssertionFailedError: expect no error message  but contains Field 'field' is required. at junit.framework.Assert.fail(Assert.java:47) at junit.framework.Assert.assertTrue(Assert.java:20) at org.apache.wicket.util.tester.WicketTester.assertNoErrorMessage(WicketTester.java:493) at test.spike.net.link.safeonline.TinyTests.wicketTest(TinyTests.java:93)Code:package test.spike;import org.apache.wicket.Page;import org.apache.wicket.markup.html.WebPage;import org.apache.wicket.markup.html.form.Form;import org.apache.wicket.markup.html.form.TextField;import org.apache.wicket.protocol.http.WebApplication;import org.apache.wicket.util.tester.FormTester;import org.apache.wicket.util.tester.WicketTester;import org.junit.Test;public class TinyTests { public static class MyApp extends WebApplication { @Override public Class&lt;? extends Page&gt; getHomePage() { return MyPage.class; } } public static class MyPage extends WebPage { public MyPage() { add(new MyForm('form')); } class MyForm extends Form&lt;String&gt; { private static final long serialVersionUID = 1L; public MyForm(String id) { super(id); TextField&lt;String&gt; f = new TextField&lt;String&gt;('field'); f.setRequired(true); add(f); } } } @Test public void wicketTest() { WicketTester wicket = new WicketTester(new MyApp()); wicket.processRequestCycle(); FormTester form = wicket.newFormTester('form'); form.submit(); wicket.assertErrorMessages(new String[] { 'Field 'field' is required.' }); form = wicket.newFormTester('form'); form.setValue('field'  'foo'); form.submit(); wicket.assertNoErrorMessage(); // &lt;- Exception line. }}&lt;html&gt; &lt;body&gt; &lt;form wicket:id='form'&gt; &lt;input wicket:id='field' /&gt; &lt;input type='submit' /&gt; &lt;/form&gt; &lt;/body&gt;&lt;/html&gt;", "id": "2019"}, "2020": {"ground_truth": "0", "bug_report": "Callback after detaching the page but before the PageMap lock is released\nCurrently  it is not possible to perform any checks on a page after the request has been detached. In onEndRequest  the PageMap lock has already been cleared  making it unsafe to access the pages involved in the request. Would it be possible to add an extra callback method (ie. onAfterTargetDetach()) to RequestCycle directly after detaching the request targets? We need such a callback to check (in development mode) if all models are detached correctly.", "id": "2020"}, "2024": {"ground_truth": "0", "bug_report": "AutoComplete ShowListOnFocusGain not working\nI noticed an issue with the Wicket-Extensions autocomplete behavior when the AutoCompleteSettings ShowListOnFocusGain flag is set to true. Basically  it works as expected in Firefox  but in (at least) Chrome  IE6 and IE7  it displays the list on focus gain  but you cannot use the mouse to select any of the items in the autocomplete list. The debug log showed that as soon as an item in the list was clicked on  the onblur event would fire for the field  which would then immediately fire a focus event  which would trigger reloading the list.This fix for this is trivial: adding one line to the top of obj.onfocus: if (mouseactive==1) return killEvent(event);.I'll post the patch.", "id": "2024"}, "2025": {"ground_truth": "0", "bug_report": "isVisible should not be called after detach\nI think isVisible should not be called after detach to prevent model reloads.I found one call to isVisible after detach in method ComponentRequestTarget#respond(RequestCycle). That method initiates a detach and then calls page.endComponentRender. This leads to a call to Page#checkRendering which calls isVisibleInHierarchy() and from there isVisible(). Method checkRendering only does something when the debug setting 'componentUseCheck' is enabled (which according to the javadoc is true by default). Short term workaround: set debug setting 'componentUseCheck' to false.", "id": "2025"}, "2029": {"ground_truth": "0", "bug_report": "AutoComplete - KEY_TAB should work like KEY_ENTER\nWhen selecting an item in a AutoComplete pulldown using the arrow keys and pressing the KEY_ENTER the current item is selected.Doing the same but pressing KEY_TAB instead  the focus shifts to to next input field  but current item is not selected.In a 'normal' pulldown menu KEY_TAB selects current item and shifts to next input.", "id": "2029"}, "2030": {"ground_truth": "0", "bug_report": "BaseWicketTester can't find the pageLink field using reflection when you override the PageLink class.\nCurrently  BaseWicketTester (line 524) does this: public &lt;C extends Page&gt; Result isPageLink(String path  Class&lt;C&gt; expectedPageClass) { PageLink&lt;?&gt; pageLink = (PageLink&lt;?&gt;)getComponentFromLastRenderedPage(path); try { Field iPageLinkField = pageLink.getClass().getDeclaredField('pageLink'); iPageLinkField.setAccessible(true); IPageLink iPageLink = (IPageLink)iPageLinkField.get(pageLink); return isEqual(expectedPageClass  iPageLink.getPageIdentity()); }The problem manifests when you want to customize a page link's onClick by overriding it like this:new PageLink&lt;AuthPage&gt;('pageLink'  AuthPage.class) { private static final long serialVersionUID = 1L; @Override public void onClick() { Foo.bar(); super.onClick(); }});As a result; the BaseWicketTester tries to look for the pageLink field in the anonymous class instead of the privately declared pageLink field in the PageLink class.BaseWicketTester should either go down the tree:for(Class type = pageLink.getClass(); type != Object.class; type = type.getSuperclass())Or a getter should be made for the pageLink field. (This is what Java wants you to do).", "id": "2030"}, "2045": {"ground_truth": "0", "bug_report": "FileUploadField.onDetach() causes IllegalStateException()\nThis was detected when using the example/sample Upload demo locally.ERROR - RequestCycle - there was an error cleaning up target org.apache.wicket.request.target.component.listener.ListenerInterfaceRequestTarget@20665159&#91;Page class = org.apache.wicket.examples.upload.UploadPage  id = 0  version = 0&#93;&gt;simpleUpload-&gt;interface org.apache.wicket.markup.html.form.IFormSubmitListener.IFormSubmitListener (request paramaters: &#91;RequestParameters componentPath=0:simpleUpload pageMapName=null versionNumber=0 interfaceName=IFormSubmitListener componentId=null behaviorId=null urlDepth=-1 parameters={} onlyProcessIfPathActive=false&#93;).java.lang.IllegalStateException: Attempt to set model object on null model of component: simpleUpload:fileInput at org.apache.wicket.Component.setDefaultModelObject(Component.java:2962) at org.apache.wicket.markup.html.form.FormComponent.setModelObject(FormComponent.java:1652) at org.apache.wicket.markup.html.form.upload.FileUploadField.onDetach(FileUploadField.java:175)Looking at the source indicates that unless onDetach() is over-ridden the default will always generate this exception. Here is the source for the FileUpLoadField.onDetach(). The line that creates the exception is noted by the '&lt;&lt;&lt;HERE' in the snippet below.FileUpLoadField.onDetach() snippet: /** Clean up at the end of the request. This means closing all inputstreams which might have been opened from the fileUpload.  @see org.apache.wicket.Component#onDetach() */ @Override protected void onDetach() Unknown macro: { if (fileUpload != null &amp;&amp; forceCloseStreamsOnDetach()) { fileUpload.closeStreams(); fileUpload = null; setModelObject(null); &lt;&lt;&lt;HERE } super.onDetach(); } Drilling further down  the setModelObject() calls FormComponent.setModelObject()  which in turns calls Component.setDefaultModelObject(). Inside setDefaultModelObject()  a check is done to see if the model object is null  if it is  it throws an exception: public final Component setDefaultModelObject(final Object object) { final IModel&lt;Object&gt; model = (IModel&lt;Object&gt;)getDefaultModel(); // Check whether anything can be set at all if (model == null) { throw new IllegalStateException( 'Attempt to set model object on null model of component: ' + getPageRelativePath()); } ...}", "id": "2045"}, "2048": {"ground_truth": "0", "bug_report": "HtmlProblemFinder documentation bug\nIn the javadoc of HtmlProblemFinder there is an example how to add additional IMarkupFIlters using Application.getAdditionalMarkupHandler()  this method is no longer available in Wicket 1.3  the documentation should be modified to show a valid example. The only way I can find by setting a new MarkupParserFactory which adds the filter.", "id": "2048"}, "2049": {"ground_truth": "0", "bug_report": "beforeRender not called for behaviour added to ComponentTag\nWhen adding a IMarkupFilter and adding a behaviour to the ComponentTag  the beforeRender method is never called  only onComponentTag will be called  but by then it is too late to modify the component.Usecase: I would like to make components hidden if the markup contains wicket:hidden='hidden'. For this i need to modify the components visiblitiy depending on if the markup contains that attribute.The attached quickstart will never reach the System.out.println('beforeRender: should hide component'); in HiddenComponentMarkupFilter", "id": "2049"}, "2050": {"ground_truth": "0", "bug_report": "KittenCaptchaPanel generates a Ajax callback image url which potentially breaks when used in a Portlet\nKittenCaptchaPanel generates the Ajax callback image url in its onclick event handler using: javascript.append('Wicket.$('' + image.getMarkupId() + '').src = ''); javascript.append(image.urlFor(IResourceListener.INTERFACE)); javascript.append('&amp;rand=' + Math.random()); javascript.append(''');Appending the rand parameter using '&amp;rand=' assumes the image url already contains (at least) one other parameter.Within a default (plain website) environment this most likely is true  however in a Portlet this really depends on how the portal encodes the generated image url in the resulting PortletURL.Jetspeed-2 for instance (can) encode this as path element  in which case appending '&amp;rand=' leads to an incorrect and invalid url.For further information  please see WICKET-649 in which I described how I fixed similar cases in several other locations within Wicket.I'll fix this issue likewise in a transparent way replacing the above with the following: javascript.append('Wicket.$('' + image.getMarkupId() + '').src = ''); CharSequence url = image.urlFor(IResourceListener.INTERFACE); javascript.append(url); javascript.append((url.toString().indexOf('?') &gt; -1 ? '&amp;' : '?') + 'rand=' + Math.random()); javascript.append(''');", "id": "2050"}, "2057": {"ground_truth": "0", "bug_report": "AjaxPreprocessingCallDecorator calls the delegate decorator before itself (same behavior as AjaxPostprocessingCallDecorator)\nAjaxPreprocessingCallDecorator calls the delegate decorator before itself (same behavior as AjaxPostprocessingCallDecorator)  when it should call itself before the delegate.", "id": "2057"}, "2063": {"ground_truth": "0", "bug_report": "Wizard buttons (previous / finish) aren't enabled when they should be\nWhen using the Wizard component in 1.4-SNAPSHOT (sometime after 1.4-RC1)  the previous and finish buttons don't enable when they should. I have found that this is because isEnabledInHierarchy is called multiple times  with the first time being during the POST process  before the wizard step is advanced to the next step. Since the step has not advanced when isEnabled is calculated  you get the following behavior:1 - click 'next' from first step to second - the 'previous' button should be enabled  but it's not2 - the 'finish' button never is enabled  even on the last step", "id": "2063"}, "2067": {"ground_truth": "0", "bug_report": "SmartLinkLabel does not handle ~ in urls\nThe SmartLinkLabel doesn't care with tilde (~) character  so if i have a link like this: http://localhost/~something than only the http://localhost/ will be a link  and the rest of it won't.The source of the problem is very likely in DefaultLinkParser.java: /** URL pattern */ private static final String urlPattern = '(&#91;a-zA-Z&#93;:////w//.//-//:///)//w//.://-/?&amp;=%*';It just needs to add ~ char to the regexp.", "id": "2067"}, "2069": {"ground_truth": "0", "bug_report": "KittenCaptcha filter declared twice in wicket-examples web.xml\nKittenCaptcha filter declared twice in wicket-examples web.xml", "id": "2069"}, "2074": {"ground_truth": "0", "bug_report": "Should the QuickStart archetype generated HomePage.html inlude the Wicket namespace in the html tag?\nFor full history see http://www.nabble.com/What-is-the-best-way-to-handle-%22Undefined-attribute-name-%28wicket%3Aid%29%22--warnings-from-Eclipse-Ganymede--to21788889.html#a21818462Timo It's a very simple change to the archetype: just replace the html open tagwith html xmlns:wicket='http://wicket.apache.org/dtds.data/wicket-xhtml1.3-strict.dtd'in /archetype-resources/src/main/java/HomePage.htmlThe question is  is there any reason why we wouldn't want to do this? I've raised the Jira issue anyway.Regards - Cemal&lt;a href='http://www.jWeekend.co.uk'&gt;jWeekend&lt;/a&gt;", "id": "2074"}, "2077": {"ground_truth": "0", "bug_report": "SerializationChecker issue\nWhen the static initialization of the SerializationChecker class fails (one of the methods is not available) it throws a runtime exception which marks the SerializationChecker class as unavailable in the JVM. Using the SerializationChecker class after that to check for SerializationChecker .isAvailable is pointless because it throws the ClassNotFound exception.", "id": "2077"}, "2079": {"ground_truth": "0", "bug_report": "Component Use Check always fails for visible components inside an invisible border body\nComponent Use Check always fails for visible components inside an invisible border body", "id": "2079"}, "2088": {"ground_truth": "0", "bug_report": "ApacheLicenceHeaderTests fail after projects' metadata created by Eclipse\nWicket and all it's accompanying projects when being worked on in Eclipse tend to fail several ApacheLicenceHeaderTest as it is an IDE that creates .settings directory containing several xml projects' metadata files. There are 6 solutions:1. don't use eclipse2. skip tests entirely (-Dmaven.test.skip=true passed on the CLI when invoking maven)3. skip running the tests (-DskipTests)4. compile &amp; run but ignore tests failures (-Dmaven.test.failure.ignore=true)5. Modify the ApacheLicenceHeaderTests so that the xml files in the .settings directories are ignoredIMHO  having considered all pros and cons  only 5. is a an option. As there already is an Eclipse originating .xml file that gets ignored I hope that you don't mind going this way. The patch to follow shortly.", "id": "2088"}, "2096": {"ground_truth": "0", "bug_report": "MultiFileUploadField.js can't find file input when serving pages as XHTML\nWhen Wicket-based application serves web pages as XHTML (with the 'Content-type:application/xhtml+xml' header)  upload procedure using MultiFileUploadField.js won't work as it can't find file input even though it's properly added.This happens because @line 65 of MultiFileUploadField.js input tag name is expected to be 'input' (capitalized)  which in XHTML is actually 'input' (lowercase).", "id": "2096"}, "2101": {"ground_truth": "0", "bug_report": "PageLink is inherently non extendable\nDue to the fact that there is no accessor provided for the private final IPageLink pageLink  there's no way of writing subclasses that would be aware of the pages they are linking to. My particular case is closely related to the annotation based authorization and an enhancement proposal http://issues.apache.org/jira/browse/WICKET-2089. Now  provided that this enhancement (that otherwise needs more look into) won't make it into wicket/wicket-auth-roles (though I am more than convinced that it should)  and I would have to put the proposed IAuthorisationStrategy implementation outside core wicket  I would also have to write (copy&amp;paste) my own PageLink that exposes its pageLink member in order to retrieve the page class it is referring to and substitute all occurernces of org.apache.wicket.markup.html.link.PageLink with it in my projects  so that my IAuthorisationStrategy implementation can retrieve the page class the the link is pointing to. Please note  that BokmarkablePageLink  which also is constructed with Page class does expose page class identity via public final Class&lt;? extends Page&gt; getPageClass().I suggest that for the sake of keeping the API clean and coherent the method with the same signature as in BookmarkablePageLink should be added to the PageLink. public Class&lt;? extends Page&gt; getPageClass() { return pageLink.getPageIdentity(); }Another question arises - why BookmarkablePageLink is not a subclass of PageLink and why class resolution for those classes differs so much. Wouldn't it be easier to keep the class reference in the BookmarkablePageClass rather than its textual representation and skip all this mumbo-jumbo class resolution. But this is quite another story and OT for this issue.", "id": "2101"}, "2107": {"ground_truth": "0", "bug_report": "Misplaced IllegalStateExceptions when accessing stateful URL with different session\npartly copied from the mailing list (http://www.nabble.com/exception-handling-for-session-dependent-URLs-to22037821.html):I recently came across a link to one of my projects where a user linked to a session dependent URL such as /?wicket:interface=:0::IBehaviorListener:2:3when clicking on that URL  a PageExpiredException gets thrown and a redirect to the SessionExpiredPage takes place. So far so good - that's the way it should be.However this works only for the first request (as long as the user doesn't have a session). If the user has a session and clicks on that link different exceptions might get thrown. with the URL mentioned above I've seen either a IllegalStateException (when it couldn't find a IBehaviorListener with the corresponding ID) or a ClassCastException (when it tried to cast a HeaderContributor to an IBehaviorListener in BehaviorRequestTarget). Apart from the ClassCastException  which definitely shouldn't occur  I don't think that IllegalStateExceptions should be thrown in (all of) those cases  as clicking on a session dependent link with a wrong session isn't a far fetched scenario.", "id": "2107"}, "2114": {"ground_truth": "0", "bug_report": "WicketTester fails to execute AjaxBehavior (onclick) due to old requestCycle (this bug is caused by bugfix WICKET-254)\nWicketTester fails to execute AjaxBehavior (onclick) due to old requestCycle. This bug results from bugfix WICKET-254 (http://issues.apache.org/jira/browse/WICKET-254)See attached QuickstartKnown workaround:// Add following line before your tester.executeAjaxEvent:tester.setupRequestAndResponse(true);@seehttp://issues.apache.org/jira/browse/WICKET-254", "id": "2114"}, "2115": {"ground_truth": "0", "bug_report": "Make Component. 'protected List getBehaviors(Class' public\nactually making getbehaviors(class) public will also break codebecause any override already in place will then attempt to reduce thevisibility of the method.add a jira issue  most likely for 1.5 considering 1.4 is already in RC2.-igorOn Thu  Feb 19  2009 at 1:24 PM  Martin Funk &lt;mafulafunk@googlemail.com&gt; wrote:Hi why is Components public final List&lt;IBehavior&gt; getBehaviors()publicand why is protected List&lt;IBehavior&gt; getBehaviors(Class&lt;? extends IBehavior&gt;type)protected?For example for a Behavior I'd like it to be able to tell if an Behavior ofits type is already bound to that component.In its bind() method I'd like to do something like: if (component.getBehaviors(SomeBehavior.class).size() &gt; 1) { throw new Error('Ther may only be one'); }But I have to do something like: for (IBehavior behavior : component.getBehaviors()) { if (behavior instanceof SomeBehavior) { throw new Error('There may only be one'); } }So my whish would be to have em both public. I wouldn't mind seeing em bothfinal  but that might break existing code.mf", "id": "2115"}, "2117": {"ground_truth": "0", "bug_report": "Polish translations for wicket-extensions properties\nPolish translations for wicket-extensions properties", "id": "2117"}, "2127": {"ground_truth": "0", "bug_report": "Javascript function Wicket.replaceAll is unbearably slow\nI use AbstractAjaxTimerBehavior to update many different components on my pages periodically.After a while  the browser occupies 50% or more of the system resources.I used the javascript profiler in firebug and found that Wicket.replaceAll is responsible for 60+ percent of javascript processing time.The problem is that sequential string processing is used instead of much faster regular expressions", "id": "2127"}, "2128": {"ground_truth": "0", "bug_report": "StringValidator error messages erroneously mention input instead of label\nUsing a StringValidator.MaximumLengthValidator (or any flavor of the StringValidator class)  the reported errors are currently under the form:StringValidator.minimum='${input}' is shorter than the minimum of ${minimum} characters.which creates odd messages where the content of the field is mentionned instead of the field label.Example: 'Joe' is shorter than the minimum of 5 characters.should be The field 'Name' should be at least 5 characters longThis is specially important in password fields  where the StringValidator is not usable because it displays the input in clear text on the web page: 'x4eR4*z' is shorter than the minimum of 5 characters.should be The field 'Password' should be at least 5 characters long", "id": "2128"}, "2134": {"ground_truth": "0", "bug_report": "Conversion Exception Thrown for Submitting A Page with Multiple Forms within A Border\n'org.apache.wicket.util.convert.ConversionException: Can't convert null value to a primitive class: int for setting it on' exception thrown when submitting a Page with multiple Forms within a Border. A 'Bordered' Page with a single Form would not have this problem manifests. Also  if the Page by itself (not contained in a Border) is alright too.", "id": "2134"}, "2140": {"ground_truth": "0", "bug_report": "FormComponentPanel should not add a name attribute\nFormComponent adds a name attribute in onComponentTag. This behaviour is inherited by FormComponentPanel  but is not valid for the latter. Often a FormComponentPanel is a div or span  for which the name attribute is not allowed.", "id": "2140"}, "2151": {"ground_truth": "0", "bug_report": "WicketSessionFilter doesn't takes into account WebApplication#getSessionAttributePrefix(WebRequest)\nWicketSessionFilter#init(FilterConfig)  line 139 constructs the 'sessionKey' without taking into account the return value of WebApplication#getSessionAttributePrefix(WebRequest).Patch:Index: protocol/http/servlet/WicketSessionFilter.java===================================================================&#8212; protocol/http/servlet/WicketSessionFilter.java (revisin: 725053)+++ protocol/http/servlet/WicketSessionFilter.java (copia de trabajo)@@ -28 6 +28 7 @@ import javax.servlet.http.HttpSession; import org.apache.wicket.Session;+import org.apache.wicket.protocol.http.WebApplication; import org.slf4j.Logger; import org.slf4j.LoggerFactory;@@ -136 7 +137 8 @@ log.debug('filterName/ application key set to ' + filterName); } sessionKey = 'wicket:' + filterName + ':' + Session.SESSION_ATTRIBUTE_NAME;+ WebApplication application = WebApplication.get(filterName);+ sessionKey = application.getSessionAttributePrefix(null) + Session.SESSION_ATTRIBUTE_NAME; if (log.isDebugEnabled()) {", "id": "2151"}, "2153": {"ground_truth": "0", "bug_report": "TabbedPanel accepts only ITab(s)\nTabbedPanel manages a List of ITab(s).This prevents instantiation of TabbedPanel(s) made of any custom ITab implementation.Every reference to List&lt;ITab&gt; should be converted to List&lt;? extends ITab&gt;.Alternatively  TabbedPanel should be declared as:public class TabbedPanel&lt;T extends ITab&gt; extends Panel{}depending on the preferred strategy.", "id": "2153"}, "2160": {"ground_truth": "0", "bug_report": "application_nl.properties is outdated\nThe application_nl.properties is a bit outdated. I have attached a patch file that contains the diff betweeen application.properties and application_nl.properties @ wicket 1.3.5.", "id": "2160"}, "2161": {"ground_truth": "0", "bug_report": "DropDownChoice NO_SELECTION_VALUE static field is final\nLets say I do this:List&lt;Option&gt; _options = getOptions();someRenderer = new ChoiceRenderer() {...}DropDownChoice _ddc = new DropDownChoice('dropDown'  new Model((Serializable) _option) options  someRenderer);The Option class looks like this:public class Option {private String display_name;private String id;gettersAndSetters...}If I select an Option from the DDC  and that Option has id = -1  the AbstractSingleSelectChoice#getDefaultChoice(final Object selected) will interpret my choice as the protected static final String NO_SELECTION_VALUE = '-1' in AbstractSingleSelectChoice.java.The result will be that the 'Choose one' option is visible in the DDC.Shouldn't the NO_SELECTION_VALUE be customizable?", "id": "2161"}, "2166": {"ground_truth": "0", "bug_report": "Invalid nested form tag name when the form is not visible and setoutputmarkupplaceholdertag(true) has been called\nwhen the an innerform is invisible and you called setoutputmarkupplaceholdertag(true)  onComponentTag not processed and an invalid form tag name results: &lt;form wicket:id=rootform&gt; &lt;form wicket:id=nestedform style='display: none'&gt;&lt;/form&gt;&lt;/form&gt;Component.render(final MarkupStream markupStream) {...if (determineVisibility()) { // render -&gt; replace form with div} else if (markupStream != null){ if (getFlag(FLAG_PLACEHOLDER)) { final ComponentTag tag = markupStream.getTag(); renderPlaceholderTag(tag  getResponse()); ///////////////////////Here form does not replace 'form' with 'div'}markupStream.skipComponent();}", "id": "2166"}, "2173": {"ground_truth": "0", "bug_report": "quickstart archetype adds invalid maven-compiler-plugin configuration\nthe maven-compiler-plugin configuration created by the quickstart archetype contains an invalid tag: &lt;optimise&gt;this should be &lt;optimize&gt; &lt;plugin&gt; &lt;artifactId&gt;maven-compiler-plugin&lt;/artifactId&gt; &lt;inherited&gt;true&lt;/inherited&gt; &lt;configuration&gt; &lt;source&gt;1.5&lt;/source&gt; &lt;target&gt;1.5&lt;/target&gt; &lt;optimise&gt;true&lt;/optimise&gt; &lt;debug&gt;true&lt;/debug&gt; &lt;/configuration&gt; &lt;/plugin&gt;", "id": "2173"}, "2174": {"ground_truth": "0", "bug_report": "Form#getMaxSize() -> no custom format\nHi I found problem with format of 'maxSize' property in component Form:final Map&lt;String  Object&gt; model = new HashMap&lt;String  Object&gt;();model.put('exception'  e);model.put('maxSize'  getMaxSize());... the main problem is if you want modify 'look and feel' of the Bytes format in error messages.Can you add e.g. new method String formatMaxSize() or something similar? The other solution is modification of toString of bean Bytes to get results look like 300kB (now there is 300K ... this is not good for common users). Or is there other simple way how to do this?Regards H.", "id": "2174"}, "2175": {"ground_truth": "0", "bug_report": "onBeforeRender() set visibility of NavigationToolbar prevents it from showing again\nThis code in NavigationToolbar: @Override protected void onBeforeRender() { setVisible(table.getPageCount() &gt; 1); super.onBeforeRender(); }makes impossible to show toolbar after it became hidden when using with Ajax (AjaxNavigationToolbar)Possible solution: @Override public boolean isVisible() { return table.getPageCount()&gt;1; }", "id": "2175"}, "2183": {"ground_truth": "0", "bug_report": "Fix API documentation for DataTable\nThe example in the DataTable javadoc does not even compile. It says:------------- snip ------------ DataTable table = new DataTable(&quot;datatable&quot;  columns  new UserProvider()  10); table.add(new NavigationToolbar(table)); table.add(new HeadersToolbar(table)); add(table);                        snip ------------                        It should rather be:------------- snip ------------ DataTable table = new DataTable(&quot;datatable&quot;  columns  new UserProvider()  10); table.addBottomToolbar(new NavigationToolbar(table)); table.addTopToolbar(new HeadersToolbar(table  null)); add(table);                        snip ------------", "id": "2183"}, "2186": {"ground_truth": "0", "bug_report": "PatternValidator could allow reverse matches\nI need to define a pattern which is invalid as form field input. i.e. I have a user feed back from that receives a lot of spam but the names are normally something like 'xtrqkjitvxqoh'. Instead of having a capture I want to set names with 5 successive consonants as invalid.This patch does the trick...Index: src/main/java/org/apache/wicket/validation/validator/PatternValidator.java===================================================================&#8212; src/main/java/org/apache/wicket/validation/validator/PatternValidator.java (revision 749072)+++ src/main/java/org/apache/wicket/validation/validator/PatternValidator.java (working copy)@@ -64 6 +64 9 @@ /** the &lt;code&gt;java.util.regex.Pattern&lt;/code&gt; */ private final Pattern pattern;+ /** whether to exclude matching input **/+ private boolean reverse;+ /** Constructor that accepts a &lt;code&gt;String&lt;/code&gt; regular expression pattern. @@ -111 6 +114 15 @@ this(pattern.pattern()); }+ /**+ * If set to true then input that matches the pattern is considered invalid.+ * + * @param reverse+ */+ public void setReverse(boolean reverse)+ {+ this.reverse = reverse;+ } /** Gets the regexp pattern.@@ -155 7 +167 7 @@ protected void onValidate(IValidatable&lt;String&gt; validatable) { // Check value against pattern if (!pattern.matcher(validatable.getValue()).matches())+ if (pattern.matcher(validatable.getValue()).matches() == reverse) { error(validatable); }", "id": "2186"}, "2187": {"ground_truth": "0", "bug_report": "less dynamic or missing toString( ) methods in Component class\nSeveral toString( ) methods in XXXChange inner classes of Component class are less dynamic or missing  less dynamic like:******************'ComponentModelChange&#91;component: &quot; + getPath() + &quot;&#93;'; as opposed to this.getClass().getSimpleName() + '&#91;component:&quot; + getPath() + &quot;&#93;' Furthermore  toString( ) method is missing altogether in ComponentBorderChange. Attaching simple modification patch for consideration.", "id": "2187"}, "2191": {"ground_truth": "1", "bug_report": "WebApplication is not thread-safe\nInstance of class org.apache.wicket.protocol.http.WebApplication is not thread safe being shared among several sessions. Concurrent access to it leads to errors because of the following:1. bufferedResponses field is initialized with a simple HashMap which is not thread safe and can be corrupted when different threads call addBufferedResponse  popBufferedResponse or sessionDestroyed methods concurrently. Here is the stack trace:&#91;27.03.09 20:55:26:669 MSK&#93; 0000009c RequestCycle E org.apache.wicket.RequestCycle logRuntimeException &lt;Null Message&gt; java.util.ConcurrentModificationException at java.util.HashMap$AbstractMapIterator.checkConcurrentMod(Unknown Source) at java.util.HashMap$AbstractMapIterator.makeNext(Unknown Source) at java.util.HashMap$KeyIterator.next(Unknown Source) at java.util.HashMap.analyzeMap(Unknown Source) at java.util.HashMap.rehash(Unknown Source) at java.util.HashMap.rehash(Unknown Source) at java.util.HashMap.putImpl(Unknown Source) at java.util.HashMap.put(Unknown Source) at org.apache.wicket.protocol.http.WebApplication.addBufferedResponse(WebApplication.java:639) at org.apache.wicket.protocol.http.WebRequestCycle.redirectTo(WebRequestCycle.java:201) at org.apache.wicket.request.target.component.PageRequestTarget.respond(PageRequestTarget.java:58) at org.apache.wicket.request.AbstractRequestCycleProcessor.respond(AbstractRequestCycleProcessor.java:104) at org.apache.wicket.RequestCycle.processEventsAndRespond(RequestCycle.java:1181) at org.apache.wicket.RequestCycle.step(RequestCycle.java:1252) at org.apache.wicket.RequestCycle.steps(RequestCycle.java:1353) at org.apache.wicket.RequestCycle.request(RequestCycle.java:493) at org.apache.wicket.protocol.http.WicketFilter.doGet(WicketFilter.java:355) at org.apache.wicket.protocol.http.WicketServlet.doPost(WicketServlet.java:145) at javax.servlet.http.HttpServlet.service(HttpServlet.java:738) at javax.servlet.http.HttpServlet.service(HttpServlet.java:831) at com.ibm.ws.webcontainer.servlet.ServletWrapper.service(ServletWrapper.java:1443) at com.ibm.ws.webcontainer.servlet.ServletWrapper.service(ServletWrapper.java:1384) at com.ibm.ws.webcontainer.filter.WebAppFilterChain.doFilter(WebAppFilterChain.java:131)2. Class org.apache.wicket.util.collections.MostRecentlyUsedMap is not thread-safe and can be courrupted when different threads call addBufferedResponse  popBufferedResponse concurrently.", "id": "2191"}, "2202": {"ground_truth": "0", "bug_report": "Form gets submitted using AjaxSubmitBehavior when sub-form has error's\nfrom http://www.nabble.com/Should-a-form-submit-when-sub-form-has-error%27s--tt22803314.htmlI have a main-form where I add a panel that contains another form.This sub-form contains a formvalidator that gives the error.However the main-form is submitted  but the feedbackpanel does show the error message set in the sub-form's validator.I'll attach 2 patches with testcases displaying the behavior in wicket 1.3 vs 1.4(As a side note  I had to rename the org.apache.wicket.markup.html.form.validation.TestHomePage to org.apache.wicket.markup.html.form.validation.HomePageTest to get the test to run when building wicket)", "id": "2202"}, "2203": {"ground_truth": "0", "bug_report": "WicketTester clickLink on submitLink fails with conversion error\nWhen clicking with WicketTester a submitlink that is situated outside a Form  clickLink doesn't process the input correctly. It tries to set null on the inputs (which fails for int properties for obvious reasons).I've attached a quickstart that exhibits this behavior.", "id": "2203"}, "2205": {"ground_truth": "0", "bug_report": "typo in ApplicationContextMock.putBean() exception message:  'alredy'\nThere is a minor typo in ApplicationContextMock.putBean() that is fixed by the attached patch.", "id": "2205"}, "2212": {"ground_truth": "0", "bug_report": "Resource lookup/caching in OSGI environment spams errors for gone resources\nI'd put together a simple dynamic menu example running on Modulefusion where the contributed menu items and pages come from another OSGI bundles. It works exactly as expected  eg. submenus appear/disappear automatically without restarts on submenu modules' deploys and undeploys  but after undeploying an already visited page's module  my server logs starts repeating messages like this:352322 &#91;ModificationWatcher Task&#93; ERROR org.apache.wicket.util.resource.UrlResourceStream - getLastModified for bundle://38.0:1/com/ftldev/wicket1/Boo.html failed: No bundle associated with resource: bundle://38.0:1/com/ftldev/wicket1/Boo.htmlI guess this has to do with resource caching. Is it possible to get this behaviour turn into a warning and/or get it stop after the first message? I guess once a resource has gone  it makes no good to keep looking for it forever anyway.. or is it another approach getting around this message? (again  appearently all my app keeps working fine meanwhile..)", "id": "2212"}, "2220": {"ground_truth": "0", "bug_report": "YUI library used by Wicket Extensions - DateTime isn't IE8 compatible\nYUI library included with Wicket Extensions - DateTime (and potentially others) is the version 2.3.0 which has compatability issues with Internet Explorer 8. The recommended version of YUIlib which is IE8 compliant is 2.7.0.The specific issue I hit was DateTimeField causing block on loading almost random resources on my page  after a while IE8 reported the following error:------Webpage error detailsUser Agent: Mozilla/4.0 (compatible; MSIE 8.0; Windows NT 5.1; Trident/4.0; .NET CLR 1.1.4322; .NET CLR 2.0.50727; .NET CLR 3.0.4506.2152; .NET CLR 3.5.30729)Timestamp: Thu  9 Apr 2009 06:53:18 UTCMessage: Unknown runtime errorLine: 12Char: 1986Code: 0URI: &#91;hidden to protect the guilty&#93;.YuiLib/calendar/calendar-min.js------Related discussion: http://www.nabble.com/Layout-Manager-causing-IE-8-to-freeze.-td22381589.html", "id": "2220"}, "2230": {"ground_truth": "0", "bug_report": "Nested directory support for ZipResourceStream\nIt would be nice to have support for nested directories in ZipResourceStream.java", "id": "2230"}, "2242": {"ground_truth": "0", "bug_report": "java.sql.Timestamp converter bug\nSqlTimestampConverter should produce a Date/Time as output  but it only produces a time. SqlTimeConverter prints a simple time as expected.Looking in the code SqlTimestampConverter::convertToString uses: DateFormat format = DateFormat.getTimeInstance(dateFormat  locale);when I think it should say: DateFormat format = DateFormat.getDateTimeInstance(DateFormat.SHORT  DateFormat.SHORT  locale);instead.convertToObject would need a corresponding change to: DateFormat format = DateFormat.getDateTimeInstance(DateFormat.SHORT  DateFormat.SHORT  locale);", "id": "2242"}, "2244": {"ground_truth": "0", "bug_report": "Allow overriding of the Validator default MessageKey\nCurrently there is no other way to change the default message key of any validator. Provide a protected non final method: getMessageKey() to allow overriding of the message key. For example for MinimumValidator:&#91;CODE&#93; public void validate(IValidatable&lt;Z&gt; validatable) { Z value = validatable.getValue(); if (value.compareTo(minimum) &lt; 0) { ValidationError error = new ValidationError(); error.addMessageKey(getMessageKey()); error.setVariable('minimum'  minimum); validatable.error(error); } } protected String getMessageKey() { return 'MinimumValidator'; }&#91;CODE&#93;", "id": "2244"}, "2245": {"ground_truth": "0", "bug_report": "PageParameters always non-empty\nSay I mount MyBookmarkablePage like so:mount(new IndexedHybridUrlCodingStrategy('/my/bookmarkable' MyBookmarkablePage.class));where public MyBookmarkablePage() { (...) } public MyBookmarkablePage(PageParameters params) { (...) }When I call http://localhost:8080/app/my/bookmarkable (just that plainurl  no trailing nothing)  then I never get into the no-argsconstructor  always in the params one. This because the params objectcomes with '0'=''  which I feel is wrong.Consequently  params.containsKey('0') returns true - and here I haveto go and check if the value is not empty.Note I'm using IndexedHybridUrlCodingStrategy.", "id": "2245"}, "2247": {"ground_truth": "0", "bug_report": "IndexedHybridUrlCodingStrategy constructor should accept a redirectOnBookmarkableRequest boolan\nHybridUrlCodingStrategy has a constructor which accepts a redirectOnBookmarkableRequest boolanIndexedHybridUrlCodingStrategy (which extends HybridUrlCodingStrategy) doesn't contain the same constructor  i think it should.", "id": "2247"}, "2259": {"ground_truth": "0", "bug_report": "The JavaDoc for IPageLink still holds a reference to PageLink which is deprecated\nThe JavaDoc for IPageLink still holds a reference to PageLink which is deprecated", "id": "2259"}, "2272": {"ground_truth": "0", "bug_report": "open/close div tags are rendered erroneously\nDiv tags are rendered erroneously if written as an open/close tag.&lt;div/&gt; is rendered as &lt;div&gt; with the closing tag appended at the end of page in wicket-1.4-rc4  while &lt;div&gt;&lt;/div&gt; is rendered correct. Div as open/close tag works fine in wicket-1.4-rc2 even though it gets rendered as separate open and close tags.", "id": "2272"}, "2276": {"ground_truth": "1", "bug_report": "isComponent in BaseWicketTester contains possible nullpointer exception\nWhen attempting to verify if a component exists  attempting to unit test a panel  the tester.assertComponent() call fails due to a nullpointer.This occurs when isComponent() in BaseWicketTester is called and fails to find a component from the last rendered page. Then the component.getClass() in the following line will trigger the nullpointer exception.A very simple fix would be to add a null check before attempting to check the type of the component to be able to provide a better error message.", "id": "2276"}, "2277": {"ground_truth": "0", "bug_report": "Radio#onComponentTag uses Objects.equal instead of model comparator\nRadio#onComponentTag uses Objects.equal instead of modelcomparator from RadioGroup. Because of that  it is impossible to use custom model comparator in RadioGroup asRadioGroup must contain values that pass equality check with values in Radios (otherwise  Radios aren't marked as checked in html).", "id": "2277"}, "2280": {"ground_truth": "0", "bug_report": "Remove IComponentBorder in favor of IBehavior\nYeah i think we can depricate IComponentBorder in 1.4 and point to IBehaviorbefore/afterand then remove it in 1.5 and maybe remote also **public final Component setComponentBorder(final IComponentBorder border)in component or make it*public final Component setComponentBorder(final IBehavior border)to make it more clear to people that a border can be set by using a behavior(else who knows..) Hide quoted text -On Sat  May 16  2009 at 12:21  Juergen Donnerstag &lt;juergen.donnerstag@gmail.com&gt; wrote:&gt; Hi &gt;&gt; question: looking at that code&gt;&gt; // Call implementation to render component&gt; final IComponentBorder border =&gt; getComponentBorder();&gt; if (border != null)&gt; {&gt; border.renderBefore(this);&gt; }&gt; notifyBehaviorsComponentBeforeRender();&gt; onRender(markupStream);&gt; notifyBehaviorsComponentRendered();&gt; if (border != null)&gt; {&gt; border.renderAfter(this);&gt; }&gt;&gt; IComponentBorder could be implemented via a behavior as well. Is there&gt; any reason why IComponentBorder needs this special treatment and why&gt; it is not implemented as a behavior?&gt;&gt; -Juergen&gt;-----------------&gt; Yeah i think we can depricate IComponentBorder in 1.4 and point to IBehavior&gt; before/afteri like the ComponentBorder stuff  because you can set it withoutinfluencing any beahavior or component stuff.. just render some contentbefore and after a component..i use it in debugging environmentmm------ Wait for some and give everybody a chance to comment", "id": "2280"}, "2301": {"ground_truth": "0", "bug_report": "When injecting more than one parm in a method  an ArrayIndexOutOfBoundsException is thrown\nWhen using method injection that takes more than one parameter  an ArrayIndexOutOfBoundsException (-1) is thrown. I've isolated code to line 90 of org.apache.wicket.guice.GuiceProxyTargetLocator. parmTypes&#91;2 - i&#93; should read parmTypes&#91;i - 2&#93;. I will attach a (simple) patch with this.", "id": "2301"}, "2305": {"ground_truth": "0", "bug_report": "[devutils] Can only inspect pages in same pagemap as the inspector\nThe InspectorPage presents a list of pagemaps and pages contained within them  with links to inspect the contents of each page ID.However  when one of these is clicked it tries to resolve the page ID within the current pagemap of the inspector page itself  which is quite possibly not the case.Here is a patch which passes the pagemap name alongside the page ID and looks it up appropropriately.", "id": "2305"}, "2309": {"ground_truth": "0", "bug_report": "ClassCastException in SqlDateConverter\nWhen converting a date string to a java.sql.Date you'll always get a ClassCastException like this one:java.lang.ClassCastException: java.util.Date cannot be cast to java.sql.Date at org.apache.wicket.util.convert.converters.SqlDateConverter.convertToObject(SqlDateConverter.java:43)Reason is DateFormat.parse() returns a java.util.Date  which is cast to java.sql.Date. One solution would bereturn new Date(((java.util.Date)parse(getDateFormat(locale)  value  locale)).getTime())See https://issues.apache.org/jira/browse/WICKET-735", "id": "2309"}, "2310": {"ground_truth": "0", "bug_report": "FormTester.setValue should throw exception if not FormComponent\nShould throw exception if not formComponent: public void setValue(final String formComponentId  final String value) { checkClosed(); Component component = workingForm.get(formComponentId); if (component == null) { throw new IllegalArgumentException( 'Unable to set value. Couldn't find component with name: ' + formComponentId); } if (component instanceof IFormSubmittingComponent) { setFormSubmittingComponentValue((IFormSubmittingComponent)component  value); } else if (component instanceof FormComponent) { setFormComponentValue((FormComponent&lt;?&gt;)component  value); } }", "id": "2310"}, "2313": {"ground_truth": "0", "bug_report": "BaseWicketTester doesn't invoke Application.newAjaxRequestTarget for ajax request target\nWhen the BaseWicketTester creates a new ajax request target  it does not invoke the application but creates one by itself. This makes it impossible to use the tester when application-specific ajax request target subclassing is used.", "id": "2313"}, "2316": {"ground_truth": "0", "bug_report": "Form generates invalid html in appendDefaultButtonField\nThe javascript added to the button contains several unescaped &amp;  such as 'b!=null&amp;&amp;b.onclick!=null&amp;&amp;typeof(b.onclick)'  these should be replaced with &amp;. This was already mentioned in ticket 2033  but that ticket is about another problem.", "id": "2316"}, "2325": {"ground_truth": "0", "bug_report": "IChoiceRenderer generic type parameters are wrong throughout the AbstractChoice class hierarchy\nAll the AbstractChoice components currently make use of an IChoiceRenderer&lt;T&gt;. They should more properly make use of an IChoiceRenderer&lt;? super T&gt;. The excessive strictness of the type parameter prevents users from defining a singleton choicerenderer that can be used for a variety of different choice components for different but related classes.Example use-case: Most of my persistent beans implement INamedPersistentObject  providing getName() and getPrimaryKey() methods. This is enough to implement an IChoiceRenderer&lt;INamedPersistentObject&gt;. I wish to declare a singleton instance of this and reuse it for various choice components on various concrete types  but currently can't without messy casts.I have set priority=blocker on this bug because it is an API issue which really needs consideration before 1.4 is released  as depending on how strict an API/ABI compatibility policy is used  it might be considered unfixable once 1.4 is released GA.", "id": "2325"}, "2328": {"ground_truth": "0", "bug_report": "WicketTester does not accurately simulate scenario where entire page is added to AjaxRequestTarget\nIf the entire page is added to an AjaxRequestTarget  Wicket treats this as a special case: the normal ajax flow is aborted and the browser is asked to refetch the page in a normal  non-ajax request.For example  if this code is used:public void onClick(AjaxRequestTarget tgt){ tgt.addComponent(getPage());}This causes the browser to reload the page (you can see the location bar in the browser changing).The problem is that WicketTester does not simulate this scenario correctly. If you use WicketTester to test the onClick() listener in the example above  the page is not re-rendered. You can verify this by instrumenting the onBeforeRender method for the page: it is never called.So to summarize:When the framework is run normally  AjaxRequestTarget.addComponent(Page) causes Wicket to start a completely new non-ajax request-response. However when the framework is run using WicketTester  a new request-response is not executed.", "id": "2328"}, "2334": {"ground_truth": "0", "bug_report": "DebugBar throws an java.lang.ExceptionInInitializerError when Tomcat is restarted\nI have just added the DebugBar to our base page  and since then when Tomcat is restarted and session would be reloaded by this it throws this exception:1 ERROR org.apache.catalina.session.ManagerBase - Exception loading sessions from persistent storagejava.lang.ExceptionInInitializerError at sun.misc.Unsafe.ensureClassInitialized(Native Method) at sun.reflect.UnsafeFieldAccessorFactory.newFieldAccessor(UnsafeFieldAccessorFactory.java:25) at sun.reflect.ReflectionFactory.newFieldAccessor(ReflectionFactory.java:122) at java.lang.reflect.Field.acquireFieldAccessor(Field.java:918) at java.lang.reflect.Field.getFieldAccessor(Field.java:899) at java.lang.reflect.Field.getLong(Field.java:528) at java.io.ObjectStreamClass.getDeclaredSUID(ObjectStreamClass.java:1614) at java.io.ObjectStreamClass.access$700(ObjectStreamClass.java:52) at java.io.ObjectStreamClass$2.run(ObjectStreamClass.java:425) at java.security.AccessController.doPrivileged(Native Method) at java.io.ObjectStreamClass.&lt;init&gt;(ObjectStreamClass.java:413) at java.io.ObjectStreamClass.lookup(ObjectStreamClass.java:310) at java.io.ObjectStreamClass.initNonProxy(ObjectStreamClass.java:547) at java.io.ObjectInputStream.readNonProxyDesc(ObjectInputStream.java:1583) at java.io.ObjectInputStream.readClassDesc(ObjectInputStream.java:1496) at java.io.ObjectInputStream.readNonProxyDesc(ObjectInputStream.java:1583) at java.io.ObjectInputStream.readClassDesc(ObjectInputStream.java:1496) at java.io.ObjectInputStream.readOrdinaryObject(ObjectInputStream.java:1732) at java.io.ObjectInputStream.readObject0(ObjectInputStream.java:1329) at java.io.ObjectInputStream.readArray(ObjectInputStream.java:1667) at java.io.ObjectInputStream.readObject0(ObjectInputStream.java:1323) at java.io.ObjectInputStream.defaultReadFields(ObjectInputStream.java:1947) at java.io.ObjectInputStream.readSerialData(ObjectInputStream.java:1871) at java.io.ObjectInputStream.readOrdinaryObject(ObjectInputStream.java:1753) at java.io.ObjectInputStream.readObject0(ObjectInputStream.java:1329) at java.io.ObjectInputStream.defaultReadFields(ObjectInputStream.java:1947) at java.io.ObjectInputStream.defaultReadObject(ObjectInputStream.java:480) at org.apache.wicket.Component.readObject(Component.java:4469) at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39) at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25) at java.lang.reflect.Method.invoke(Method.java:597) at java.io.ObjectStreamClass.invokeReadObject(ObjectStreamClass.java:974) at java.io.ObjectInputStream.readSerialData(ObjectInputStream.java:1849) at java.io.ObjectInputStream.readOrdinaryObject(ObjectInputStream.java:1753) at java.io.ObjectInputStream.readObject0(ObjectInputStream.java:1329) at java.io.ObjectInputStream.readArray(ObjectInputStream.java:1667) at java.io.ObjectInputStream.readObject0(ObjectInputStream.java:1323) at java.io.ObjectInputStream.defaultReadFields(ObjectInputStream.java:1947) at java.io.ObjectInputStream.readSerialData(ObjectInputStream.java:1871) at java.io.ObjectInputStream.readOrdinaryObject(ObjectInputStream.java:1753) at java.io.ObjectInputStream.readObject0(ObjectInputStream.java:1329) at java.io.ObjectInputStream.readObject(ObjectInputStream.java:351) at java.util.concurrent.CopyOnWriteArrayList.readObject(CopyOnWriteArrayList.java:845) at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39) at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25) at java.lang.reflect.Method.invoke(Method.java:597) at java.io.ObjectStreamClass.invokeReadObject(ObjectStreamClass.java:974) at java.io.ObjectInputStream.readSerialData(ObjectInputStream.java:1849) at java.io.ObjectInputStream.readOrdinaryObject(ObjectInputStream.java:1753) at java.io.ObjectInputStream.readObject0(ObjectInputStream.java:1329) at java.io.ObjectInputStream.defaultReadFields(ObjectInputStream.java:1947) at java.io.ObjectInputStream.readSerialData(ObjectInputStream.java:1871) at java.io.ObjectInputStream.readOrdinaryObject(ObjectInputStream.java:1753) at java.io.ObjectInputStream.readObject0(ObjectInputStream.java:1329) at java.io.ObjectInputStream.defaultReadFields(ObjectInputStream.java:1947) at java.io.ObjectInputStream.readSerialData(ObjectInputStream.java:1871) at java.io.ObjectInputStream.readOrdinaryObject(ObjectInputStream.java:1753) at java.io.ObjectInputStream.readObject0(ObjectInputStream.java:1329) at java.io.ObjectInputStream.defaultReadFields(ObjectInputStream.java:1947) at java.io.ObjectInputStream.readSerialData(ObjectInputStream.java:1871) at java.io.ObjectInputStream.readOrdinaryObject(ObjectInputStream.java:1753) at java.io.ObjectInputStream.readObject0(ObjectInputStream.java:1329) at java.io.ObjectInputStream.readArray(ObjectInputStream.java:1667) at java.io.ObjectInputStream.readObject0(ObjectInputStream.java:1323) at java.io.ObjectInputStream.defaultReadFields(ObjectInputStream.java:1947) at java.io.ObjectInputStream.defaultReadObject(ObjectInputStream.java:480) at org.apache.wicket.Page.readPageObject(Page.java:1349) at org.apache.wicket.Component.readObject(Component.java:4465) at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39) at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25) at java.lang.reflect.Method.invoke(Method.java:597) at java.io.ObjectStreamClass.invokeReadObject(ObjectStreamClass.java:974) at java.io.ObjectInputStream.readSerialData(ObjectInputStream.java:1849) at java.io.ObjectInputStream.readOrdinaryObject(ObjectInputStream.java:1753) at java.io.ObjectInputStream.readObject0(ObjectInputStream.java:1329) at java.io.ObjectInputStream.readObject(ObjectInputStream.java:351) at org.apache.wicket.protocol.http.SecondLevelCacheSessionStore$SecondLevelCachePageMap.readObject(SecondLevelCacheSessionStore.java:412) at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39) at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25) at java.lang.reflect.Method.invoke(Method.java:597) at java.io.ObjectStreamClass.invokeReadObject(ObjectStreamClass.java:974) at java.io.ObjectInputStream.readSerialData(ObjectInputStream.java:1849) at java.io.ObjectInputStream.readOrdinaryObject(ObjectInputStream.java:1753) at java.io.ObjectInputStream.readObject0(ObjectInputStream.java:1329) at java.io.ObjectInputStream.readObject(ObjectInputStream.java:351) at org.apache.catalina.session.StandardSession.readObject(StandardSession.java:1407) at org.apache.catalina.session.StandardSession.readObjectData(StandardSession.java:931) at org.apache.catalina.session.StandardManager.doLoad(StandardManager.java:394) at org.apache.catalina.session.StandardManager.load(StandardManager.java:321) at org.apache.catalina.session.StandardManager.start(StandardManager.java:637) at org.apache.catalina.core.ContainerBase.setManager(ContainerBase.java:432) at org.apache.catalina.core.StandardContext.start(StandardContext.java:4160) at org.apache.catalina.core.ContainerBase.start(ContainerBase.java:1014) at org.apache.catalina.core.StandardHost.start(StandardHost.java:736) at org.apache.catalina.core.ContainerBase.start(ContainerBase.java:1014) at org.apache.catalina.core.StandardEngine.start(StandardEngine.java:443) at org.apache.catalina.core.StandardService.start(StandardService.java:448) at org.apache.catalina.core.StandardServer.start(StandardServer.java:700) at org.apache.catalina.startup.Catalina.start(Catalina.java:552) at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39) at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25) at java.lang.reflect.Method.invoke(Method.java:597) at org.apache.catalina.startup.Bootstrap.start(Bootstrap.java:295) at org.apache.catalina.startup.Bootstrap.main(Bootstrap.java:433)Caused by: org.apache.wicket.WicketRuntimeException: There is no application attached to current thread main at org.apache.wicket.Application.get(Application.java:178) at org.apache.wicket.devutils.debugbar.DebugBar.getContributors(DebugBar.java:146) at org.apache.wicket.devutils.debugbar.DebugBar.registerContributor(DebugBar.java:140) at org.apache.wicket.devutils.debugbar.DebugBar.registerStandardContributors(DebugBar.java:152) at org.apache.wicket.devutils.debugbar.DebugBar.&lt;clinit&gt;(DebugBar.java:65) ... 109 more", "id": "2334"}, "2343": {"ground_truth": "0", "bug_report": "Link: PopupSettings - overriding getPopupSettings has no effect\nThe popup settings are ONLY considered for the resulting JavaScript code when you use the setter setPopupSettings (which is final).The method getPopupSettings is NOT final but it has no effect - internally Link always uses the private field - not the getter.Something like the following code works fine - but is not really clear / intuitive:public class TestLink extends Link { public TestLink(String id) { super(id); setPopupSettings(getPopupSettings()); } public PopupSettings getPopupSettings() { return new PopupSettings(PopupSettings.RESIZABLE).setWindowName('test'); }}I don't know which is the prefered way of Wicket core developers but I can think of two ways to improve on this: Make getPopupSettings final (less work) Use getPopupSettings() within Link instead of the field", "id": "2343"}, "2362": {"ground_truth": "0", "bug_report": "Update hungarian localization\nThe hungarian translation has some encoding-problem for a long time and there are missing keys from it (like pagingnavigator). I will attach soon a better  fixed localization file. Please accept it in the next release.", "id": "2362"}, "2364": {"ground_truth": "0", "bug_report": "CLONE -Make LoadableDetachableModel writable\nTo keep it compatible with current usage:public final void setObject(Object obj) { reload(obj); tempModelObject = obj;}protected void reload(Object obj) { throw new OperationNotSupportedException('Read only model');}Subclasses can now implement their own write logic. This is necessary for for instance stand alone dropdownchoice components that need to store their selection.e.g.MyPage { IModel&lt;SchoolYear&gt; selectedSchoolYear; public MyPage() { selectedSchoolYear = new HibernateModel&lt;SchoolYear&gt;(SchoolYear.current()); new SchoolYearDropDownChoice(this  'schoolyear'  selectedSchoolYear); }}If HibernateModel is not writeable then the selected SchoolYear instance would end up in the session.", "id": "2364"}, "2381": {"ground_truth": "0", "bug_report": "IModel parameters of StringResourceModel not getting detached\nStringResourceModel supports IModels in the 'parameters' Object[] thatare properly handled in StringResourceModel#getString  meaning theycould get attached because of StringResourceModel. StringResourceModel should probably check the 'parameters' array for IModels(or even IDetachables?) and detach them from StringResourceModel#onDetach", "id": "2381"}, "2384": {"ground_truth": "1", "bug_report": "OutOfMemoryError occur for memory leak on FeedbackPanel & FeedbackMessages\nWhen I uses component.info() method to display a message  my program stopped by OutOfMemoryError or StackOverflowError. I create a sample application to show this problem. Open attached tar.gz file(including a maven project) and run. check 'submit continuously' checkbox and click 'register' button. The program will display current session size continuously on console. the size will be increased  and finally program will be stopped with OutOfMemoryError or StackOverflowError. But if you changes only one line  this program will not be stopped. --original code--  private SubmitLink insertLink = new SubmitLink('insertLink') {  public void onSubmit() {  info('message');  setResponsePage(new Test(testFormBean));  Session session = Session.get();  long size = session.getSizeInBytes();  LOGGER.info('SESSION SIZE: {}'  size);  }  }; --------------------- --changed---------  private SubmitLink insertLink = new SubmitLink('insertLink') {  public void onSubmit() {  Session.get().info('message'); //CHANGED!!!  setResponsePage(new Test(testFormBean));  Session session = Session.get();  long size = session.getSizeInBytes();  LOGGER.info('SESSION SIZE: {}'  size);  }  }; --------------------  so component's info() method is the reason of this problem. If you commented out 'info()' line  this program never crashed. We found out the reason of this problem in a static inner class 'MessageListView' in FeedbackPanel. MessageListView uses annonimous inner class of Model (named ad 'replacementModel')  and it imports a FeedbackMessage object from enclosing instance. FeedbackPanel holds this annonimous inner class and the annonimous inner class holds a FeedbackMessage. When we use component's info() method  the component is assigned into FeedbackMessage object as a 'reporter' object. so  all of FeedbackMessage objects have a component instance inside of himself as 'reporter' (only one exception: if you use Session.get().info() method instead of component's info() method  'reporter' object become null). All already-displayed FeedbackMessages will be purged at 'detach' time from Session object. But FeedbackPanel holds FeedbackMessages. So when page is serialized  all FeedbackMessages  all 'reporter' components is serialized. This is the reason of this problem. We can solve this problem if we do not hold FeedbackMessage instance in the annnonimous inner class.change the code of FeedbackPanel as bellow (this code is based on FeedbackPanel class of wicket 1.4-rc7  line 70):---- original code -----@Overrideprotected void populateItem(final ListItem&lt;FeedbackMessage&gt; listItem){ final FeedbackMessage message = listItem.getModelObject(); message.markRendered(); final IModel&lt;String&gt; replacementModel = new Model&lt;String&gt;() { private static final long serialVersionUID = 1L; /** Returns feedbackPanel + the message level  eg 'feedbackPanelERROR'. This is used as the class of the li / span elements.  @see org.apache.wicket.model.IModel#getObject() */ @Override public String getObject() { return getCSSClass(message); } }; final Component label = newMessageDisplayComponent('message'  message); final AttributeModifier levelModifier = new AttributeModifier('class'  replacementModel); label.add(levelModifier); listItem.add(levelModifier); listItem.add(label);}------------------------ fixed code ----@Overrideprotected void populateItem(final ListItem&lt;FeedbackMessage&gt; listItem){ //FIXED message must not be 'final'. It must not be used in inner class. //If message could be used in inner class  the instance could be hold by //inner class tacitly and never cleared at detach time and will be serialized. FeedbackMessage message = listItem.getModelObject(); message.markRendered(); final IModel&lt;String&gt; replacementModel = new Model&lt;String&gt;() { private static final long serialVersionUID = 1L; /** Returns feedbackPanel + the message level  eg 'feedbackPanelERROR'. This is used as the class of the li / span elements.  @see org.apache.wicket.model.IModel#getObject() */ @Override public String getObject() Unknown macro: { //FIXED -- retrieve a FeedbackMessage object from ListView&#39;s Model. // never hold it. @SuppressWarnings(&quot;unchecked&quot;) List&lt;FeedbackMessage&gt; list = (List&lt;FeedbackMessage&gt;) MessageListView.this.getDefaultModelObject(); FeedbackMessage feedbackMessage = null; int index = listItem.getIndex(); if(index &lt; list.size()) { feedbackMessage = list.get(index); } if(feedbackMessage == null) return &quot;&quot;; return getCSSClass(feedbackMessage); //UNTIL HERE }  }; final Component label = newMessageDisplayComponent('message'  message); final AttributeModifier levelModifier = new AttributeModifier('class'  replacementModel); label.add(levelModifier); listItem.add(levelModifier); listItem.add(label);}--------------------", "id": "2384"}, "2386": {"ground_truth": "0", "bug_report": "JavaDoc: Some JavDoc examples still refer to WicketServlet\nSome JavDoc examples still refer to WicketServlet  instead they should use WicketFilter.Most important candidate might be ./wicket-spring/src/main/java/org/apache/wicket/spring/SpringWebApplicationFactory.javagrep . -R --include '*.java' -e 'WicketServlet'indicates that others might be affected too.", "id": "2386"}, "2391": {"ground_truth": "0", "bug_report": "Tag ''has a mismatched close tag at ''\nin the wicket-auth-roles-1.4-rc7.jar!/org/apache/wicket/authentication/panel/SignInPanel_ja.html tag '&lt;BODY&gt;'has a mismatched close tag at '&lt;/SPAN&gt;'", "id": "2391"}, "2392": {"ground_truth": "0", "bug_report": "MarkupComponentBorder fails to close stream (?)\nMarkupComponentBorder  in findMarkupStream  creates a MarkupResourceStream but doesn't close it.Shouldn't this stream be closed after the call to Application.get().getMarkupSettings().getMarkupParserFactory().newMarkupParser(markupResourceStream).parse(); ?", "id": "2392"}, "2394": {"ground_truth": "1", "bug_report": "KittenCaptcha example broken\nKittenCaptcha example brokenNullpointer thrownERROR - RequestCycle - java.lang.NullPointerException at org.apache.wicket.extensions.captcha.kittens.KittenCaptchaPanel$2.onEvent(KittenCaptchaPanel.java:183) at org.apache.wicket.ajax.AjaxEventBehavior.respond(AjaxEventBehavior.java:177) at org.apache.wicket.ajax.AbstractDefaultAjaxBehavior.onRequest(AbstractDefaultAjaxBehavior.java:299)Following diff does the trick. But maybe this is platform dependent as I currently can test undre linux environment.Index: src/main/java/org/apache/wicket/extensions/captcha/kittens/KittenCaptchaPanel.java===================================================================&#8212; src/main/java/org/apache/wicket/extensions/captcha/kittens/KittenCaptchaPanel.java (revision 796623)+++ src/main/java/org/apache/wicket/extensions/captcha/kittens/KittenCaptchaPanel.java (working copy)@@ -170 7 +170 7 @@ // ajax request passing in mouse co-ordinates return generateCallbackScript('showLoadingIndicator(); wicketAjaxGet('' + getCallbackUrl(onlyTargetActivePage) + '&amp;x=' + getEventX(this  event) + '&amp;y=' + getEventY(this  event)');+ '&amp;x=' + getEventX(this  event) + '&amp;y=' + getEventY(this  event)'); } @SuppressWarnings('unchecked')", "id": "2394"}, "2396": {"ground_truth": "0", "bug_report": "DateField.newDateTextField's parameters should be generified\nprotected DateTextField newDateTextField(String id  PropertyModel&lt;Date&gt; dateFieldModel) { return DateTextField.forShortStyle(id  dateFieldModel); }", "id": "2396"}, "2398": {"ground_truth": "0", "bug_report": "AjaxFormSubmitBehavior cannot be applied to Form\nI need to apply the above behavior directly to a Form rather than to one of its children. This is so I can listen to the 'onsubmit' event of the form itself rather than attach it to a button.This patch allows you to do thisIndex: AjaxFormSubmitBehavior.java===================================================================&#8212; AjaxFormSubmitBehavior.java (revision 797714)+++ AjaxFormSubmitBehavior.java (working copy)@@ -86 13 +86 20 @@ { // try to find form in the hierarchy of owning component Component component = getComponent(); __form = component.findParent(Form.class); if (__form == null)+ if (component instanceof Form)+ {+ __form = (Form&lt;?&gt;)component;+ }+ else { throw new IllegalStateException( 'form was not specified in the constructor and cannot ' + 'be found in the hierarchy of the component this behavior ' + 'is attached to');+ __form = component.findParent(Form.class);+ if (__form == null)+ {+ throw new IllegalStateException(+ 'form was not specified in the constructor and cannot '+ + 'be found in the hierarchy of the component this behavior '+ + 'is attached to');+ } } } return __form;", "id": "2398"}, "2404": {"ground_truth": "0", "bug_report": "Quickstart for 1.4 uses 1.3 dtd in HomePage.html (with patch)\nThe generated HomePage.html contains the following header:&lt;html xmlns:wicket='http://wicket.apache.org/dtds.data/wicket-xhtml1.3-strict.dtd' &gt;That should be:&lt;html xmlns:wicket='http://wicket.apache.org/dtds.data/wicket-xhtml1.4-strict.dtd' &gt;", "id": "2404"}, "2409": {"ground_truth": "0", "bug_report": "Widen type-constraint on TextTemplate.interpolate(Map variables)\nThe parametrization of interpolate method of TextTemplate and implementors should imho be opened toMap&lt;String ?&gt; in order to be able to use it with Map&lt;String String&gt; or any other value-type.The current parametrization makes it quite clumsy to use.", "id": "2409"}, "2421": {"ground_truth": "0", "bug_report": "DefaultCssAutocompleteTextField should be renamed\nDefaultCssAutocompleteTextField should be renamed to DefaultCssAutoCompleteTextField to match the naming of its superclass AutoCompleteTextField.", "id": "2421"}, "2422": {"ground_truth": "0", "bug_report": "DefaultDataTable hides NavigationToolbar once and forever\nDefaultDataTable does not show NavigationToolbar if initial data does not require more than one page.DefaultDataTable hides and does not show NavigationToolbar again if data one time does not require more than one page .", "id": "2422"}, "2423": {"ground_truth": "0", "bug_report": "Not all 'domready' events are called when two wicket-event.js files are added to the page\nWhen more than one wicket portlets run in a portal a page could get more than one wicket-event.js entry and more than one Wicket.Event.add(window  'domready'  function() {...});. In this case not all of these 'domready' functions are executed. It happens because Wicket.Event object is created every time browser reaches wicket-event.js entry declaration which in turn causes Wicket.Event.fireDomReadyHandlers function to execute not all functions (this function is called only once when the global variable 'window.loaded' is set to false).Attached patch fixes the problem by ensuring that Wicket.Event object is created only once.", "id": "2423"}, "2424": {"ground_truth": "0", "bug_report": "OnChangeAjaxBehavior + DatePicker do not work together\nDatePicker fails to notify component update when OnChangeAjaxBehavior is used on the target input.It works well with AjaxFormComponentUpdatingBehavior.The root cause seems to be in the Wicket.ChangeHandler added by the OnChangeAjaxBehavior  which hides user handler while the DatePicker calls onchange handler directly (wicket-date.js:186):if (field.onchange != null &amp;&amp; typeof(field.onchange) != 'undefined') field.onchange(); Possible fix could be dispatching onchange Event instead of direct handler invocation. Yet I don't know what is purpose of Wicket.ChangeHandler here...", "id": "2424"}, "2426": {"ground_truth": "0", "bug_report": "Couldn't resolve model type of Model' for PasswordTextField\nWhen using PasswordTextField with CompoundPropertyModel mapped with the Map&lt;String  String&gt; I get the following warning:Couldn't resolve model type of Model:classname=&#91;org.apache.wicket.model.CompoundPropertyModel$AttachedCompoundPropertyModel&#93;:nestedModel=[Model:classname=&#91;org.apache.wicket.model.CompoundPropertyModel&#93;:nestedModel=&#91;org.apache.wicket.util.collections.MiniMap@115126e&#93;] for [MarkupContainer &#91;Component id = password&#93;]  please set the type yourself.This message is fixed if to set password field type manually: new PasswordTextField('').setType(String.class)I propose PasswordTextField to use String.class type by default", "id": "2426"}, "2433": {"ground_truth": "0", "bug_report": "Ajax support for multipart forms broken in a nested form\nAjax support for multipart forms broken in case of using a nested multipart form. The file does not get uploaded  uploadField.getFileUpload() returns null.", "id": "2433"}, "2434": {"ground_truth": "0", "bug_report": "RequestCycle urlFor ignores existing parameters when appending provided params\nLink with listener and non empty parameters  built in the following fashion: getRequestCycle().urlFor(this  ILinkListener.INTERFACE  parameters) isn't formed correctly.at RequestCycle 947:AppendingStringBuffer buff = new AppendingStringBuffer(url);WebRequestEncoder encoder = new WebRequestEncoder(buff);This WebRequestEncoder doesn't check  if the parameters are already present in the url provided.In my case  the url from CharSequence url = encodeUrlFor(target); is already similar to: ?wicket:interface=:2:admin:container:tabbedPanel:panel:apartments:0:apartmentAddressEditLink:1:ILinkListener::What WebRequestEncoder does when appending parameters provided explicitly - it simply appends '?' mark and then the parameters list.So resulting url is incorrect and doesn't work:?wicket:interface=:2:admin:container:tabbedPanel:panel:apartments:0:apartmentAddressEditLink:1:ILinkListener::?height=300&amp;width=300(notice leading ?height=300&amp;width=300).", "id": "2434"}, "2439": {"ground_truth": "0", "bug_report": "Improve MixedParamUrlCodingStrategy  introduce Hybrid\nThe MixedParamUrlCodingStrategy can be improved.The current form has the following shortcomings: it just fails when something is added to the URL  solution: add the option to ignore the added parts (in fact I made this the default) when something is added to the URL  the message is not very clear  solution: rewrite message and add more information it does not accept non-String parameter values  solution: use String.valueOf(paramValue)In addition the patch adds a Hybrid variant.", "id": "2439"}, "2444": {"ground_truth": "0", "bug_report": "Internal Spring beans should be ignored\nWhen looking up Spring beans by type (to inject into @SpringBean fields)  the injector should ignore internal beans  like the ones generated by the &lt;aop:scoped-proxy/&gt; element at the configuration. In this case  the generated name always starts with 'scopedTarget.'.Other cases can be identified by the method 'BeanFactoryUtils.isFactoryDereference(name)'.These beans are created by the container to be used internally  so  shouldn't be considered for injection. The problem is  they usually have a mirror bean (which is the really injected by the container)  so  when Wicket's injector tries to find it  it doesn't find unique beans of the type  forcing us to declare the bean name explicitly.", "id": "2444"}, "2447": {"ground_truth": "0", "bug_report": "AjaxEditableLabel: newPanel - use Component instead of WebComponent for easier subclassing\nWith the current implementation  subclasses are artifically limited to simple WebComponents.", "id": "2447"}, "2453": {"ground_truth": "0", "bug_report": "Form.findForm(Component c) bug. When form is part of Border and form component like TextField is inside another Border   component cannot resolve its form.\nI have Border class which renders Form and some other elements for feedback messages. Class included in attachments. Into this border i am putting form component which is Panel and in that Panel is another Border. Borders form has body container added.When i submit form i get error 'Could not find Form parent for ...'It's because Form.findForm method search for Form.class just in nearest component Border and not in all Borders upper in hierarchy.", "id": "2453"}, "2454": {"ground_truth": "0", "bug_report": "IE8: be more verbose if ajax refresh fails\nsometimes we write wrong html code  for example &lt;link rel='xxx'&gt;  instead of &lt;link rel='xxx'/&gt;if parts of the page are refreshed via Ajax on IE  the following code is called: wicket-ajax.js if (window.ActiveXObject) { xmldoc = new ActiveXObject('Microsoft.XMLDOM'); xmldoc.loadXML(text); } else {if loadXML fails there is no direct feedback  you only get a cryptic error message:Wicket.Ajax.Call.failure: Error while parsing response: Object required.if would be great if you write some logs in case of load error:if(!xmldoc.loadXML(text)) { this.failure('error while parsing text: '+text);}", "id": "2454"}, "2466": {"ground_truth": "0", "bug_report": "javadoc the CryptedUrlWebRequestCodingStrategy needs to be update/corrected to reflect the usage of session-id for encryption and hence URLs which were bookmarkable before will NOT remain bookmarkable.\nThe javadoc for CryptedUrlWebRequestCodingStrategy needs to be updated/corrected to reflect the usage of sessionId for encryption  which also entails that the urls which were bookmarkable before will NOT be remain bookmarkable any more.The javadoc currently state 'Because the algorithm is reversible  URLs which were bookmarkable before will remain bookmarkable. ' which is not true anymore.", "id": "2466"}, "2469": {"ground_truth": "0", "bug_report": "Allow using a different FileItemFactory by extracting a method in MultipartServletWebRequest class\nHi there:In MultipartServletWebRequest constructor we have:...(line 93) DiskFileItemFactory factory = new DiskFileItemFactory();...which inhibits anyone from reusing MultipartServletWebRequest with a different factory. The only solution is generate a new class that is a copy of this one  with that line changed.The suggestion is to extract this code into a protected method  so we could just extend this class when there's a need to use a different factory (as in GAE applications). A diff file is added.Thanks in advance Esteban", "id": "2469"}, "2477": {"ground_truth": "0", "bug_report": "AjaxEditableChoiceLabel does not detach choices model\nThe component org.apache.wicket.extensions.ajax.markup.html.AjaxEditableChoiceLabel never detaches its choices list model  thus keeping this model attached indefinitely. It should detach when the component's own detach method is called  like eg. this:@Overridepublic void detachModels() { choices.detach(); super.detachModels();}", "id": "2477"}, "2505": {"ground_truth": "0", "bug_report": "Button.onSubmit javadoc is misleading\nThe javadoc in org.apache.wicket.markup.html.form.Button.onSubmit() is misleading. It says 'Override this method to provide special submit handling in a multi-button form. It is called whenever the user clicks this particular button.' In reality  the method doesn't get called if the form's validation fails. Not sure if there are other cases as well when the method doesn't get called.", "id": "2505"}, "2506": {"ground_truth": "0", "bug_report": "Regression: 'Could not find child with id:  in the wicket:enclosure' for non-component tag\nAttached testcase passes with wicket-1.4.1 but fails with 1.4.2 saying:org.apache.wicket.WicketRuntimeException: Could not find child with id: radio in the wicket:enclosure at org.apache.wicket.markup.html.internal.Enclosure.checkChildComponent(Enclosure.java:210) at org.apache.wicket.markup.html.internal.Enclosure.ensureAllChildrenPresent(Enclosure.java:249) at org.apache.wicket.markup.html.internal.Enclosure.onComponentTagBody(Enclosure.java:169) at org.apache.wicket.Component.renderComponent(Component.java:2626) at org.apache.wicket.MarkupContainer.onRender(MarkupContainer.java:1512) at org.apache.wicket.Component.render(Component.java:2457) at org.apache.wicket.MarkupContainer.autoAdd(MarkupContainer.java:229) at org.apache.wicket.markup.resolver.EnclosureResolver.resolve(EnclosureResolver.java:61) at org.apache.wicket.markup.resolver.ComponentResolvers.resolve(ComponentResolvers.java:81) at org.apache.wicket.MarkupContainer.renderNext(MarkupContainer.java:1418) at org.apache.wicket.MarkupContainer.renderComponentTagBody(MarkupContainer.java:1577) at org.apache.wicket.MarkupContainer.onComponentTagBody(MarkupContainer.java:1501) at org.apache.wicket.Component.renderComponent(Component.java:2626) at org.apache.wicket.MarkupContainer.onRender(MarkupContainer.java:1512) at org.apache.wicket.Component.render(Component.java:2457) at org.apache.wicket.MarkupContainer.renderNext(MarkupContainer.java:1414) at org.apache.wicket.MarkupContainer.renderAll(MarkupContainer.java:1528) at org.apache.wicket.Page.onRender(Page.java:1545) at org.apache.wicket.Component.render(Component.java:2457) at org.apache.wicket.Page.renderPage(Page.java:914) at org.apache.wicket.request.target.component.BookmarkablePageRequestTarget.respond(BookmarkablePageRequestTarget.java:262) at org.apache.wicket.request.AbstractRequestCycleProcessor.respond(AbstractRequestCycleProcessor.java:105) at org.apache.wicket.RequestCycle.processEventsAndRespond(RequestCycle.java:1258) at org.apache.wicket.RequestCycle.step(RequestCycle.java:1329) at org.apache.wicket.RequestCycle.steps(RequestCycle.java:1428) at org.apache.wicket.RequestCycle.request(RequestCycle.java:594) at org.apache.wicket.protocol.http.MockWebApplication.processRequestCycle(MockWebApplication.java:478) at org.apache.wicket.protocol.http.MockWebApplication.processRequestCycle(MockWebApplication.java:390) at org.apache.wicket.util.tester.BaseWicketTester.startPage(BaseWicketTester.java:300) at org.apache.wicket.EnclosurePageTest.testRender(EnclosurePageTest.java:23) at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39) at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25) at java.lang.reflect.Method.invoke(Method.java:597) at junit.framework.TestCase.runTest(TestCase.java:154) at junit.framework.TestCase.runBare(TestCase.java:127) at junit.framework.TestResult$1.protect(TestResult.java:106) at junit.framework.TestResult.runProtected(TestResult.java:124) at junit.framework.TestResult.run(TestResult.java:109) at junit.framework.TestCase.run(TestCase.java:118) at junit.framework.TestSuite.runTest(TestSuite.java:208) at junit.framework.TestSuite.run(TestSuite.java:203) at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39) at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25) at java.lang.reflect.Method.invoke(Method.java:597) at org.apache.maven.surefire.junit.JUnitTestSet.execute(JUnitTestSet.java:213) at org.apache.maven.surefire.suite.AbstractDirectoryTestSuite.executeTestSet(AbstractDirectoryTestSuite.java:140) at org.apache.maven.surefire.suite.AbstractDirectoryTestSuite.execute(AbstractDirectoryTestSuite.java:127) at org.apache.maven.surefire.Surefire.run(Surefire.java:177) at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39) at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25) at java.lang.reflect.Method.invoke(Method.java:597) at org.apache.maven.surefire.booter.SurefireBooter.runSuitesInProcess(SurefireBooter.java:345) at org.apache.maven.surefire.booter.SurefireBooter.main(SurefireBooter.java:1009)", "id": "2506"}, "2508": {"ground_truth": "1", "bug_report": "NullPointerException in BehaviorRequestTarget.processEvents(BehaviorRequestTarget.java:96)\nWhen had the following exception occurring in a production system  while running :java.lang.NullPointerException at org.apache.wicket.request.target.component.listener.BehaviorRequestTarget.processEvents(BehaviorRequestTarget.java:96) at org.apache.wicket.request.AbstractRequestCycleProcessor.processEvents(AbstractRequestCycleProcessor.java:92) at org.apache.wicket.RequestCycle.processEventsAndRespond(RequestCycle.java:1241) at org.apache.wicket.RequestCycle.step(RequestCycle.java:1320) at org.apache.wicket.RequestCycle.steps(RequestCycle.java:1419) at org.apache.wicket.RequestCycle.request(RequestCycle.java:545) at org.apache.wicket.protocol.http.WicketFilter.doGet(WicketFilter.java:456) at org.apache.wicket.protocol.http.WicketFilter.doFilter(WicketFilter.java:289) at com.caucho.server.dispatch.FilterFilterChain.doFilter(FilterFilterChain.java:87) at org.codesmell.jpsak.servlet.EntityManagerFilter.doFilter(EntityManagerFilter.java:40) at com.caucho.server.dispatch.FilterFilterChain.doFilter(FilterFilterChain.java:87) at com.softculture.services.errornotification.wicket.ENFilter.doFilter(ENFilter.java:45) at com.caucho.server.dispatch.FilterFilterChain.doFilter(FilterFilterChain.java:87) at com.caucho.server.webapp.WebAppFilterChain.doFilter(WebAppFilterChain.java:187) at com.caucho.server.dispatch.ServletInvocation.service(ServletInvocation.java:266) at com.caucho.server.hmux.HmuxRequest.handleRequest(HmuxRequest.java:452) at com.caucho.server.port.TcpConnection.handleConnection(TcpConnection.java:563) at com.caucho.server.port.TcpConnection$KeepaliveTask.run(TcpConnection.java:1177) at com.caucho.util.ThreadPool$Item.runTasks(ThreadPool.java:759) at com.caucho.util.ThreadPool$Item.run(ThreadPool.java:681) at java.lang.Thread.run(Thread.java:619)At least checking for null when doing 'if (behaviors.size() &gt; idAsInt)' in BehaviorRequestTarget would be good  maybe more is to be done .", "id": "2508"}, "2511": {"ground_truth": "0", "bug_report": "Upgrade to SLF4J version 1.5.8\nPlease consider upgrading to SLF4J version 1.5.8 which should--+ be 100% compatible with SLF4J version 1.4.2 that you are currently using (in wicket 1.4.2). Compared to SLF4J version 1.4.2  the latest version  among many small improvements  supports serialization which should be helpful when a logger field is used within a wicket model.--+ I am being conservative when I say 'should'  'is' would have been more accurate.", "id": "2511"}, "2520": {"ground_truth": "0", "bug_report": "Use of Object instead of generic T in StringAutoCompleteRenderer\nThe method getTextValue is defined in org.apache.wicket.extensions.ajax.markup.html.autocomplete.AbstractAutoCompleteRenderer as: protected abstract String getTextValue(T object);...but overridden in StringAutoCompleteRenderer as: // @see AbstractAutoCompleteTextRenderer#getTextValue(Object) protected String getTextValue(Object object) { return object.toString(); }The Javadoc implies that the intention is to override the superclass' method. I think the parameter type should be changed from Object to T.I recommend that when using something like T  to name the parameter 'value' rather than 'object'. 'object' is misleading  as  by convention  it implies that its data type is Object.", "id": "2520"}, "2522": {"ground_truth": "0", "bug_report": "Easy fix suggestion: In BaseWicketTester 'IFormSubmitting' component should be the submitting component  not just a 'Button'\nLine 'if (!((formComponent instanceof Button) &amp;&amp; (component instanceof Button)) ||'should be changed intoLine 'if (!((formComponent instanceof IFormSubmittingComponent) &amp;&amp; (component instanceof IFormSubmittingComponent)) ||'See attached quickstart.", "id": "2522"}, "2530": {"ground_truth": "0", "bug_report": "Class not found when using OSGI class loader\nI am presently using Guice and OSGi. Our OSGi platform is used as a plugin platform for our web application. We load the OSGi framework and load it into Guice as a service provider. The plugins can be used to return panel or other wicket components that are then used in the pages.When one of the plugins components have a Guice injection  there is a class not found problem that is seen when trying to use injected stuff : org.apache.wicket.guice.GuiceProxyTargetLocator.locateProxyTarget(GuiceProxyTargetLocator.java:79)This class not found is because the Guice injector is trying to access the class directly by making a Class.forName. Since using an OSGi framework  the classloader is not capable of returning the class correctly.To solve this issue  the wicket-guice integration should use the wicket Classes.resolveClass static method that is using a class resolver that can be changed and check for class in other class loader.", "id": "2530"}, "2533": {"ground_truth": "0", "bug_report": "Behavior for accepted locales should fit the HTTP Specification\nI try to filter the locales assignable to session on newSession(request  response) in application. The testcase is simple:If application supports locale accepted by user client (http-header 'accepted-language') then i assign it to session  otherwisei use the application default.But the behavior differs to production system. MockHttpRequest.getLocales returns only one locale. But the implementationused in production system (org.apache.catalina.connector.RequestFacade) provides all locales contained in header.So my testcase is working in production but not in test.As an extension to this it COULD be a simplification if application could support query to application supported languages.Normally this is a decision which is made at design time. So if you develop the application you know the supported languages.So it would be great if there would be a place where i can query these easily (extension to settings?).We had two discussions on that in mailing-list:http://www.nabble.com/Howto-accept-other-then-first-locale-in-HTTP-header-%22Accept-Language%22--to25922534.htmlhttp://www.nabble.com/Wickettester-change-locale-of-request-to25907133.htmlSpecification is herehttp://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.4", "id": "2533"}, "2535": {"ground_truth": "0", "bug_report": "Improve consistency of ParseException error messages\nAppend the line and column number to all ParseException", "id": "2535"}, "2548": {"ground_truth": "0", "bug_report": "MetaDataKey does not meet hashCode() contract\nThe class MetaDataKey overrides equals() method but uses Object.hashCode(). So FindBugs warns on any use of this class in our Wicket application.", "id": "2548"}, "2554": {"ground_truth": "0", "bug_report": "WebRequestCodingStrategy assumes that a shared resource URL should always be relative to the Wicket handler\nWe use an absolute URL for the shared resources and as long as the page is directly under the Servlet context we have no problems  but for pages that have additional paths  then it is converted into a bad relative URL. For Example:/cjs/app/test.page - This page's shared resource URLs are not modified  so http://localhost:8080/crtv/css/cjs-3.3.1B.css is correct/cjs/app/orders/contentbuilder.page - This page's shared resource URLs are all modified causing them to be ../http://localhost:8080/crtv/css/cjs-3.3.1B.css  which is bad; and of course with JavaScript it causes us a lot of problemsI propose a simple fix in method: public final CharSequence encode(final RequestCycle requestCycle  final IRequestTarget requestTarget)Change the following line from:if (!sharedResourceURL &amp;&amp; portletRequest)To:if (url.toString().startsWith('http://') || url.toString().startsWith('https://') || (!sharedResourceURL &amp;&amp; portletRequest))Thanks!", "id": "2554"}, "2568": {"ground_truth": "0", "bug_report": "Unnecessary method calls in IDataProvider\nReferring to the post on the mailinglist (http://old.nabble.com/Unnecessary-method-calls-in-IDataProvider--ts26266771.html)  here's a quick summary of the problem:If the size() method of an IDataProvider returns zero  the iterator(int int) method should not be called. Calling this method with value zero as second parameter (== count) always results in returning an empty iterator. Therefore a lot of unnecessary method calls (and thus a lot of unnecessary database hits) could be saved if an empty iterator would be used by the DataView whenever size() returns an int &lt;= 0.Please find a project attached with a junit test that illustrates the problem. I tested it with all major releases from 1.4.3. down to 1.3.0. with the same result.", "id": "2568"}, "2569": {"ground_truth": "0", "bug_report": "Inheritance layout excludes XML header from output\nWhen using inheritance layout  if the superclass (Layout class) has an ?xml header at the top  it's excluded from the rendering of subclasses  if they have an associated html file. If the subclass has no .html file associated with it  the ?xml header is preserved in the rendering output.To reproduce: Create a SuperPage class extending WebPage. At the top of SuperPage.html  put '&lt;?xml version='1.0' encoding='utf-8'?&gt;' . Create two subclasses of SuperPage  one with an HTML file and one without. View the sub pages. Notice when the one with an HTML file is rendered  the xml header is excluded.Expected: The ?xml header should always be preserved in the rendered output as it's vital to the layout.", "id": "2569"}, "2571": {"ground_truth": "0", "bug_report": "o.a.wicket.ng.** Resource related classes don't take 'variation' into account\nThe Resource and ResourceReference related classes in o.a.wicket.ng package don't take into account the 'variation'. Several weeks ago Juergen splitted 'style' and 'variation' in 1.5-SNAPSHOT. It seems Matej have finished the new classes before that split.I'm attaching a patch which includes 'variation' into account.", "id": "2571"}, "2575": {"ground_truth": "0", "bug_report": "RepeatingView's Javadoc to include newChildId() and add()\nA minor improvement of the Javadoc to  include newChildId() call  since most people will be using that rather than manual id input add(view) call so that its clear to novice that the components needs to be added typo: missing spaceSee the attached patch.", "id": "2575"}, "2580": {"ground_truth": "0", "bug_report": "Javadoc of Component#setOutputMarkupPlaceholderTag is wrong\nThe javadoc of Component#setOutputMarkupPlaceholderTag uses the term 'componentid' where it should use 'markupid'.Please update the javadoc from: The tag is of form: &lt;componenttag style='display:none;' id='componentid'/&gt;.to The tag is of form: &lt;componenttag style='display:none;' id='markupid'/&gt;.", "id": "2580"}, "2588": {"ground_truth": "0", "bug_report": "ExternalLink to take IModel instead of IModel for label\nI just noticed that this constructor  public ExternalLink(final String id  final IModel&lt;String&gt; href  final IModel&lt;String&gt;* label) takes IModel&lt;String&gt; for label. This is somewhat limiting since the model could hold a number or a date for example. Actually passing a raw IModel with any object inside works just fine. It would be more appropriate if this constructor takes IModel&lt;?&gt; for the label as done in Label constructor. Unfortunately ExternalLink offers a public method getLabel() that returns the label as IModel&lt;String&gt;. So it seems changing it would break compatibility.", "id": "2588"}, "2591": {"ground_truth": "0", "bug_report": "Allow subclasses of AuthenticatedWebSession to set 'signedIn' field\nMy app implements 'remember me' service by setting cookie in authenticate method of custom session that subclasses AuthenticatedWebSession.In order to automatically login user if cookie present  i need to set 'signedIn' field to true when session is created  however it isn't possible since 'signedIn' is private and no way to set it is available.", "id": "2591"}, "2595": {"ground_truth": "0", "bug_report": "Ajax multipart fails for inner forms added via ajax\nWhen using a file upload in a nested form (e.g. as required when using modal windows)  the file upload will always return null. This bug seems related to WICKET-2433 which was supposed to be fixed in wicket 1.4.2  but in wicket 1.4.3 this effect was observed by several people (see mailing list).", "id": "2595"}, "2598": {"ground_truth": "0", "bug_report": "Some components still escape non-ASCII symbols by default\nWith fix for WICKET-1054 Wicket (almost) stopped escaping non-ASCII symbols by default  it calls Strings.escapeMarkup(String) or Strings.escapeMarkup(String  false  false).However  there are still some places that also call Strings.escapeMarkup with different args.I used 'Strings.escapeMarkup&#40;.*  false  true&#41;' regex to find them:AbstractChoice.escapeOptionHtml CheckBoxMultipleChoice.onComponentTagBody (the reason i started to dig into this issue)RadioChoice.onComponentTagBodyThey should either call String.escapeMarkup(String) or even use Component.getDefaultModelObjectAsString", "id": "2598"}, "2609": {"ground_truth": "0", "bug_report": "EnumChoiceRenderer misbehaves with anonymous enum classes\nPlease find attached testcase reproducing the problem.Proper fix is to doreturn object.getDeclaringClass().getSimpleName() + '.' + object.name()instead ofreturn object.getClass().getSimpleName() + '.' + object.name()in EnumChoiceRenderer.resourceKey", "id": "2609"}, "2620": {"ground_truth": "0", "bug_report": "DataTable generates two\nThe tables generated by DataTable component in the current version of Wicket (1.4.3) do not contain &lt;thead&gt; in the output HTML.It was working correctly in wicket 1.4.0 but there were some changes to fix other issues - see WICKET-2436To replicate - launch the wicket-examples-1.4.3.war and look at the DataTable example:http://localhost:8081/wicket-examples-1.4.3/repeater/?wicket:bookmarkablePage=:org.apache.wicket.examples.repeater.DataTablePageIf you check the HTML source you will see it does not contain thead tag:{html}&lt;table class='dataview' cellspacing='0'&gt; &lt;tr class='navigation'&gt;{html}When you look at http://www.wicket-library.com/wicket-examples/repeater/?wicket:bookmarkablePage=:org.apache.wicket.examples.repeater.DataTablePageit shows:{html}&lt;table class='dataview' cellspacing='0'&gt;&lt;thead&gt; &lt;tr class='navigation'&gt;{html}Must be a previous version?", "id": "2620"}, "2621": {"ground_truth": "0", "bug_report": "Ajax buttons inside ModalWindows don't submit properly\nI have a ModalWindow that contains an IndicatingAjaxButton. When I click the button  I get a big Java error complaining that the form submit wasn't multipart.Digging into the javascript in wicket-ajax.js  I found this from line 1102 in the method handleMultipartmultipart=multipart||form.enctype=='multipart/form-data';if (multipart==false) { // nothing to handle return false; }When this executed  multipart was false  and enctype was '' and therefore the submit aborted. This may be the cause.Here's the Java stacktracejava.lang.IllegalStateException: ServletRequest does not contain multipart content at org.apache.wicket.protocol.http.servlet.MultipartServletWebRequest.&lt;init&gt;(MultipartServletWebRequest.java:113) at org.apache.wicket.protocol.http.servlet.MultipartServletWebRequest.&lt;init&gt;(MultipartServletWebRequest.java:83) at org.apache.wicket.extensions.ajax.markup.html.form.upload.MultipartRequest.&lt;init&gt;(MultipartRequest.java:41) at org.apache.wicket.extensions.ajax.markup.html.form.upload.UploadWebRequest.newMultipartWebRequest(UploadWebRequest.java:66) at org.apache.wicket.markup.html.form.Form.handleMultiPart(Form.java:1651) at org.apache.wicket.markup.html.form.Form.onFormSubmitted(Form.java:850) at org.apache.wicket.ajax.form.AjaxFormSubmitBehavior.onEvent(AjaxFormSubmitBehavior.java:135) at org.apache.wicket.ajax.AjaxEventBehavior.respond(AjaxEventBehavior.java:177) at org.apache.wicket.ajax.AbstractDefaultAjaxBehavior.onRequest(AbstractDefaultAjaxBehavior.java:299) at org.apache.wicket.request.target.component.listener.BehaviorRequestTarget.processEvents(BehaviorRequestTarget.java:119) at org.apache.wicket.request.AbstractRequestCycleProcessor.processEvents(AbstractRequestCycleProcessor.java:92) at org.apache.wicket.RequestCycle.processEventsAndRespond(RequestCycle.java:1250) at org.apache.wicket.RequestCycle.step(RequestCycle.java:1329) at org.apache.wicket.RequestCycle.steps(RequestCycle.java:1428) at org.apache.wicket.RequestCycle.request(RequestCycle.java:545) at org.apache.wicket.protocol.http.WicketFilter.doGet(WicketFilter.java:479) at org.apache.wicket.protocol.http.WicketFilter.doFilter(WicketFilter.java:312) at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:235)", "id": "2621"}, "2630": {"ground_truth": "0", "bug_report": "MockHttpServletResponse doesn't delete cookies\nFrom Cookie.setMaxAge javadoc: @param expiry an integer specifying the maximum age of the cookie in seconds; if negative  means the cookie is not stored; if zero  deletes the cookieSo  if maxAge is zero  MockHttpServletResponse should remove cookie.", "id": "2630"}, "2635": {"ground_truth": "1", "bug_report": "Sucessfull login on SignInPanel causes HomePage to become stateful\nQuickstart attached.Steps to reproduce1. Unpack attached quickstart2. mvn jetty:run3. Open http://localhost:8080/login4. Enter any credentialsExpected: StatelessHomePage opensActual: exception happends  StatelessHomePage isn't statelessProblem analysis:1. SignInForm manually creates page.2. AbstractListenerInterfaceRequestTarget.onProcessEvents calls requestCycle.setRedirect(true)3. RequestCycle.urlFor(final Component component  final RequestListenerInterface listener  ValueMap params) calls page.setPageStateless(Boolean.FALSE)4. StatelessChecker isn't happy.Fix is simple - SignInForm.onSignInSucceeded should be:if (!continueToOriginalDestination()){ setResponsePage(getApplication().getHomePage());}", "id": "2635"}, "2638": {"ground_truth": "0", "bug_report": "Form.isMultipart() doesn't check FormComponent.isMultipart() on nested components\nForm.isMultipart() doesn't check FormComponent.isMultipart() on nested components. This breaks submitting of stateless forms with multipart FormComponent but no explicit Form.setMultipart(true) call.", "id": "2638"}, "2639": {"ground_truth": "0", "bug_report": "More pages missing xml prolog\nInternalErrorPage.htmlExceptionErrorPage.html", "id": "2639"}, "2645": {"ground_truth": "0", "bug_report": "Resources aren't gziped by default\nWicket gzips its resources by default. The only exception is wicket-datetime module.I think it is worth to use the same policy within wicket subprojects  especially taking into account that usage of DatePicker adds more than 100 Kb of uncompressed java scripts.Here are an headers of request and response:Request headers:Host 127.0.0.1:8080User-Agent Mozilla/5.0 (X11; U; Linux x86_64; ru; rv:1.9.1.6) Gecko/20091215 Ubuntu/9.10 (karmic) Firefox/3.5.6Accept /Accept-Language ru en-us;q=0.7 en;q=0.3Accept-Encoding gzip deflateAccept-Charset windows-1251 utf-8;q=0.7 *;q=0.7Keep-Alive 300Connection keep-aliveReferer http://127.0.0.1:8080/?t=1Response headers:Server Apache-Coyote/1.1Last-Modified Mon  21 Dec 2009 07:26:23 GMTExpires Mon  28 Dec 2009 13:42:11 GMTCache-Control max-age=3600Content-Type text/javascript;charset=UTF-8Content-Length 68179Date Mon  28 Dec 2009 12:42:10 GMT", "id": "2645"}, "2650": {"ground_truth": "0", "bug_report": "Consistently create body for short tags.\nWhen the Wicket HTML contains a tag such as &lt;a wicket:id='foo' /&gt; and the component bound to that tag uses replaceComponentTagBody to write a string to the tag's body  currently nothing happens.Either a text node should be added to the component tag and the body written to it;Or a warning/exception should occur if for some reason it is preferred to not let this method succeed when the component tag has no body yet.I don't see the use of the latter  so I recommend the former be implemented.For now it's just confusing and dangerous. If I give my HTML to a web designed and he changes a few empty HTML tags to short tags  I'll never be warned  but my output WILL be broken.", "id": "2650"}, "2653": {"ground_truth": "0", "bug_report": "Make GoAndClearFilter.defaultClearModel and GoFilter.defaultGoModel internationalizable\nPlease  change GoAndClearFilter.defaultClearModel and GoFilter.defaultGoModel to ResourceModel with default string (same way as it is done in NoRecordsToolbar.DEFAULT_MESSAGE_MODEL).That'll allow translating button labels without the need to pass custom models.", "id": "2653"}, "2655": {"ground_truth": "0", "bug_report": "WicketTester javadocs are referring in many places to a component's path but it's not documented anywhere\nIn many places in the WicketTester javadoc there are references to a path parameter explained in the following way: path - path to ComponentBut it's not explained anywhere what a path is  what does it contains  which separator is used there  what's the root of it and so on.Practically  it's impossible understanding how to use WicketTester from its javadoc because of that.", "id": "2655"}, "2656": {"ground_truth": "0", "bug_report": "Ability to add CSS style to table body in DataTable\nBeing able to dynamically adjust css styles in the table body &lt;tbody&gt; of the DataTable is essential for a lot of advanced functionality e.g. adding a scrollbar to the contents of a table (which also eliminates the need for pagination and enhances usability for certain use cases). Sure one can override DataTable.html and hardcode a css style in the body element  but that is not enough. It must be dynamic and that requires the DataTable.java code to be changed. In the event that a client just provides a complete implementation of DataTable.java   the Toolbar classes can no longer be used since they reference the DataTable concrete class instead of an interface. I provide a patch to fix this issue and augment the DataTable with an extra method: void setTableBodyCss(String cssStyle);", "id": "2656"}, "2657": {"ground_truth": "0", "bug_report": "Multipart forms fails on Chrome during Ajax submit\nAjaxSubmitLink doesn't work with multipart forms on Google Chrome. AjaxSubmitLink calls wicketSubmitFormById in its onClick handler. When submiting multipart form this function creates hidden iframe and attaches handleMultipartComplete function to the onload event.handleMultipartComplete calls loadedCallback with envelope parameter. On Google Chrome envelope is undefined so loadedCallback craches ('Could not find root &lt;ajax-response&gt; element' is reported).I dig more and I found that handleMultipartComplete is called before server side callback completes  thats why 'envelope' is undefined....", "id": "2657"}, "2660": {"ground_truth": "0", "bug_report": "Wickettester executeAllTimerBehaviors executes stopped behaviors too\nWhen attempting to test a page with two ajax timer behaviours the first behaviour is triggered correctly. Then that behaviour is stopped (using the stop function) and a second behaviour is started. If executeAllTimerBehaviors is called again both behaviours are triggered even though one is stopped.It would be good if the code in BaseWicketTester.executeAllTimerBehaviors(MarkupContainer container) could validate if the behaviour is stopped or not before trying to execute it.", "id": "2660"}, "2671": {"ground_truth": "1", "bug_report": "Enclosure causes Nullpointer exception\nThere is a bug in DirectChildTagIterator which causes a Nullpointer exception with the following stack trace:Caused by: java.lang.NullPointerException at org.apache.wicket.markup.html.internal.DirectChildTagIterator.findNext(DirectChildTagIterator.java:115) at org.apache.wicket.markup.html.internal.DirectChildTagIterator.next(DirectChildTagIterator.java:85) at org.apache.wicket.markup.html.internal.Enclosure.ensureAllChildrenPresent(Enclosure.java:236) at org.apache.wicket.markup.html.internal.Enclosure.onComponentTagBody(Enclosure.java:169) at org.apache.wicket.Component.renderComponent(Component.java:2619) ... 106 moreThe problem is in this code fragment:while (markupStream.hasMore()){ final MarkupElement cursor = markupStream.next(); if (cursor.closes(parent))markupStream.hasMore() checks if the currentindex is available to retrieve  while markupStream.next() doesn't retrieve the currentindex  but tries to retrieve the currentindex + 1 element. The right function to get the current element is markupStream.get(). To fix this  it should be like this:while (markupStream.hasMore()) { final MarkupElement cursor = markupStream.get(); markupStream.next(); if (cursor.closes(parent))The best fix is imo to make next() in MarkupStream a void method  which will prevent this in the future.", "id": "2671"}, "2675": {"ground_truth": "0", "bug_report": "CryptedUrlWebRequestCodingStrategy fails in form with method='get'\nA form fails to submit when it has method='get' set in a wicket application which is using CryptedUrlWebRequestCodingStrategy.This happens because the form is constructed by wicket like this:&lt;form wicket:id='form2' method='get' id='form26' action=''&gt; &lt;div style='display:none'&gt; &lt;input type='hidden' name='form26_hf_0' id='form26_hf_0' /&gt; &lt;input type='hidden' name='x' value='vcH4-yiA7z1xdg19IZiML85IPOzB2CaoynoU6UPAVS9n2G2S2bamuw' /&gt; &lt;/div&gt; &lt;input type='text' wicket:id='text2' value='' name='text2'/&gt; &lt;input type='submit'/&gt;&lt;/form&gt;which can produce a query string in firefox like this:http://localhost:8080/crypt-bug/?form26_hf_0=&amp;x=YhsA9niKQasfMz8FBHuRP1lLAZXPdZy8s1XWlmYcu7WwhnsP*VusYw&amp;text2=test'x' is the second parameter in the query string  but CryptedUrlWebRequestCodingStrategy accesses this parameter as '?x=' where in this case it is '&amp;x='I am attaching the example quickstart app and a possible fix.", "id": "2675"}, "2702": {"ground_truth": "0", "bug_report": "update PropertyColumn Javadoc\nhi i find the documentation of the gentrified type T of the org.apache.wicket.extensions.markup.html.repeater.data.table.PropertyColumn a bit misleading. I suggest the javadoc should state 'The Model object type' for &lt;T&gt; instead of 'The type of the property'.thanks pete.", "id": "2702"}, "2704": {"ground_truth": "0", "bug_report": "FormComponent.MessageSource.getMessage(String) and getValidatorKeyPrefix()\nI tried to use the getValidatorKeyPrefix() feature to have a more suitable translation key for a RequiredTextField and the  required  message.But Wicket wasn't able to find my key : the debug log said that it couldn't find my key whereas it is well-formed (getValidatorKeyPrefix() + '.Required').So i debugged the getMessage(String) and I understood the problem. Arround the line 175 (in Wicket 1.4.5) we find :// If not found try a more general form &#91;prefix&#93;.&#91;key&#93;if (Strings.isEmpty(message)){resource = prefix(prefix  key);message = getString(localizer  key  formComponent);}The comment is good  but the code is wrong : the resource variable isn't used in the getString(...) ! (I think it's a kind of bad copy/paste from surrounding code)We should find :message = getString(localizer  resource  formComponent);I did it and it works.", "id": "2704"}, "2719": {"ground_truth": "0", "bug_report": "Extract lazy AbstractListDataProvider out of ListDataProvider.\nListDataProvider is handy for quickly providing a List as source for a DataView; but it forces you to pass a list object during construction and doesn't allow you to provide a new list.That means it becomes hard to update the elements in the DataView when the page is (re)rendered. It might be useful to provide an abstract superclass to ListDataProvider which provides an abstract method for obtaining the list allowing the developer to lazy-load the data he wants to show; making sure to always load up-to-date data when the view is being rendered rather than data he passed in during construction which may have become outdated.", "id": "2719"}, "2720": {"ground_truth": "0", "bug_report": "Panel throws MarkupException without passing MarkupStream\nPanel throws a MarkupException without passing the MarkupStream while the MarkupStream is available. This makes debugging some errors harder. Code fragment: /**  @see org.apache.wicket.Component#onComponentTagBody(org.apache.wicket.markup.MarkupStream  org.apache.wicket.markup.ComponentTag) */ @Override protected void onComponentTagBody(final MarkupStream markupStream  final ComponentTag openTag) { // Render the associated markup renderAssociatedMarkup('panel'  'Markup for a panel component has to contain part '&lt;wicket:panel&gt;''); if (wasOpenCloseTag == false) { // Skip any raw markup in the body markupStream.skipRawMarkup(); if (markupStream.get().closes(openTag) == false) { throw new MarkupException('close tag not found for tag: ' + openTag.toString() + '. Component: ' + this.toString()); } } }", "id": "2720"}, "2744": {"ground_truth": "0", "bug_report": "AjaxFormChoiceComponentUpdatingBehavior cannot find the choice\nAjaxFormChoiceComponentUpdatingBehavior tries to find the form components (the choices) by iterating the children elements with tagName 'input' and verifying some constraints. One of this constraints have been changed recently and now the children could not be found:Index: src/main/java/org/apache/wicket/ajax/form/AjaxFormChoiceComponentUpdatingBehavior.java===================================================================&#8212; src/main/java/org/apache/wicket/ajax/form/AjaxFormChoiceComponentUpdatingBehavior.java (revision 909983)+++ src/main/java/org/apache/wicket/ajax/form/AjaxFormChoiceComponentUpdatingBehavior.java (working copy)@@ -70 7 +70 7 @@ asb.append(' for (var i = 0 ; i &lt; inputNodes.length ; i ++) {/n'); asb.append(' var inputNode = inputNodes&#91;i&#93;;/n'); asb.append(' if (!inputNode.type) continue;/n'); asb.append(' if (!(inputNode.className.indexOf('wicket-'+markupId)===0)) continue;/n');+ asb.append(' if (!(inputNode.id.indexOf(markupId+'-')===0)) continue;/n'); asb.append(' var inputType = inputNode.type.toLowerCase();/n'); asb.append(' if (inputType == 'checkbox' || inputType == 'radio') {/n'); asb.append(' Wicket.Event.add(inputNode  'click'  callbackScript);/n');", "id": "2744"}, "2747": {"ground_truth": "0", "bug_report": "AjaxPagingNavigator Link factories should return AbstractLink\nAjaxPagingNavigator doesn't submit forms. The mailinglists instruct the user to override the Link factory classes in order to return SubmitLinks. However  both SubmitLink and AjaxSubmitLink do not inherit from Link. It is my opinion that AjaxPagingNavigator.new*Link() functions should return AbstractLink.I am currently forced to fork the majority of AjaxPagingNavigator inorder to create a 'Sub'class.", "id": "2747"}, "2753": {"ground_truth": "0", "bug_report": "Javascript in Form.registerJavascriptNamespaces() fails in Firefox 3.5.8\nThe undefined comparisons fail for me with a message stating that the Wicket variable is undefined (which the code is actually meant to check)", "id": "2753"}, "2761": {"ground_truth": "0", "bug_report": "InjectorHolder.getInjector().inject(this) doesn't work with wicket-guice\nUsing Wicket-Guice integration for dependency injection does not provide the helper mechanism 'InjectorHolder.getInjector().inject(this)' for classes which do not extend o.a.w.Component.", "id": "2761"}, "2767": {"ground_truth": "0", "bug_report": "DatePicker Calendar: wrong year format when 4 digits are used (yyyy)  e.g. 2010 --> 0010\nI found that there is still a bug in Wicket 1.4.7 in case that the datePattern is 'dd/MM/yyyy'.For example  if you use the DatePicker and select a date such as23/02/2010 from the calendar GUI  the date selected in the DateTextField is '23/02/0010'.This is the example Java code: // define the date text field for the data decorrenza DateTextField dataDecorrenzaDaTextField = new DateTextField('dataDecorrenzaDa'  new PropertyModel(this.accordo  'dataDecorrenzaDa')  new PatternDateConverter('dd/MM/yyyy'  true) ); // add the graphical calendar date picker dataDecorrenzaDaTextField.add(new DatePicker() { @Override protected boolean enableMonthYearSelection() { // enable month/year selection return true; } // end enableMonthYearSelection } // end DatePicker );I found that the bug is still in the 'wicket-date.js'  line 137.The wrong code is:if(datePattern.match(/yy+/)) year = Wicket.DateTime.padDateFragment(year % 100);This line also makes the module 100 on the year  when the year pattern is 'yyyy'.The fixed code is:if(datePattern.match(/yyyy+/)) { year = year;} else if(datePattern.match(/yy+/)) year = Wicket.DateTime.padDateFragment(year % 100);", "id": "2767"}, "2776": {"ground_truth": "0", "bug_report": "Enhancing RadioChoice input items with individual title and css class attributes\nWicket is a great framework based on an excellent idea. It is a joy to work with. There are several existing components and most of them are very usable and customizable as much as possible  however there are still a few places for improvement. One of those is org.apache.wicket.markup.html.form.RadioChoice  where it is currently not possible to set HTML title and class attributes for the individual input tags. This would be a great feature for some client-side javascript frameworks  and in my case the JQuery star-rating plugin is even hard to use without these. For this purpose I have created my own private alternative for this component  but it would be good to have it included in wicket  so that others can benefit too.See below the changes I have performed to enable this feature! Please note that all changes are made so that current behavior is not changed only new optional behavior is added.Changes in method onComponentTagBody(...) ... // Add radio tag String title = getTitle(index  choice); String cssClass = getCssClass(index  choice); buffer.append('&lt;input name=/'').append(getInputName()).append('/' type=/'radio/''); if (title != null) buffer.append(' title=/'').append(title).append('/''); if (cssClass != null) buffer.append(' class=/'').append(cssClass).append('/''); buffer.append((isSelected(choice  index  selected) ? ' checked=/'checked/'' : '')); buffer.append((enabled ? '' : ' disabled=/'disabled/'')); buffer.append(' value=/'').append(id).append('/' id=/'').append(idAttr) .append('/''); ...Added two new methods: /** Returns the title attribute to be output for the input tag with the given index and choice value. By default this returns null  and so the title attribute won't be set  but this can be overridden.  @param index @param choice @return title attribute to be used for the given input tag */ protected String getTitle(int index  T choice) { return null; } /** * Returns the CSS class attribute to be output for the input tag with the given index and * choice value. By default this returns null  and so the class attribute won't be set  but this * can be overridden. *  * @param index * @param choice * @return CSS class attribute to be used for the given input tag */ protected String getCssClass(int index  T choice) { return null; }", "id": "2776"}, "2778": {"ground_truth": "0", "bug_report": "Set Application ThreadLocal in WicketSessionFilter\nWicketSessionFilter currently only sets the Session ThreadLocal  but not the Application ThreadLocale.This leads to WicketRuntimeException when trying to get the Application using Application#get or Session#getApplication.It would be handy if the Application ThreadLocal would also be set in WicketSessionFilter.see also:http://old.nabble.com/Application-get-in-WicketSessionFilter-ts27862681.html#a27862681", "id": "2778"}, "2790": {"ground_truth": "0", "bug_report": "Submitting a form with Ajax in WicketTester does not check if form is multiPart\nWhile executing wicketTester.executeAjaxEvent(butooon  'onclick') i get ServletRequest does not contain multipart content. One possible solution is to explicitly call Form.setMultipart(true)  Wicket tries its best to auto-detect multipart forms but there are certain situation where it cannot.executeAjaxEvent method does not check if form is multiPart. To workaround this problem before executeAjaxEvent we can execute: MockHttpServletRequest servletRequest = wicketTester.getServletRequest(); servletRequest.setUseMultiPartContentType(true);But its annoying to set this flag again and again. Could you extend executeAjaxEvent to check if form is multiPart ? Similar checking is already done in FormTester.onSubmit().", "id": "2790"}, "2803": {"ground_truth": "0", "bug_report": "ListMultipleChoice's Constructors Should Accept IModel>\nCurrently  the constructors accept IModel&lt;Collection&lt;T&gt;&gt; for the 'model' of the ListMultipleChoice. Thus  you can't pass in an IModel&lt;Set&lt;T&gt;&gt;. The constructors should be modified to take IModel&lt;? extends Collection&lt;T&gt;&gt; instead.", "id": "2803"}, "2811": {"ground_truth": "0", "bug_report": "ListMultipleChoice: updateModel method looses the value submitted from the select control\nListMultipleChoice looses the value submitted from client in certain conditions. This is because the collection returned by getConvertedInput() is passed to model.setObject(); and later  when the model is modified  converted input is affected too. (see ListMultipleChoice.java  line 344 in svn revision 929271).Simple page reproducing this bug under wicket 1.4.6 is attached.Key points in the code  required to reproduce the problem:1. The Form component is wrapped by a Border component2. The model used flor ListMultipleChoice initially returns null from the getObject() method. To see the error open the attached page in browser  select something in the list  press Submit.Resulting message in the feedback panel will be: 'submitted values: []'  i.e. the the submit handler sees empty list in the model.Expected: submit handler must see list of the values selected in the list by user.The reason of the error:1. Method Form.internalUpdateFormComponentModels() in Wicket 1.4.6 calls  ListMultipleChoice.updateModel() two times when the form is wrapped by a border: private void internalUpdateFormComponentModels() { FormComponent.visitComponentsPostOrder(this  new FormModelUpdateVisitor(this)); MarkupContainer border = findParent(Border.class); if (border != null) { FormComponent.visitComponentsPostOrder(border  new FormModelUpdateVisitor(this)); } }2. On the first call of the ListMultipleChoice.updateModel the result of getConvertedInput()  is stored in the model (line 344). Now model and getConvertedInput() share the same collection. On the second call  the collection retrieved from model is cleared (line 326)  and  then getConvertedInput() is used again (but now it returns the empty collection) 314 public void updateModel()315 {316 Collection&lt;T&gt; selectedValues = getModelObject();317 if (selectedValues != null)318 {...326 selectedValues.clear();327 selectedValues.addAll(getConvertedInput());...340 }341 else342 {343 selectedValues = getConvertedInput();344 setDefaultModelObject(selectedValues);345 }346 }I would suggest to not share the collection between getConvertedInput() and the model:343 selectedValues = getConvertedInput(); selectedValues = new ArrayList&lt;T&gt;(selectedValues);344 setDefaultModelObject(selectedValues);", "id": "2811"}, "2812": {"ground_truth": "0", "bug_report": "Textarea ignores first line in case of blank line\nWhen the content of a textarea starts with an empty line  this line disappears when it is placed in the html.This is a known problem with the html textarea element.&lt;textarea&gt;test&lt;/textarea&gt; will result in the same as:&lt;textarea&gt;test&lt;/textarea&gt;Meaning that the first newline in the textarea is ignored. In case of opening a page with a textarea with a leading blank line  this line will be removed when the form is submitted again.See for similar issues in the apache jira STR-1366 and BEEHIVE-1005A possible solution is to change the following method in org.apache.wicket.markup.html.form.TextArea in something like: protected final void onComponentTagBody(final MarkupStream markupStream  final ComponentTag openTag) { checkComponentTag(openTag  'textarea'); String value = getValue(); if (value != null &amp;&amp; value.startsWith('/n')) { value = '/n' + value; } else if (value != null &amp;&amp; value.startsWith('/r/n')) { value = '/r/n' + value; } else if (value != null &amp;&amp; value.startsWith('/r')) { value = '/r' + value; } replaceComponentTagBody(markupStream  openTag  value);}", "id": "2812"}, "2817": {"ground_truth": "0", "bug_report": "ChoiceGroup's Constructor Should Accept IModel>\nThis is very similar to ListMultipleChoice's constructor situation. Changing the constructor signature won't break any existing code  but it will make it easier to use (for times when you have a set-based property).", "id": "2817"}, "2821": {"ground_truth": "0", "bug_report": "More 'IModel<? extends Collection<' Fixes\nI searched the code for all occurrences of 'IModel&lt;Collection&lt;' and replaced all that I thought could be replaced with 'IModel&lt;? extends Collection&lt;'.", "id": "2821"}, "2833": {"ground_truth": "0", "bug_report": "FileUpload#writeTo copies the stream / a possible rename would be faster\nI used a FileUploadField as described in the wicket-examples (http://www.wicket-library.com/wicket-examples/upload/single) in my webapplication  in order to realise uploading a file and store this on the server. Furthermore I use the method FileUpload#writeTo(File file). This method is not the fastest solution  if you want to store the file  i think. Why don't you try to rename the file on the system first  before you use Streams.copy.There is the interface FileItem. The method FileItem#write(File file) first tries to rename the file. I recognized a great benefit in performance.Thats why i don't use the class FileUpload anymore  and receive such a FileItem from the request instead  like:final FileItem item = ((IMultipartWebRequest) getRequest()).getFile(fileUploadField.getInputName()); item.write(....", "id": "2833"}, "2852": {"ground_truth": "1", "bug_report": "Palette nested in a ListView results in a NPE when an error feedback is logged when submitting form\nReproducing steps:1. Put TestPage.html and TestPage.java into a wicket application  visit test page.2. Hit the save button and NullPointerException will be thrown indicating the 'ids' field of component Palette$Recorder is not initializedIf taken Palette outside of ListView  the code will work fine. TestPage.html:&lt;!DOCTYPE html PUBLIC '-//W3C//DTD XHTML 1.0 Strict//EN' 'http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd'&gt;&lt;?xml version='1.0' encoding='UTF-8'?&gt;&lt;html xmlns='http://www.w3.org/1999/xhtml'&gt; &lt;head&gt; &lt;meta http-equiv='Content-Type' content='text/html; charset=utf-8'/&gt; &lt;/head&gt; &lt;body&gt; &lt;form wicket:id='form'&gt; &lt;div wicket:id='palettes'&gt; &lt;div wicket:id='palette'&gt;&lt;/div&gt; &lt;/div&gt; &lt;input type='submit' value='save'&gt;&lt;/input&gt; &lt;/form&gt; &lt;div wicket:id='feedback'&gt;&lt;/div&gt; &lt;/body&gt;&lt;/html&gt;TestPage.java:import java.util.ArrayList;import java.util.List;import org.apache.wicket.extensions.markup.html.form.palette.Palette;import org.apache.wicket.feedback.ContainerFeedbackMessageFilter;import org.apache.wicket.markup.html.WebPage;import org.apache.wicket.markup.html.form.Form;import org.apache.wicket.markup.html.form.IChoiceRenderer;import org.apache.wicket.markup.html.list.ListItem;import org.apache.wicket.markup.html.list.ListView;import org.apache.wicket.markup.html.panel.FeedbackPanel;import org.apache.wicket.model.AbstractReadOnlyModel;import org.apache.wicket.model.IModel;public class TestPage extends WebPage { @SuppressWarnings({ 'unchecked'  'serial' }) public TestPage() { Form form = new Form('form') { @Override protected void onSubmit() { error('Please select a value.'); } }; add(form); List&lt;String&gt; list = new ArrayList&lt;String&gt;(); list.add('1'); form.add(new ListView('palettes'  list) { @Override protected void populateItem(ListItem item) { IChoiceRenderer renderer = new IChoiceRenderer() { public Object getDisplayValue(Object object) { return object; } public String getIdValue(Object object  int index) { return (String) object; } }; final List selected = new ArrayList(); IModel model = new IModel() { public Object getObject() { return selected; } public void setObject(Object object) { selected.clear(); selected.addAll((List) object); } public void detach() { } }; IModel choicesModel = new AbstractReadOnlyModel() { @Override public Object getObject() { final List&lt;String&gt; choices = new ArrayList&lt;String&gt;(); choices.add('1'); choices.add('2'); return choices; } }; item.add(new Palette('palette'  model  choicesModel  renderer  10  false)); } }); add(new FeedbackPanel('feedback'  new ContainerFeedbackMessageFilter(this))); }}", "id": "2852"}, "2860": {"ground_truth": "0", "bug_report": "Wrong name for swiss Application.properties\nA 'Application_ch.properties' was generated due fixing Issue: WICKET-743 but the correct language-extension for German/Swiss is '_de_CH' and not '_ch' (witch stands for Chamorro).Fix: rename 'Application_ch.properties' to 'Application_de_CH.properties'.", "id": "2860"}, "2861": {"ground_truth": "0", "bug_report": "getConvertedInput() returns null and selectedValues.addAll tries adding it\nCame across this bug when upgrading from wicket 1.3 to 1.4.7. It occurred when we were clearing a form. Add a null check toselectedValues.addAll(getConvertedInput());in ListMultipChoice:updateModel() because getConvertedInput() can conceivably be null in normal situations.", "id": "2861"}, "2869": {"ground_truth": "0", "bug_report": "RangeValidator should use getMinimum and getMaximum\nCurrently  the RangeValidator uses the fields directly  making it impossible to define a dynamic range by overriding getMinimum and getMaximum. Instead of using the fields directly  the validator should call these methods.", "id": "2869"}, "2891": {"ground_truth": "0", "bug_report": "Typo in IllegalStateException when there are multiple beans of the same type\nI have a test where there are multiple beans of the same type  I received the following exceptionCaused by: java.lang.IllegalStateException: more then one bean of type &#91;MyClassName&#93; found  you have to specify the name of the bean (@SpringBean(name='foo')) in order to resolve this conflict. Matched beans: MyClassNamer$$EnhancerByMockitoWithCGLIB$$f5bd36c9 MyClassNamePlease note how it states 'then' rather than 'than' since the sentence is about multiple things  'than' is the only appropriate word to use.", "id": "2891"}, "2897": {"ground_truth": "0", "bug_report": "Javadoc for AbortWithHttpStatusException class constructor says 'true' when it should say 'false'\nJavadoc for AbortWithHttpStatusException class constructor states: @param statusCodeOptional If true and http status could not be set  an IllegalStateException will be thrownBut the code does: if (!statusCodeOptional) { throw new IllegalStateException( 'This exception can only be thrown from within request processing cycle'); }Obviously  the exception is thrown only if the flag statusCodeOptional is set to false  not true.", "id": "2897"}, "2902": {"ground_truth": "0", "bug_report": "WicketSessionFilter still broken: you can only locate or create sessions in the context of a request cycle\nEver since 1.4.8 (see WICKET-2778 and WICKET-2858) WicketSessionFilter has been broken for me. This basically breaks my wicket application completely as I rely on servlets being able to access my wicket session. For that reason  I think Critical or Blocker is a fair priority for this issue.In 1.4.9 I get the following while reverting to 1.4.7 it works as expected:java.lang.IllegalStateException: you can only locate or create sessions in the context of a request cycle at org.apache.wicket.Session.findOrCreate(Session.java:208) at org.apache.wicket.Session.get(Session.java:252) at com.lyndir.lhunath.snaplog.webapp.SnaplogSession.get(SnaplogSession.java:78) at com.lyndir.lhunath.snaplog.webapp.servlet.ImageServlet.doGet(ImageServlet.java:117) at javax.servlet.http.HttpServlet.service(HttpServlet.java:707) at javax.servlet.http.HttpServlet.service(HttpServlet.java:820) at com.google.inject.servlet.ServletDefinition.doService(ServletDefinition.java:216) at com.google.inject.servlet.ServletDefinition.service(ServletDefinition.java:141) at com.google.inject.servlet.ManagedServletPipeline.service(ManagedServletPipeline.java:93) at com.google.inject.servlet.FilterChainInvocation.doFilter(FilterChainInvocation.java:63) at org.apache.wicket.protocol.http.servlet.WicketSessionFilter.doFilter(WicketSessionFilter.java:150) at com.google.inject.servlet.FilterDefinition.doFilter(FilterDefinition.java:129) at com.google.inject.servlet.FilterChainInvocation.doFilter(FilterChainInvocation.java:59) at org.apache.wicket.protocol.http.WicketFilter.doFilter(WicketFilter.java:363) at com.google.inject.servlet.FilterDefinition.doFilter(FilterDefinition.java:129) at com.google.inject.servlet.FilterChainInvocation.doFilter(FilterChainInvocation.java:59) at com.google.inject.servlet.ManagedFilterPipeline.dispatch(ManagedFilterPipeline.java:122) at com.google.inject.servlet.GuiceFilter.doFilter(GuiceFilter.java:110) at org.mortbay.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1139) at org.mortbay.jetty.servlet.ServletHandler.handle(ServletHandler.java:378) at org.mortbay.jetty.security.SecurityHandler.handle(SecurityHandler.java:216) at org.mortbay.jetty.servlet.SessionHandler.handle(SessionHandler.java:181) at org.mortbay.jetty.handler.ContextHandler.handle(ContextHandler.java:765) at org.mortbay.jetty.webapp.WebAppContext.handle(WebAppContext.java:417) at org.mortbay.jetty.handler.ContextHandlerCollection.handle(ContextHandlerCollection.java:230) at org.mortbay.jetty.handler.HandlerCollection.handle(HandlerCollection.java:114) at org.mortbay.jetty.handler.HandlerWrapper.handle(HandlerWrapper.java:152) at org.mortbay.jetty.Server.handle(Server.java:324) at org.mortbay.jetty.HttpConnection.handleRequest(HttpConnection.java:535) at org.mortbay.jetty.HttpConnection$RequestHandler.headerComplete(HttpConnection.java:865) at org.mortbay.jetty.HttpParser.parseNext(HttpParser.java:539) at org.mortbay.jetty.HttpParser.parseAvailable(HttpParser.java:212) at org.mortbay.jetty.HttpConnection.handle(HttpConnection.java:404) at org.mortbay.io.nio.SelectChannelEndPoint.run(SelectChannelEndPoint.java:409) at org.mortbay.thread.QueuedThreadPool$PoolThread.run(QueuedThreadPool.java:520)", "id": "2902"}, "2918": {"ground_truth": "0", "bug_report": "Use Apache Nexus Maven Repository instead of self hosted maven repository on wicketstuff.org\nAs of June 15  2010 the wicketstuff.org maven repository was down. Instead of fixing the wicketstuff.org server I proposed that the org.apache.wicket artifacts be switched to deploy through the Apache Nexus Maven repository.See this discussion: http://apache-wicket.1842946.n4.nabble.com/proposal-Use-apache-nexus-repository-for-org-apache-wicket-release-and-snapshot-artifacts-tp2256728p2256728.htmlThis page has the registration details: http://www.apache.org/dev/repository-faq.htmlIt says to create a sub issue on this one: https://issues.apache.org/jira/browse/INFRA-1896I think the issue needs to be created by a org.apache.wicket committerThis migration will allow snapshots to be deployed from the apache hudson build cluster into the apache nexus maven repository.There is some kind of switchover that occurs for artifacts that are located through the people at apache method but since wicket artifacts that have been released are in central I see limited impact at this point.Future releases would deploy into this nexus repository which supports staging.I will attach diff's for the trunk 1.5-SNAPSHOT pom.xml and the 1.4.x branch 1.4-SNAPSHOT pom.xml that will create the two additional snapshot and release profiles that can be used for this purpose.", "id": "2918"}, "2919": {"ground_truth": "0", "bug_report": "inconsistency in property expression when using . for self reference\nLet's consider this class :class Container { String string = 'foo'; List&lt;String&gt; strings = Arrays.asList(new String[]{'test'}); }This would work:new PropertyModel&lt;String&gt;(container  '.string').getObject()=&gt; returns 'foo'but this doesn't:new PropertyModel&lt;String&gt;(container  '.strings&#91;0&#93;').getObject()it fails withorg.apache.wicket.WicketRuntimeException: no get method defined for class: class org.demo.PropertyModelTest$Container expression: stringsSimilarly  this doesn't work:new PropertyModel&lt;Container&gt;(container  '.').getObject()exception is :java.lang.StringIndexOutOfBoundsException: String index out of range: 0In the end  should the dot being allowed for self reference ? It's already used as the property separator  so it would be quite misleading.I've attached some proper junit test for these points.", "id": "2919"}, "2932": {"ground_truth": "0", "bug_report": "Modal window titles need to be marked up as such  for accessibility\nThe modal windows are not accessible to screen readers. The titles of the window should be announced to give the contents of the window some context. This is as simple as changing the 'span' that contains the window title to a 'h3' and ensuring the styles are appropriate to match.", "id": "2932"}, "2933": {"ground_truth": "0", "bug_report": "Form.MULTIPART_HINT is not cleared correctly with nested forms\nI have a page that looks like this Page  Form  Wizard (contains another Form)  StepOne - contains a FileUploadField StepTwo - has no FileUploadField      (The outer form is there because I have some controls outside the wizard that needed to submit the wizard too).Because I have been using Ajax ModalDialogs  it has been important to get Form.multipart set correctly (otherwise they don't submit back correctly). So I override Wizard.onActiveStepChanged and checked to see if the new wizard step contained a FileUploadField  and set Form.setMultiPart accordingly. However  this only clears Form.MULTIPART_HARD  Form.MULTIPART_HINT is left untouched.When I step from StepOne to StepTwo  the inner form still has MULTIPART_HINT set as it contained a FileUploadField last render. Then the outer form's onRender fires  which clears MULTIPART_HINT  then the outer form's onComponentTag fires. When it checks isMultiPart()  it evaluates to true as the nested Form still returns true from its MULTIPART_HINT  and therefore tag.put('enctype'  'multipart/form-data'); is executed. After that  the inner form's onRender fires which clears its MULTIPART_HINT.When I try to submit StepTwo  the html has enctype='multipart/form-data'  so it does a multipart submit. But wicket is not expecting a multipart submit so it doesn't find any of the submitted form data  and cannot determine which button is pressed  and loses all the form content.", "id": "2933"}, "2937": {"ground_truth": "0", "bug_report": "AbstractPropertyModel getObjectClass don't consider nested IObjectClassAwareModel targets\nCurrently if AbstractPropertyModel has an target that implements the IObjectClassAwareModel interface  the known class of that target is not used to infer the modeled property type. Requested improvement: use 'target type'+'property expression' to return the property type of the AbstractPropertyModel", "id": "2937"}, "2944": {"ground_truth": "0", "bug_report": "Application addRenderHeadListener causing error\nwhen i try to use addrenderheaderlistener in application with header contributor using methods other than renderonloadjavascript and renderOnDomReadyJavascript i get the exception as ajaxrequesttarget expects  'Only methods that can be called on IHeaderResponse outside renderHead() are renderOnLoadJavascript and renderOnDomReadyJavascriptattaching a quickstart that shows the behavior where ajaxselfupdatingtimer is used. exception as follows :-Only methods that can be called on IHeaderResponse outside renderHead() are renderOnLoadJavascript and renderOnDomReadyJavascriptorg.apache.wicket.WicketRuntimeException: Only methods that can be called on IHeaderResponse outside renderHead() are renderOnLoadJavascript and renderOnDomReadyJavascript at org.apache.wicket.ajax.AjaxRequestTarget$AjaxHeaderResponse.checkHeaderRendering(AjaxRequestTarget.java:872) at org.apache.wicket.ajax.AjaxRequestTarget$AjaxHeaderResponse.renderJavascriptReference(AjaxRequestTarget.java:915) at com.mycompany.WicketApplication$1.renderHead(WicketApplication.java:28) at org.apache.wicket.Application.notifyRenderHeadListener(Application.java:1250) at org.apache.wicket.markup.html.internal.HeaderResponse.&lt;init&gt;(HeaderResponse.java:56) at org.apache.wicket.ajax.AjaxRequestTarget$AjaxHeaderResponse.&lt;init&gt;(AjaxRequestTarget.java:951) at org.apache.wicket.ajax.AjaxRequestTarget.getHeaderResponse(AjaxRequestTarget.java:1018) at org.apache.wicket.ajax.AbstractAjaxTimerBehavior.respond(AbstractAjaxTimerBehavior.java:163) at org.apache.wicket.ajax.AbstractDefaultAjaxBehavior.onRequest(AbstractDefaultAjaxBehavior.java:286) at org.apache.wicket.request.target.component.listener.BehaviorRequestTarget.processEvents(BehaviorRequestTarget.java:119) at org.apache.wicket.request.AbstractRequestCycleProcessor.processEvents(AbstractRequestCycleProcessor.java:92) at org.apache.wicket.RequestCycle.processEventsAndRespond(RequestCycle.java:1250) at org.apache.wicket.RequestCycle.step(RequestCycle.java:1329) at org.apache.wicket.RequestCycle.steps(RequestCycle.java:1428) at org.apache.wicket.RequestCycle.request(RequestCycle.java:545) at org.apache.wicket.protocol.http.WicketFilter.doGet(WicketFilter.java:479) at org.apache.wicket.protocol.http.WicketFilter.doFilter(WicketFilter.java:312) at org.mortbay.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1157) at org.mortbay.jetty.servlet.ServletHandler.handle(ServletHandler.java:388) at org.mortbay.jetty.security.SecurityHandler.handle(SecurityHandler.java:216) at org.mortbay.jetty.servlet.SessionHandler.handle(SessionHandler.java:182) at org.mortbay.jetty.handler.ContextHandler.handle(ContextHandler.java:765) at org.mortbay.jetty.webapp.WebAppContext.handle(WebAppContext.java:418) at org.mortbay.jetty.handler.ContextHandlerCollection.handle(ContextHandlerCollection.java:230) at org.mortbay.jetty.handler.HandlerCollection.handle(HandlerCollection.java:114) at org.mortbay.jetty.handler.HandlerWrapper.handle(HandlerWrapper.java:152) at org.mortbay.jetty.Server.handle(Server.java:326) at org.mortbay.jetty.HttpConnection.handleRequest(HttpConnection.java:542) at org.mortbay.jetty.HttpConnection$RequestHandler.headerComplete(HttpConnection.java:923) at org.mortbay.jetty.HttpParser.parseNext(HttpParser.java:547) at org.mortbay.jetty.HttpParser.parseAvailable(HttpParser.java:212) at org.mortbay.jetty.HttpConnection.handle(HttpConnection.java:404) at org.mortbay.io.nio.SelectChannelEndPoint.run(SelectChannelEndPoint.java:409) at org.mortbay.thread.QueuedThreadPool$PoolThread.run(QueuedThreadPool.java:582)", "id": "2944"}, "2951": {"ground_truth": "0", "bug_report": "Markup for AjaxLazyLoadPanel's is not valid HTML\nThe markup generated for the waiting image is not valid HTML as it lacks an ALT attribute.", "id": "2951"}, "2952": {"ground_truth": "0", "bug_report": "Exposes Application DebugSettings related functionality for JMX\nI think it would be cool if the DebugSettingsMBean exposes every IDebugSettings properties for JMX  I'm sending an patch with the code. outputComponentPath outputMarkupContainerClassName linePreciseReportingOnAddComponentEnabled linePreciseReportingOnNewComponentEnabled developmentUtilitiesEnabled", "id": "2952"}, "2981": {"ground_truth": "0", "bug_report": "Remove HeaderContributor and friends in favor of IHeaderContributor\nRemove HeaderContributor and friends in favor of IHeaderContributor", "id": "2981"}, "2983": {"ground_truth": "0", "bug_report": "Make Component and IBehavior directly implement IHeaderContributor to make things simpler\nMake Component and IBehavior directly implement IHeaderContributor to make things simpler", "id": "2983"}, "2993": {"ground_truth": "0", "bug_report": "ClassCastException when requesting for non-page class\norg.apache.wicket.request.mapper.BookmarkableMapper tries to instantiate Page even for classes which are not Page.Requesting http://localhost:8080/wicket/bookmarkable/com.mycompany.Pojo fails with:ERROR - DefaultExceptionMapper - Unexpected error occurredjava.lang.ClassCastException: com.mycompany.Pojo at org.apache.wicket.session.DefaultPageFactory.newPage(DefaultPageFactory.java:155) at org.apache.wicket.session.DefaultPageFactory.newPage(DefaultPageFactory.java:59) at org.apache.wicket.session.DefaultPageFactory.newPage(DefaultPageFactory.java:43) at org.apache.wicket.Application$2.newPageInstance(Application.java:1425) at org.apache.wicket.request.handler.PageProvider.getPageInstance(PageProvider.java:259) at org.apache.wicket.request.handler.PageProvider.getPageInstance(PageProvider.java:160) at org.apache.wicket.request.handler.render.WebPageRenderer.getPage(WebPageRenderer.java:59) at org.apache.wicket.request.handler.render.WebPageRenderer.renderPage(WebPageRenderer.java:131) at org.apache.wicket.request.handler.render.WebPageRenderer.respond(WebPageRenderer.java:232) at org.apache.wicket.request.handler.RenderPageRequestHandler.respond(RenderPageRequestHandler.java:147) at org.apache.wicket.request.RequestHandlerStack.executeRequestHandler(RequestHandlerStack.java:84) at org.apache.wicket.request.cycle.RequestCycle.processRequest(RequestCycle.java:217) at org.apache.wicket.request.cycle.RequestCycle.processRequestAndDetach(RequestCycle.java:253) at org.apache.wicket.protocol.http.WicketFilter.processRequest(WicketFilter.java:135) at org.apache.wicket.protocol.http.WicketFilter.doFilter(WicketFilter.java:188) at org.mortbay.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1157)  .....", "id": "2993"}, "2995": {"ground_truth": "0", "bug_report": "DateTime bug with a date pattern without separator\nHI I am using wicket-datetime-1.3.7.jarWhen i use a datePattern with a separator dd/MM/yyyy  i get 01/01/2010  it's OK.But when i use the datePattern ddMMyyyy  i get 1110 and it's not correctThe bug is in the substituteDate() method of the wicket-date.js file.I have fixed it. I have attached the fixed method and an example of the problemThanks", "id": "2995"}, "3003": {"ground_truth": "0", "bug_report": "Form.delegateSubmit: invoke onSubmit() of nested Forms before onSubmit() of enclosing Form\nAs has been discussed on the mailing list:http://mail-archives.apache.org/mod_mbox/wicket-dev/201008.mbox/&lt;AANLkTikq2EgstYuoM0OtzNR5PAHfxi=f4djYVoNky-P0@mail.gmail.com&gt;It can be assumed that an enclosing Form in some way or another may depend on the state of an enclosed Form  but that an enclosed Form should never depend on the state of its enclosing Form.Therefore  Form.delegateSubmit should invoke onSubmit() of the nested Forms  depth first  before invoking onSubmit() of the enclosing Form. At the moment  this is the other way around.The attached patch rectifies this situation. Please review and apply if so desired.", "id": "3003"}, "3021": {"ground_truth": "0", "bug_report": "Add timestamp part to resource filenames for better caching\nEven though we have getResourceSettings().setAddLastModifiedTimeToResourceReferenceUrl() this still is far from perfect. It will add a query parameter to resource filenames so caches should invalidate when the parameter changes. However if caching is very aggressive altering the query param might not be enough. Then there will be stale resources left in the cache of the browser or some intermediate proxy. Users will complain and you have to tell them to press F5  clear the cache  or whatever So I decided to implement support for adding the timestamp of the resource as part of the filename.When you have a resource link like &lt;link rel='stylesheet' type='text/css' href='wicket/resource/my.great.app.HomePage/css/style.css'/&gt;a timestamp (the last modified timestamp of the file) will be injected into the base name of the file &lt;link rel='stylesheet' type='text/css' href='wicket/resource/my.great.app.HomePage/css/style-ts1282376261000.css'/&gt;the format is &#91;path-component&#93;* / &#91;base-filename&#93; '-ts' &#91;timestamp-in-milliseconds&#93; (.extension)The prefix '-ts' (TS = timestamp) is to avoid naming conflicts with filenames that already got with a numeric part before the extension.Locales  style and variations are taken into consideration (e.g. style.css  style_de.css  style_en.css)When running your test cases the MockApplication which WicketTester provides in the default case has timestamps disabled so you can check you rendered markup against some predictable url.You can control and check timestamp behavior with getResourceSettings().setUseTimestampOnResources()and  getResourceSettings().getUseTimestampOnResources()Default behavior is 'enabled'You are now able to configure your resource caching for a very large lifetime (say 'infinite'  and get the best possible network performance and utilization of proxies.", "id": "3021"}, "3038": {"ground_truth": "0", "bug_report": "Return the possibility to create custom WebRequest/WebResponse per Application\nIn Wicket 1.4 there is org.apache.wicket.protocol.http.WebApplication.newWebRequest(HttpServletRequest) and org.apache.wicket.protocol.http.WebApplication.newWebResponse(HttpServletResponse). These are removed in current 1.5 code and there is no way to use org.apache.wicket.extensions.ajax.markup.html.form.upload.UploadWebRequest for example.See wicket-examples &gt; upload.", "id": "3038"}, "3039": {"ground_truth": "1", "bug_report": "WicketServlet failes to initialise with NullPointerException in WebXmlFile.getFilterPath()\njava.lang.NullPointerException: null at org.apache.wicket.util.file.WebXmlFile.getFilterPath(WebXmlFile.java:148) ~&#91;wicket-util-1.5-SNAPSHOT.jar:1.5-SNAPSHOT&#93; at org.apache.wicket.util.file.WebXmlFile.getFilterPath(WebXmlFile.java:77) ~&#91;wicket-util-1.5-SNAPSHOT.jar:1.5-SNAPSHOT&#93; at org.apache.wicket.util.file.WebXmlFile.getFilterPath(WebXmlFile.java:60) ~&#91;wicket-util-1.5-SNAPSHOT.jar:1.5-SNAPSHOT&#93; at org.apache.wicket.protocol.http.WicketFilter.init(WicketFilter.java:264) ~&#91;wicket-1.5-SNAPSHOT.jar:1.5-SNAPSHOT&#93; at org.apache.wicket.protocol.http.WicketServlet.init(WicketServlet.java:254) ~&#91;wicket-1.5-SNAPSHOT.jar:1.5-SNAPSHOT&#93; at javax.servlet.GenericServlet.init(GenericServlet.java:241) ~&#91;servlet-api-2.5.jar:2.5&#93;WebXmlFile.getFilterPath tries to retrieve the url-pattern of filter-mapping/filter-name... but in the case of a servlet  filter-mapping does not exists... it should be serlvet-mapping/servlet-name.", "id": "3039"}, "3053": {"ground_truth": "0", "bug_report": "WicketTester does not preserve the form component values when submitting with AjaxSubmitLink\nSee this thread:http://apache-wicket.1842946.n4.nabble.com/Url-parameters-removed-onClick-wrong-url-encoding-td2541831.htmlAgain you can take a legup project (with Guice 2.0) and substitute the wicket versions -&gt; the test tester.assertModelValue('text'  'sayHello');will fail: expected:&lt;sayHello&gt; but was:&lt;Hello null&gt;", "id": "3053"}, "3067": {"ground_truth": "0", "bug_report": "The new mappers ignore single query parameter with empty value\nMaking request like http://host:port/?paramName= will result in empty PageParameters.The problem is in org.apache.wicket.request.mapper.AbstractMapper.extractPageParameters(Request  int  IPageParametersEncoder) because it skips the first parameter if its value is empty.This is made because most of the time this is the PageComponentInfo part of the URL.", "id": "3067"}, "3075": {"ground_truth": "0", "bug_report": "AJAX file upload fails in IE8 due to Wicket.Ajax.handleMultipart() sniffing wicket:body tags as an HTML body element when running Wicket in development mode\nTo reproduce:1. Run provided quickstart project2. Open in IE8. 3. Upload a file. Expected behaviour: File is uploaded  and some basic information about uploaded file is displayed.Observed behaviour:IllegalStateException is thrown.The IllegalStateException is being thrown because the form is being submitted as a normal form. This is because the JS in handleMultipart that traverses up the DOM looking for the actual form is checking tagnames  and in IE8  the tagName of a &lt;wicket:body&gt; is body  so as soon as it hits a wicket:body  it returns false. I've provided a patch that checks for identity against document.body - an alternative is to check that the form.tagUrn is empty  as it would be for a normal HTML element.", "id": "3075"}, "3083": {"ground_truth": "0", "bug_report": "Broken AbstarctCalendar dependency\norg.apache.wicket.extensions.yui.calendar.AbstractCalendarmethod contributeDependenciesadd(HeaderContributor.forJavaScript(YuiLib.class  'yahoo-dom-event/yahoo-dom-event.js'));there is no yahoo-dom-event directory  just yahoodomeventso AbstractCalendar fails with js error onYAHOO.namespace('wicket');", "id": "3083"}, "3097": {"ground_truth": "0", "bug_report": "isTemporary behavior and ajax behavior together crashes with WicketRuntimeException: Couldn't find component behavior.\nMy scenario:1. Component has 2 behaviors: first is temporary and second is ajax behavior.2. Url for Ajax behavior contains behavior's index (e.g.../page?1-1.IBehaviorListener.1-form-text)2. Temporary behavior is removed in detachBehaviors method.3. Ajax request is invoking ListenerInterfaceRequestHandler and it'slooking for behavior on non-existing indexThis scenario causes error on wicket 1.5-M2.1", "id": "3097"}, "3101": {"ground_truth": "0", "bug_report": "No exceptionpage on exceptions during ajax\nstart the quickstart and wait to see error occuring in console  ajax just stops in browser (nothing is indicating the error)", "id": "3101"}, "3103": {"ground_truth": "0", "bug_report": "RequestCycle logs something  when its intended for servlet container\nI have something where I reference an image directly in html  wicket has no idea what it should do with it so it passes the request to the servlet container.. It works as I wanted  but should it give an error message?html: &lt;img src='/images/icons/arrow_down_end.png'/&gt;Log:ERROR &#91;org.apache.wicket.request.cycle.RequestCycle&#93; - Unable to execute request. No suitable RequestHandler found. URL=images/icons/arrow_down_end.png", "id": "3103"}, "3125": {"ground_truth": "0", "bug_report": "Add IRequestListener interface to allow easier framework extension points\nSee http://apache-wicket.1842946.n4.nabble.com/Session-attach-tp3004389p3004681.htmlBasically  add an interface for onBeginRequest and onEndRequest that can be plugged into the WebRequestCycle. This allows framework extensions to plugin their listeners rather than extending WRC  and requiring that you then extend them.", "id": "3125"}, "3127": {"ground_truth": "0", "bug_report": "Adding node to a collapsed tree node should not cause it to expand\nThe fix for WICKET-3112 made a unwanted minor modification to the Tree behavior that was established in WICKET-2886.Adding a child to a tree node that already has children and that is currently collapsed now causes the parent node to expand so that all the children are displayed. Only adding the first child to a node should cause it to expand  in all other cases the state of the parent node should not change.", "id": "3127"}, "3134": {"ground_truth": "0", "bug_report": "Commons logging must die\nIn wicket 1.4 (and possibly 1.5) we still depend on commons-logging (and version 1.1 at that)  which not only includes strange logging dependencies from the long departed Avalon project  but also other stuff we really don't want to have. (looking at spring-all-2.5.6 as the main culprit here).", "id": "3134"}, "3143": {"ground_truth": "0", "bug_report": "No Exception page are rendered when using ajax\nWhen using ajax no exception page are rendered if an exception occurs.Just start the quickstart here : https://issues.apache.org/jira/browse/WICKET-3142And select something ind the dropdown", "id": "3143"}, "3148": {"ground_truth": "0", "bug_report": "Dropped support for Servlet 2.5 inadvertently\nFixing 3146 in r1031086 resulted in introducing a dependency on javax.servlet.annotation.* thus rendering WicketFilter unusable in pre-3.0 servlet containers.If pruning the large base of 2.5-compatible containers was intentional then I'd also suggest switching to java 6 (Although servlet 3.0 specs does not explicitly indicate java 6 as a requirement  all 3.0 compliant containers that I'm aware of - namely Jetty 8  Websphere 8  tomcat 7  glassfish 3 - require java 6). Not to mention that this should be spoken out loud (https://cwiki.apache.org/WICKET/migration-to-wicket-15.html does not mention anything about container compliance)", "id": "3148"}, "3154": {"ground_truth": "0", "bug_report": "test for undefined in the  same manner throughtout the code.\ntesting whether a variable is undefined should be done in a similar manner throughout a file.", "id": "3154"}, "3161": {"ground_truth": "0", "bug_report": "Can not create cookies\nHi I'm migrating to wicket 1.5-M3 and I've encountered a problem. I can not create cookies (I presume that I can't delete them either).I've looked through the source code and this is what I found:I add the cookie to the response and I end up with a nice HeaderBufferingWebResponse which contains BufferedWebResponse$AddCookieAction.But then redirectTo(Url  RequestCycle) from WebPageRenderer class is called. Here is the method: private void redirectTo(Url url  RequestCycle requestCycle) { WebResponse response = (WebResponse)requestCycle.getResponse(); String relativeUrl = requestCycle.getUrlRenderer().renderUrl(url); response.reset(); response.sendRedirect(relativeUrl); }response.reset(); - removes all actions from the request.So after this method my request has got only BufferedWebResponse$SendRedirectAction.", "id": "3161"}, "3163": {"ground_truth": "0", "bug_report": "support building wicket offline by resolving DTD references locally\nWicket developers  please give me some comment on this:Some wicket test cases parse XML which refers to an external DTD. An example is org.apache.wicket.protocol.http.WicketFilterTestIt refers to org.apache.wicket.util.file.WebXmlFile will will parse a custom web.xml.The web.xml will make the parser to look up http://java.sun.com/dtd/web-app_2_3.dtdWhen building wicket offline this will cause a network error and the test will fail.I would like to add  org.apache.wicket.util.xml.LocalEntityResolverwhich may contain a set of local entitites to avoid hitting the network.As wicket 1.5 is getting close to final I would like to get some feedback first before putting that into trunk...By adding this like to WebXmlFile network lookup would be avoided. DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance(); DocumentBuilder builder = factory.newDocumentBuilder(); builder.setEntityResolver(LocalEntityResolver.getDefault()); // no more network lookups Document document = builder.parse(is);----------------------------------------------------package org.apache.wicket.util.xml;import org.apache.wicket.util.lang.Args;import org.xml.sax.EntityResolver;import org.xml.sax.InputSource;import org.xml.sax.SAXException;import javax.servlet.Filter;import java.io.IOException;import java.io.InputStream;import java.util.HashMap;import java.util.Map;/** entity resolver that tries to locate a document type definition (DTD) using a set of custom entity resolvers * @author pete */public class LocalEntityResolver implements EntityResolver{ private final Map&lt;EntityKey  EntityLocator&gt; entities = new HashMap&lt;EntityKey  EntityLocator&gt;(3); public static LocalEntityResolver getDefault() { LocalEntityResolver resolver = new LocalEntityResolver(); // // look up servlet 2.3 web.xml DTD right from inside servlet-api.jar // resolver.put(new EntityKey('-//Sun Microsystems  Inc.//DTD Web Application 2.3//EN'  'http://java.sun.com/dtd/web-app_2_3.dtd')  new ServletApiEntityLocator('web-app_2_3.dtd')); return resolver; } public void put(EntityKey key  EntityLocator locator) { Args.notNull(key  'key'); Args.notNull(locator  'locator'); entities.put(key  locator); } public InputSource resolveEntity(String id  String url) throws SAXException  IOException { for (Map.Entry&lt;EntityKey  EntityLocator&gt; entry : entities.entrySet()) if (entry.getKey().id.equals(id) || entry.getKey().url.equals(url)) return entry.getValue().locateInputSource(); return null; } public static class EntityKey { private final String id; private final String url; private EntityKey(String id  String url) { Args.notEmpty(id  'id'); Args.notEmpty(url  'url'); this.id = id; this.url = url; } @Override public boolean equals(Object o) { if (this == o) return true; if (!(o instanceof EntityKey)) return false; EntityKey key = (EntityKey) o; if (!id.equals(key.id)) return false; return url.equals(key.url); } @Override public int hashCode() { int result = id.hashCode(); result = 31 * result + url.hashCode(); return result; } } public static interface EntityLocator { InputSource locateInputSource() throws SAXException  IOException; } public static class ServletApiEntityLocator implements EntityLocator { private final String name; private ServletApiEntityLocator(String name) { this.name = name; } public InputSource locateInputSource() { InputStream stream = Filter.class.getResourceAsStream('resources/' + name); if (stream == null) return null; return new InputSource(stream); } }}", "id": "3163"}, "3164": {"ground_truth": "0", "bug_report": "executeAjaxEvent in WicketTester works although Component is not enabled\nWhen Component is disabled the executeAjaxEvent still works. Because it's not checking if Component is enabled.But the event attribute is not rendered to the component if it's disabled.", "id": "3164"}, "3167": {"ground_truth": "0", "bug_report": "Strange IResourceStream type hierarchy\nCurrent type hierarchy looks likeIResourceStream IStringResourceStream AbstractResourceStream AbstractStringResourceStreamIt propobly should rather beIResourceStream AbstractResourceStream IStringResourceStream AbstractStringResourceStream", "id": "3167"}, "3169": {"ground_truth": "0", "bug_report": "Parametrize IFilterStateLocator\nInterface org.apache.wicket.extensions.markup.html.repeater.data.table.filter.IFilterStateLocator contains methods which work with Object types. It may be a good improvement to parametrize this interface with type &lt;T&gt; much like the IModel &lt;T&gt;interface in order to introduce type-safety and avoid casting.", "id": "3169"}, "3177": {"ground_truth": "0", "bug_report": "Chunk.slice seq.subList(pos  pos) returns empty list so why bother\nIn the method Chuck.splice when count &lt;= 0 the following code is exectued:return new ArrayList&lt;T&gt;(seq.subList(pos  pos));Well  seq.subList(pos  pos) returns an empty list so you might want tochange the line to be something like:return new ArrayList&lt;T&gt;();", "id": "3177"}, "3178": {"ground_truth": "0", "bug_report": "Correctness of tests is order dependent  ThreadContext.detach not always called\nI have my own build/test env for Wicket and the order in which tests are executed are not necessarily the same as the order that Maven drivesthe tests in the standard test env.If you can manage to run only the testsorg.apache.wicket.request.cycle.RequestCycleListenerTest testBasicOperationsfollowed by test org.apache.wicket.request.mapper.BasicResourceReferenceMapperTest testDecode1the BasicResourceReferenceMapperTest test will fail because itrequires that the ThreadContext have NO application  but theRequestCycleListenerTest does not have a tearDown methodthat calls ThreadContext.detach (nor does it use the BaseWicketTesterwith its tearDown method) so it leaves an application in the ThreadContext.Also  BasicResourceReferenceMapperTest does not use theBaseWicketTester which calls detach in its constructor.The solution is to add the following to BasicResourceReferenceMapperTestprotected void setUp() { org.apache.wicket.ThreadContext.detach(); }In my test env it is simply two lines in a property file to have only the abovetwo tests execute (and in the order specified). Don't know how to do that in Maven.", "id": "3178"}, "3194": {"ground_truth": "0", "bug_report": "IResourceSettings.setUseTimestampOnResources(true) and performance\nHello  I had a problem with slow loading of pages and response to ajax requests. After some debugging I traced the problem to be that wicket constantly tries: DEBUG - UrlResourceStream - cannot convert url: jar:file:/C:/Users/hok/.m2/repository/org/apache/wicket/wicket/1.5-M3/wicket-1.5-M3.jar!/org/apache/wicket/markup/html/wicket-event.js to file (URI is not hierarchical)  falling back to the inputstream for polling DEBUG - ResourceStreamLocator - Attempting to locate resource 'org/apache/wicket/markup/html/wicket-event_en_US.js' on path [folders = []  webapppaths: []] DEBUG - ResourceStreamLocator - Attempting to locate resource 'org/apache/wicket/markup/html/wicket-event_en_US.js' using classloader sun.misc.Launcher$AppClassLoader@cac268 and this happens because that by default (or at least I think so) wicket adds timestamp on the resources - ResourceSettings.setUseTimestampOnResources(true) and every resource is read from the jar files on every request. When a resource is in a jar file a java.lang.IllegalArgumentException: URI is not hierarchical is thrown in the UrlResourceStream constructor and a lot of attempts are made to load the jar file through different loaders. In my case this led to a slow response times. After disabling timestamp on resources (ResourceSettings.setUseTimestampOnResources(false)) the problem disappears and the performance is fine. However in the javadoc of setUseTimestampOnResources: Enabling timestamps on resources will inject the last modification time of the resource into the filename (the name will look something like 'style-ts1282915831000.css' where the large number is the last modified date in milliseconds and '-ts' is a prefix to avoid conflicts with filenames that already contain a number before their extension. * Since browsers and proxies use the filename of the resource as a cache key the changed filename will not hit the cache and the page gets rendered with the changed file.In this case this useful functionality is lost. Is it possible to have 'the best of both worlds'? Thanks.This issue is raised from the discussion:http://apache-wicket.1842946.n4.nabble.com/IResourceSettings-setUseTimestampOnResources-true-and-performance-td3057946.htmlTo observe the performance improvement  please changegetResourceSettings().setUseTimestampOnResources(true);togetResourceSettings().setUseTimestampOnResources(false);in TestApplication. It's most obvious when you press Refresh All link and observe the time for the refresh in both cases", "id": "3194"}, "3200": {"ground_truth": "0", "bug_report": "Form  containing FileUploadField and UploadProgressBar throws an exception when removed from the parent\nThere is a form which contains FileUploadField  UploadProgressBar and a submit button. The form is added to a WebMarkupContainer. When the form is removed from the WebMarkupContainer an exception is thrown: java.lang.IllegalStateException: Tried to remove a behavior that was not added to the component. Behavior: org.apache.wicket.extensions.ajax.markup.html.form.upload.UploadProgressBar$FormEnabler@1d433c1This can be observed in the attached quickstart.", "id": "3200"}, "3207": {"ground_truth": "0", "bug_report": "Localizer.substitutePropertyExpressions() is called twice when Localizer.getString() is called\nWhen you call getString() on a component this component calls Localizer.getString(). This method then calls Localizer.getStringIgnoreSettings() which calls Localizer.substitutePropertyExpressions() for the first time. The return value of getStringIgnoreSettings() is then again passed to substitutePropertyExpressions().Actually I'm not sure if this is a bug or if this is desired behaviour  but it can lead to problems if you throw an Exception when a resource cannot be found and the value that is put into a string is  for whatever reason  in the format ${foobar}.", "id": "3207"}, "3212": {"ground_truth": "0", "bug_report": "WicketTester can't create new sessions\nIt looks like currently there is no way to create a new session (e.g. execute Application#newSession through WicketTester).My test case would be something like this: create a session set a configuration option with a form invalidate session create new session assert that the session#getStyle now returns something elseIn wicket-1.4 this was possible with WicketTester#createRequestCycle  but that is gone now.Workaround: create a new WicketTester  which will force to create a new session.", "id": "3212"}, "3215": {"ground_truth": "0", "bug_report": "AutoCompleteTextField does not work in an iframe under IE 6  7 or 8\nThe code that has been integrated in version 1.4.11 to fix issue WICKET-2279 forces the cursor of an AutoCompleteTextField to do a 'carriage return' after each typed in char when the application runs in an iframe and IE 6  7 or 8 is used.", "id": "3215"}, "3217": {"ground_truth": "0", "bug_report": "DatesPage test LocaleDropDownChoice getObject calls getSelectedLocale()  does not use result\nIn the DatesPage test  the LocaleDropDownChoice.getObject() method callsgetSelectedLocale() but does not use the result: public List&lt;Locale&gt; getObject() { getSelectedLocale(); List&lt;Locale&gt; locales = new ArrayList&lt;Locale&gt;(LOCALES); Collections.sort(locales  new Comparator&lt;Locale&gt;() { public int compare(Locale o1  Locale o2) { return o1.getDisplayName(selectedLocale).compareTo( o2.getDisplayName(selectedLocale)); } }); return locales; }I would guess that the call getSelectedLocale() could be removed", "id": "3217"}, "3222": {"ground_truth": "0", "bug_report": "AbstractMarkupParser doesn't remove Comments correctly\nAbstractMarkupParser removeComment(...) doesn't remove Comments correctlyif two html comments stand to close together &lt;Unable to render embedded object: File (-- foo --&gt; &lt;) not found.-- bar --&gt;foo will be removed but not bar.see:https://github.com/mafulafunk/wicketCommentsgit@github.com:mafulafunk/wicketComments.git", "id": "3222"}, "3227": {"ground_truth": "0", "bug_report": "Complete documentation of Component Lifecycle\nPlease update javadoc for component lifecycle  it misses important hooks like onBeforeRender()  onInitialize() and onConfigure().", "id": "3227"}, "3232": {"ground_truth": "0", "bug_report": "In extensons CaptchaImageResource render method  while loop does not loop\nIn the extensons CaptchaImageResource render method  the while-loop:while(true){....return toImageData(image);}can be removed.", "id": "3232"}, "3239": {"ground_truth": "0", "bug_report": "for stateless pages wicket complains with 'The Buffered response should be handled by BufferedResponseRequestHandler'\nwhen initially rendering a _stateless_ page I get 'The Buffered response should be handled by BufferedResponseRequestHandler'it's logged by WebPageRenderer#respond(cycle) in line 185 in trunk.I don't know if this really is worth a warning  maybe we can just remove it.There's also method WebPageRenderer#enableRedirectForStatelessPage()which seems to be somehow involved (and still contains a TODO which probably should be resolved before 1.5.0)I would like to fix it for myself but don't know much about the background of that warning.", "id": "3239"}, "3240": {"ground_truth": "0", "bug_report": "AnnotationsRoleAuthorizationStrategy isInstantiationAuthorized package==false  class==true returns true\nIn the class AnnotationsRoleAuthorizationStrategy's isInstantiationAuthorized method ifthe package authorization is false but the class authorization is true  then the userwill be authorized.Maybe  check the class authorization only if the authorized variable is true.", "id": "3240"}, "3253": {"ground_truth": "0", "bug_report": "NPE with nested property models\nAfter updated from 1.4.8 to 1.4.14 I got this bug.The problem is with nested property models where the 'top' model has a null model object that is bound to a TextField. You get a NPE when the page is rendered. There is a quick workaround by overriding getOjbectClass() on the property model.I provide a running example of the problem.", "id": "3253"}, "3257": {"ground_truth": "0", "bug_report": "Add restartResponseAtSignInPage() Method to AuthenticatedWebApplication\nI have a situation where I need to be able to get the sign in page class outside the context of the AuthenticatedWebApplication class itself (or a subclass). Basically  I've got a Spring Security framework that's going to register a custom exception mapper (that wraps the default one). If it sees an AuthenticationCredentialsNotFoundException  it needs to throw a RestartResponseAtInterceptPage(getSignInPage()). Can we add a method that does that? Patch coming...", "id": "3257"}, "3279": {"ground_truth": "0", "bug_report": "ModalWindow title not visible\nThe title of a Modal window is not shown.", "id": "3279"}, "3280": {"ground_truth": "0", "bug_report": "IResponseFilter doesn't work in 1.5\nIn current 1.5-SNAPSHOT there are no callers of org.apache.wicket.settings.IRequestCycleSettings.getResponseFilters() and thus filters are never executed.", "id": "3280"}, "3286": {"ground_truth": "0", "bug_report": "DropDownChoice:  'data' or 'choices?'\nIn DropDownChoice  sometimes the constructor argument is called 'data' and sometimes 'choices.' These look like the same parameter; wouldn't it be better to give the same parameter the same name across all the constructors?", "id": "3286"}, "3295": {"ground_truth": "0", "bug_report": "Please use lists instead of arrays\nI'm working with 1.5-M3.In most places  indexed collections are lists. But in a few places they're arrays  which creates awkward integrations for various reasons. The ones that I've noticed are:1. DataTable accepts an IColumn&lt;T&gt;[] as a parameter  which is a pain to construct because it's impossible to create a generic array. Instead one has to create a non-generic array (in other words an IColumn[]) or create a list of IColumn&lt;T&gt; and then convert it to an array. Either approach involves suppressing some warning and is unfriendly to developers who don't grok the ins and outs of using arrays and generics together. If DataTable just accepted List&lt;IColumn&lt;T&gt;&gt;  like DataGridView (which takes List&lt;ICellPopulator&lt;T&gt;&gt;)  then the issue will go away. If DataTable wants to use an array internally  then it can do the conversion itself.2. In the new AbstractMapper and several subclassses  the mount path is represented as a String[]. But this collection has to intergrate with the Url class  which represents the same concept as a List&lt;String&gt;. Why not just use List&lt;String&gt; and make it a little easier for everyone to write AbstractMapper implementations?", "id": "3295"}, "3296": {"ground_truth": "0", "bug_report": "Url should accept null parameters list\nIt's more natural to pass null than an empty list if there are no query parameters. It would be a simple change since Url just copies the parameters into its own list: if it's null then just don't copy. public Url(List&lt;String&gt; segments  List&lt;QueryParameter&gt; parameters  Charset charset) { Args.notNull(segments  'segments'); // Remove: Args.notNull(parameters  'parameters'); this.segments.addAll(segments); if (parameters != null) this.parameters.addAll(parameters); setCharset(charset); }", "id": "3296"}, "3309": {"ground_truth": "0", "bug_report": "unable to add nodes to an empty rootless Tree (e.g. LinkTree)\n2 scenarios which adding new nodes (via ajax) to a rootless Tree is not working as expected.the node is getting added to the treemodel but non is displayed.1) adding a node to the rootnode. the newly added node is not displayed.2) the rootless tree already has a node. if you add additional nodes to the root node  they will be displayed (compare to 1)  if you add an additional node to one of the added nodes  the complete tree will disappear.see attached quickstart", "id": "3309"}, "3310": {"ground_truth": "0", "bug_report": "Multiple language support for UploadProgressBar\nUp to now the Feedback (e.g. 'Upload starting'  '15 Minutes remaining'  etc.) is hardcoded into the progressbar.js and therefore doesn't support multiple languages.", "id": "3310"}, "3319": {"ground_truth": "0", "bug_report": "AjaxEditableMultilineLabel generates invalid HTML\nWhen using an AjaxEditableMultilineLabel  the generated markup looks like:&lt;span onclick='&#91;...&#93;'&gt;&lt;p&gt;1st paragraph&lt;/p&gt;&lt;p&gt;2nd paragraph&lt;/p&gt;&lt;/span&gt;This is invalid according to HTML spec (block elements (p) are not allowed within inline elements (span)).AjaxEditableMultilineLabel should be using a &lt;div&gt; element instead of the &lt;span&gt;.", "id": "3319"}, "3321": {"ground_truth": "0", "bug_report": "Ajax submit  link does not show busy indicator under IE\nWhen form is sumbitted via link inside form then busy indicator is not shown under IE.The problem occurs only when form was earlier refreshed via ajax.", "id": "3321"}, "3322": {"ground_truth": "0", "bug_report": "Patches to correct some Findbugs warnings in core  request and util\nThe patches contain fixes mainly for the followings: only java files in main source directories of core  request and util were touched (so test not) only those were fixed that looked straightforward and locally fixable fixing cases that always result in NPE (2 found) or ClassCastException (1 found) unused local variable  dead store removals redundant instanceof check  nullcheck removals added transient to non serializable fields of serializable classes made inner classes static where the reference to the enclosing classes was not used some extra null checks added with WeakReference usages to avoid NPE 'File#delete() return value not checked': using wickets Files#remove() instead small performance related tasks: using StringBuilder in loop  using map entrySet() instead of keySet() + get()I added some comments to the patches where I tought it is not easy to figure out without the findbugs report why the code was changed. But of course I can explain if other questions arise.", "id": "3322"}, "3323": {"ground_truth": "0", "bug_report": "TreeTable should call attachUpdate javascript on domready event.\nSince Wicket-1.4.15 it is possible to filter javascript resources (JavascriptFilteredIntoFooterHeaderResponse) and place them to the tail of HTML document. It means that some embedded javascript can be broken because of too early evaluation and missing dependencies.I have faced with this problem in TreeTable component. But probably there are other places in the framework  affected by this issue.", "id": "3323"}, "3337": {"ground_truth": "0", "bug_report": "Url to the home page is not correct when the current base url has only one segment\nThe link 'go back' in all Ajax examples in wicket-examples is not correct.In details: 1) current base url looks like : autocomplete?0 (i.e. one segment + one query parameter) 2) 'go back' points to the application home page (Index.class) 3) RequestCycle.mapUrlFor(IRequestHandler) creates Url('') for the home page 4) UrlRenderer.renderUrl(homePageUrl) incorrectly returns '' instead of '.' for this input", "id": "3337"}, "3344": {"ground_truth": "0", "bug_report": "Upgrade jetty version to 7.2\nJetty 6 is a dead end  and servlet api 2.3 is so 2003  it is time to cut the bilical cord and move to at least servlet api 2.5 (which is from januari 2007) so we can run our examples using jetty 7.", "id": "3344"}, "3351": {"ground_truth": "0", "bug_report": "Add class for span with text in wicket-extensions/treetable\nCould you  please  add class 'text' for a span with wicket:id='label' to markup in wicket-extensions/org/apache/wicket/extensions/markup/html/tree/table/TreeTable.html as it is done in wicket-extension/org/apache/wicket/extensions/markup/html/tree/table/TreeTable$TreeFragment.html", "id": "3351"}, "3353": {"ground_truth": "0", "bug_report": "'wicket' Maven module brings the other three wicket modules as transitive dependencies\nThe new three-in-one Maven module 'wicket' brings -core  -util and -request as transitive dependencies.This way if the user app depends on 'wicket' then it will get wicket.jar  wicket-util.jar  wicket-request.jar and wicket-core.jar in its WEB-INF/lib/ folder.", "id": "3353"}, "3354": {"ground_truth": "0", "bug_report": "Improve SerializableChecker message\nCurrently if the object has an problematic implementation of equals method  the serializable checker will stop its work with an runtime exception. The best would be just log an warn explaining the the problem on console and continue the checks until the non serializable source of the problem.", "id": "3354"}}}