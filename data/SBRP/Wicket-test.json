{"Wicket": {"3361": {"ground_truth": "0", "bug_report": "Validation Error on AjaxEditableLabel causes ajax calls in loop on Chrome Browser\nOn Chrome  the component AjaxEditableLabel causes an infinite ajax call's loop if there is an validation error on the input.The attached project shows this bug (Enter 'false' to reproduce the bug  and tape any key to stop it).On Firefox  everithing is OK.", "id": "3361"}, "3365": {"ground_truth": "0", "bug_report": "1.5-RC1 sources seem to be missing in Maven repository\nI saw a 1.5-RC1 build here:http://repo1.maven.org/maven2/org/apache/wicket/wicket/1.5-RC1/but it looks like the sources are missing. There are source jar files  but they don't contain any classes. Was that intentional or is something wrong with the build process?", "id": "3365"}, "3370": {"ground_truth": "0", "bug_report": "Extend multiple file handling to IMultipartWebRequest\nHTML 5 allows a new attribute with file input tags called 'multiple ' which lets the user choose multiple files to upload. It works for me in Safari 4 and Firefox 3.6. It probably works in Chrome and probably doesn't work in IE (like everything else).So I set about creating a MultiFileUploadField that uses a List&lt;FileUpload&gt; as its model. Unfortunately it looks like while MultipartServletWebRequestImpl does a fine job of parsing out each file in the multi-file upload  the IMultipartWebRequest interface isn't up to the task: it assumes that each field only has one file.I think that it would be straightforward to make IMultipartWebRequest map field names to List&lt;FileItem&gt; instead of just FileItem. The existing FileUpload field (and indeed any other user of this interface) could just use the first FileItem in the list  or the last  if it really wanted to reproduce the existing behavior exactly (in which each new file for some field 'f' overwrites the previous one in the map  leaving the last).Alternately there could be a couple of new methods:public Map&lt;String  List&lt;FileItem&gt;&gt; getFileLists();public List&lt;FileItem&gt; getFileList(final String fieldName);with the other two methods retaining the old behavior.", "id": "3370"}, "3380": {"ground_truth": "0", "bug_report": "HttpsMapper and BookmarkablePageLink\nThere is a wicket Application which is configured to use HttpsMapper. There are two page: TestPage and TestPage2. TestPage uses @RequireHttps  TestPage2 doesn't. Each page contains a BookmarkablePageLink to the other one. However in this configuration (one with @RequireHttps and one without) the links on the pages are pointing to the page they are added to - the link in TestPage links to TestPage itself (and not to TestPage2) and vice versa. When both of the pages use @RequireHttps or not using it at all the links work normally.", "id": "3380"}, "3384": {"ground_truth": "0", "bug_report": "Comment: org.apache.wicket.util.upload.RequestContext interfsace to interface\nChange comment from:Abstracts access to the request information needed for file uploads. This interfsace should betoAbstracts access to the request information needed for file uploads. This interface should be", "id": "3384"}, "3388": {"ground_truth": "0", "bug_report": "Incorrect casts to AuthenticatedWebSession in AuthenticatedWebApplication class\nAfter resolving bug WICKET-2971  several methods in AuthenticatedWebApplication still contain casts to AuthenticatedWebSession instead of casts to AbstractAuthenticatedWebSession. It makes AuthenticatedWebApplication not reusable with custom implementations of AbstractAuthenticatedWebSession class. Several cosmetic changes in code and javadoc should be done.", "id": "3388"}, "3394": {"ground_truth": "0", "bug_report": "org.apache.wicket.request.mapper.parameter.PageParameters Comment\norg.apache.wicket.request.mapper.parameter.PageParameters Change:@deprecated use varios setter methods to set parametersto@deprecated use various setter methods to set parameters", "id": "3394"}, "3408": {"ground_truth": "0", "bug_report": "Add wicket version to initial page in wicket-examples\nThe wicket-examples show the wicket version when you click on a sub page but not on the initial page.I didn't notice the version showing in the DebugBar until after I created this patch.I added in a new HomePageApplication that receives the initial request instead of the static index.html file.", "id": "3408"}, "3412": {"ground_truth": "0", "bug_report": "RememberMe doesn't remember me\nWhen remember me is checked a cookie with crypted username and password should be set I think. But no cookie was set. So when the browser is closed and opened again I was asked again for username and password.", "id": "3412"}, "3415": {"ground_truth": "0", "bug_report": "1.5 equivalant of protected void WebRequestCycle.onRequestTargetSet(IRequestTarget requestTarget) is mising from AbstractRequestCycleListener\nThere is not method equivalent to WebRequestCycle.onRequestTargetSet(IRequestTarget requestTarget) in AbstractRequestCycleListener.", "id": "3415"}, "3419": {"ground_truth": "0", "bug_report": "org.apache.wicket.util.collection.MultiMap addValue\nfor org.apache.wicket.util.collection.MultiMap addValue methodchange from: public void addValue(final K key  final V value) { List&lt;V&gt; list = get(key); if (list == null) { list = new ArrayList&lt;V&gt;(1); } list.add(value); put(key  list); }to: public void addValue(final K key  final V value) { List&lt;V&gt; list = get(key); if (list == null) { list = new ArrayList&lt;V&gt;(1); put(key  list); } list.add(value); }", "id": "3419"}, "3420": {"ground_truth": "0", "bug_report": "javascript with a less than character ('<') fails to execute when added through a header contribution in ajax response\nThis is adapted from a wicket users post I made (links are to the same thread in two archive systems):http://markmail.org/search/?q=wicket%20users%20wicket-ajax.js#query:wicket%20users%20wicket-ajax.js+page:1+mid:rfts3ar3upffhbbt+state:resultshttp://mail-archives.apache.org/mod_mbox/wicket-users/201102.mbox/%3CAANLkTi=EkmTA0RnA+GyJE-CQWmkCxRLsjp+z8jwv-Aw9@mail.gmail.com%3EThe problem: I have a panel with this: &lt;wicket:head&gt; &lt;script&gt; if (someVariable &lt; 0) { someVariable = 0; } &lt;/script&gt; &lt;/wicket:head&gt;This script fails to execute when the panel is loaded by ajax. If I replace the less than character '&lt;' with equals '=='  then it executes (but of course  this is not what I need).I tested this in Firefox 4.0b10 and Chrome 8.After some debugging  it seems to me that this needs to be corrected in wicket-ajax.js. The header contribution is sent to the browser inside of a CDATA section so the '&lt;' character arrives to javascript intact. However  in parsing the script tag  the '&lt;' seems to signal the beginning of an HTML tag that then is considered malformed.Possible workarounds for apps: Invert the logic so a greater-than is used. In my example  this would be: 'if (0 &gt; someVariable) {' Put the code into a separate JS file (the downside is it requires another network hop from the browser) Embed the script in &lt;wicket:panel&gt; rather than &lt;wicket:head&gt; (the disadvantage is the script will be re-sent with the panel content when the panel is re-used on the same page)", "id": "3420"}, "3439": {"ground_truth": "0", "bug_report": "org.apache.wicket.markup.html.form.AbstractChoice renderer cast in method appendOptionHtml\nIn class org.apache.wicket.markup.html.form.AbstractChoice&lt;T  E&gt; the renderer instance variable has signature: private IChoiceRenderer&lt;? super E&gt; renderer;In the method appendOptionHtml the renderer's getDisplayValue method is called as follows: T objectValue = (T)renderer.getDisplayValue(choice); where the signature for the IChoiceRenderer&lt;E&gt; getDisplayValue method is: Object getDisplayValue(E object);So  is it a fact that for all usages of AbstractChoice that the display value returned by arenderer of type E will always be of type T (not Object)??? If not  then one should expect cast exceptions.", "id": "3439"}, "3440": {"ground_truth": "0", "bug_report": "org.apache.wicket.util.collections.MostRecentlyUsedMap getRemovedValue method returns Object not V\norg.apache.wicket.util.collections.MostRecentlyUsedMap getRemovedValue method: public Object getRemovedValue() { return removedValue; }but should be: public V getRemovedValue() { return removedValue; }", "id": "3440"}, "3444": {"ground_truth": "0", "bug_report": "ChangeHandler fires in IE on POS1 and END\nIn wicket-ajax.js the Wicket.ChangeHandler fires in IE an event on Textfields even if the KEY_POS1 and the KEY_END is pressed.Please add obj.onkeyup = function(event) {  switch (wicketKeyCode(Wicket.fixEvent(event))) { case KEY_ENTER: case KEY_UP: case KEY_DOWN: case KEY_ESC: case KEY_TAB: case KEY_RIGHT: case KEY_LEFT: case KEY_SHIFT: case KEY_ALT: case KEY_CTRL: return Wicket.stopEvent(event); break; default: if (typeof objonchange == 'function')objonchange(); } return null; }case KEY_POS1 and KEY_END to the first case so that these two keys don't fall in the default case.", "id": "3444"}, "3454": {"ground_truth": "0", "bug_report": "Value exchange in a wicket:message throws an exception\ni tried to exchange values in a &lt;wicket:message&gt; like described in wiki &lt;https://cwiki.apache.org/WICKET/wickets-xhtml-tags.html#Wicket%27sXHTMLtags-Elementwicket:message&gt;.But i get an exception:ERROR - RequestCycle - No get method defined for class:class org.apache.wicket.markup.resolver.MarkupInheritanceResolver$TransparentWebMarkupContainer expression: vat1valueorg.apache.wicket.WicketRuntimeException: No get method defined for class:class org.apache.wicket.markup.resolver.MarkupInheritanceResolver$TransparentWebMarkupContainer expression: vat1valueat org.apache.wicket.util.lang.PropertyResolver.getGetAndSetter(PropertyResolver.java:488)at org.apache.wicket.util.lang.PropertyResolver.getObjectAndGetSetter(PropertyResolver.java:330)at org.apache.wicket.util.lang.PropertyResolver.getObjectAndGetSetter(PropertyResolver.java:237)...Maybe it's caused by usage of border. I've debugged a bit  but could get a real glue.I added a quick start with test case.", "id": "3454"}, "3457": {"ground_truth": "0", "bug_report": "Add methods to IBehavior to listen for configuration events\nI would like for behaviors to be able to contribute to the configuration of a component (i.e. calling setVisible / setEnabled). Now that we have onConfigure  it would be nice to have components notify their behaviors during the configuration process.", "id": "3457"}, "3458": {"ground_truth": "0", "bug_report": "PackagedTextTemplate -> PackageTextTemplate\nIt's PackageResource but PackagedTextTemplate. Maybe remove the 'd' for sake of consistency.", "id": "3458"}, "3459": {"ground_truth": "0", "bug_report": "Update jetty to 7.3 and spring to 2.5.6.SEC02\nJetty 7.3.0.v20110203 is the latest stable version. Maybe it would be worth to upgrade now from 7.2.2 before wicket 1.5 goes final.Spring 2.5.6.SEC02 is the latest spring version in the 2.x line and it only differs in a few security fixes from the current used version: 2.5.6.", "id": "3459"}, "3464": {"ground_truth": "0", "bug_report": "Greek (el) Application.properties\nI am attaching greek Application_el.properties file. Unfortunatelly I myselft do not speak Greek  we have a project partner/client in Greece  which was conmpaining about default 'Choose one' drop down option. I suggested translating the Application.properties file. I know  there are more files  which should be translated to get full translation  but I do not really feel I can ask our Greek partner to do them all  Additionally I can not really validate  how good the translation really is - they are very non-technical persons.", "id": "3464"}, "3465": {"ground_truth": "0", "bug_report": "BaseWicketTester#isInvisible(String path)\nBaseWicketTester#isInvisible(String path) does not fail if Component does not exist.Similar methods like isVisible  isEnabled  isDisabled and isRequired  they all fail if component does not exist.", "id": "3465"}, "3470": {"ground_truth": "0", "bug_report": "Can't write session to disk with tomcat : Servlet is destroyed before serialization\nHi When I stop my tomcat  I have the following error :GRAVE: Exception au dchargement des sessions vers le stockage persistant (persistent storage)java.lang.IllegalStateException: PageManager for application wicket not registered. at lm.lbx.application.PersistentPageManager$SessionEntry.getPageStore(PersistentPageManager.java:86) at lm.lbx.application.PersistentPageManager$SessionEntry.writeObject(PersistentPageManager.java:197) at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source) at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source) at java.lang.reflect.Method.invoke(Unknown Source) at java.io.ObjectStreamClass.invokeWriteObject(Unknown Source) at java.io.ObjectOutputStream.writeSerialData(Unknown Source) at java.io.ObjectOutputStream.writeOrdinaryObject(Unknown Source) at java.io.ObjectOutputStream.writeObject0(Unknown Source) at java.io.ObjectOutputStream.writeObject(Unknown Source) at org.apache.catalina.session.StandardSession.writeObject(StandardSession.java:1561) at org.apache.catalina.session.StandardSession.writeObjectData(StandardSession.java:1004) at org.apache.catalina.session.StandardManager.doUnload(StandardManager.java:528) at org.apache.catalina.session.StandardManager.unload(StandardManager.java:469) at org.apache.catalina.session.StandardManager.stop(StandardManager.java:678) at org.apache.catalina.core.StandardContext.stop(StandardContext.java:4875) at org.apache.catalina.core.ContainerBase.stop(ContainerBase.java:1106) at org.apache.catalina.core.ContainerBase.stop(ContainerBase.java:1106) at org.apache.catalina.core.StandardEngine.stop(StandardEngine.java:468) at org.apache.catalina.core.StandardService.stop(StandardService.java:604) at org.apache.catalina.core.StandardServer.stop(StandardServer.java:788) at org.apache.catalina.startup.Catalina.stop(Catalina.java:662) at org.apache.catalina.startup.Catalina.start(Catalina.java:629) at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source) at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source) at java.lang.reflect.Method.invoke(Unknown Source) at org.apache.catalina.startup.Bootstrap.start(Bootstrap.java:289) at org.apache.catalina.startup.Bootstrap.main(Bootstrap.java:414)After a little digging  it's because tomcat first unload the servlet mapping and destroy the servlet  and then  ask for serialization. I'm not sure it's a wiket bug  tell me if i have to report it against tomcat.Here is the trace of the destroy :Thread &#91;main&#93; (Suspended (breakpoint at line 357 in PersistentPageManager))  PersistentPageManager.destroy() line: 357  PageAccessSynchronizer$1(PageManagerDecorator).destroy() line: 86  LibellexApplication(Application).internalDestroy() line: 658  LibellexApplication(WebApplication).internalDestroy() line: 470  WicketFilter.destroy() line: 456  ApplicationFilterConfig.release() line: 357  StandardContext.filterStop() line: 4106  StandardContext.stop() line: 4869  StandardHost(ContainerBase).stop() line: 1106  StandardEngine(ContainerBase).stop() line: 1106  StandardEngine.stop() line: 468  StandardService.stop() line: 604  StandardServer.stop() line: 788  Catalina.stop() line: 662  Catalina.start() line: 629  NativeMethodAccessorImpl.invoke0(Method  Object  Object[]) line: not available &#91;native method&#93;  NativeMethodAccessorImpl.invoke(Object  Object[]) line: not available  DelegatingMethodAccessorImpl.invoke(Object  Object[]) line: not available  Method.invoke(Object  Object...) line: not available  Bootstrap.start() line: 289  Bootstrap.main(String[]) line: 414 And the trace requesting serialization :Thread &#91;main&#93; (Suspended (breakpoint at line 83 in PersistentPageManager$SessionEntry))  PersistentPageManager$SessionEntry.getPageStore() line: 83  PersistentPageManager$SessionEntry.writeObject(ObjectOutputStream) line: 197  NativeMethodAccessorImpl.invoke0(Method  Object  Object[]) line: not available &#91;native method&#93;  NativeMethodAccessorImpl.invoke(Object  Object[]) line: not available  DelegatingMethodAccessorImpl.invoke(Object  Object[]) line: not available  Method.invoke(Object  Object...) line: not available  ObjectStreamClass.invokeWriteObject(Object  ObjectOutputStream) line: not available  ObjectOutputStream.writeSerialData(Object  ObjectStreamClass) line: not available  ObjectOutputStream.writeOrdinaryObject(Object  ObjectStreamClass  boolean) line: not available  ObjectOutputStream.writeObject0(Object  boolean) line: not available  ObjectOutputStream.writeObject(Object) line: not available  StandardSession.writeObject(ObjectOutputStream) line: 1561  StandardSession.writeObjectData(ObjectOutputStream) line: 1004  StandardManager.doUnload() line: 528  StandardManager.unload() line: 469  StandardManager.stop() line: 678  StandardContext.stop() line: 4875  StandardHost(ContainerBase).stop() line: 1106  StandardEngine(ContainerBase).stop() line: 1106  StandardEngine.stop() line: 468  StandardService.stop() line: 604  StandardServer.stop() line: 788  Catalina.stop() line: 662  Catalina.start() line: 629  NativeMethodAccessorImpl.invoke0(Method  Object  Object[]) line: not available &#91;native method&#93;  NativeMethodAccessorImpl.invoke(Object  Object[]) line: not available  DelegatingMethodAccessorImpl.invoke(Object  Object[]) line: not available  Method.invoke(Object  Object...) line: not available  Bootstrap.start() line: 289  Bootstrap.main(String[]) line: 414 Well at this time  a simple dirty hack is to bypass destroy chain to avoid removal of app from managers properties of class PersistentPageManager. But I would like to have a real clean solution.", "id": "3470"}, "3478": {"ground_truth": "0", "bug_report": "Allow for dynamic prefix and suffixes in CheckBoxMultipleChoice\nCurrently  CheckBoxMultipleChoice has support for a prefix and a suffix to be defined for each choice being rendered. However  there is no way to change them based on the item being rendered. A possible use case is in case some data needs to be used in either the suffix or prefix for Ajax or other javascript related use.Please consider adding getPrefix(int index  T choice)  and getSuffix(int index  T choice) methods to this component and using them instead of getPrefix() and getSuffix() within the onComponentTagBody method.", "id": "3478"}, "3483": {"ground_truth": "1", "bug_report": "NullPointerException in PersistentPageManager's page cache\nFrom a private email to me by a user:Hi I'm trying to use your gae-initializer to get your test application working on GAE. I'm using version 1.5-rc2 of wicket and your initializer. Using GAE sdk 1.4.2.I'm getting the same problem the person on the 1.5-rc1 release page was getting  and I can't get around it.The homepage loads  but the other page throws the same null pointer exception he was getting:java.lang.NullPointerException at org.apache.wicket.page.PersistentPageManager$SessionEntry.findPage(PersistentPageManager.java:117)....--------------------------------The problem is that org.apache.wicket.page.PersistentPageManager.SessionEntry.addPage(IManageablePage) adds even 'null' pages.", "id": "3483"}, "3485": {"ground_truth": "0", "bug_report": "Link tries to construct the URL when the link is disabled\nThis piece of code (Link.onComponentTag) tries to construct the URL for a Link  even when it is disabled: CharSequence url = getURL(); url = appendAnchor(tag  url); if (!isLinkEnabled()) disableLink(tag); else { use url }getURL fails for us  because we did not expect it to be called for a disabled link. The constructed url is never used. Can the getURL and appendAnchor be moved inside the else?", "id": "3485"}, "3502": {"ground_truth": "0", "bug_report": "Modify o.a.w.Component.send method signature to exactly match the one defined in superinterface\nCurrent signature in Component:public final void send(IEventSink sink  Broadcast type  Object payload)This is an implementation of o.a.w.event.IEventSource.send:&lt;T&gt; void send(IEventSink sink  Broadcast broadcast  T payload)These are the same at runtime but the difference cause minor annoyance for Eclipse users. For example when creating a new page and defining the WebPage superclass in the wizard  Eclipse will generate a new class with a send method stub which has to be deleted by hand. Exact signatures fix this.", "id": "3502"}, "3506": {"ground_truth": "0", "bug_report": "ResourceMapper doesn't work: mapHandler() always returns null\nResourceMapper#mapHandler uses the following code test whether a particular ResourceReferenceRequestHandler should be mapped:// see if request handler addresses the resource we serveif (resourceReference.getResource().equals(handler.getResource()) == false){ return null;}Unfortunately this if statement always evaluates to true and thus null is returned.The problem is that IResource implementations do not provide an equals() method. In practice this means that the default Object#equals() implementation is used  which nearly always results in false for the equality test.I see two possible solutions:1. Implement equals() for all IResource classes.2. Compare the ResourceReference objects instead  which already have a meaningful equals() implementation. In other words:// see if request handler addresses the resource we serveif (resourceReference.equals(handler.getResourceReference()) == false){ return null;}I'm attaching a quickstart that illustrates this bug.", "id": "3506"}, "3508": {"ground_truth": "0", "bug_report": "HttpsMapper triggers rendering of incorrect absolute callback url for Link\nThis problem only occurs when HttpsMapper is installed as the root request mapper. Additionally  it only seems to occur when the web context is not root.I mount a simple page so that it is available as http://localhost:8080/myproject/pagetest. That page has one Link (the onclick doesn't do anything). If I access that exact url and show source I see the link callback is rendered incorrectly. It should have the web context mentioned. The fact that Wicket generates an absolute url makes me think the HttpsMapper.mapHandler is touching it in such a way to trigger an absolute url  when the delegate was returning a url expecting it to be relative.&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;body&gt;&lt;a wicket:id='test' href='http://localhost:8080/wicket/page?1-1.ILinkListener-test'&gt;Click Here&lt;/a&gt;&lt;/body&gt;&lt;/html&gt;", "id": "3508"}, "3520": {"ground_truth": "0", "bug_report": "SHOW_NO_EXCEPTION_PAGE responding with HTTP status 500 is overwritten by redirect\nIf the application is configured with SHOW_NO_EXCEPTION_PAGE as unexpectedExceptionDisplay  an exception thrown while submitting a form should result in an HTTP 500 status.Since the request is already marked as a redirect in AbstractListenerInterfaceRequestTarget#onProcessEvents()  the 500 status is overwritten with status 200 when the redirect is handled afterwards.", "id": "3520"}, "3524": {"ground_truth": "0", "bug_report": "Proposal: merge upload progress monitoring functionality into wicket-core\nBased on the dev list mailhttp://apache-wicket.1842946.n4.nabble.com/Proposal-merge-upload-progress-monitoring-functionality-into-wicket-core-td3346567.htmlI am attaching a patch that merges UploadWebRequest and MultipartRequest into their superclasses and moves UploadInfo class from extensions to core.", "id": "3524"}, "3540": {"ground_truth": "0", "bug_report": "Make AjaxLink's URL more configurable\nCurrently AjaxLink uses AjaxEventBehavior which exposes just its getAjaxCallDecorator() to the user.It would be nice if there is a way to have access to the behavior callback url  e.g. to add some additional parameters  to set channel (wicket-ajax.js)  etc.As solution I suggest to add method 'AjaxLink#newAjaxBehavior()' which by default will return current AjaxEventBehavior but if the user wants she may override it with custom one. This way wicket stateless ajax behavior (see jolira's google code project) can be used as well without the need to re-write (copy/paste) the whole class.", "id": "3540"}, "3543": {"ground_truth": "0", "bug_report": "Add possibility to test Resources/ResourceReferences with WicketTester\nCurrently WicketTester supports testing of Page  Panel and plain Component (startPage()  startPanel() and startComponent()).It would be good to have similar methods for testing resources and resource references.", "id": "3543"}, "3550": {"ground_truth": "0", "bug_report": "Make Select component generic\nSelect component should be made generic  so it would be possible to use type safety with this form component.For example: Select&lt;String&gt; select = new Select&lt;String&gt;('select'  new Model&lt;String&gt;());", "id": "3550"}, "3551": {"ground_truth": "0", "bug_report": "Using web.xml  to render error pages via Wicket yields undesired behavior in Wicket 1.5\nIn my applications I prefer to use Wicket to render all error pages  including my 404 'not found' page. This allows me to reuse a shared page template afforded by Wicket to create my error pages (i.e. by extending a BasePage)  rather than using copy and paste to maintain static error page HTML files.I have been doing this as follows:web.xml: &lt;error-page&gt; &lt;error-code&gt;404&lt;/error-code&gt; &lt;location&gt;/error/404&lt;/location&gt; &lt;/error-page&gt;Now  so long as I have an appropriate bookmarkable page mounted on the '/error/404' path  the servlet container will render my page whenever a 404 'not found' scenario is encountered.This works great in Wicket 1.4.x.However in Wicket 1.5 (RC2 and the latest SNAPSHOT as of this writing)  two problems occur:1. By default  Wicket 1.5 automatically performs a 302 redirect before rendering the error page. This changes the URL from the invalid one (i.e. the one that generated the 404) to the mounted path (/error/404 in this example). This is not the desired behavior for a 404 error page; the original URL requested by the user should be maintained.2. If I attempt to work around the issue by overriding WebPageRenderer.enableRedirectForStatelessPage() to return false  the problem gets worse. Now the URL doesn't change  which is good. But Wicket gets confused about the depth of the request URL path: it seems to calculate relative URLs based on the mounted path rather than the URL that was requested. This causes all relative resources on the page (e.g. stylesheet references) to be miscalculated and break.I will attach two quickstarts: one showing this configuration working in 1.4  and another showing the same setup failing as described above in 1.5-RC2.", "id": "3551"}, "3552": {"ground_truth": "0", "bug_report": "Allow AttributeAppender to also prepend values\nThis add a flag to AttributeAppender which allows prepending a value to an attribute. This is useful for instance to add a javascript confirmation dialog before performing an action.", "id": "3552"}, "3553": {"ground_truth": "0", "bug_report": "Reset the busy flag in Wicket.Channel if the execution of the callback fails for some reason\nIf a scheduled (in Wicket.Channel) callback fails for some reason (in my case because WicketAjaxDebug was not yet loaded) then the 'busy' flag for the channel remains 'true' until the page is reloaded.It would be better to try/catch the execution of the callback and reset the flag in case of an error.", "id": "3553"}, "3554": {"ground_truth": "0", "bug_report": "Constructor of org.apache.wicket.PageReference should be public\nThe construcor of PageReference is not accessible (no qualifier  proteced). Is this for a reason? As far as I can see  a public qualifier would be nice as I rather often created an own class with a similar implementation (because I could not create an instance of PageReference).", "id": "3554"}, "3556": {"ground_truth": "0", "bug_report": "RequestLogger doesn't dump its collected data at the end of the request\nFrom an email in users@:Enabling with getRequestLoggerSettings().setRequestLoggerEnabled(true) doesnt show any requests.Seems that the Application.logEventTarget and Application.logResponseTarget are never invoked at all from the wicket-core nevertheless the get overridden in WebApplication???", "id": "3556"}, "3558": {"ground_truth": "0", "bug_report": "Expose active requests via JMX\nIt'd be nice if RequestLogger.active was exposed via JMX in the same manner the RequestLogger.liveSessions.size() is. Moreover it'd be great to track and expose the peak number of concurrent (active) requests.", "id": "3558"}, "3559": {"ground_truth": "0", "bug_report": "Autolink (AutolinkBookmarkablePageLink) already rendered problem\nUsing a menu panel that includes &lt;wicket:link&gt; to return to a page that includes a panel with a &lt;wicket:head&gt; element  gives:The component [AutolinkBookmarkablePageLink &#91;Component id = _autolink_X&#93;] was rendered already", "id": "3559"}, "3562": {"ground_truth": "1", "bug_report": "onInitialize() is not called before StatelessForm.onSubmit()\nI have a StatelessForm that has initialization code in onInitialize(). When my form is submitted  the onSubmit() method is invoked before onInitialize() is called. This results in a NullPointerException since the form has not yet had a chance to initialize its instance variables.I expect that onInitialize() will be called before any listener method is invoked.I believe this bug is due to the change in Page.onInitialize() introduced in r1085649.Quickstart attached.", "id": "3562"}, "3571": {"ground_truth": "0", "bug_report": "Popup close link not working in wicket examples linkomatic page\nTo reproduce:visit http://localhost:8080/linkomatic/homeclick 'Click this button for a popup'click 'close' link", "id": "3571"}, "3572": {"ground_truth": "0", "bug_report": "Add a link to the main page of Wicket Examples in the 'stateless' example page\nThe stateless page used to demonstrate stateless pages/sessions has no link to the main Wicket Examples page", "id": "3572"}, "3581": {"ground_truth": "0", "bug_report": "CryptoMapper ignores the IProvider argument\nCryptoMapper takes a IProvider&lt;ICrypt&gt; argument  and has a default ApplicationCryptoProvider  but always ignored the configured crypto provider and directly retrieves the application crypto provider.", "id": "3581"}, "3585": {"ground_truth": "0", "bug_report": "Let AbstractResourceStreamWriter implement empty getContentType()\nAbstractResourceStreamWriter's javadoc says it already:'Base implementation of an IResourceStreamWriter so that you only have to override the write() method'Actually I have to override getContentType() too  which is most of the time superfluous when the request target knows the resource's name and the type can be identified automatically .Please add an empty implementation to AbstractResourceStreamWriter.Thanks", "id": "3585"}, "3588": {"ground_truth": "0", "bug_report": "AppendingStringBuffer.append(StringBuilder  int  int) interprets length as stopIndex\nI got a StringIndexOutOfBoundsException while submitting Ajax from Wicket. It points to AppendingStringBuffer:508.The method StringBuilder.getChar expects the arguments (startIndex  stopIndex  buffer  count)AppendingStringBuilder provides (startIndex  length  buffer  count) =&gt; better use startIndex + length instead of length", "id": "3588"}, "3591": {"ground_truth": "0", "bug_report": "NumberTextField and RangeTextField should always render/parse its value with English locale\nWicket started adding some support for the new Html5 input types. Among these are NumberTextField for number type &#91;1&#93; and RangeTextField for range type &#91;2&#93;. The Html5 spec mandates that the 'value'  'min'  'max' attributes for these inputs are floating point numbers. Html5 spec also describes the format of a float number &#91;3&#93;. Simply to say it is a number formatted with English locale (for example: decimal mark is a period).Wicket currently renders min and max spec compliant but renders the value wrong because it uses the client locale for that. Which means for example for a Hungarian client it will generate '3 14' instead '3.14'. This breaks the custom widgets used by browsers for these new inputs (Chrome and Opera have custom ui  FF and IE stil use plain text field) because they expect the value with a period decimal mark. This means that browsers will post the value formatted in English locale too so parsing is also broken for these on the wicket server side because the client locale is used there also.Imho wicket should always use the English locale for rendering/parsing these values in case of these input types.To reproduce you can use the form examples from 'wicket-html5-examples' in the wicketstuff project (I found this bug there).&#91;1&#93; Html5 input number type: http://dev.w3.org/html5/markup/input.number.html&#91;2&#93; Html5 input range type: http://dev.w3.org/html5/markup/input.range.html&#91;3&#93; Html5 float datatype: http://dev.w3.org/html5/markup/datatypes.html#common.data.float", "id": "3591"}, "3598": {"ground_truth": "0", "bug_report": "DatePicker issues with locale medium date format\nDateTextField as follows: DateTextField d = new DateTextField(id  model  new StyleDateConverter('M-' false));Case 1: en-US locale for example DatePicker insert 04 rather than Apr in DateTextField  even though pattern clearly says MMMCase 2: pl-PL locale 2010-10-25 is in the DateTextField DatePicker opens on April 2031 rather than October 2010I believe the problem lies in wicket-date.js  in functions substituteDate and parseDate.I know this might be duplicate of WICKET-2427 and WICKET-2375  but apparently this hasn't been properly fixed yet.", "id": "3598"}, "3605": {"ground_truth": "0", "bug_report": "Ajax header-contribution omits IE conditional comments\nWe have a header contributor which writes an IE conditional comment to the header response for an IE-specific stylesheet.When the page is initially loaded  components on the page render with the IE conditional comment  and are displayed correctly.If a component is added by an ajax request  the header contributor renders the conditional comment to the ajax response  but the conditional comment is omitted from the page output.", "id": "3605"}, "3610": {"ground_truth": "0", "bug_report": "ContainerFeedbackMessageFilter should use Objects.equal for equality checking\nIn its accept() method ContainerFeedbackMessageFilter currenlty uses 'container == message.getReporter();' but a sibling class ComponentFeedbackMessageFilter uses 'Objects.equal(component  message.getReporter());'.Probably both should behave the same way in this.", "id": "3610"}, "3617": {"ground_truth": "0", "bug_report": "Using render strategy ONE_PASS_RENDER fails for Ajax requests\nI have an application which has two pages. Page A has an AjaxLink which makes some checks and either sets some error feedback and stays on the same page (e.g. login page with 'Invalid user' error) or if everything is OK then redirects to page B (via setResponsePage(B.class)).The problem comes when the current render strategy is ONE_PASS_RENDER. In this case no matter that fromUrl and toUrl are different and the request is Ajax the current code directly writes the page markup to the response.I think it should trigger a redirect instead.I am not sure whether it should be redirect to render or to buffer ...", "id": "3617"}, "3619": {"ground_truth": "0", "bug_report": "Application_pt.properties\nI had my portuguese partner look at the Application_pt_BR.properties file ason her portuguese laptop the standard english messages showed up. Accordingto her the pt_BR file is also completely valid forApplicaiton_pt.properties. Can I suggest the file is just copied over tothat name?", "id": "3619"}, "3621": {"ground_truth": "0", "bug_report": "Wicket do not test the 'buffer response' property in IRequestCycleSettings when creating the WebResponse in WebApplication\nWicket always create a buffered response. In 1.4 is was configurable.", "id": "3621"}, "3627": {"ground_truth": "0", "bug_report": "Tree 1.4 to 1.5 migration issue warning\nDifferent types of Trees produce the following warning in the console when displayed :WARN - aultMarkupSourcingStrategy - 1.4 to 1.5 migration issue: your item component should be derived from AbstractItem. Item=[TreeItem &#91;Component id = 0&#93;]Examples producing this warning :LinkTree  LabelTree and TreeTable from Ajax-&gt;Tree and TreeTable:'Nested' exampleFeel free to change the priority if this is not important.", "id": "3627"}, "3628": {"ground_truth": "0", "bug_report": "Unable to override final method isLinkEnable of class AbstractLink\nI have a form for which I need to disable all form components in certain situations.For this I am using form.setEnabled(false)  which works nicely for all input elements.However the form also contains a number of links (next to some fields)  which need to stay enabled.In the code of the onComponentTag method of the Link class I see the isLinkEnabled method is called to check if the link should be rendered enabled/disabled.In my Link subclass of I need to override isLinkEnabled to force the link being enabled even if the parent form is not.", "id": "3628"}, "3636": {"ground_truth": "0", "bug_report": "BookmarkablePageLink :: setParameter int versions missing\nthe new URL handling &amp; page parameters allow to use an integer index (great!)however this has not been implemented in BookmarkablePageLink  so this needs to be added private void setParameterImpl(int key  Object value) { if (parameters == null) { parameters = new PageParameters(); } parameters.set(key  value); }and  public MyBookmarkablePageLink&lt;T&gt; setParameter(final int property  final String value) { setParameterImpl(property  value); return this; }(and the same for int and long values)", "id": "3636"}, "3637": {"ground_truth": "0", "bug_report": "MarkupResourceStream should use debug instead of info to log non-standard namespace\nIt is possible to use a non 'wicket' namespace name in markup (for example 'w'). However wicket logs this on info level for every markup file. Imho this is a bit verbose and should be done on the debug level instead. Also wicket should log 'namespace name' instead of 'component name' in this message.", "id": "3637"}, "3641": {"ground_truth": "0", "bug_report": "UrlRenderer should not always add '.' to url\nThe fix in WICKET-3337 introduced a bug: now an url to a resource can be rendered differently if the base url changes.In practice this means that some js files can end up twice in a page DOM.First with the page load:'wicket/resource/org.apache.wicket.markup.html.WicketEventReference/wicket-event-ts1303754909421.js'and'wicket/resource/org.apache.wicket.ajax.WicketAjaxReference/wicket-ajax-ts1303754909421.js'Secondly after an ajax event two 'new' js gets loaded:'./wicket/resource/org.apache.wicket.markup.html.WicketEventReference/wicket-event-ts1303754909421.js'and'./wicket/resource/org.apache.wicket.ajax.WicketAjaxReference/wicket-ajax-ts1303754909421.js'", "id": "3641"}, "3650": {"ground_truth": "1", "bug_report": "parentFolderPlaceholder default value in Settings implementation is inconsistent with the javadoc\nIn relation to wicket-1992 the javadoc for: org.apache.wicket.settings.IResourceSettings#setParentFolderPlaceholdersays:'Note that by default the placeholder string is empty '' and thus will not allow to access parent folders.'But the default is null  not ''and this generates src url like this: resources/com.test.sub.pack.TestPage/null/null/base/information.pngwhich do work  but probably shouldn't.", "id": "3650"}, "3658": {"ground_truth": "0", "bug_report": "Add converter for Calendar class\nWicket has built in converter for a lot of date/time types (4 in wicket-util  2 in wicket-datetime) but not for Calendar. As Calendar is imho the most usable date/time object in standard java it would be nice if wicket would support it out of box.", "id": "3658"}, "3661": {"ground_truth": "0", "bug_report": "IHeaderResponse.renderJavaScriptReference does not support the 'defer' attribute\nIt would allow some nice optimization to allow to add script tags with a defer attribute like :&lt;script type='text/javascript' defer='true' src='myScript.js'&gt;&lt;/script&gt;I do not see any way to add the defer attribute right now.", "id": "3661"}, "3669": {"ground_truth": "0", "bug_report": "element in Ajax requests is executed twice in Opera 11\nI have component with behavior which adds &lt;script&gt; element in Behavior.onComponentRendered() to respons. This javascript is to be processed in browser when component is rendered. This works pretty well when component is rendered during standard HTTP request. But when the same code is called from Ajax request  this script runs on browser two times! There is some magic in Ajax request processing in wicket-ajax.js: only for Opera and IE these &lt;script&gt; elements from responses are added to HTML and page &lt;header&gt; element as well. Comment says that this is workaround for these browsers  maybe in older versions of Opera dynamically adding element into HTML doesn't run &lt;script&gt; elements within  but now could be obsolete.", "id": "3669"}, "3675": {"ground_truth": "0", "bug_report": "Usage of JavaScriptCompressor by resources other than PackageTextTemplates is lost!\nWith the refactoring of ResourceReferences  Resources and ResourceStreams it seems that the JavaScriptCompressor is no longer used for resources other than a PackageTextTemplate. In Wicket 1.4 it used to be in JavascriptPackageResource but seeing as this class is gone the JavaScriptCompressor is no longer used.There should be either a subclass of PackageResource which uses the JavaScriptCompressor or a way to intercept the length and the bytes which are written to the stream in PackageResource line 327.", "id": "3675"}, "3679": {"ground_truth": "0", "bug_report": "Improve WebClientInfo logic to extract the exact browser version\nA colleague of mine gave some love to WebClientInfo and improved the logic to extract information which browser and its major/minor version.This way it is quite easy to generate something like:&lt;html class='ie7'&gt;  or even &lt;html class='ff3.7'&gt;  ...instead of using IE conditional comments for IE and no way to do that for FF/Chrome/Safari.", "id": "3679"}, "3680": {"ground_truth": "0", "bug_report": "Make Objects.convertValue() generic\no.a.w.util.lang.Objects.convertValue(Object  Class) should use generics similar how it was changed for IConverter.convertToObject().The bad news is that this change is changing the semantics of the function because currently it is sometimes returning the input object (if the conversion was not possible). The good news is that this modification only impacts a small part of wicket.", "id": "3680"}, "3685": {"ground_truth": "0", "bug_report": "Split IHeaderContributor into IHeaderContributor and IComponentAwareHeaderContributor to make implementation cleaner\nSplit IHeaderContributor into IHeaderContributor and IComponentAwareHeaderContributor to make implementation cleaner", "id": "3685"}, "3688": {"ground_truth": "0", "bug_report": "WebPage cannot find the head container if TransparentWebMarkupContainer is associated with\nIf a page uses TransparentWebMarkupContainer to set some attributes to the &lt;html&gt; tag then org.apache.wicket.markup.html.WebPage.validateHeaders() cannot find the HtmlHeaderContainer because it expects to find it at the first level of children tree.", "id": "3688"}, "3690": {"ground_truth": "0", "bug_report": "Session is invalidated more than once because Session.sessionInvalidated is not reset\norg.apache.wicket.Session.detach() invalidates the http session and null-ifies the sessionStore but doesn't reset 'sessionInvalidated' variable and later if a new session store is created (e.g. during commitRequest &#91;1&#93;) then this new session store is again destroyed at the end.1.Thread &#91;qtp1917759555-26&#93; (Suspended (breakpoint at line 80 in RequestAdapter))  PersistentPageManager$PersitentRequestAdapter(RequestAdapter).bind() line: 80  PersistentPageManager$PersitentRequestAdapter.getSessionEntry(boolean) line: 339  PersistentPageManager$PersitentRequestAdapter.storeTouchedPages(List&lt;IManageablePage&gt;) line: 373  PersistentPageManager$PersitentRequestAdapter(RequestAdapter).commitRequest() line: 185  PersistentPageManager(AbstractPageManager).commitRequest() line: 94  PageAccessSynchronizer$1(PageManagerDecorator).commitRequest() line: 68  PageAccessSynchronizer$1.commitRequest() line: 203  Application$2.onDetach(RequestCycle) line: 1522  RequestCycleListenerCollection$3.notify(IRequestCycleListener) line: 100  RequestCycleListenerCollection$3.notify(Object) line: 95  RequestCycleListenerCollection(ListenerCollection&lt;T&gt;).reversedNotify(Iterator&lt;T&gt;  INotifier&lt;T&gt;) line: 121  RequestCycleListenerCollection(ListenerCollection&lt;T&gt;).reversedNotify(INotifier&lt;T&gt;) line: 112  RequestCycleListenerCollection.onDetach(RequestCycle) line: 94  RequestCycle.onDetach() line: 547  RequestCycle.detach() line: 479  RequestCycle.processRequestAndDetach() line: 257  WicketFilter.processRequest(ServletRequest  ServletResponse  FilterChain) line: 138  WicketFilter.doFilter(ServletRequest  ServletResponse  FilterChain) line: 194 ...", "id": "3690"}, "3700": {"ground_truth": "0", "bug_report": "WicketTester.startComponent(Class  Markup) doesn't deliver the contributed response to the headers\nThere is a regression from RC3 with starting a Panel. The header contribution is not in the 'lastRenderedPageAsString'.See attached test case.", "id": "3700"}, "3708": {"ground_truth": "0", "bug_report": "Component.getAjaxRegionMarkupId loops over all behaviors even if markupId is found\nIn the Component getAjaxRegionMarkupId consider changing: for (Behavior behavior : getBehaviors()) { if (behavior instanceof IAjaxRegionMarkupIdProvider) { markupId = ((IAjaxRegionMarkupIdProvider)behavior).getAjaxRegionMarkupId(this); }  }to for (Behavior behavior : getBehaviors()) { if (behavior instanceof IAjaxRegionMarkupIdProvider) { markupId = ((IAjaxRegionMarkupIdProvider)behavior).getAjaxRegionMarkupId(this); break; }  }", "id": "3708"}, "3716": {"ground_truth": "0", "bug_report": "Please improve ErrorMessage for WicketTester#assertRenderedPage\nIf WicketTester#assertRenderedPage fails  the errormessage does only say 'classes not same' this is sufficient  but can be improved.At least expected PageClass and Current Page Class should be printed out in the message.", "id": "3716"}, "3725": {"ground_truth": "0", "bug_report": "wickettag contents aren't skipped when trying to find markup in 1.5\nThe attached quick start  fails to render the components inside the fragment  because it will pick the &lt;span wicket:id='text'&gt; instead of the fragment as markup.I believe the id are only required to be unique 'per level'  so this should work and it should properly find the &lt;wicket:fragment wicket:id='text'&gt;. This also worked fine in 1.4", "id": "3725"}, "3727": {"ground_truth": "0", "bug_report": "MultiFileUploadField internationalisation does not work\nWe are having an issue setting some properties to override the default text for the MultiFileUploadField component. As per the docs  we have set the following in our local properties file:org.apache.wicket.mfu.caption.unlimited=Ficheros:org.apache.wicket.mfu.caption.limited=Ficheros (m/u00E1ximo ${max}): org.apache.wicket.mfu.delete=Borrarhowever they are not being overridden. We know our properties file is working because we can override other properties  like:workphone.PhoneNumberValidator = N/u00FAmero de tel/u00E9fono no v/u00E1lidoand those come up correctly.I have reproduced this in a quickstart.", "id": "3727"}, "3728": {"ground_truth": "0", "bug_report": "Allow filtering and grouping of resources in the\nWith DecoratingHeaderResponse and few supporting classes it is possible currently to group and filter header contributions  e.g. to render all JavaScript resources just before the closing tag of the body (&lt;/body&gt;). See http://www.wicket-library.com/wicket-examples/resourceaggregation for an example in action.Unfortunately it is not possible to use the grouping feature in the &lt;head&gt; tag currently because HtmlHeaderContainer first renders its body and then asks for other components' header contributions. While rendering its body it tries to render the placeholder for the header group and fails at org.apache.wicket.resource.filtering.HeaderResponseFilteredResponseContainer.onComponentTagBody(MarkupStream  ComponentTag) saying that the IHeaderResponse is not closed yet.To allow this I'm suggesting a patch that will first collect other components' header contribution  then close the IHeaderResponse and finally collect the &lt;head&gt;'s body. At the end it will render the head's body first and then the header contributions as it is now.", "id": "3728"}, "3730": {"ground_truth": "0", "bug_report": "extremely slow performance in development mode\nI just finished migrating application to 1.5 and it became VERY unresponsive and slow in development mode. In deployment it is OK.No changes were made to backend services  only necessary Wicket API use changes related to request cycle.=======================Below is the originals bug: WICKET-3194Hello  I had a problem with slow loading of pages and response to ajax requests. After some debugging I traced the problem to be that wicket constantly tries: DEBUG - UrlResourceStream - cannot convert url: jar:file:/C:/Users/hok/.m2/repository/org/apache/wicket/wicket/1.5-M3/wicket-1.5-M3.jar!/org/apache/wicket/markup/html/wicket-event.js to file (URI is not hierarchical)  falling back to the inputstream for polling DEBUG - ResourceStreamLocator - Attempting to locate resource 'org/apache/wicket/markup/html/wicket-event_en_US.js' on path [folders = []  webapppaths: []] DEBUG - ResourceStreamLocator - Attempting to locate resource 'org/apache/wicket/markup/html/wicket-event_en_US.js' using classloader sun.misc.Launcher$AppClassLoader@cac268 and this happens because that by default (or at least I think so) wicket adds timestamp on the resources - ResourceSettings.setUseTimestampOnResources(true) and every resource is read from the jar files on every request. When a resource is in a jar file a java.lang.IllegalArgumentException: URI is not hierarchical is thrown in the UrlResourceStream constructor and a lot of attempts are made to load the jar file through different loaders. In my case this led to a slow response times. After disabling timestamp on resources (ResourceSettings.setUseTimestampOnResources(false)) the problem disappears and the performance is fine. However in the javadoc of setUseTimestampOnResources: Enabling timestamps on resources will inject the last modification time of the resource into the filename (the name will look something like 'style-ts1282915831000.css' where the large number is the last modified date in milliseconds and '-ts' is a prefix to avoid conflicts with filenames that already contain a number before their extension. * Since browsers and proxies use the filename of the resource as a cache key the changed filename will not hit the cache and the page gets rendered with the changed file.In this case this useful functionality is lost. Is it possible to have 'the best of both worlds'? Thanks.This issue is raised from the discussion:http://apache-wicket.1842946.n4.nabble.com/IResourceSettings-setUseTimestampOnResources-true-and-performance-td3057946.htmlTo observe the performance improvement  please changegetResourceSettings().setUseTimestampOnResources(true);togetResourceSettings().setUseTimestampOnResources(false);in TestApplication. It's most obvious when you press Refresh All link and observe the time for the refresh in both cases", "id": "3730"}, "3736": {"ground_truth": "1", "bug_report": "npe in StoredResponsesMap\nWhile doing some load testing with with a small prog using Apache httpclient (45 threads  only the get requests were done) I got this error17:59:22.086 ERROR &#91;&quot;http-bio-8080&quot;-exec-1&#93; DefaultExceptionMapper - 108 - Unexpected error occurredjava.lang.NullPointerException: null at org.apache.wicket.protocol.http.StoredResponsesMap$Value.access$000(StoredResponsesMap.java:37) ~&#91;wicket-core-1.5-RC4.2.jar:1.5-RC4.2&#93; at org.apache.wicket.protocol.http.StoredResponsesMap.removeEldestEntry(StoredResponsesMap.java:73) ~&#91;wicket-core-1.5-RC4.2.jar:1.5-RC4.2&#93; at java.util.LinkedHashMap.addEntry(LinkedHashMap.java:410) ~&#91;na:1.6.0_22&#93; at java.util.HashMap.put(HashMap.java:385) ~&#91;na:1.6.0_22&#93; at org.apache.wicket.protocol.http.StoredResponsesMap.put(StoredResponsesMap.java:95) ~&#91;wicket-core-1.5-RC4.2.jar:1.5-RC4.2&#93; at org.apache.wicket.protocol.http.WebApplication.storeBufferedResponse(WebApplication.java:723) ~&#91;wicket-core-1.5-RC4.2.jar:1.5-RC4.2&#93; at org.apache.wicket.request.handler.render.WebPageRenderer.storeBufferedResponse(WebPageRenderer.java:73) ~&#91;wicket-core-1.5-RC4.2.jar:1.5-RC4.2&#93; at org.apache.wicket.request.handler.render.WebPageRenderer.respond(WebPageRenderer.java:258) ~&#91;wicket-core-1.5-RC4.2.jar:1.5-RC4.2&#93; at org.apache.wicket.request.handler.RenderPageRequestHandler.respond(RenderPageRequestHandler.java:139) ~&#91;wicket-core-1.5-RC4.2.jar:1.5-RC4.2&#93; at org.apache.wicket.request.cycle.RequestCycle$HandlerExecutor.respond(RequestCycle.java:718) ~&#91;wicket-core-1.5-RC4.2.jar:1.5-RC4.2&#93; at org.apache.wicket.request.RequestHandlerStack.execute(RequestHandlerStack.java:63) ~&#91;wicket-request-1.5-RC4.2.jar:1.5-RC4.2&#93; at org.apache.wicket.request.RequestHandlerStack.execute(RequestHandlerStack.java:96) ~&#91;wicket-request-1.5-RC4.2.jar:1.5-RC4.2&#93; at org.apache.wicket.request.cycle.RequestCycle.processRequest(RequestCycle.java:212) &#91;wicket-core-1.5-RC4.2.jar:1.5-RC4.2&#93; at org.apache.wicket.request.cycle.RequestCycle.processRequestAndDetach(RequestCycle.java:253) &#91;wicket-core-1.5-RC4.2.jar:1.5-RC4.2&#93; at org.apache.wicket.protocol.http.WicketFilter.processRequest(WicketFilter.java:138) &#91;wicket-core-1.5-RC4.2.jar:1.5-RC4.2&#93; at org.apache.wicket.protocol.http.WicketFilter.doFilter(WicketFilter.java:194) &#91;wicket-core-1.5-RC4.2.jar:1.5-RC4.2&#93; at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:243) &#91;catalina.jar:7.0.12&#93; at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:210) &#91;catalina.jar:7.0.12&#93;via jmx I could see that only 45 sessions were thereand that the PeakNumberOfActiveRequests was also 45.", "id": "3736"}, "3739": {"ground_truth": "0", "bug_report": "wicket-datetime datepicker fails to display calendar with js error in calendar.js:3225 in IE8\nwicket-datetime datepicker fails to display calendar with js error in calendar.js:3225 in IE8", "id": "3739"}, "3740": {"ground_truth": "0", "bug_report": "Scalability issue with PageAccessSynchronizer\nClass org.apache.wicket.page.PageAccessSynchronizer uses a global lock (org.apache.wicket.page.PageAccessSynchronizer.semaphore) that is needed e.g. when a new instance of a Page is created or when an instance of a page is retrieved  The lock is global and becomes quickly contented. When testing with two parallel threads  about 20% of all statistical stack samples waited for the lock  with four parallel threads about 50%.The stack waiting for the lock isat org.apache.wicket.page.PageAccessSynchronizer.lockPage(PageAccessSynchronizer.java:119)at org.apache.wicket.page.PageAccessSynchronizer$1.getPage(PageAccessSynchronizer.java:187)called either byat org.apache.wicket.Page.dirty(Page.java:327)as part of the Page ctor  or byat org.apache.wicket.DefaultMapperContext.getPageInstance(DefaultMapperContext.java:117)when retrieving page.Some threads' stacks:waiting on (a java.lang.Object@0xHEXADDR)at org.apache.wicket.page.PageAccessSynchronizer.lockPage(PageAccessSynchronizer.java:119)at org.apache.wicket.page.PageAccessSynchronizer$1.getPage(PageAccessSynchronizer.java:187)at org.apache.wicket.DefaultMapperContext.getPageInstance(DefaultMapperContext.java:117)at org.apache.wicket.request.handler.PageProvider.getPageInstance(PageProvider.java:246)at org.apache.wicket.request.handler.PageProvider.getPageInstance(PageProvider.java:159)at org.apache.wicket.request.handler.ListenerInterfaceRequestHandler.getPage(ListenerInterfaceRequestHandler.java:89)at org.apache.wicket.request.handler.ListenerInterfaceRequestHandler.respond(ListenerInterfaceRequestHandler.java:141)at org.apache.wicket.request.cycle.RequestCycle$HandlerExecutor.respond(RequestCycle.java:718)at org.apache.wicket.request.RequestHandlerStack.execute(RequestHandlerStack.java:63)at org.apache.wicket.request.cycle.RequestCycle.processRequest(RequestCycle.java:212)at org.apache.wicket.request.cycle.RequestCycle.processRequestAndDetach(RequestCycle.java:253)at org.apache.wicket.protocol.http.WicketFilter.processRequest(WicketFilter.java:138)at org.apache.wicket.protocol.http.WicketFilter.doFilter(WicketFilter.java:194)....at java.lang.Object.wait(Native Method)waiting on (a java.lang.Object@0xHEXADDR) at org.apache.wicket.page.PageAccessSynchronizer.lockPage(PageAccessSynchronizer.java:119)at org.apache.wicket.page.PageAccessSynchronizer$1.touchPage(PageAccessSynchronizer.java:194)at org.apache.wicket.Page.dirty(Page.java:327)at org.apache.wicket.Page.init(Page.java:770)at org.apache.wicket.Page.&lt;init&gt;(Page.java:223)at org.apache.wicket.Page.&lt;init&gt;(Page.java:202)at org.apache.wicket.markup.html.WebPage.&lt;init&gt;(WebPage.java:99)at x.y.z.page.base.Page.&lt;init&gt;(Page.java:100)at x.y.z.page.base.ControllerBasedPage.&lt;init&gt;(ControllerBasedPage.java:41)....at java.lang.Object.wait(Native Method)waiting on (a java.lang.Object@0xHEXADDR) at org.apache.wicket.page.PageAccessSynchronizer.lockPage(PageAccessSynchronizer.java:119)at org.apache.wicket.page.PageAccessSynchronizer$1.touchPage(PageAccessSynchronizer.java:194)at org.apache.wicket.Page.dirty(Page.java:327)at org.apache.wicket.Page.init(Page.java:770)at org.apache.wicket.Page.&lt;init&gt;(Page.java:223)at org.apache.wicket.Page.&lt;init&gt;(Page.java:202)at org.apache.wicket.markup.html.WebPage.&lt;init&gt;(WebPage.java:99)at x.y.z.page.base.Page.&lt;init&gt;(Page.java:100)at x.y.z.page.base.ControllerBasedPage.&lt;init&gt;(ControllerBasedPage.java:41)at x.y.z.page.NavigationAndContent.&lt;init&gt;(NavigationAndContent.java:43)at x.y.z.page.MailDetail.&lt;init&gt;(MailDetail.java:84)x.y.z.page.login.Login.&lt;init&gt;-wicket.Page.&lt;init&gt;-wicket.page.PageAccessSynchronizer.lockPage-WAIT_FOR_LOCKat java.lang.Object.wait(Native Method)waiting on (a java.lang.Object@0xHEXADDR) at org.apache.wicket.page.PageAccessSynchronizer.lockPage(PageAccessSynchronizer.java:119)at org.apache.wicket.page.PageAccessSynchronizer$1.touchPage(PageAccessSynchronizer.java:194)at org.apache.wicket.Page.dirty(Page.java:327)at org.apache.wicket.Page.init(Page.java:770)at org.apache.wicket.Page.&lt;init&gt;(Page.java:223)at org.apache.wicket.Page.&lt;init&gt;(Page.java:202)at org.apache.wicket.markup.html.WebPage.&lt;init&gt;(WebPage.java:99)at x.y.z.page.base.Page.&lt;init&gt;(Page.java:100)at x.y.z.page.login.Login.&lt;init&gt;(Login.java:23).....at java.lang.Object.wait(Native Method)waiting on (a java.lang.Object@0xHEXADDR) at org.apache.wicket.page.PageAccessSynchronizer.lockPage(PageAccessSynchronizer.java:119)at org.apache.wicket.page.PageAccessSynchronizer$1.touchPage(PageAccessSynchronizer.java:194)at org.apache.wicket.Page.dirty(Page.java:327)at org.apache.wicket.Page.init(Page.java:770)at org.apache.wicket.Page.&lt;init&gt;(Page.java:223)at org.apache.wicket.Page.&lt;init&gt;(Page.java:202)....at java.lang.Object.wait(Native Method)at org.apache.wicket.page.PageAccessSynchronizer.lockPage(PageAccessSynchronizer.java:119)at org.apache.wicket.page.PageAccessSynchronizer$1.touchPage(PageAccessSynchronizer.java:194)at org.apache.wicket.Page.dirty(Page.java:327)at org.apache.wicket.Page.init(Page.java:770)at org.apache.wicket.Page.&lt;init&gt;(Page.java:223)at org.apache.wicket.Page.&lt;init&gt;(Page.java:202).....", "id": "3740"}, "3744": {"ground_truth": "0", "bug_report": "Add RestartResponseException constructors to specify a RedirectPolicy\nSince Wicket 1.5 uses RedirectPolicy.AUTO_REDIRECT  it would be good to be able to specify an explicit other policy.We often use this in cases we need to redireect  even though the AUTO_REDIRECT might choose not to do so (the reason being to transport cookies/new session to the user between those requests). Also in some rare cases we need to force a NEVER_REDIRECT for a certain page in order to keep the URL as is.It would be great if there were overloaded constructors to specify the RedirectPolicy for the RenderPageRequestHandler.", "id": "3744"}, "3758": {"ground_truth": "0", "bug_report": "throw new RestartResponseAtInterceptPageException is not serializable\nthrow new RestartResponseAtInterceptPageException gives:org.apache.wicket.RestartResponseAtInterceptPageExceptionERROR - Error serializing object class org.apache.wicket.markup.html.pages.ExceptionErrorPage [object=&#91;Page class = org.apache.wicket.markup.html.pages.ExceptionErrorPage  id = 1  render count = 1&#93;]org.apache.wicket.util.io.SerializableChecker$WicketNotSerializableException: Unable to serialize class: org.apache.wicket.request.flow.ResetResponseException$ResponseResettingDecoratorField hierarchy is: 1 &#91;class=org.apache.wicket.markup.html.pages.ExceptionErrorPage  path=1&#93; private final java.lang.Throwable org.apache.wicket.markup.html.pages.ExceptionErrorPage.throwable &#91;class=org.apache.wicket.RestartResponseAtInterceptPageException&#93; private final org.apache.wicket.request.IRequestHandler org.apache.wicket.request.RequestHandlerStack$ReplaceHandlerException.replacementRequestHandler &#91;class=org.apache.wicket.request.flow.ResetResponseException$ResponseResettingDecorator&#93; &lt;----- field that is not serializable", "id": "3758"}, "3759": {"ground_truth": "0", "bug_report": "Touch the page only when it is just read from the page store\nCurrently PageProvider#getPageInstance() 'touches' the page for each call  i.e. schedules it to be persisted at the end of the request life. This always goes to PageAccessSynchronizer#touchPage() and respectively #lockPage().With the suggested patch this will be done at most once per PageProvider#getPage().This change causes some tests related to error pages to fail. The problem is that ALWAYS_REDIRECT is used for error pages thus REDIRECT_TO_RENDER strategy which expects the page to be stored before the redirect. Changing it to AUTO_REDIRECT leads to the default REDIRECT_TO_BUFFER to be used and the problem is solved because the response is buffered in the special map and the page is not needed after the redirect.", "id": "3759"}, "3761": {"ground_truth": "0", "bug_report": "unexpected order of head contributions\nwhen markup uses w-head contribution for static scripts&lt;wicket:head&gt; &lt;script type='text/javascript' src='http://link.from.markup/h.js' &gt;&lt;/script&gt;&lt;/wicket:head&gt;and then component adds something dynamically in renderHead@Override public void renderHead(IHeaderResponse response) { super.renderHead(response); response.renderJavaScriptReference('http://link.from.renderheadmethod/body.js'); }the dynamic link comes first and therefore does not work  repro case attachedExpected: that programmatic contributions use after ones from markup", "id": "3761"}, "3774": {"ground_truth": "0", "bug_report": "html file are not encoding to utf-8\nThe file SignOutPage_fr.html (all html file) is not properly encoding to utf-8  the accent 'Dconnexion' is not display correctly on browser.", "id": "3774"}, "3780": {"ground_truth": "0", "bug_report": "Warning text outdated in InheritedMarkupMarkupLoader\n' Enable debug messages for org.apache.wicket.util.resource.Resource to get a list of all filenames tried.');--&gt; org.apache.wicket.util.resource.Resource no longer exists. Looks like it has been renamed to org.apache.wicket.util.resource.locator.ResourceStreamLocator.", "id": "3780"}, "3781": {"ground_truth": "0", "bug_report": "Differentiate Google Chrome from Safari in wicket-xyz.js\nCurrently Google Chrome is treated as Safari in wicket-ajax.js and wicket-event.js.This causes Wicket.replaceOuterHtmlSafari() to be used while Chrome supports Range and ContextualFragment like Gecko browsers.The special code in replaceOuterHtmlSafari() is for older versions of Safari but it is hard to test  so improvements in this area for Safari 5 will be done when Wicket Ajax starts use some JS library.This change is a bit risky because until now Chrome was treated as Safari and we all tested this behavior but I tested all Ajax examples in wicket-examples and my application and everything seems to be OK.", "id": "3781"}, "3785": {"ground_truth": "0", "bug_report": "CheckGroup's model update should be aligned with ListMultipleChoice\nPlease improve CheckGroup to handle its model updates as ListMultipleChoice does  allowing a model to be notified of changes. See attached patch.", "id": "3785"}, "3788": {"ground_truth": "0", "bug_report": "wicket FileChannelPool has scalability issues\nI benchmarked the FileChannelPool  which is used in the pagemanager's DiskStore  against a simple unpooled 'new RandomAccessFile(name  'rw').getChannel()' implementation. The filechannelpool caches 50 handles by default to 50 session diskstore files  and keeps these handles open as long as possible or necessary.The benchmark results are performed from 1 to 8 threads and with active file set size varied. I tested 10  50  60 and 100 active files. To understand the results  FCP stands for the time spent on wicket's FileChannelPool. FC stands for time spent on unpooled FileChannel.The times are the time it took to perform 100000 per thread of the following: open a randomly chosen file from set of active files read a randomly positioned 10k chunk of a simulated session file that is 100000 bytes long (seek to 0 .. 90000 and then read 10000 bytes) close fileResults for 10 files: FCP: 79 161 318 481 763 1239 1355 1423 ms FC: 531 660 848 859 1141 1285 1372 1509 msResults for 50 files: FCP: 82 165 323 516 756 1248 1560 1587 ms FC: 529 666 800 851 1150 1268 1389 1490 msResults for 60 files: FCP: 219 857 2535 3669 4584 5641 6443 7235 ms FC: 520 639 901 1034 1196 1314 1501 1559 msResults for 100 files: FCP: 471 3588 5989 7814 10048 11790 13580 15130 ms FC: 547 667 903 1093 1195 1388 1446 1603 msBonus result: near worst case behavior of filechannelpool of just 10 cached channels and 100 files active set: FCP: 744 4669 8182 11295 14934 17799 21959 24964 ms FC: 549 681 905 1112 1338 1383 1440 1564 msDiscussion of the results: it appears that there is little difference in performance on the unpooled file channel for any active set size. This is not unexpected: there are no synchronization points and the kernel doesn't much care either way  because all these files together only took 100 * 100k of memory  or about 10 MB &#8211; easily cached entirely in my 4 GB. However  the FileChannelPool shows significant performance degradation as soon as the active set exceeds the pool's size. It seems to perform order of magnitude worse with 100 files as opposed to 50  indicating that wicket websites may suffer rapid performance degradation under load. In case the number of active sessions is much larger than the pool  the very worst behavior is simulated as the last result.FileChannelPool's key problem is that it optimizes performance for the lightly loaded case  and actually harms performance when load gets higher. The harm is not much &#8211; in the worst case  only something like 29 microseconds per request &#8211; but the best case win isn't great either  about 5.6 microseconds per request (10 files  1 thread). In the interests of simplifying pageStore  I propose deleting FileChannelPool entirely.", "id": "3788"}, "3793": {"ground_truth": "0", "bug_report": "ModalWindow shows 'Page Expired'\nA simple ModalWindow containing a WebPage opened by an AjaxLink shows 'Page Expired' instead of the desired page contents. Downgrading to 1.4.17 makes the problem disappear. See the attached quickstart.", "id": "3793"}, "3794": {"ground_truth": "0", "bug_report": "Simplify BrowserInfoPage by using InterceptData\nhttp://localhost:8080/hellobrowser/ application is broken in current trunk.The problem is that it calculates the 'continueTo' url too soon (before render time) and the generated url is wrong relative to the URL of the page that is going to be rendered.The whole concept can be greatly simplified by using org.apache.wicket.RestartResponseAtInterceptPageException.", "id": "3794"}, "3797": {"ground_truth": "0", "bug_report": "Remove duplicated resource resolution logic\nPackageResourceReference#lookupStream( locale  style  variation) and ResourceNameIterator duplicates the path sufix logic used to resolve the resource", "id": "3797"}, "3799": {"ground_truth": "0", "bug_report": "Prevent ResourceNameIterator from iterate the same name twice\nTo reproduce: public void test() { String path = 'test_patch.test_extension'; String style = null; String variation = 'var'; Locale locale = Locale.getDefault(); String extensions = null; boolean strict = false; ResourceNameIterator resourceNameIterator = new ResourceNameIterator(path  style  variation  locale  extensions  strict); while (resourceNameIterator.hasNext()) { System.out.println(resourceNameIterator.next()); } }", "id": "3799"}, "3814": {"ground_truth": "0", "bug_report": "Localizer.get() should be static\norg.apache.wicket.Localizer offers a get() method but it is not static.", "id": "3814"}, "3815": {"ground_truth": "0", "bug_report": "LinkType inner class is duplicated\nBoth o.a.w.markup.html.tree.BaseTree and o.a.w.extensions.markup.html.tree.DefaultAbstractTree classes define the same LinkType inner class. Imho this duplication should be removed.", "id": "3815"}, "3822": {"ground_truth": "0", "bug_report": "some jmx values are not working since they require wickets filter environment (application  session  etc.)\nsome jmx values are not working since they require wickets filter environment (application  session  etc.)", "id": "3822"}, "3832": {"ground_truth": "0", "bug_report": "RequestLogger doesn't log incoming event and outgoing page\nThe requestlogger currently doesn't log the incoming request and the outgoing page  which it did in 1.4.x (and earlier). This is due togetRequestLogger().logEventTarget(handler);getRequestLogger().logResponseTarget(handler);not being called. This results in log entries like:&#91;2011-06-22 11:43:20 836&#93; &#91;TP-Processor6&#93; RequestLogger | time=12 event=null response=null sessioninfo=...which isn't saying much  and making every presentation I gave on the RequestLogger  and chapter 14 from WiA look foolish", "id": "3832"}, "3834": {"ground_truth": "0", "bug_report": "WicketTester does not follow absolute redirects\nWicket tester does not follow absolute redirects:This is a problem when using HttpsMapper. For example when requesting a page over http:// with an forced redirect to https:// for secure access will make wicket tester return 'null' for the last renderer page instead of the rendered page instance. In general all kinds of absolute redirects to another page will not be tracked by wicket tester. So this potentially a problem for all kinds of tests that rely on absolute redirects.", "id": "3834"}, "3838": {"ground_truth": "0", "bug_report": "In wicket 1.5 urlFor returns incorrect string for package mounted pages\nAttached two quickstart projects for 1.4 and 1.5.Then access http://localhost:8080/app/Page1 and see 1.5 returns wrong address.", "id": "3838"}, "3842": {"ground_truth": "0", "bug_report": "The wicket:enclosure attribute doesn't work properly\nWhen the hidden child becomes visible again  it fails to appear on the page. The same thing works correctly with the wicket:enclosure tag.Example code:public class TestPage extends WebPage { public TestPage() { final Label l = new Label('msg'  'hi'); add(l); add(new Link&lt;Void&gt;('b') { private static final long serialVersionUID = 1L; @Override public void onClick() { l.setVisible(!l.isVisible()); } }); }}TestPage.html:&lt;html xmlns:wicket&gt;&lt;body&gt;&lt;div wicket:enclosure='msg'&gt;&lt;span wicket:id='msg'&gt;&lt;/span&gt;&lt;/div&gt;&lt;input type='button' value='Toggle' wicket:id='b'&gt;&lt;/body&gt;&lt;/html&gt;", "id": "3842"}, "3846": {"ground_truth": "0", "bug_report": "in environments without reliable timestamps (e.g. some clusters) resource caching is useless\nAs mentioned already in the wicket userlist iirc wicket's default resource caching strategy using resource file timestamps will not work in some cluster environments. Cluster deployers seem to be quite dumb and not preserve the 'lastModified' file attribute. So depending on the server instance the resource is delivered from it will contain multiple timestamps for the same resource. Apparently timestamps seem to be unsuitable for the purpose of caching in that environment.", "id": "3846"}, "3847": {"ground_truth": "0", "bug_report": "Modal window won't show in internet explorer document mode 8\nPlain modal window won't show after revision 1135146  WICKET-3782 Notifications before and after DOM node replacement (...) using Internet Explorer 9 in document mode quirks  7 and 8. Works in document mode 9  Opera 11.11  Chrome 13.0.782.32 beta-m  Firefox 3.6.18 and 5.0Seems like the lines:var newElement = Wicket.$(element.id);Wicket.Event.publish('/dom/node/added'  newElement);the 2nd time they run  element.id = ''  which makes Wicket.$ (document.getElementById('')) crash  and an 'ERROR: Wicket.Ajax.Call.processEvaluation: Exception evaluating javascript: &#91;object Error&#93;' is logged to the Wicket ajax debug window.Quick workaround: Somewhere in your code  include the following script: &lt;script type='text/javascript'&gt; oldFu = Wicket.$; Wicket.$ = function(arg) { if (arg == null || typeof(arg) == 'undefined' || arg == '') { return null; } return oldFu(arg); }&lt;/script&gt;Where the difference to the original $ function is the arg=='' check", "id": "3847"}, "3852": {"ground_truth": "0", "bug_report": "make PropertiesFactory easier to use outside of wicket scope\nIn relation to WICKET-3850  it'd be nice if PropertiesFactory didn't rely on Application at all  but rather on the only part of the Application it uses: IResourceSettings.", "id": "3852"}, "3860": {"ground_truth": "0", "bug_report": "StoredResponsesMapTest Random.nextInt takes only positive integer arguments  not 0\nIn the test StoredResponsesMapTest the line: String key2 = keys.get(rnd.nextInt(keys.size() - 1));has a problem since the integer argument to Random.nextInt can not be 0  but the keysList has size 1.", "id": "3860"}, "3861": {"ground_truth": "0", "bug_report": "AbstractTransformerBehavior sets wrong namespace\nAbstractTransformerBehaviour adds a wicket namespace (http://wicket.apache.org) to its tag which is different from that of the whole page (http://wicket.apache.org/dtds.data/wicket-xhtml1.4-strict.dtd).This causes (at least) XPath queries for Wicket nodes to fail when matching the contents of components with an AbstractTransformerBehavior.", "id": "3861"}, "3867": {"ground_truth": "0", "bug_report": "URIs should be used instead of URLs as Set or Map keys.\nURLs are not suitable for use as Set or Map keys because their equals() and hashCode() methods are not well defined. URIs should be used to identify the location and URLs to access the actual resources.See thread for http://mail-archives.apache.org/mod_mbox/wicket-users/201107.mbox/%3CCAPdiUN6CaH9rn4+tD9_hXP-dmBGn-SvFu=RvCMh8AYx5_1JkkA@mail.gmail.com%3ESpecifically:&#91;1&#93; 'More Joy of Sets' example with URL from Google Tech Talks:http://www.youtube.com/watch?v=wDN_EYUvUq0#t=9m58s", "id": "3867"}, "3873": {"ground_truth": "0", "bug_report": "Allow validators to detach by mixing in IDetachable\nAllow validators to detach by mixing in IDetachable", "id": "3873"}, "3880": {"ground_truth": "0", "bug_report": "Reference to a non-existing images causes IllegalStateException 'ResourceResponse#setWriteCallback() must be set.'\nA Page containing a PackageResourceReference to a nonexisting image fails with an Illegalstateexception. Debugging through the code reveals that hust before this exception a 404 HTTP Code ist set. This 404 gets hidden by the exception.I could not script a unittest for this problem  but it is easily reproduced in my browsers (Firefox 4  IE 8). A page class and html will be attached", "id": "3880"}, "3885": {"ground_truth": "0", "bug_report": "setResponsePage in AjaxLink goes always to localhost:8080 instead to the right host and port\nsetResponsePage in an AjaxLink in Wicket 1.4 redirects with a relative path to the response page.Wicket 1.5 takes the absolute path 'localhost:8080/path to the response page' even when the host and port are different.(e.g. with Apache2 a virtual host is created with server name www.mycompany.com  setResponce wil go to 'localhost:8080/path to page' instead of 'www.mycompany.com/path to page')", "id": "3885"}, "3887": {"ground_truth": "0", "bug_report": "Problems concerning IE9 with 'ActiveX Filtering' enabled\nInternet Explorer 9 contains a new feature to block all ActiveX content by default: http://ie.microsoft.com/testdrive/Browser/ActiveXFiltering/About.html If the feature is enabled  all ActiveX controls are blocked silently. With Wicket this currently results in a lot of JavaScript content (but not all of it) being blocked as well. The user can allow an exception by clicking on a small icon in the address bar  however  he usually will be only able to do so  if he knows exactly what causes the problem.A user who enabled the feature himself might still see what is wrong  but the feature can be also enabled in a domain policy  which might make solving the problem much more difficult and have adverse effects on customers.The reason that some JavaScript content is blocked along with blocking ActiveX elements is the usage of window.ActiveXObject:wicket-ajax.js:&gt;if (window.ActiveXObject) { &gt; transport = new ActiveXObject('Microsoft.XMLHTTP'); &gt; Wicket.Log.info('Using ActiveX transport'); &gt;} else if (window.XMLHttpRequest) { &gt; transport = new XMLHttpRequest(); &gt; Wicket.Log.info('Using XMLHttpRequest transport'); &gt;}According to  http://blogs.msdn.com/b/ie/archive/2011/05/02/activex-filtering-for-developers.aspx the usage of this pattern is not advisable and the order should be changed to:&gt;// Best Practice: Use Native XHR  if available&gt;if (window.XMLHttpRequest) {&gt; // If IE7+  Gecko  WebKit: Use native object&gt; var xmlHttp = new XMLHttpRequest();&gt;}&gt;else if (window.ActiveXObject) {&gt; // ...if not  try the ActiveX control &gt; var xmlHttp = new ActiveXObject('Microsoft.XMLHTTP');&gt;}The problem is reported to be fixed in JQuery 1.5.1  for instance.", "id": "3887"}, "3891": {"ground_truth": "0", "bug_report": "in development mode Wicket stops picking up markup changes\nI have wicket application running via mvn jetty:run under JRebel to facilitate code hotswap.With 1.5RC5.1 Wicket does not pick markup changes unless I change requested version  and it still put version on URL even I have getPageSettings.setVersionPagesByDefault(false);   but that is a minor inconvenience.More annoying that after awhile Wicket stops picking up changes in the markup of components used on my page. I mean that I can change markup for my components and it gets reflected upon page refresh (with requesting non existent version)  but at some point it stops  changes to the markup of subcomponents are not picked up.That forces me to restart application  which is major productivity killer....", "id": "3891"}, "3892": {"ground_truth": "0", "bug_report": "Modal window does not show the right page\n1.5-RC5.1 is OK  I noticed it with version 1145888 on trunk.When ModalWindow displays a page (panel is OK)  it displays the home page instead of the right page.", "id": "3892"}, "3897": {"ground_truth": "0", "bug_report": "renderCSSReference doesn't work with mountPage('/')\nresponse.renderCSSReference(new PackageResourceReference(BasePage.class  'BasePage.css'));will correctly render the css reference if the page is not mounted or if it is mounted to a location other than '/'. However if I mount the page to '/' using WebApplication.mountPage() then the css reference doesn't work.", "id": "3897"}, "3906": {"ground_truth": "0", "bug_report": "PageParameters#set not follow INamedParameters#set behavior\nCouple of problems to work with page parameters:Major - The PageParameters#set(final String name  final Object value  final int index) used remove/add pattern instead of set parameter value by specified index.Minor - Inposible to get the index of key in elegant way to use obtained index in #set operation", "id": "3906"}, "3908": {"ground_truth": "0", "bug_report": "Encoding problem with POSTing a form with Ajax\nThe form is always posted using Ajax in UTF-8  but if you're using a different encoding in the DB or the HTML aswell  the string is ugly obviously. Wicket should convert from UTF-8 to the given encoding (detecting from getMarkupSettings().setDefaultMarkupEncoding('...'); or getRequestCycleSettings().setResponseRequestEncoding('...'); or an other settings parameter which could be given to wicket)I'm attaching a quickstart project which demonstrate this issue by echoing back the string given to a textarea.", "id": "3908"}, "3909": {"ground_truth": "0", "bug_report": "Encoding problem with JavaScriptRefrences\nLet we have a javascript which contains some strings (which eventually should be appended to DOM)  and let we have a page in different encoding from UTF-8  like ISO-8859-2. The anomaly is the following: If the encoding of the JS is UTF-8  then the Ajax query which injects the JS is working OK. The injected string looks like it should be  no magic chars. But if we don't use the JS from Ajax  but plain request  then the string is ugly because JS is in UTF-8  but the page is in ISO-8859-2. If the encoding of the JS is the same as the Page then the response of the Ajax request will be ugly  but the plain non-ajax will be OK.", "id": "3909"}, "3912": {"ground_truth": "0", "bug_report": "SCRIPT tags in Ajax-Response are not evaluated in Chrome\nif a JavaScript script tag is added to AjaxRequestTarget (by Behavior via JavaScriptUtils.writeJavaScript)  it is not evaluated on Chrome browser. While debugging through wicket-ajax.js  it turns out  that replaceOuterHtmlSafari function is not called for Chrome  but the Gecko version gets executed instead (fall to '} else /* GECKO */ {' in Wicket.replaceOuterHtml). And the Gecko version does not do any special handling of SCRIPT tag  since Firefox does execute SCRIPT nodes added dynamically to the DOM. This behavior occurs since 1.5-RC5.1.There is a quickstart webapp attached to this ticket. HomePage contains a Label with Behavior attached and an AjaxLink. Behavior add a JavaScript showing alert message. It is shown once the page is loaded and once the ajax link is clicked. In Chrome there is not alert message after clicking the ajax link.", "id": "3912"}, "3916": {"ground_truth": "0", "bug_report": "FilterForm#enableFocusTracking(FormComponent) method uses ComponentTag#put(String CharSequence) with key='id' which gives a warning in Wicket 1.5\nA warning 'Please use component.setMarkupId(String) to change the tag's 'id' attribute.' is issued every time the component is rendered as the put(String  CharSequence) method on ComponentTag is called with 'id' as a key.To get rid of the warning message the FilterForm#enableFocusTracking(FormComponent) should be updated according to the warning message.", "id": "3916"}, "3917": {"ground_truth": "1", "bug_report": "NPE with RequestLogger enabled and Https\nThere is a wicket application with https enabled: setRootRequestMapper(new HttpsMapper(getRootRequestMapper()  new HttpsConfig()));The RequestLogger is also enabled:  getRequestLoggerSettings().setRequestLoggerEnabled(true);The bug can be reproduced by:1. Try to access the page with 'localhost/h' (deliberately excluding the https protocol prefix).2. A NPE is thrown:java.lang.NullPointerException at org.apache.wicket.protocol.http.RequestLogger.getRequestHandlerString(RequestLogger.java:532) at org.apache.wicket.protocol.http.RequestLogger.getDelegateString(RequestLogger.java:574) at org.apache.wicket.protocol.http.RequestLogger.getRequestHandlerString(RequestLogger.java:556) at org.apache.wicket.protocol.http.RequestLogger.logEventTarget(RequestLogger.java:513) at org.apache.wicket.protocol.http.RequestLoggerRequestCycleListener.registerHandler(RequestLoggerRequestCycleListener.java:119) at org.apache.wicket.protocol.http.RequestLoggerRequestCycleListener.onRequestHandlerResolved(RequestLoggerRequestCycleListener.java:64)", "id": "3917"}, "3918": {"ground_truth": "1", "bug_report": "NPE when requesting http://example.com/app/wicket/resource/org.apache.wicket.extensions.ajax.markup.html.modal.ModalWindow/res/\nWhen requesting the following URL  the default caching strategy throws a NullPointerException and this is logged. This request is performed by some spider agent of Microsoft (trying to kill Wicket!) with user agent 'Microsoft Office Protocol Discovery':Url=http://example.com/app/wicket/resource/org.apache.wicket.extensions.ajax.markup.html.modal.ModalWindow/res/java.lang.NullPointerException: caching strategy must not return an empty filename at org.apache.wicket.request.mapper.BasicResourceReferenceMapper.mapRequest(BasicResourceReferenceMapper.java:102) at org.apache.wicket.request.mapper.ParentPathReferenceRewriter.mapRequest(ParentPathReferenceRewriter.java:83) at org.apache.wicket.request.mapper.CompoundRequestMapper.mapRequest(CompoundRequestMapper.java:129) at org.apache.wicket.request.cycle.RequestCycle.resolveRequestHandler(RequestCycle.java:183) at org.apache.wicket.request.cycle.RequestCycle.processRequest(RequestCycle.java:208) at org.apache.wicket.request.cycle.RequestCycle.processRequestAndDetach(RequestCycle.java:253) at org.apache.wicket.protocol.http.WicketFilter.processRequest(WicketFilter.java:160) at org.apache.wicket.protocol.http.WicketFilter.doFilter(WicketFilter.java:216)A couple of points: the exception should log which strategy caused the empty filename the exception might want to log the requested URL for the resource perhaps a NullPointerException is not the best exception to throw  but rather something that results in a 404 or a 403 maybe not even throwing an exception is the best way to handle this case  instead rely on the container or another mapper to take the lead?", "id": "3918"}, "3926": {"ground_truth": "0", "bug_report": "CryptoMapper does not correctly decrypt URLs for the home page\nI proposed a solution for WICKET-3514  which I had been using myself. I didn't notice that it was incorporated into Wicket. This patch represents a bug fix I made to the new CryptoMapper which is not in Wicket.Encrypted URLs for the home page (where the unencrypted URL is something like '?4' - no segments  just parameters) are not correctly decrypted.", "id": "3926"}, "3937": {"ground_truth": "0", "bug_report": "Improve AJAX FunctionsExecutor robustness with try/catch\nThe attached patch improves wicket-ajax.js by executing its 'step' functions in a simple try/catch. This ensures that issues like WICKET-3820 don't fail catastrophically (leaving the channel busy).This poster might have had a similar failure.http://apache-wicket.1842946.n4.nabble.com/Re-Captcha-with-WiQuery-ButtonBehavior-causes-quot-Channel-busy-postponing-quot-td3679429.html", "id": "3937"}, "3948": {"ground_truth": "0", "bug_report": "IResourceCachingStrategy is too much bound to PackageResource  make it more general\nSomebody recently complained on the wicket userlist that IResourceCachingStrategy is not very versatile but only useable for PackageResources. I 100% agree would like to generalize the caching part by introducing the interface 'ICacheableResourceReference' (instead of referring to PackageResource). This makes it easy to use caching for other resource types. Since we are so close to 1.5 I would like to ask first if the patch is acceptable by you.", "id": "3948"}, "3962": {"ground_truth": "0", "bug_report": "the wrong option in select components is rendered (Combination of reusing panels and defaultFormProcessing==false)\nWe are reusing a panel (let's say a PersonPanel  two instances). There is a forward / back ajax-navigation between the panels  which is implemented with component.replace. So the component path for the select of both panels are the same. The back-function is implemented with setDefaultFormProcessing(false). If now showing PersonPanel1 --&gt; Forward --&gt; PersonPanel2 --&gt; Back --&gt; PersonPanel1 --&gt; Forward --&gt; PersonPanel2  the selects of the panel 2 are showing the values of panel1.The Reason:In the 'Select.isSelected(...)' the getInputAsArray() is used (instead of the getRawInput()). So request parameters are overruling the raw input  if the component path is the same.Wicket-Code:if (hasRawInput()) { String[] paths = getInputAsArray();I think  instead of calling getInputAsArray() the getRawInput()(With a split for the MultiSelect-support) should be used.", "id": "3962"}, "3965": {"ground_truth": "0", "bug_report": "A (stateless) page immediately disappears after the first render\nUsing setResponsePage(new SomeStatelessNonBookmarkablePage(aParameter)) renders the page but trying to reload the page in the browser fails with PageExpiredException.The reason is that the page is stateless and thus it is not saved in the page stores. Since it was scheduled for render with setResponsePage(Page) method its Url is created by PageInstanceMapper (i.e. something like: wicket/page?1). An attempt to refresh such page fails with 'Page with id '1' is not found =&gt; PageExpiredException'.Igor suggested to call 'page.setStatelessHint(false)' for all pages passed to PageProvider(IRequestablePage) constructor  i.e. such pages must be stored.This solved the problem but exposed few more problems: MockPageManager (used in WicketTester) until now always touched/stored pages  no matter their statelessness org.apache.wicket.markup.html.internal.EnclosureTest.testRender10() was wrong for some unknown reason. All expectations against EnclosurePageExpectedResult_10-2.html should not have the enclosure rendered because 'input' component is invisible", "id": "3965"}, "3971": {"ground_truth": "0", "bug_report": "TextTemplateResourceReference should be registered into the ResourceReferenceRegistry because otherwise the next request is served by PackageResourceReference\nThe title says it all.If the TextTemplateResourceReference is not registered then BasicResourceReferenceMapper receives autocreated PackageResRef which doesn't make variable substitutions.", "id": "3971"}, "3982": {"ground_truth": "0", "bug_report": "Modal Window is not shown in IE8\nOn examples page http://wicketstuff.org/wicket/ajax/modal-window if you click on 'Show modal dialog with a page' or 'Show modal dialog with panel'  no modal windows will be shown.", "id": "3982"}, "3986": {"ground_truth": "0", "bug_report": "Potential StackOverflowError in SerializableChecker\nAt line 517 it checks if 'streamObj' has already been checked  but at 522 it puts 'original' in the map. I don't know what's needed to reproduce it  but wicket-weld triggered it for me. You probably need a class with custom serialization which tries to serialize itself recursively. Changing line 522 to 'streamObj' fixed it for me.", "id": "3986"}, "3988": {"ground_truth": "0", "bug_report": "Make AbstractMapper.getPlaceholder and similar methods as public methods\nPlaying with mappers and Scala I found that because of Scala's limitation  there's no way to call protected static methods even from subclasses.Thinking about Wicket-Scala interoperability  I think that these methods could be changed to public or to non-static methods.There's no gain nor design reason to leave these methods as protected static  IMO.", "id": "3988"}, "3991": {"ground_truth": "0", "bug_report": "SignInPanel prevents the page being Stateless when signing in with the 'rember me' facility.\nThis worked fine with 1.5-RC5  so I think it is a regression. Start the webapp ( mvn clean jetty:run ) Log-in with remember me checked. Stop the webapp restart it ( mvn clean jetty:run ) The browser should re-log-on and wicket will throw a RuntimeException. If you refresh the browser  you are properly logged-on.See the attached quickstart.", "id": "3991"}, "4009": {"ground_truth": "0", "bug_report": "Page Lock on Browser Back Button after Page Expiry\nIn the attached quickstart  after page expiry and browser back navigation  a server error occurs such as:'failed to acquire lock to page 0  attempted for 1 minutes out of allowed 1 minute'This appears to be related to request logging  but I have seen other strange errors without request logging such asorg.apache.wicket.request.handler.ComponentNotFoundException: Could not find component 'form' on page 'class web.page.ExpiredPagealso with browser history back navigation.I have seen none of these errors in Wicket 1.4. I guess the reason for not having seen this before it that http cache headers are different in 1.5.", "id": "4009"}, "4010": {"ground_truth": "0", "bug_report": "SignInPanel may lead to infinite redirects if there is rememberMe cookie with outdated data\nquickstart4.zip from WICKET-3991 shows that having outdated 'RememberMe' data in the cookie may lead to infinite loop: SignInPanel#onBeforeRender() -&gt; signIn(oldCredentials) -&gt; go to SignInPage -&gt; try to load SignInPanel again.", "id": "4010"}, "4014": {"ground_truth": "0", "bug_report": "Wicket 1.5 Form Post Action and Link Get discard Page Class Information\nPage expiry is a very annoying and perplexing event especially if users stay logged in via remember-me cookie.It is therefore not a fancy enhancement but an essential business requirement to not drop the user out of context after session expiry.Only stateless pages can fully achieve this  but it is not always desirable to go fully stateless  especially while a recovery solution already exists.In 1.4  this appears to be automatic with BookmarkablePageRequestTargetUrlCodingStrategy - without any additional coding.The solution is well known - keep as much state in the client as required to recover the page class  and possibly even its page parameters  and to not destroy this information.The two attached testcases show two possible methods of page fallback recovery (one with AJAX  one without) that already work behind the scenes.Of course it is easy with AJAX  to just force a page reload  but this is not discussed here. AJAX just serves to demonstrate how easy the principle actually is.In most cases the user could successfully reload the page but Wicket 1.5 can't create a response because it has forgotten the class of the expired page.In 1.4  it is possible to recover the class of an expired page via its mount path.This feature is lost in 1.5.To get this functionality back in a more streamlined fashion  I am additionaly proposing in a separate jira issue 4013 to store page class and page parameters in PageExpiredException.Meanwhile  the focus of this issue is to request whatever means to not overwrite the path of a page in a form post action or get request  and to get the page class back as in 1.4 by whatever means.The two attached testcases may be helpful for expermintation. The 1.4 tescase demonstrates how the scheme works  unfortunately I could not fill the blanks in the 1.5 testcase.In 1.4 a form tag is rendered as:&lt;form wicket:id='form' action='?wicket:interface=:0:form::IFormSubmitListener::'This is requested as:/testForm.0?wicket:interface=:0:form::IFormSubmitListener::and the page class can be recovered from the mount path 'testForm' as in mount(new HybridUrlCodingStrategy('testForm'  TestPageForm.class));an anchor tag is rendered as:&lt;a href='?wicket:interface=:0:linkSwitch::ILinkListener::'This is requested as:/testLink.0?wicket:interface=:0:linkSwitch::ILinkListener::and the page class can be recovered from the mount path 'test' as in mount(new HybridUrlCodingStrategy('testLink'  TestPageLink.class));In 1.5 a form tag is rendered as:&lt;form wicket:id='form' action='wicket/page?0-2.IFormSubmitListener-form'This is requested requested as:/wicket/page?0-1.IFormSubmitListener-formThis overwrites the mount path 'testForm' as in mountPage('testForm'  TestPageForm.class);Consequently the server cannot discover the page classan anchor tag is rendered as:&lt;a href='wicket/page?0-1.ILinkListener-linkSwitch'This is requested requested as:/wicket/page?0-1.ILinkListener-linkSwitchThis overwrites the mount path 'testLink' as in mountPage('testLink'  TestPageLink.class);Consequently the server cannot discover the page class", "id": "4014"}, "4016": {"ground_truth": "0", "bug_report": "MarkupContainer.toString(true) fails with MarkupNotFoundException if the call is made in the component constructor\norg.apache.wicket.MarkupContainer.toString(boolean) uses 'if (getMarkup() != null)' to decide whether to write something for the markup but since recently Component#getMarkup() throws MarkupNotFoundException when there is no markup and doesn't return null.", "id": "4016"}, "4023": {"ground_truth": "0", "bug_report": "Please Allow AjaxLink to use getChannelName\nPlease allow AjaxLink to provide an empty getChannelName() that is called by its internal AjaxEventBehavior  so that Ajax-Channels can be used withoutoverriding the whole behavior.I know  not all methods should be provided and I also know its possible to override the AjaxEventBehavior  but an AjaxLink should at least provide the Possibilityto assign it to a specific Channel.THanks..", "id": "4023"}, "4032": {"ground_truth": "0", "bug_report": "ComponentStringResourceLoader must not include the index of repeater items in resource lookup but still resolve properties to them\nIssue when using a StringResourceModel to lookup a resource for a component underneath a repeating view.When a StringResourceModel is used by a component under a repeating view  the ComponentStringResourceLoader doesn't find the resource.This seems to be a problem introduced by the fix for 3671.In ComponentStringResourceLoader  getResourcePath excludes all AbstractRepeaters  however getComponentStack doesn't leading to the two being out of sync for the elements of the component hierarchy under the repeating view.", "id": "4032"}, "4040": {"ground_truth": "0", "bug_report": "Fix Javadoc in SimpleAttributeModifier.\nFix Javadoc in SimpleAttributeModifier.", "id": "4040"}, "4053": {"ground_truth": "0", "bug_report": "AbstractTree#updateTree(AjaxRequestTarget target) is invoked even when request is non-ajax\nI came across an issue when trying to get Brix working in wicket 1.5.It occurs when the Tree has: setLinkType(LinkType.REGULAR);Caused by: java.lang.IllegalArgumentException: Argument 'target' may not be null. at org.apache.wicket.util.lang.Args.notNull(Args.java:39) at org.apache.wicket.markup.html.tree.AbstractTree.updateTree(AbstractTree.java:1138) at org.apache.wicket.markup.html.tree.LinkIconPanel.onNodeLinkClicked(LinkIconPanel.java:82) at org.apache.wicket.markup.html.tree.LinkIconPanel$1.onClick(LinkIconPanel.java:59) at org.apache.wicket.markup.html.tree.BaseTree$5.onClick(BaseTree.java:386) at org.apache.wicket.markup.html.link.Link.onLinkClicked(Link.java:187)I only had a quick search across the wicket codebase to see if this method is called elsewhereTo fix LinkIconPanel line 82 should beif (target != null) {tree.updateTree(target);}BaseTree - line 294 also calls updateTree(target) with no null check.", "id": "4053"}, "4054": {"ground_truth": "1", "bug_report": "Memory leakage in browser with AbstractAjaxTimerBehavior\nAdding an AbstractAjaxTimerBehavior to a page causes the browser (tested on Firefox and Chrome) to leak memory. More noticeable with a short update interval (I have been using 1 second). It is not as bad in the beginning  but gradually gets worse  eventually increasing memory usage by over 1MB per request.", "id": "4054"}, "4055": {"ground_truth": "0", "bug_report": "LocaleFirstMapper does not strip Locale from url in getCompatibilityScore()\nLocaleFirstMapper delegates the call to getCompatibilityScore() to the chained IRequestMapper without stripping the locale from the url.Since most request mappers generate a compatibility score by counting the number of matching segments from the start of the url  they will mostly return a score of 0.Practically this means that all request mappers behind the LocaleFirstMapper stop responding to urls.", "id": "4055"}, "4067": {"ground_truth": "0", "bug_report": "Register devutils only if IDebugSettings#isDevelopmentUtilitiesEnabled() is true\nRegister devutils only if IDebugSettings#isDevelopmentUtilitiesEnabled() is true", "id": "4067"}, "4068": {"ground_truth": "0", "bug_report": "Assume that form.onsubmit() without explicit return value means that submit should proceed\nIf &lt;form&gt;'s onsubmit handler doesn't return a boolean value that specifies whether the form submit should actually happen then assume that it should happen.", "id": "4068"}, "4071": {"ground_truth": "0", "bug_report": "AjaxIndicatorAppender removes itself immediately when added via ajax\nWhen addding/replacing IndicatingAjaxLink's using ajax in Wicket 1.5.0 it's indicator markup is directly removed when parsing the ajax response. The AjaxIndicatorAppender renders a bit of javascript to the response (when it is an ajax request) to remove previous indicators from the dom (see issue WICKET-722) but in 1.5.0 the execution order of the javascript is different  causing the indicator markup to be added first and the javascript to remove previous versions of the indicator to be run next and thus removing the newly added indicator.De ajax debug windows shows that the component is replaced first and then the javascript is run. In 1.4.18 ajax logging shows the javascript run first and then the component gets replaced  resulting in correct behavior.", "id": "4071"}, "4073": {"ground_truth": "0", "bug_report": "Wicket quickstart advertise HTTPS but it doesn't work when started with jetty:run\nThe pregenerated 'keystore' is put in src/test/resources and thus is not in the classpath when started with 'mvn jetty:run'. This leads to a broken link in the home page of the quickstart.We should either move the keystore file or disable the link when HTTPS is not enabled.", "id": "4073"}, "4076": {"ground_truth": "0", "bug_report": "INamedParameters.getAllNamed() returns a list of NamedPairs defined as inner class of PageParameters\nIn an attempt to create my own implementation of PageParameterEncoder and PageParameters  I encountered the following problem with the API:The interface INamedParameters defines the method getAllNamed() that returns a list of NamedPairs defined as inner class of PageParameters .I believe that an interface shouldnt be referencing any element from an implementation to be a true extensible interface.", "id": "4076"}, "4077": {"ground_truth": "0", "bug_report": "Error detaching RequestCycle listener after serialization failure\nError detaching RequestCycle listener is produced after org.apache.wicket.serialize.java.JavaSerializer.serialize(Object) returns null.Below is the stacktrace of the error:20-09-2011 16:46:44 875 ERROR org.apache.wicket.request.cycle.RequestCycleListenerCollection$3.notify:105 - Error detaching request cycle listener: org.apache.wicket.Application$2@b45ad3djava.lang.IllegalArgumentException: Argument 'data' may not be null. at org.apache.wicket.util.lang.Args.notNull(Args.java:39) at org.apache.wicket.pageStore.AsynchronousDataStore$Entry.&lt;init&gt;(AsynchronousDataStore.java:271) at org.apache.wicket.pageStore.AsynchronousDataStore.storeData(AsynchronousDataStore.java:215) at org.apache.wicket.pageStore.DefaultPageStore.storePageData(DefaultPageStore.java:115) at org.apache.wicket.pageStore.DefaultPageStore.storePage(DefaultPageStore.java:144) at org.apache.wicket.page.PageStoreManager$PersistentRequestAdapter.storeTouchedPages(PageStoreManager.java:377) at org.apache.wicket.page.RequestAdapter.commitRequest(RequestAdapter.java:171) at org.apache.wicket.page.AbstractPageManager.commitRequest(AbstractPageManager.java:94) at org.apache.wicket.page.PageManagerDecorator.commitRequest(PageManagerDecorator.java:68) at org.apache.wicket.page.PageAccessSynchronizer$2.commitRequest(PageAccessSynchronizer.java:213) at org.apache.wicket.Application$2.onDetach(Application.java:1552) at org.apache.wicket.request.cycle.RequestCycleListenerCollection$3.notify(RequestCycleListenerCollection.java:101) at org.apache.wicket.request.cycle.RequestCycleListenerCollection$3.notify(RequestCycleListenerCollection.java:97) at org.apache.wicket.util.listener.ListenerCollection.reversedNotify(ListenerCollection.java:121) at org.apache.wicket.util.listener.ListenerCollection.reversedNotify(ListenerCollection.java:112) at org.apache.wicket.request.cycle.RequestCycleListenerCollection.onDetach(RequestCycleListenerCollection.java:95) at org.apache.wicket.request.cycle.RequestCycle.onDetach(RequestCycle.java:542) at org.apache.wicket.request.cycle.RequestCycle.detach(RequestCycle.java:481) at org.apache.wicket.request.cycle.RequestCycle.processRequestAndDetach(RequestCycle.java:257) at org.apache.wicket.protocol.http.WicketFilter.processRequest(WicketFilter.java:162) at org.apache.wicket.protocol.http.WicketFilter.doFilter(WicketFilter.java:218) at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:243) at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:210) at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:224) at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:185) at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:472) at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:151) at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:100) at org.apache.catalina.valves.AccessLogValve.invoke(AccessLogValve.java:929) at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:118) at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:405) at org.apache.coyote.http11.Http11Processor.process(Http11Processor.java:269) at org.apache.coyote.AbstractProtocol$AbstractConnectionHandler.process(AbstractProtocol.java:515) at org.apache.tomcat.util.net.JIoEndpoint$SocketProcessor.run(JIoEndpoint.java:302) at java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:886) at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:908) at java.lang.Thread.run(Thread.java:662)", "id": "4077"}, "4079": {"ground_truth": "0", "bug_report": "Provide new HybridPageParametersEncoder class for backwards compatibility with pre 1.5.x Hybrid URL encoding\nAny 1.4 app that has been live for a while would likely have a collection of links pointing to it from external sites on the web. You really want the Wicket 1.5 version of your app to be able to handle any existing hybrid style links without generating an error.The links are in the style:/myPage/paramName1/paramValue1/paramName2/paramValue2When migrating to 1.5  without a 1.4 compatible IPageParametersEncoder implementation  you need to include the full parameter specification in every mount if you want to avoid making changes to each individual Page class that reads parameters. The attached IPageParametersEncoder implementation means that is no longer necessary. All that is needed is to mount your pages as follows:mount(new MountedMapper('/myPage/'  MyPage.class  new HybridPageParametersEncoder());I'm submitting this .java file as a patch so that hopefully it may be included in future 1.5.x versions of Wicket to make it easy to implement backwards compatible URL parameter encoding for other 1.4 migrators.This code is based on a suggestion by luniv on StackOverflow here: http://stackoverflow.com/questions/6154430/how-do-i-mimic-hybridurlcodingstrategy-in-wicket-1-5", "id": "4079"}, "4088": {"ground_truth": "0", "bug_report": "Make Application#init() run after IInitializers to allow the application to override any settings configured by initializers\nwicket.properties urls are added to an HashSet  causing the IInitializers to be loaded in random order. In AbstractClassResolver.getResources  the HashSet should be changed to a LinkedHashSet.", "id": "4088"}, "4099": {"ground_truth": "0", "bug_report": "SmartLinkLabel doesn't recognize already tagged links\nThe SmartLinkLabel works as expected for the texts without &lt;a&gt;..&lt;/a&gt; tag. for text likeextensions @ http://www.wicketframework.org/wicket-extensions/index.html are cool!!SmartLinkLabel generates the html - extensions @ &lt;a href='http://www.wicketframework.org/wicket-extensions/index.html'&gt;http://www.wicketframework.org/wicket-extensions/index.html&lt;/a&gt; are cool!!but for the text likeextensions @ &lt;a href='http://www.wicketframework.org/wicket-extensions/index.html'&gt;http://www.wicketframework.org/wicket-extensions/index.html&lt;/a&gt; are cool!!SmartLinkLabel generates the html - extensions @ &lt;a href='&lt;a href='http://www.wicketframework.org/wicket-extensions/index.html'&gt;http://www.wicketframework.org/wicket-extensions/index.html&lt;/a&gt;'&gt;&lt;a href='http://www.wicketframework.org/wicket-extensions/index.html'&gt;http://www.wicketframework.org/wicket-extensions/index.html&lt;/a&gt;&lt;/a&gt; are cool!!I think this is a bug &amp; needs a fix.", "id": "4099"}, "4111": {"ground_truth": "0", "bug_report": "addDomReadyEvent broken for IE\nWicket.Event.addDomReadyEvent is broken in IE since 1.5.1. I identified WICKET-4080 as the cause of the problem: onreadystatechange with readyState='loaded' is sometimes fired before the document is fully loaded  causing scripts that reference DOM nodes to fail.See http://msdn.microsoft.com/en-us/library/ms534359%28v=vs.85%29.aspx for the order of the readystate events.The attached quickstart reproduces the issue (you may need to F5 a few times as it does not happen reliably). The actual JS error is:SCRIPT5007: The property 'onkeydown' has no value: The object is null or undefinedwicket-autocomplete-ver-1317728550188.js  Line 91 Character 9", "id": "4111"}, "4126": {"ground_truth": "0", "bug_report": "Automatic Image Linking broken for images in base packages\nAutomatic linking seems to be broken when used in conjunction with base classes and referencing relative images located in a different package.The attached quickstart application contains a base page wicket.bugs.autolink.page.base.BasePage whose HTML references an image located at &lt;BasePage Package&gt;/theme/logo.png: &lt;img src='theme/logo.png' ...&gt;When accessing this page via http://localhost:8080/base the image is rendered as expected.The application contains a second page wicket.bugs.autolink.page.home.HomePage extending the BasePage and that adds a second reference to this image via &lt;img src='../base/theme/logo.png' ...&gt; =&gt; this kind of references used to work in Wicket 1.4When accessing this page via http://localhost:8080/home none of the two images (the one inherited from the base page and the one added) is displayed.The inherited image reference is rendered as: &lt;img src='theme/logo.png' border='1' onclick='window.location.href=&#039;theme/logo.png&#039;;return false;'/&gt; =&gt; theme/logo.png seems not to be an auto link =&gt; I have no idea why an onclick event is rendered by Wicketand the explicitly added image reference is rendered as &lt;img src='wicket/resource/wicket.bugs.autolink.page.home.HomePage/../base/theme/logo-ver-1318516450215.png' /&gt; =&gt; accessing the URL http://localhot:8080/wicket/resource/wicket.bugs.autolink.page.home.HomePage/../base/theme/logo-ver-1318516450215.png results in:WARN - WicketObjects - Could not resolve class &#91;base&#93;java.lang.ClassNotFoundException: base at java.net.URLClassLoader$1.run(URLClassLoader.java:200) at java.security.AccessController.doPrivileged(Native Method) at java.net.URLClassLoader.findClass(URLClassLoader.java:188) at java.lang.ClassLoader.loadClass(ClassLoader.java:306) at sun.misc.Launcher$AppClassLoader.loadClass(Launcher.java:268) at java.lang.ClassLoader.loadClass(ClassLoader.java:251) at org.eclipse.jetty.webapp.WebAppClassLoader.loadClass(WebAppClassLoader.java:424) at org.eclipse.jetty.webapp.WebAppClassLoader.loadClass(WebAppClassLoader.java:377) at java.lang.ClassLoader.loadClassInternal(ClassLoader.java:319) at java.lang.Class.forName0(Native Method) at java.lang.Class.forName(Class.java:242) at org.apache.wicket.application.AbstractClassResolver.resolveClass(AbstractClassResolver.java:110) at org.apache.wicket.util.lang.WicketObjects.resolveClass(WicketObjects.java:68) at org.apache.wicket.request.mapper.BasicResourceReferenceMapper.resolveClass(BasicResourceReferenceMapper.java:143) at org.apache.wicket.request.mapper.BasicResourceReferenceMapper.mapRequest(BasicResourceReferenceMapper.java:120) at org.apache.wicket.request.mapper.ParentPathReferenceRewriter.mapRequest(ParentPathReferenceRewriter.java:83) at org.apache.wicket.request.mapper.CompoundRequestMapper.mapRequest(CompoundRequestMapper.java:130) at org.apache.wicket.request.cycle.RequestCycle.resolveRequestHandler(RequestCycle.java:179) at org.apache.wicket.request.cycle.RequestCycle.processRequest(RequestCycle.java:204) at org.apache.wicket.request.cycle.RequestCycle.processRequestAndDetach(RequestCycle.java:251) at org.apache.wicket.protocol.http.WicketFilter.processRequest(WicketFilter.java:162) at org.apache.wicket.protocol.http.WicketFilter.doFilter(WicketFilter.java:218)", "id": "4126"}, "4134": {"ground_truth": "1", "bug_report": "Localizer.getCacheKey() generating redundant keys for same values causing memory leak.\nNote: To reproduce this  just add a breakpoint or a logger in Localizer.addKeyToCache(). After running all pages/scenarios once that method should not be called again. But if it does get called you know that there are redundant keys being produced for the same value.After running a web app for about a day  I will get out of mem exception. With a heap dump I will see most of the memory taken by Localizer  with keys such as:androidapp-10:_wicket_link-4-4-4-4-4-4-4-4-4-4-4-4-4-4-4-4-28-4-4-4-4-4-4-28-52-4-4-76-4-4-4-4-4-4-4-4-4-4-4-4-4-4-4-4-4-4-4-4-4-4-4-4-4-4-4-4-4-4-4-4-4-4-4-4-4-4-4-4-4-4-4-4-4-4-4-4-4-4-4-4-4-4-4-4-4-4-4-4-4-4-4-4-4-4-4-4-4-27-4-4-4-4-4-4-4-4-4-4-4-4-4-4-4-4-28-4-4-4-4-4-4-4-30-4-4-4-4-4-4-4-4-4-4-4-4-4-4-4-4-4-4-4-4-4-4-4-4-4-4-4-4-4-4-4-4-4-4-4-4-4-4-4-4-4-4-4-4-4-4-4-4-4-4-4-4-4-4-4-4-4-4-4-4-4-4-4-41-4-4-4-4-26-4-4-4-4-4-4-4-4-4-4-4-4-4-4-4-4-4-4-4-4-4-4-4-4-4-4-4-4-4-4-4-4-4-4-4-4-4-4-4-4-4-4-4-4-4-4-4-4-4-4-4-4-4-4-4-4-4-4-4-4-4-4-4-4-4-4-4-4-4-4-4-4-4-4-4-4-4-4-4-4-4-4-4-4-4-4-4-4-4-4-4-4-4-4-4-4-4-4-4-4-4-4-4-4-4-4-4-4-4-4-4-4-4-4-4-4-4-4-4-4-4-4-4-4-4-4-4-4-4-4-4-4-4-4-4-4-4-4-4-4-4-4-4-4-4-4-4-4-4-4-41-4-4-4-4-4-4-4-4-4-4-4-4-4-4-4-4-4-4-4-4-4-4-4-4-4-4-4-4-4-4-4-4-4-4-4-4-4-4-4-4-4-4-4-4-4-4-4-4-4-4-4-4-4-4-4-4-4-4-4-4-4-4-4-4-4-4-4-4-4-4-4-4-4-4-4-4-4-4-4-4-4-4-4-4-4-4-4-4-4-4-4-4-4-4-4-4-4-4-4-4-4-4-4-4-4-4-4-4-4-4-4-4-4-4-4-4-4-4-4-4-4-4-4-4-4-4-4-4-4-4-4-4-4-4-4-4-4-4-4-4-4-4-4-4-4-4-4-4-4-4-4...Each of these types of keys are duplicated several thousand times. Here is a snipplet if the report:Found 60 occurrences of char[] with at least 10 instances having identical content. Total size is 401 451 248 bytes.Top elements include:6 454 x androidapp-10:_wicket_link-4-4-4-4-4-4-4-4-4-4-4-4... (15 722 bytes)6 453 x facebook-10:_wicket_link-4-4-4-4-4-4-4-4-4-4-4-4-4... (15 720 bytes)5 866 x home-9:_autolink_5-10:_wicket_link-4-4-4-4-4-4-4-4... (15 720 bytes)5 183 x candidates-9:_autolink_7-10:_wicket_link-4-4-4-4-4... (15 614 bytes)686 x candidates-9:_autolink_8-10:_wicket_link-4-4-4-4-4... (16 567 bytes)", "id": "4134"}, "4141": {"ground_truth": "0", "bug_report": "Automatic Linking in base page broken\nAutomatic linking used in base pages is broken.The attached quickstart application contains a base page wicket.bugs.autolink.page.base.BasePage which has a relative image reference: &lt;img src='theme/logo.png' border='1' width='50px' height='50px' /&gt;When accessing this page via http://localhost:8080/base the image is rendered as expected.The generated HTML output is: &lt;img src='wicket/resource/wicket.bugs.autolink.page.base.BasePage/theme/logo-ver-1319028241918.png' border='1' width='50px' height='50px'/&gt;The application contains a second page wicket.bugs.autolink.page.home.HomePage extending the BasePage.When accessing this page via http://localhost:8080/home the image inherited from the base page is not displayed.The inherited image reference is rendered as: &lt;img src='theme/logo.png' border='1' onclick='window.location.href=&#039;theme/logo.png&#039;;return false;'/&gt; =&gt; Problem 1: theme/logo.png is not autolinked anymore  it should point to wicket/resource/wicket.bugs.autolink.page.base.BasePage/theme/logo-ver-1319028241918.png =&gt; Problem 2: for some reasons a onclick event is rendered by Wicket I configured the Wicket app with: public void init() { super.init(); getMarkupSettings().setAutomaticLinking(true); getResourceSettings().setParentFolderPlaceholder('$up$'); mountPage('/home'  HomePage.class); mountPage('/base'  BasePage.class); }", "id": "4141"}, "4152": {"ground_truth": "1", "bug_report": "NPE in CachingResourceStreamLocator due to the search in parent's markup in Autolink code\nTrying to open http://localhost:8080/mappers/en_US (Request Mapper examples) the following exception is thrown:java.lang.NullPointerException at org.apache.wicket.util.resource.locator.caching.CachingResourceStreamLocator.locate(CachingResourceStreamLocator.java:114) at org.apache.wicket.request.resource.PackageResource.exists(PackageResource.java:442) at org.apache.wicket.markup.resolver.AutoLinkResolver$ResourceReferenceAutolink.&lt;init&gt;(AutoLinkResolver.java:583) at org.apache.wicket.markup.resolver.AutoLinkResolver$AbstractAutolinkResolverDelegate.newPackageResourceReferenceAutoComponent(AutoLinkResolver.java:113) at org.apache.wicket.markup.resolver.AutoLinkResolver$AnchorResolverDelegate.newAutoComponent(AutoLinkResolver.java:483) at org.apache.wicket.markup.resolver.AutoLinkResolver.resolveAutomaticLink(AutoLinkResolver.java:876) at org.apache.wicket.markup.resolver.AutoLinkResolver.resolve(AutoLinkResolver.java:808)..It is caused by my fix for WICKET-4141 from yesterday.", "id": "4152"}, "4154": {"ground_truth": "0", "bug_report": "Add localization resources for DataTable components\nAdd localization for DataTable components (no records and navigation toolbars)", "id": "4154"}, "4161": {"ground_truth": "0", "bug_report": "AbstractResourceAggregatingHeaderResponse does not order javascript properly\nI decided to give AbstractResourceAggregatingHeaderResponse a try but I found a problem in its design that  I think  makes it unusable.How it works:1-the IHeaderResponse#renderJavaScriptReference(ResourceReference) methods are intercepted and the resource references are stored in a list and not rendered right away. Each resource ref is assigned a key for grouping.2-When close() is called on the response  the aggregator writes out all the accumulated resource references which have not been rendered yet. This step can be used to group multiple resources into a single merged resource.The problem:AbstractResourceAggregatingHeaderResponse does not intercept calls to IHeaderResponse#renderJavaScriptReference(url) or IHeaderResponse#renderJavaScript(Script). They are directly executed by the underlying response.example:AbstractDefaultAjaxBehavior#renderHead() does the following : response.renderJavaScriptReference(WicketEventReference.INSTANCE); response.renderJavaScriptReference(WicketAjaxReference.INSTANCE); response.renderJavaScript('Wicket.Ajax.baseUrl=&#91;...&#93;');With the non-aggregating header response  the Wicket .js ref script tags are rendered in the markup before the inline javascript code and all is well.With the aggregating version  the Wicket js resource references are rendered last (in close()). This means that the inline javascript code (which uses Wicket.Ajax) is executed before the Wicket .js files are loaded  causing a javascript error (Wicket is undefined).This problem also applies to css resource references because order of inclusion is important for them too.Short of a big refactor to force each rendered javascript to list its dependencies  I don't see how this problem can be solved. I opened this ticket primarily to share my findings and let people comment on possible solutions other than removing the code.The problem is also present in AbstractDependencyRespectingResourceAggregatingHeaderResponse.NOTE:wiQuery uses AbstractResourceAggregatingHeaderResponse  but resolves the issue by intercepting all renderJavaScript* methods and keeping their order.", "id": "4161"}, "4168": {"ground_truth": "0", "bug_report": "Error page resource relative urls are wrong\nThe wicket page exposed as 404 error page has wrong links to resources. The sample project is attached.Run the project with 'mvn jetty:run' and go to url 'http://localhost:8080/bug/404' - it's mapped wicket page  works perfect. But if you type any wrong url such as 'http://localhost:8080/bug/aaaaaa' the page doesn't have styles and images.", "id": "4168"}, "4171": {"ground_truth": "0", "bug_report": "Add additional constructor to DownloadLink that accepts the filename in a Model\nThere are cases when the file name that will be used in DownloadLink is unknown at construction time. If the filename is stored in a IModel this limitation will be solved.", "id": "4171"}, "4172": {"ground_truth": "0", "bug_report": "Enclosure can't find a child with deeper path in TransparentWebMarkupContainer\nUsing the Wicket enclosure-tag in an TransparentWebMarkupContainer throws the following exception. I've just converted some working 1.4.18 code to 1.5.2 and got this error (see also http://apache-wicket.1842946.n4.nabble.com/Enclosures-and-transparent-WebContainer-tp3935753p3935753.html). Changing the component hierarchy without using a transparent WebMarkupContainer would fix the problem  but this is not an option if you migrate projects from 1.4 to 1.5org.apache.wicket.WicketRuntimeException: Could not find child with id: column:info in the wicket:enclosure at org.apache.wicket.markup.html.internal.Enclosure.checkChildComponent(Enclosure.java:232) at org.apache.wicket.markup.html.internal.Enclosure.getChildComponent(Enclosure.java:211) at org.apache.wicket.markup.html.internal.Enclosure.onInitialize(Enclosure.java:127) at org.apache.wicket.Component.fireInitialize(Component.java:919) at org.apache.wicket.MarkupContainer.internalInitialize(MarkupContainer.java:1002) at org.apache.wicket.MarkupContainer.addedComponent(MarkupContainer.java:979) at org.apache.wicket.MarkupContainer.add(MarkupContainer.java:171) at org.apache.wicket.MarkupContainer.autoAdd(MarkupContainer.java:300) at org.apache.wicket.MarkupContainer.renderNext(MarkupContainer.java:1463) at org.apache.wicket.MarkupContainer.renderAll(MarkupContainer.java:1638) at org.apache.wicket.MarkupContainer.renderComponentTagBody(MarkupContainer.java:1613) at org.apache.wicket.MarkupContainer.onComponentTagBody(MarkupContainer.java:1567) at org.apache.wicket.markup.html.panel.DefaultMarkupSourcingStrategy.onComponentTagBody(DefaultMarkupSourcingStrategy.java:72) at org.apache.wicket.Component.internalRenderComponent(Component.java:2516) at org.apache.wicket.MarkupContainer.onRender(MarkupContainer.java:1576) at org.apache.wicket.Component.internalRender(Component.java:2346) at org.apache.wicket.Component.render(Component.java:2274) at org.apache.wicket.MarkupContainer.renderNext(MarkupContainer.java:1474) at org.apache.wicket.MarkupContainer.renderAll(MarkupContainer.java:1638) at org.apache.wicket.Page.onRender(Page.java:904) at org.apache.wicket.markup.html.WebPage.onRender(WebPage.java:140) at org.apache.wicket.Component.internalRender(Component.java:2346) at org.apache.wicket.Component.render(Component.java:2274) at org.apache.wicket.Page.renderPage(Page.java:1035) at org.apache.wicket.request.handler.render.WebPageRenderer.renderPage(WebPageRenderer.java:105) at org.apache.wicket.request.handler.render.WebPageRenderer.respond(WebPageRenderer.java:224) at org.apache.wicket.request.handler.RenderPageRequestHandler.respond(RenderPageRequestHandler.java:167) at org.apache.wicket.request.cycle.RequestCycle$HandlerExecutor.respond(RequestCycle.java:750) at org.apache.wicket.request.RequestHandlerStack.execute(RequestHandlerStack.java:64) at org.apache.wicket.request.cycle.RequestCycle.execute(RequestCycle.java:252) at org.apache.wicket.request.cycle.RequestCycle.processRequest(RequestCycle.java:209) at org.apache.wicket.request.cycle.RequestCycle.processRequestAndDetach(RequestCycle.java:280) at org.apache.wicket.protocol.http.WicketFilter.processRequest(WicketFilter.java:162) at org.apache.wicket.protocol.http.WicketFilter.doFilter(WicketFilter.java:218) at org.eclipse.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1326) at org.eclipse.jetty.servlet.ServletHandler.doHandle(ServletHandler.java:479) at org.eclipse.jetty.server.handler.ScopedHandler.handle(ScopedHandler.java:119) at org.eclipse.jetty.security.SecurityHandler.handle(SecurityHandler.java:520) at org.eclipse.jetty.server.session.SessionHandler.doHandle(SessionHandler.java:227) at org.eclipse.jetty.server.handler.ContextHandler.doHandle(ContextHandler.java:940) at org.eclipse.jetty.servlet.ServletHandler.doScope(ServletHandler.java:409) at org.eclipse.jetty.server.session.SessionHandler.doScope(SessionHandler.java:186) at org.eclipse.jetty.server.handler.ContextHandler.doScope(ContextHandler.java:874) at org.eclipse.jetty.server.handler.ScopedHandler.handle(ScopedHandler.java:117) at org.eclipse.jetty.server.handler.ContextHandlerCollection.handle(ContextHandlerCollection.java:250) at org.eclipse.jetty.server.handler.HandlerCollection.handle(HandlerCollection.java:149) at org.eclipse.jetty.server.handler.HandlerWrapper.handle(HandlerWrapper.java:110) at org.eclipse.jetty.server.Server.handle(Server.java:349) at org.eclipse.jetty.server.HttpConnection.handleRequest(HttpConnection.java:441) at org.eclipse.jetty.server.HttpConnection$RequestHandler.headerComplete(HttpConnection.java:904) at org.eclipse.jetty.http.HttpParser.parseNext(HttpParser.java:565) at org.eclipse.jetty.http.HttpParser.parseAvailable(HttpParser.java:217) at org.eclipse.jetty.server.AsyncHttpConnection.handle(AsyncHttpConnection.java:46) at org.eclipse.jetty.io.nio.SelectChannelEndPoint.handle(SelectChannelEndPoint.java:545) at org.eclipse.jetty.io.nio.SelectChannelEndPoint$1.run(SelectChannelEndPoint.java:43) at org.eclipse.jetty.util.thread.QueuedThreadPool.runJob(QueuedThreadPool.java:598) at org.eclipse.jetty.util.thread.QueuedThreadPool$3.run(QueuedThreadPool.java:533) at java.lang.Thread.run(Thread.java:662)", "id": "4172"}, "4183": {"ground_truth": "1", "bug_report": "NullPointerException in JsonRequestLogger when logging resource requests\nThe use of NopAnnotationIntrospector causes NullPointerExceptions when trying to log enum values. The attached patch fixes this by changing to JacksonAnnotationIntrospector  which is the default introspector.", "id": "4183"}, "4184": {"ground_truth": "0", "bug_report": "AppendingStringBuffer.insert  infinite loop\nWhen trying to insert a StringBuffer into an AppendingStringBuffer  the method public AppendingStringBuffer insert(final int offset  final Object obj)will call itself repeatedly generating an infinite loop.The fix would be to call toString() method if the object is a StringBufferpublic AppendingStringBuffer insert(final int offset  final Object obj) { if (obj instanceof AppendingStringBuffer) { AppendingStringBuffer asb = (AppendingStringBuffer)obj; return insert(offset  asb.value  0  asb.count); } else if (obj instanceof StringBuffer) { //return insert(offset  obj); return insert(offset  obj.toString()); } return insert(offset  String.valueOf(obj)); }", "id": "4184"}, "4185": {"ground_truth": "0", "bug_report": "ListenerInterfaceRequestHandler should not assume existence of a page\nListenerInterfaceRequestHandler should not assume a page instance is always available in isPageInstanceCreated. This handler can also be used for links on bookmarkable pages. The attached patch fixes this.", "id": "4185"}, "4189": {"ground_truth": "0", "bug_report": "RequestHandlerStack: Unnecessary Stacktrace in log on PageExpiredException\nWe use session.replaceSession() when a user logs out which appears to clear all previous pages (which is good)  and when the user tries to go back he gets a PageExpiredException (which is also good).Only that this exception is logged in error level from the RequestHandlerStack is very ugly and triggers our customer's log monitoring tool. PageExpiredExceptions should never bubble up into the log unless they cannot be handled correctly.This is the stacktrace:ERROR request.RequestHandlerStack - Error detaching RequestHandlerorg.apache.wicket.protocol.http.PageExpiredException: Page with id '2' has expired. at org.apache.wicket.request.handler.PageProvider.getPageInstance(PageProvider.java:169) at org.apache.wicket.request.handler.PageProvider.getPageClass(PageProvider.java:227) at org.apache.wicket.request.handler.logger.PageLogData.&lt;init&gt;(PageLogData.java:49) at org.apache.wicket.request.handler.RenderPageRequestHandler.detach(RenderPageRequestHandler.java:147) at org.apache.wicket.request.cycle.RequestCycle$HandlerExecutor.detach(RequestCycle.java:761) at org.apache.wicket.request.RequestHandlerStack.detach(RequestHandlerStack.java:180) at org.apache.wicket.request.cycle.RequestCycle.onDetach(RequestCycle.java:565) at org.apache.wicket.request.cycle.RequestCycle.detach(RequestCycle.java:508) at org.apache.wicket.request.cycle.RequestCycle.processRequestAndDetach(RequestCycle.java:284) at org.apache.wicket.protocol.http.WicketFilter.processRequest(WicketFilter.java:162) at org.apache.wicket.protocol.http.WicketFilter.doFilter(WicketFilter.java:218) at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:235) at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:206) at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:233) at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:175) at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:128) at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:102) at org.apache.catalina.valves.AccessLogValve.invoke(AccessLogValve.java:568) at org.apache.catalina.valves.AccessLogValve.invoke(AccessLogValve.java:568) at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:109) at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:286) at org.apache.coyote.http11.Http11Processor.process(Http11Processor.java:844) at org.apache.coyote.http11.Http11Protocol$Http11ConnectionHandler.process(Http11Protocol.java:583) at org.apache.tomcat.util.net.JIoEndpoint$Worker.run(JIoEndpoint.java:447) at java.lang.Thread.run(Thread.java:722)", "id": "4189"}, "4192": {"ground_truth": "0", "bug_report": "Do not add anti cache parameter to the images used for the Tree's junction links\nSince a while Wicket automatically adds antiCache pararemeter to the url of the Image components which are re-rendered in Ajax request.This new feature makes the Tree component slower to rerender because the link's images are re-rendered for each expand.", "id": "4192"}, "4194": {"ground_truth": "0", "bug_report": "update/improve javadocs of SpringComponentInjector and GuiceComponentInjector.\nUpdate/improve javadocs of SpringComponentInjector and GuiceComponentInjector to reflect new listener usage on application init()", "id": "4194"}, "4215": {"ground_truth": "0", "bug_report": "Allow passing custom AjaxChannel in AjaxLazyLoadPanel\nCan LAZY_LOAD_COMPONENT_ID be public? Sometimes id is needed beforehand. AjaxLazyLoadPanel uses anonymous AbstractDefaultAjaxBehavior  so AjaxChannel cannot be easily overridden. Is it possible to introduce AjaxLazyLoadPanel#getChannel()?", "id": "4215"}, "4218": {"ground_truth": "0", "bug_report": "Add CachingResourceVersion#invalidate(IStaticCacheableResource) to manually purge cache entries\nAdd CachingResourceVersion#invalidate(IStaticCacheableResource) to manually purge cache entries.We had the uncommon requirement on the mailing list that a user needs to replace a static resource at runtime. I order to still use caching for resource versions a method to expire entries in CachingResourceVersion should be helpful.Adding this method to a concrete class should not affect API compatibility.", "id": "4218"}, "4227": {"ground_truth": "0", "bug_report": "dropping ajax request causes componentnotfoundexception\nissue described in http://osdir.com/ml/users-wicket.apache.org/2011-11/msg00019.html", "id": "4227"}, "4239": {"ground_truth": "0", "bug_report": "add wicket-jar_es.properties for spanish localization\nadd wicket-jar_es.properties for spanish localization", "id": "4239"}, "4245": {"ground_truth": "0", "bug_report": "AbstractResourceAggregatingHeaderResponse forgets some information about references\nSeen in Wicket 1.5.3 and SVN r1199294. AbstractResourceAggregatingHeaderResponse.java public void renderJavaScriptReference(String url  String id  boolean defer) { topLevelReferences.add(new ResourceReferenceAndStringData(null  null  url  null  ResourceType.JS  defer  null  null)); }forgets the id. public void renderCSSReference(ResourceReference reference  PageParameters pageParameters  String media  String condition) { topLevelReferences.add(new ResourceReferenceAndStringData(reference  null  null  media  ResourceType.CSS  false  null  condition)); }forgets the page parameters.I think a quickstart should not be necessary.", "id": "4245"}, "4248": {"ground_truth": "0", "bug_report": "Upgrade pom reference for joda-time from 1.6.2 to 2.0\nCurrent stable version of joda-time is 2.0. Wicket could upgrade to the latest and greatest version.Changelog and migration: http://joda-time.sourceforge.net/upgradeto200.htmlAll tests pass with 2.0 instead of 1.6.2. wicket-examples also run properly.", "id": "4248"}, "4258": {"ground_truth": "0", "bug_report": "DebugBar displays stacktrace with FeedbackPanels\nClicking Inspector from DebugBar when a FeedbackPanel is displaying a message results in this stacktrace in log. Everything seems to work  extra stuff in logs is just annoying.ERROR - Component - Error while getting default model object for Component: [ListItem &#91;Component id = 0  page = com.mycompany.HomePage  path = 8:form:feedback:feedbackul:messages:0.ListItem  isVisible = true  isVersioned = false&#93;  children = &#91;Component id = message&#93;]java.lang.IndexOutOfBoundsException: Index: 0 at java.util.Collections$EmptyList.get(Collections.java:3204) at org.apache.wicket.markup.html.list.ListItemModel.getObject(ListItemModel.java:58) at org.apache.wicket.Component.getDefaultModelObject(Component.java:1640) at org.apache.wicket.Component.getDefaultModelObjectAsString(Component.java:1668) at org.apache.wicket.markup.html.debug.PageView$4.component(PageView.java:211) at org.apache.wicket.markup.html.debug.PageView$4.component(PageView.java:184) at org.apache.wicket.util.visit.Visits.visitChildren(Visits.java:143) at org.apache.wicket.util.visit.Visits.visitChildren(Visits.java:161) at org.apache.wicket.util.visit.Visits.visitChildren(Visits.java:161) at org.apache.wicket.util.visit.Visits.visitChildren(Visits.java:161) at org.apache.wicket.util.visit.Visits.visitChildren(Visits.java:161) at org.apache.wicket.util.visit.Visits.visitChildren(Visits.java:122) at org.apache.wicket.util.visit.Visits.visitChildren(Visits.java:191) at org.apache.wicket.MarkupContainer.visitChildren(MarkupContainer.java:923) at org.apache.wicket.markup.html.debug.PageView.getComponentData(PageView.java:182) at org.apache.wicket.markup.html.debug.PageView.&lt;init&gt;(PageView.java:130) at org.apache.wicket.devutils.inspector.InspectorPage.&lt;init&gt;(InspectorPage.java:66) at sun.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method) at sun.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:57) at sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45) at java.lang.reflect.Constructor.newInstance(Constructor.java:525) at org.apache.wicket.session.DefaultPageFactory.newPage(DefaultPageFactory.java:173) at org.apache.wicket.session.DefaultPageFactory.newPage(DefaultPageFactory.java:97) at org.apache.wicket.session.DefaultPageFactory.newPage(DefaultPageFactory.java:47) at org.apache.wicket.DefaultMapperContext.newPageInstance(DefaultMapperContext.java:107) at org.apache.wicket.request.handler.PageProvider.resolvePageInstance(PageProvider.java:264) at org.apache.wicket.request.handler.PageProvider.getPageInstance(PageProvider.java:165) at org.apache.wicket.request.handler.render.PageRenderer.getPage(PageRenderer.java:78) at org.apache.wicket.request.handler.render.WebPageRenderer.renderPage(WebPageRenderer.java:105) at org.apache.wicket.request.handler.render.WebPageRenderer.respond(WebPageRenderer.java:224) at org.apache.wicket.request.handler.RenderPageRequestHandler.respond(RenderPageRequestHandler.java:167) at org.apache.wicket.request.cycle.RequestCycle$HandlerExecutor.respond(RequestCycle.java:750) at org.apache.wicket.request.RequestHandlerStack.execute(RequestHandlerStack.java:64) at org.apache.wicket.request.cycle.RequestCycle.execute(RequestCycle.java:252) at org.apache.wicket.request.cycle.RequestCycle.processRequest(RequestCycle.java:209) at org.apache.wicket.request.cycle.RequestCycle.processRequestAndDetach(RequestCycle.java:280) at org.apache.wicket.protocol.http.WicketFilter.processRequest(WicketFilter.java:162) at org.apache.wicket.protocol.http.WicketFilter.doFilter(WicketFilter.java:218) at org.eclipse.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1326) at org.eclipse.jetty.servlet.ServletHandler.doHandle(ServletHandler.java:479) at org.eclipse.jetty.server.handler.ScopedHandler.handle(ScopedHandler.java:119) at org.eclipse.jetty.security.SecurityHandler.handle(SecurityHandler.java:520) at org.eclipse.jetty.server.session.SessionHandler.doHandle(SessionHandler.java:227) at org.eclipse.jetty.server.handler.ContextHandler.doHandle(ContextHandler.java:940) at org.eclipse.jetty.servlet.ServletHandler.doScope(ServletHandler.java:409) at org.eclipse.jetty.server.session.SessionHandler.doScope(SessionHandler.java:186) at org.eclipse.jetty.server.handler.ContextHandler.doScope(ContextHandler.java:874) at org.eclipse.jetty.server.handler.ScopedHandler.handle(ScopedHandler.java:117) at org.eclipse.jetty.server.handler.HandlerWrapper.handle(HandlerWrapper.java:110) at org.eclipse.jetty.server.Server.handle(Server.java:349) at org.eclipse.jetty.server.HttpConnection.handleRequest(HttpConnection.java:441) at org.eclipse.jetty.server.HttpConnection$RequestHandler.headerComplete(HttpConnection.java:904) at org.eclipse.jetty.http.HttpParser.parseNext(HttpParser.java:565) at org.eclipse.jetty.http.HttpParser.parseAvailable(HttpParser.java:217) at org.eclipse.jetty.server.BlockingHttpConnection.handle(BlockingHttpConnection.java:50) at org.eclipse.jetty.server.bio.SocketConnector$ConnectorEndPoint.run(SocketConnector.java:245) at org.eclipse.jetty.util.thread.QueuedThreadPool.runJob(QueuedThreadPool.java:598) at org.eclipse.jetty.util.thread.QueuedThreadPool$3.run(QueuedThreadPool.java:533) at java.lang.Thread.run(Thread.java:722)", "id": "4258"}, "4260": {"ground_truth": "0", "bug_report": "UrlRenderer renders invalid relative URLs if first segment contains colon\nSeen on Wicket 1.5.3.If a relative url of a link starts with a path segment containing a colon then the whole uri will be regarded as absolute uri  so typically browsers will complain that there is no handle for the protocol foo in foo:bar/dee/per.See also the attached quickstart. The start page contains three links  one relative with colon  one absolute and one to a mounted page without colon for comparison.The application also has a static switch to add an extended urlrenderer  prepending './' if needed. This fix is merely a quick shot and there might be better alternatives.", "id": "4260"}, "4261": {"ground_truth": "0", "bug_report": "Wicket autocomplete keeps working on the replaced element when somehow the element is replaced by another ajax request when it is shown.\nWicket autocomplete keeps working on the replaced element when somehow the element is replaced by another ajax request when it is shown.", "id": "4261"}, "4265": {"ground_truth": "0", "bug_report": "Thread Test Uses Sun Proprietary API\nThe ResourceTestPage class uses classes from com.sun.* packages to do image I/O. This breaks the build for me using Oracle's JDK7 on linux (see environment). You should use the ImageIO class instead.", "id": "4265"}, "4268": {"ground_truth": "0", "bug_report": "Quality of ThumbnailImageResource\nThe control over the quality of generated thumbnails has been lost after modifications proposed in WICKET-2450 (the performance has been greatly improved though). That article http://today.java.net/pub/a/today/2007/04/03/perils-of-image-getscaledinstance.html proposes multi-step approach when downscaling images. It produces much better visual results with no dramatic performance loss. Can we use that code? It also would be nice to have image rendering hints configurable as they were before.", "id": "4268"}, "4270": {"ground_truth": "1", "bug_report": "Remove superfluous call to ResourceReference#getResource() in ResourceMapper when trying to map the resource URL\nThe getResource() method is being called for a mounted ResourceReference even when the url does not match. So far it seems to only happen when some wicket Ajax is included in the page. To get around the problem  I've added a check on my ResourceReference that looks for the mounted name in the request url but it seems like the mounting should handle that. To reproduce the error:1. Call mountResource('uploadedfiles'  MyResourceReference.class);2. Add an AjaxFallbackLink to a page3. In MyResourceReference getResource() method return null;4. Run the application and open the page with an AjaxFallbackLink and you will get java.lang.NullPointerExceptionat org.apache.wicket.request.mapper.ResourceMapper.mapHandler(ResourceMapper.java:167)at org.apache.wicket.request.mapper.CompoundRequestMapper.mapHandler(CompoundRequestMapper.java:156)at org.apache.wicket.request.cycle.RequestCycle.mapUrlFor(RequestCycle.java:401)at org.apache.wicket.request.cycle.RequestCycle.urlFor(RequestCycle.java:485)at org.apache.wicket.markup.html.internal.HeaderResponse.renderJavaScriptReference(HeaderResponse.java:205)...The class org.apache.wicket.request.mapper.ResourceMap calls the getResource() (line 167) method even though the url does not match the mounted name.", "id": "4270"}, "4273": {"ground_truth": "0", "bug_report": "Rendering of resources in the header with dependency resolving and support for bundles\nThe current API for resources does not allow resources to define dependencies nor does it provide native support for bundles. In short  a resource reference should be able to define that it requires other resources to be available as well  much like AbstractResourceDependentResourceReference does. This support should be part of ResourceReference itself and should not be limited to just references (anything that can be added to a header can be a dependency).Furthermore  many have requested support for resource bundles. A bundle combines several resources of the same type into one. When a bundle is rendered  all resources that are part of the bundle should not be rendered  otherwise you'll end up with duplicate resources. Although it is often requested that all resources should be combined into one (or two  a js and a css)  I do not believe this is a good solution as there is no way of knowing which page requires which resources. In the worst case  this will cause every page to contain a different permutation of resources  requiring the user to download all resources again and again for every page. Therefore  the bundles require the developer to manually register bundles. If one resource from a bundle is required  the bundle will rendered instead.Finally  the default HeaderResponse renders many script tags for onDomReady and onLoad scripts. These scripts should be combined into one or two script tags.I'm currently working on implementing these features at Github. My progress can be found at https://github.com/papegaaij/wicket/tree/wicket+wiquery", "id": "4273"}, "4276": {"ground_truth": "0", "bug_report": "Select component loses it's value\nSelect component loses selected option and shows the first option in some situations (one example is when you try to submit a form  but there are validation errors).It was working fine in 1.4.18  but it's broken in 1.4.19.This must be caused by the solution from this issue https://issues.apache.org/jira/browse/WICKET-3962I think the problem is likely in Select.isSelected method  where String[] paths = getInputAsArray() is actually an array of uuid-s  so uuid-s are compared to paths.I haven't tested wicket 1.5  but this problem may also affect 1.5 versions.", "id": "4276"}, "4278": {"ground_truth": "0", "bug_report": "Performance regression in Component.configure() in 1.5\nWicket 1.5 is slower than 1.4 in rendering deep component trees.See the attached application that adds recursively components with specified depth. In 1.5 it is several times slower than 1.4.I found several problems:1) org.apache.wicket.Component.configure() calls org.apache.wicket.Component.setRenderAllowed()The problems is that configure() is called for each component in the hierarchy and setRenderAllowed() is overwritten in MarkupContainer to visit all children and call it for them. And the final result is that setRenderAllowed() is called for the parent and all its children  then for the first child and all its children again  and so on...The solution is to completely remove org.apache.wicket.MarkupContainer.setRenderAllowed()2) If you increase the number of components to &gt; 1000 in 1.5 we hit StackOverflowError in 2.1) org.apache.wicket.MarkupContainer.getMarkupType()2.2) org.apache.wicket.Component.getLocale()2.3) org.apache.wicket.MarkupContainer.internalMarkRendering(boolean)For 2.1 and 2.2 I suggest to add transient fields which will cache the calculated value after the first call of the get method.For 2.3 I don't see a solution for now", "id": "4278"}, "4279": {"ground_truth": "0", "bug_report": "CheckGroupSelector 'Select all' behavior broken when the CheckGroup contains a single check box.\nWhen CheckGroupSelector is used with a CheckGroup that contains a single checkbox  select all behavior is broken. The problem is in CheckGroupSelector.js which assumes &gt;1 checkboxes in a CheckGroup.", "id": "4279"}, "4285": {"ground_truth": "0", "bug_report": "PageSavingThread.stop() blocks forever\nThe PageSavingThread may exit without nulling the stop flag. For example when an OutOfMemoryError or any other runtime exception is thrown in the run method.Properly set the flag in a finally clause.Is this class still present in 1.5?", "id": "4285"}, "4286": {"ground_truth": "0", "bug_report": "ListView causes page ID increment\nA ListView with setReuseItems(false) causes the page ID to increment when the page is reloaded or the back button is pressed. This new ID is not reflected in the URL so Ajax actions against the new ID are lost when navigating away and back again. Steps to reproduce in quickstart1) Load quickstart project in browser2) Click 'Link to Other' then click browser's back button.3) Notice the log statement indicates the HomePage ID is 2  yet the URL remains at ID 04) Click 'Ajax Increment Link' a few times5) Click 'Link to Other' then click browser's back button6) Notice the counter is at zero  and subsequent clicks to the 'Ajax Increment Link' start from zero. The current page ID output in the log is 4.", "id": "4286"}, "4292": {"ground_truth": "0", "bug_report": "MockHttpServletResponse.addCookie(Cookie) adds duplicate cookies\norg.apache.wicket.protocol.http.mock.MockHttpServletResponse.addCookie(Cookie) makes a bad check whether the cookie to be added is already in the list of cookies.Since javax.servlet.http.Cookie doesn't implement #equals() 'cookies.remove(cookie)' wont remove the previous cookie because the identity is different.According to http://www.ietf.org/rfc/rfc2109.txt  p.4.3.3 : If a user agent receives a Set-Cookie response header whose NAME is the same as a pre-existing cookie  and whose Domain and Path attribute values exactly (string) match those of a pre-existing cookie  the new cookie supersedes the old. However  if the Set- Cookie has a value for Max-Age of zero  the (old and new) cookie is discarded. Otherwise cookies accumulate until they expire (resources permitting)  at which time they are discarded.I.e. the equality is on the name  path and domain.", "id": "4292"}, "4298": {"ground_truth": "0", "bug_report": "FormTester doesn't handle nested forms correctly\nWhile working on WICKET-4295  I discovered that FormTester doesn't handle nested form submits correctly.The browser will always submit the outermost form  because that is the only form it sees. Wicket will then determine the correct form by looking at the submitting component. If you create a FormTester on an inner form  however  the test request will point directly at that inner form. This is a problem for the new feature in WICKET-4295  but also in general since it does not correctly model the actual interaction. Also the submitting component is not found due to the wrong form being looked at. (form.getRootForm() == Form.this in Form#findSubmittingButton()) This means that for a nested form  the submitting component could never be found! I think it's mostly luck that this is not a bigger issue in tests It is possible to have the correct handling in a test  if you do newFormTester(outerForm) and then submit with a submit button in the inner form (formtester.submit('inner:submitButton')).I think FormTester should do the correct thing on its own though. The fix is trivial: in submit() don't just use the form it's pointing at  but use form.getRootForm(). This fixes both the correct request handling  as well as the issue with not finding the submitting component.I'll attach the appropriate patches.", "id": "4298"}, "4309": {"ground_truth": "0", "bug_report": "StringValueConversionException for correct situation\nStringValue.toOptionalLong() produces org.apache.wicket.util.string.StringValueConversionException if empty string was passed.Let me suggest  that this behavior should be changes for all toOptionalXXX methods except getOptionalString method.The problem in inner code:The problem in following code:public final Long toOptionalLong() throws StringValueConversionException { return (text == null) ? null : toLongObject(); }Should be something like this:The problem in following code:public final Long toOptionalLong() throws StringValueConversionException { return Strings.isEmpty() ? null : toLongObject(); }But there is another problem: what to do if incorrect param was passed - for example 'abc' for parameter of Long type?", "id": "4309"}, "4317": {"ground_truth": "0", "bug_report": "Logic or Exception Message is incorrect in ModalWindow.setCookieName\nThe logic of the compound conditional statement is incorrect or the message passed to the Exception is incorrect. /** Sets the name of the cookie that is used to remember window position (and size if the window is resizable).  @param cookieName Name of the cookie @return this */ public StatelessModalWindow setCookieName(String cookieName) Unknown macro: { if (cookieName != null &amp;&amp; cookieName.indexOf(&quot; &quot;) != -1 &amp;&amp; cookieName.indexOf(&quot;|&quot;) != -1) { throw new IllegalArgumentException('Cookie name may not contain ' ' or '|' characters.'); } this.cookieName = cookieName; return this; } The logic reads: If the String is not null and it contains a comma and it contains a pipe  then throw the exception.", "id": "4317"}, "4325": {"ground_truth": "0", "bug_report": "Wicket autocomplete doesn't take the scrollbar into account when calculating the width\nWicket autocomplete doesn't take the scrollbar into account when calculating the width", "id": "4325"}, "4326": {"ground_truth": "0", "bug_report": "Make AjaxRequestTarget an interface and move the impl to AjaxRequestHandler\nAjaxRequestTarget is a class with many final methods and constructor which relies on ThreadLocal (RequestCycle.get()) which makes it difficult to mock it for testing.By introducing IAjaxRequestHandler interface this problem will be solved. This additionally will allow to provide custom implementation which may generate JSON ajax response instead of XML.The change is simple but it changes the signature of all onXyz() (onEvent  onClick  onUpdate  ...) methods and this will cause a lot of compilation errors.The fix is quite easy though: replace AjaxRequestTarget with IAjaxRequestHandler.", "id": "4326"}, "4340": {"ground_truth": "0", "bug_report": "Rerendering a page with WicketTester after you loose permission does not give access-denied\nSince WICKET-4256 WicketTester does not give an access-denied page when you try to rerender a page instance after loosing permission to render that page. A testcase is added to WicketTesterTest (rerenderNotAllowed) to demonstrate the problem.", "id": "4340"}, "4344": {"ground_truth": "0", "bug_report": "Implement onValidateModelObjects() and beforeUpdateFormComponentModels() for nested forms\nThe onValidateModelObjects() Method in a Form is used for late-stage validation that allows outside frameworks to validate any beans that the form is updating (like JSR303 Bean Validation). This method is called after the model is updated.If you override this method for validation in your form and your form is nested in another form  this method will not be invoked if the outer form is submitted. Only the onValidateModelObjects() Method of the outer form is invoked.It would be great  if you change the implementation in the form in that way you did for the nested form validation and submission.The same problem exists for the beforeUpdateFormComponentModels() Method.", "id": "4344"}, "4349": {"ground_truth": "0", "bug_report": "Extract the code that creates the XML for Ajax responses out of AjaxRequestHandler\nCurrently the code that generates the &lt;ajax-response&gt; object is inside AjaxRequestHandler and it is impossible to reuse it.It will be better if the response data and the logic to serialize it is outside. This way other IRequestHandlers can reuse it or a different serialization strategy can be applied (e.g. JSON).", "id": "4349"}, "4358": {"ground_truth": "0", "bug_report": "BufferedWebResponse fails to add/clear cookie in redirect\nbufferedWebResponse.addCookie( cookie );That fails under certain conditions: (1) when called on the last of three 302 redirects during OpenID login; and (2) on single redirect immediately after container startup  though it later recovers. Failure confirmed in Firebug; no cookies sent in any of the response headers. My workaround is to bypass the buffered response. This works:((HttpServletResponse)bufferedWebResponse.getContainerResponse()).addCookie( cookie );", "id": "4358"}, "4361": {"ground_truth": "0", "bug_report": "Markup Inheritance & getVariation(): markup loading (and merging) order depends on whether the super constructor adds components or not.\nI have a web page 'ChildPage' that inherits (java/markup) from a 'SuperPage' ('ChildPage' --&gt; 'SuperPage'). 'ChildPage' now needs to override getVariation() to return a variation string  for example 'test'. The variation string is preferably set in the ChildPages constructor  maybe by a PageParameter.I would expect the following markup: ChildPage_test.html merged with SuperPage.html. This is the case  when SuperPage has no component added in its constructor. But when SuperPage has a component added in constructor  then I get ChildPage.html merged with SuperPage.html.quickstart 'myproject_1.5.4' (wicket 1.5.4) shows:ChildPage1 inherits from SuperPage1 (no component added)ChildPage2 inherits from SuperPage2 (label added) Click on 'load ChildPage1_test.html ' -&gt; markup ok: ChildPage1_test.html merged with SuperPage1.html Click on 'load ChildPage2_test.html ' -&gt; markup not ok: ChildPage2.html merged with SuperPage2.html : expected ChildPage2_test.html merged with SuperPage2.htmlsame with 'myproject2_1.4.19' (wicket 1.4.19) works fine!At the moment I moved the logic into getVariation() with: return getPageParameters.get('variation').toString();This works and that's why I'm unsure if it is a bug at all.Here is some debugging output from MarkupCache:1 : hildPage1 inherits from SuperPage1 (no component added)child constructor ------&gt; Class=ChildPage1 variationString=testDEBUG - MarkupCache - Load markup: cacheKey=com.mycompany.ChildPage1_test_en_US.htmlDEBUG - MarkupCache - Loading markup from file:/C:/testumgebung/eclipseWorkspace/myproject/target/classes/com/mycompany/ChildPage1_test.htmlDEBUG - AbstractMarkupParser - The markup file does not have a XML declaration prolog with 'encoding' attribute:file:/C:/testumgebung/eclipseWorkspace/myproject/target/classes/com/mycompany/ChildPage1_test.html. It is more save to use it. E.g. &lt;?xml version='1.0' encoding='UTF-8' ?&gt;DEBUG - WebAppClassLoader - loaded class com.mycompany.ChildPage1 from sun.misc.Launcher$AppClassLoader@11b86e7DEBUG - MarkupCache - Load markup: cacheKey=com.mycompany.SuperPage1_test_en_US.htmlDEBUG - MarkupCache - Loading markup from file:/C:/testumgebung/eclipseWorkspace/myproject/target/classes/com/mycompany/SuperPage1.htmlDEBUG - AbstractMarkupParser - The markup file does not have a XML declaration prolog with 'encoding' attribute:file:/C:/testumgebung/eclipseWorkspace/myproject/target/classes/com/mycompany/SuperPage1.html. It is more save to use it. E.g. &lt;?xml version='1.0' encoding='UTF-8' ?&gt;DEBUG - MergedMarkup - Merge markup: derived markup: ChildPage1_test.html; base markup: SuperPage1.htmlDEBUG - WebAppClassLoader - loaded class com.mycompany.SuperPage1 from sun.misc.Launcher$AppClassLoader@11b86e7DEBUG - MergedMarkup - Merge markup: file:/C:/testumgebung/eclipseWorkspace/myproject/target/classes/com/mycompany/ChildPage1_test.html2: ChildPage2 inherits from SuperPage2 (label added)DEBUG - MarkupCache - Load markup: cacheKey=com.mycompany.ChildPage2_en_US.htmlDEBUG - MarkupCache - Loading markup from file:/C:/testumgebung/eclipseWorkspace/myproject/target/classes/com/mycompany/ChildPage2.htmlDEBUG - AbstractMarkupParser - The markup file does not have a XML declaration prolog with 'encoding' attribute:file:/C:/testumgebung/eclipseWorkspace/myproject/target/classes/com/mycompany/ChildPage2.html. It is more save to use it. E.g. &lt;?xml version='1.0' encoding='UTF-8' ?&gt;DEBUG - WebAppClassLoader - loaded class com.mycompany.ChildPage2 from sun.misc.Launcher$AppClassLoader@11b86e7DEBUG - MarkupCache - Load markup: cacheKey=com.mycompany.SuperPage2_en_US.htmlDEBUG - MarkupCache - Loading markup from file:/C:/testumgebung/eclipseWorkspace/myproject/target/classes/com/mycompany/SuperPage2.htmlDEBUG - AbstractMarkupParser - The markup file does not have a XML declaration prolog with 'encoding' attribute:file:/C:/testumgebung/eclipseWorkspace/myproject/target/classes/com/mycompany/SuperPage2.html. It is more save to use it. E.g. &lt;?xml version='1.0' encoding='UTF-8' ?&gt;DEBUG - MergedMarkup - Merge markup: derived markup: ChildPage2.html; base markup: SuperPage2.htmlDEBUG - WebAppClassLoader - loaded class com.mycompany.SuperPage2 from sun.misc.Launcher$AppClassLoader@11b86e7DEBUG - MergedMarkup - Merge markup: file:/C:/testumgebung/eclipseWorkspace/myproject/target/classes/com/mycompany/ChildPage2.html...child constructor ------&gt; Class=ChildPage2 variationString=test", "id": "4361"}, "4363": {"ground_truth": "0", "bug_report": "Duplicate html ID for generated divs in modal.js\nusing wicket's ModalWindow creates invalid markup since it creates two divs with id='_wicket_window_11'", "id": "4363"}, "4365": {"ground_truth": "0", "bug_report": "Form components' name/value are encoded in stateless form's action url\nStateless forms aren't working well as you can see on wicket examples: http://www.wicket-library.com/wicket-examples/stateless/fooThe first time you submit  (for example  the value 10)  everything works as supposed to. If you now change the value (to 11 for example) and submit the form  the value wicket shows is 10.I think the problem is stateless forms are generating an action URL with submitted values on query string  and when you resubmit the form  this values on query string replace the POST(or GET) values.", "id": "4365"}, "4368": {"ground_truth": "0", "bug_report": "Useless concatenation with empty string in DefaultAuthenticationStrategy.save\nThere is an empty string used in string construction in DefaultAuthenticationStrategy.save which is not necessary.", "id": "4368"}, "4372": {"ground_truth": "0", "bug_report": "Two WicketSerializableException classes\no.a.w.util.io.WicketSerializeableException is dead code  superceded by o.a.w.util.io.SerializableChecker$WicketSerializeableException.", "id": "4372"}, "4378": {"ground_truth": "0", "bug_report": "datatime extension's calendar-min.js appears to be corrupted / out of sync\nIn some cases  when including a datepicker as a component inside a modal window. Internet Explorer 7/8 throw a runtime exception.This happens only in deployment mode  after re-minifying calendar.js and replacing calendar-min.js the problem goes away  the files seem to be out of sync or corrupted.", "id": "4378"}, "4379": {"ground_truth": "1", "bug_report": "org.apache.wicket.validation.ValidatorAdapter class causes problem with validator properties to be loaded\nPROBLEM:&lt;e1nPL&gt; hi I am having such problem: &lt;e1nPL&gt; I have implemented validator by implementing IValidator&lt;T&gt; interface&lt;e1nPL&gt; and I have impelemnted the same validator by extending AbstractValidator&lt;T&gt; classCODE: ===================== VALIDATOR EXTENDED FROM AbstractValidator ===================== package com.mycompany; import java.util.regex.Pattern; import org.apache.wicket.IClusterable; import org.apache.wicket.util.lang.Classes; import org.apache.wicket.validation.IValidatable; import org.apache.wicket.validation.IValidator; import org.apache.wicket.validation.ValidationError; import org.apache.wicket.validation.validator.AbstractValidator; /** * @author e1n */ public class PasswordPolicyValidator&lt;T&gt; extends AbstractValidator&lt;T&gt; { private static final Pattern UPPER = Pattern.compile('&#91;A-Z&#93;'); private static final Pattern LOWER = Pattern.compile('&#91;a-z&#93;'); private static final Pattern NUMBER = Pattern.compile('&#91;0-9&#93;'); @Override public void onValidate(IValidatable&lt;T&gt; validatable) { final String password = (String)validatable.getValue(); if (!NUMBER.matcher(password).find()) { error(validatable  'no-digit'); } if (!LOWER.matcher(password).find()) { error(validatable  'no-lower'); } if (!UPPER.matcher(password).find()) { error(validatable  'no-upper'); }  }  @Override public void error(IValidatable&lt;T&gt; validatable  String errorKey) { ValidationError err = new ValidationError(); err.addMessageKey(Classes.simpleName(getClass()) + '.' + errorKey); validatable.error(err); }  }   =============== VALIDATOR directly implementing IValidator interfce ==================== package com.mycompany;  import java.util.regex.Pattern; import org.apache.wicket.IClusterable; import org.apache.wicket.util.lang.Classes; import org.apache.wicket.validation.IValidatable; import org.apache.wicket.validation.IValidator; import org.apache.wicket.validation.ValidationError; import org.apache.wicket.validation.validator.AbstractValidator;  /** * * @author e1n */ public class PasswordPolicyValidator&lt;T&gt; implements IValidator&lt;T&gt; {  private static final Pattern UPPER = Pattern.compile('&#91;A-Z&#93;'); private static final Pattern LOWER = Pattern.compile('&#91;a-z&#93;'); private static final Pattern NUMBER = Pattern.compile('&#91;0-9&#93;');  public void validate(IValidatable&lt;T&gt; validatable) { final String password = (String)validatable.getValue();  if (!NUMBER.matcher(password).find()) { error(validatable  'no-digit'); } if (!LOWER.matcher(password).find()) { error(validatable  'no-lower'); } if (!UPPER.matcher(password).find()) { error(validatable  'no-upper'); } } public void error(IValidatable&lt;T&gt; validatable  String errorKey) { ValidationError err = new ValidationError(); err.addMessageKey(Classes.simpleName(getClass()) + '.' + errorKey); validatable.error(err); } }&lt;e1nPL&gt; I also have properties file which is named after validator class&lt;e1nPL&gt; and placed in the same package&lt;e1nPL&gt; my problem is that when i use to validate my form field validator which implements IValidator interface it is not capable of loading error messages from properties file&lt;e1nPL&gt; but when i am using validator which is extending AbstractValidator class&lt;e1nPL&gt; properties file with error msgs gets loadedPOSSIBLE FIX:&lt;e1nPL&gt; ok i have found class which is responsible for my problem and it is probably a bug&lt;e1nPL&gt; org.apache.wicket.validation.ValidatorAdapter&lt;e1nPL&gt; which wraps classes that directly implements IValidator interface&lt;e1nPL&gt; then when resources are loaded  and properties file are searched in class path etc.  loaders search in wrong path that is build against org.apache.wicket.validation.ValidatorAdapter PLACE WHER FIX SHOULD OCCOURorg.apache.wicket.resource.loader.ValidatorStringResourceLoader::loadStringResource(java.lang.Class java.lang.String java.util.Locale java.lang.String java.lang.String)", "id": "4379"}, "4386": {"ground_truth": "0", "bug_report": "Add maxlength to  wicket-datetime hours  minutes input fields\nI watched an end user type an entire time into the hour component without tabbing over to the minute.So  I'd like to suggest a minor change to DateTimeField.html to add the maxlength='2' to the current size='2' on the hour/min input controls.I think it might be a simple way to give earlier feedback (I've found it unwise to rely on instructions like 'Please enter dates and times like this...' ).I can't think of any downside to this addition.", "id": "4386"}, "4387": {"ground_truth": "0", "bug_report": "StringIndexOutOfBoundsException when forwarding requests\nWe're getting StringIndexOutOfBoundsException from wicket when forwarding a request from our servlet filter (using request dispatcher) to wicket.The problem occurs whenever the original URI is shorter than the wicket filter mapping.I created an example webapp (based on the quickstart) in which a ForwardFilter is mapped to /f/* and it forwards all the requests to /wicket/ (see web.xml snippet below).With this webapp a request to 'http://localhost:8081/wicket/f/' results in the following exception:ERROR - RequestCycle - Error during processing error messagejava.lang.StringIndexOutOfBoundsException: String index out of range: -5 at java.lang.String.substring(String.java:1958) at java.lang.String.substring(String.java:1925) at org.apache.wicket.protocol.http.servlet.ServletWebRequest.getContextRelativeUrl(ServletWebRequest.java:180) at org.apache.wicket.protocol.http.servlet.ServletWebRequest.getClientUrl(ServletWebRequest.java:140) at org.apache.wicket.request.UrlRenderer.&lt;init&gt;(UrlRenderer.java:59) at org.apache.wicket.request.cycle.RequestCycle.newUrlRenderer(RequestCycle.java:148) at org.apache.wicket.request.cycle.RequestCycle.getUrlRenderer(RequestCycle.java:172) at org.apache.wicket.request.handler.render.WebPageRenderer.respond(WebPageRenderer.java:145) at org.apache.wicket.request.handler.RenderPageRequestHandler.respond(RenderPageRequestHandler.java:167) at org.apache.wicket.request.cycle.RequestCycle$HandlerExecutor.respond(RequestCycle.java:781) at org.apache.wicket.request.RequestHandlerStack.execute(RequestHandlerStack.java:64) at org.apache.wicket.request.cycle.RequestCycle.executeExceptionRequestHandler(RequestCycle.java:304) at org.apache.wicket.request.cycle.RequestCycle.executeExceptionRequestHandler(RequestCycle.java:313) at org.apache.wicket.request.cycle.RequestCycle.executeExceptionRequestHandler(RequestCycle.java:313) at org.apache.wicket.request.cycle.RequestCycle.executeExceptionRequestHandler(RequestCycle.java:313) at org.apache.wicket.request.cycle.RequestCycle.executeExceptionRequestHandler(RequestCycle.java:313) at org.apache.wicket.request.cycle.RequestCycle.executeExceptionRequestHandler(RequestCycle.java:313) at org.apache.wicket.request.cycle.RequestCycle.executeExceptionRequestHandler(RequestCycle.java:313) at org.apache.wicket.request.cycle.RequestCycle.executeExceptionRequestHandler(RequestCycle.java:313) at org.apache.wicket.request.cycle.RequestCycle.executeExceptionRequestHandler(RequestCycle.java:313) at org.apache.wicket.request.cycle.RequestCycle.executeExceptionRequestHandler(RequestCycle.java:313) at org.apache.wicket.request.cycle.RequestCycle.executeExceptionRequestHandler(RequestCycle.java:313) at org.apache.wicket.request.cycle.RequestCycle.processRequest(RequestCycle.java:227) at org.apache.wicket.request.cycle.RequestCycle.processRequestAndDetach(RequestCycle.java:283) at org.apache.wicket.protocol.http.WicketFilter.processRequest(WicketFilter.java:162) at org.apache.wicket.protocol.http.WicketFilter.doFilter(WicketFilter.java:218) at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:243) at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:210) at org.apache.catalina.core.ApplicationDispatcher.invoke(ApplicationDispatcher.java:684) at org.apache.catalina.core.ApplicationDispatcher.processRequest(ApplicationDispatcher.java:471) at org.apache.catalina.core.ApplicationDispatcher.doForward(ApplicationDispatcher.java:402) at org.apache.catalina.core.ApplicationDispatcher.forward(ApplicationDispatcher.java:329) at org.jfrog.ForwardFilter.doFilter(ForwardFilter.java:22) at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:243) at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:210) at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:240) at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:164) at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:498) at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:164) at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:100) at org.apache.catalina.valves.AccessLogValve.invoke(AccessLogValve.java:562) at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:118) at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:394) at org.apache.coyote.http11.Http11AprProcessor.process(Http11AprProcessor.java:284) at org.apache.coyote.http11.Http11AprProtocol$Http11ConnectionHandler.process(Http11AprProtocol.java:322) at org.apache.tomcat.util.net.AprEndpoint$SocketProcessor.run(AprEndpoint.java:1714) at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1110) at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:603) at java.lang.Thread.run(Thread.java:722)web.xml snippet &lt;filter&gt; &lt;filter-name&gt;forward&lt;/filter-name&gt; &lt;filter-class&gt;org.jfrog.ForwardFilter&lt;/filter-class&gt; &lt;/filter&gt; &lt;filter&gt; &lt;filter-name&gt;wicket.wicket&lt;/filter-name&gt; &lt;filter-class&gt;org.apache.wicket.protocol.http.WicketFilter&lt;/filter-class&gt; &lt;init-param&gt; &lt;param-name&gt;applicationClassName&lt;/param-name&gt; &lt;param-value&gt;org.jfrog.WicketApplication&lt;/param-value&gt; &lt;/init-param&gt; &lt;/filter&gt; &lt;filter-mapping&gt; &lt;filter-name&gt;forward&lt;/filter-name&gt; &lt;url-pattern&gt;/f/*&lt;/url-pattern&gt; &lt;/filter-mapping&gt; &lt;filter-mapping&gt; &lt;filter-name&gt;wicket.wicket&lt;/filter-name&gt; &lt;url-pattern&gt;/wicket/*&lt;/url-pattern&gt; &lt;dispatcher&gt;FORWARD&lt;/dispatcher&gt; &lt;dispatcher&gt;REQUEST&lt;/dispatcher&gt; &lt;/filter-mapping&gt;This bug is opened here following a bug we found in Artifactory after upgrading to Wicket 1.5", "id": "4387"}, "4412": {"ground_truth": "0", "bug_report": "ChoiceFilteredPropertyColumn with setNullValid to true\nWhen filtering with a ChoiceFilteredPropertyColumn  the 'Choose one' value disappears  so you can't undo the filter.Set 'setNullValid' to true in the ChoiceFilter class so that you can choose the null value.", "id": "4412"}, "4416": {"ground_truth": "0", "bug_report": "CheckGroup model in AjaxFormChoiceComponentUpdatingBehavior onUpdate contains only last checked item\nCheckGroup model in AjaxFormChoiceComponentUpdatingBehavior onUpdate contains only last checked item.P.S. A model in Form onSubmit contains all selected items.", "id": "4416"}, "4420": {"ground_truth": "0", "bug_report": "Unversioned pages don't get touched when created and cannot be found by ID later\nWhen I tell Wicket not to version pages by default via IPageSettings#setVersionPagesByDefault(false)  created pages cannot be found later by theirs ID. Versioned pages are touched upon creation in dirty(boolean) method and thus stored in the page store. But unversioned ones are not! So when I create a Page  wrap it inside a PageProvider and RenderPageRequestHandler  then get its URL with urlFor  the URL is useless  because the page is referenced by its ID in the URL but it cannot be found by that URL later.I'll give you an simple example.PAGE 1: public class WicketMainPage extends WebPage {  public WicketMainPage() { PopupPage page = new PopupPage('Created: ' + new Date()); // getSession().getPageManager().touchPage(page); PageProvider pp = new PageProvider(page); RenderPageRequestHandler rh = new RenderPageRequestHandler(pp); add(new Label('url'  urlFor(rh).toString())); } } as you can see  I only create an instance of second page (which is not bookmarkable as it has some parameters)  wrap it in page provider and request handler and simply output URL for it (of course it is an stateful URL). The second page is just simple outputting text from constructor PAGE 2: public class PopupPage extends WebPage {  public PopupPage(String text) { add(new Label('text'  text)); } } When I run this  the app outputs an relative part of URL to the second page... if I copy this into browser  everything works  when pages are versioned. But when I set setVersionPagesByDefault(false) I start to get PageExpiredException whe trying to access the second page. When I uncomment the touchPage line  everythings works even with unversiones paged. I think  that instead of explicitly touching the page  it should be done by Wicket when retrieving the url for it. Somewhere in mapUrlFor or mapHandler  etc... Or maybe it should be touched in the dirty method just like versioned pages.", "id": "4420"}, "4425": {"ground_truth": "0", "bug_report": "Wicket 1.5 rewrites template content where it should not\nI have recently upgraded from Wicket 1.4.14 to 1.5.4. One issue that Iencountered is that &lt;script&gt; tags in panel templates are rewritten byWicket  even when the &lt;script&gt; tags in question have no wicket handlersattached to them. I.e. the following panel template (notice that thereare no wicket:id attributes whatsoever):&lt;wicket:panel&gt; &lt;script id='template-upload' type='text/x-jquery-tmpl'&gt; &lt;span&gt;${name}&lt;/span&gt; &lt;/script&gt;&lt;/wicket:panel&gt;Would render in the panel as:&lt;script id='template-upload' type='text/x-jquery-tmpl'&gt;/&lt;![CDATA[/ &lt;span&gt;${name}&lt;/span&gt;/]]&gt;/&lt;/script&gt;Imho this is unwanted behavior that is a regression from the behavior inWicket 1.4.x (or at least 1.4.14). Wicket should not add content to thebody of the script tags (or any other tags in a template  unless theircontent is provided programmatically)  as it does not have the knowledgehow that affects the functionality of the page. Moreover  the contentthat Wicket adds to these script tags is only correct for Javascript(hence incorrect for the scripts in the example as they are notjavascript). In the above example adding /*  */will change the functionality of the script tag. If the '/&lt;![CDATA[/'part was necessary in the script tags above  they should be added by theperson that provides the template  not magically added by Wicket.I have attached a quickstart that demonstrates the issue. The quickstart has a &lt;script id='script1'&gt;Some Text&lt;/script&gt; element in HomePage.html that (by javascript) is shown in an alert box. Because of this bug  the alert will now start with '/&lt;![CDATA[/'  while it should simply show the text. See HomePage.html in the provided quickstart.", "id": "4425"}, "4429": {"ground_truth": "0", "bug_report": "executeAllTimerBehaviors does not find all timer behaviours\nWicketTester tester = new WicketTester();tester.startPage(WaitPage.class);tester.assertRenderedPage(WaitPage.class);tester.executeAllTimerBehaviors(tester.getLastRenderedPage()); public WaitPage() { Label message = new Label('message'  'Please wait ..'); add(message); add(new AjaxSelfUpdatingTimerBehavior(Duration.milliseconds(1000)) { @Override protected void onPostProcessTarget(AjaxRequestTarget target) { // wait for background thread to complete // if (task.isDone()) { ... stop(); setResponsePage(NextPage.class); } });The timer does not fire.Problem 1: The code looks for MarkupContainers Problem 2: The code looks for AjaxSelfUpdatingTimerBehavior but should look for AbstractAjaxTimerBehavior", "id": "4429"}, "4434": {"ground_truth": "0", "bug_report": "Replace all String.split(char) with Wicket's Strings.split(String  char) for better performance\njava.lang.String#split() method uses not-compiled java.lang.regex.Pattern objects to do its job. For splitting on a single character it is much better to use wicket-util's Strings#split(String  char)", "id": "4434"}, "4441": {"ground_truth": "0", "bug_report": "PageProvider should create a new Page instance if PageParameters are changed  even if a stored page exists.\nThe 'getStoredPage(int)' method returns a stored page instance even if user changes parameter values encoded into URL  and the PageParameters object of the stored page instance is never changed. So same page is displayed always though user changes url on browser manually.   HOW TO REPRODUCT **  1. unpack the attached sample project 'pagebug.tar.gz'.2. mvn jetty:run3. access to http://localhost:8080/user/user1You will see a form filled with information about user 1. The user's name is 'user 1'  age is 30 and country is 'Japan'.The mount path of this page is '/user/${userId}'. so 'user1' in the accessed url is a parameter value.after accessing to the url  the url will be changed to http://localhost:8080/user/user1?0 . it contains the page id of the currently displayed page.4. change some values and submit the form. page id will be changed on every submit.5. change only parameter value in url to 'user2'. Never change page-id.for example  if you now access to http://localhost:8080/user/user1?5  change the url to http://localhost:8080/user/user2?5 .6. This program must display information about user2  because the parameter value of url is changed. But you will see the information of user 1. Wicket always display the page of page-id = 5 (even though user changed url manually).In this sample program  I use LoadableDetachableModel for retrieving current parameter-value. But I don't get the new parameter-value because pageParameters object in a page instance is never changed after the construction. pageParameters is fixed in the constructor of Page class.I think that there are no easy way to retrieve parameter-values encoded into mount-path. Request.getRequestParameters() does not contain parameters encoded into mount-path. So there are no work-around for this issue.   HOW TO FIX THIS ISSUE **  We must return null from getStoredPage(int) method of PageProvider class  if current PageParameters is not same with the PageParameters of a stored page. In current code  getStoredPage(int) checks only if the class of both pages are same. We must check the PageParameters of both pages.   PATCH **  I attached a pache for PageProvider class. try it.", "id": "4441"}, "4446": {"ground_truth": "0", "bug_report": "processScript in Wicket.Head.Contributor doesn't remove CDATA - eval fails in IE\nThere's incosistency between org.apache.wicket.util.string.JavaScriptUtils and wicket-ajax.jsEven though the source is marked with comment Script open tag. If this tag is changed  also update Wicket.Head.Contributor.processScript() function from wicket-ajax.jsIn JavaScriptUtils there are:public final static String SCRIPT_CONTENT_PREFIX = '/n/&lt;![CDATA[//n';public final static String SCRIPT_CONTENT_SUFFIX = '/n/]]&gt;//n';in wicket-ajax.js (line 1742 in 1.5.5 version) there are:// get rid of prefix and suffix  they are not eval-d correctlytext = text.replace(/^&lt;Unable to render embedded object: File (--//&#42;--&gt;&lt;) not found.[CDATA[//&#42;&gt;&lt;!--&#42;///  '');text = text.replace(///&#42;--&gt;]]&gt;&#42;//$/  '');As you can see the sequences in java and javascript DO NOT MATCH! There are missing new lines in JS and there are extra HTML comments &lt;!-- --&gt; that aren't added by the Java code.The result is  that these extra lines aren't removed and IE fails to eval such a javascript. I could fix this issue by editing the wicket-ajax.js like this:text = text.replace(/^/n//&#42;&lt;![CDATA[&#42;///n/  '');text = text.replace(//n//&#42;]]&gt;&#42;///n$/  '');But we need it fixed officially  because we use gradle for Wicket dependency.", "id": "4446"}, "4449": {"ground_truth": "0", "bug_report": "Change IValidationError API to work with java.io.Serializable as other methods (info  error  success  ...) in Component and Session\nSince a while o.a.w.Component's and o.a.w.Session #info()  #error()  #success()  etc. methods accept java.io.Serializable.With this ticket I suggest a change that will make o.a.w.validation.IValidationError in sync with this.", "id": "4449"}, "4454": {"ground_truth": "0", "bug_report": "Repaint the initial state of the page if the page is expired  a new one is freshly created and the requested component is not available\nFrom the users@ mailing list: http://markmail.org/thread/ttox5ymihtf5y55iA ComponentNotFoundException is being thrown if the page is expired  a new page is freshly created and due to component replacement the requested sub-component is not reachable.The parent component depends on whether a user is logged in. The sub-component has a link inside which is not reachable after page expiration because a different parent component is used in this case.", "id": "4454"}, "4457": {"ground_truth": "0", "bug_report": "setTextEncoding on JavascriptResourceReferences/CssResourceReferences\nSetting the encoding of JavascriptResources and CssResources in wicket is by now not easily to achieve.By now only html files are equipped with the charset option afterwads  but not CSS or JS files. Content-Type: application/javascript;charset=UTF8org.apache.wicket.request.resource.AbstractResource#setResponseHeaders() does take the textEncoding into account but there is no way to set it from the outside without introducing new classes by copy/pasting existing Resources and adapt them. The only resource which is able to modify the content-type through the constructor is the TextTemplateResource. One can specify 'application/javascript; charset=UTF8' and pass it as the content-type parameter. It's a hack  but this string then used for the content-type header.A separate charset parameter would be better in my opinion. UserGroup post: http://apache-wicket.1842946.n4.nabble.com/setTextEncoding-on-JavascriptResourceReferences-CssResourceReferences-td4472204.html", "id": "4457"}, "4465": {"ground_truth": "0", "bug_report": "Autocomplete IE javascript error: 'target' is null or not an object\nWhen I click to autocomplete textfield the javascript error bellow is shown.Webpage error detailsUser Agent: Mozilla/4.0 (compatible; MSIE 8.0; Windows NT 6.1; WOW64; Trident/4.0; SLCC2; .NET CLR 2.0.50727; .NET CLR 3.5.30729; .NET CLR 3.0.30729)Timestamp: Thu  22 Mar 2012 08:05:57 UTCMessage: 'target' is null or not an objectLine: 68Char: 1Code: 0URI: http://xxx:8080/wicket/resource/org.apache.wicket.extensions.ajax.markup.html.autocomplete.AutoCompleteBehavior/wicket-autocomplete-ver-C51E30D722C9620E9D06F141A171849F.jsWicket 1.5.4 works fine.", "id": "4465"}, "4466": {"ground_truth": "0", "bug_report": "Use an external host for the static javascript files (specially JQuery)\nThere should be some (easy) way to specify an external URL (for example  on a CDN) for the JQuery script.IJavaScriptLibrarySettings.setJQueryReference() takes only a ResourceReference as a parameter  that must point to an application resource. One could create an IResource that redirects to the CDN  but that would require an additional request anyway.That support should exist also for wicket-ajax.js and wicket-event.js  but it is less of an issue  since they are tied to the Wicket version anyway (JQuery is hosted for free in a number of CDNs  so using them is very compelling).If there is some workaround  it should be documented in the wiki.", "id": "4466"}, "4468": {"ground_truth": "0", "bug_report": "Stateful components which are invisible force page to be stateful\nStateful components which are not rendered (setVisible(false)) force the page to be stateful.Page#isPageStateless() visits all components to check Component#isStateless()  whether they are visible or not.Please change this so invisible components no longer force a page to be stateful.", "id": "4468"}, "4471": {"ground_truth": "0", "bug_report": "Generic registry of javascript/css resource references\nIt would be nice if JavaScriptLibrarySettings had a generic mechanism to register javascript/css resource references (maybe using something like MetaDataKeys).This way  extension/third-party components (ModalWindow  DateTimeField  etc.) could register their resources  or just lookup for substitute resource references for their own scripts/stylesheets.This would allow some optimizations  such as minification/compression and joining many files into one  and hosting static files in CDNs.", "id": "4471"}, "4475": {"ground_truth": "0", "bug_report": "Inline Enclosure needs to check isVisibleInHierarchy  not only isVisible\nIf the Visibility of the child component from the inline enclure uses setVisibleAllowed  the enclosure is rendered if the component is not visible. Take a look to the updateVisibility-method of the InlineEnclosure-Class. In my opinion the method should check for isVisibleInHierarchy.", "id": "4475"}, "4479": {"ground_truth": "0", "bug_report": "ModificationWatcher easier for extending\norg.apache.wicket.util.watch.ModificationWatcher is very well encapsulated and if someone wants to extend it then he will have to copy/paste its code in the new class.The purpose of this task is to make ModificationWatcher more friendly for sub-classing.", "id": "4479"}, "4481": {"ground_truth": "0", "bug_report": "Add setHeader() to MockHttpServletRequest to be able to override default headers\norg.apache.wicket.protocol.http.mock.MockHttpServletRequest#setDefaultHeaders() sets few default headers but since there is only #addHeader() and no #setHeader() there is no way to override the value of 'User-Agent' header for example.http://stackoverflow.com/questions/9893609/can-one-set-the-browser-type-in-wicket-1-5-test-cases", "id": "4481"}, "4483": {"ground_truth": "0", "bug_report": "Component#setDefaultModel() should call #modelChanging()\nComponent#setDefaultModel() should call #modelChanging() as #setDefaultModelObject() does.It worked by chance so far because addStateChange() is called.http://markmail.org/thread/uxl6uufusggqbb6s", "id": "4483"}, "4484": {"ground_truth": "0", "bug_report": "wicket:link component ids get too long\nThe resolve() method of org.apache.wicket.markup.parser.filter.WicketLinkTagHandler appends modifies the original tag id and appends the next autoId to it. The problem is that this is done during every render  the the component id gets longer and longer.I had a situation on a production server where component ids were over 10k. RepeatingView just added to the problem.Long story short  I think resolve should just return the TransparentWebMarkupContainer with the modified id  and not set the original id.", "id": "4484"}, "4485": {"ground_truth": "0", "bug_report": "TagUtils uses wrong separator in its #copyAttributes()\norg.apache.wicket.markup.TagUtils#copyAttributes(Component  ComponentTag) uses '  ' as a separator for the attributes that it copies.If the attribute is 'class' then the separator should be ' '  if it is 'style' or 'onclick' then it should be '; '  ...", "id": "4485"}, "4486": {"ground_truth": "0", "bug_report": "Give StringValue toEnum methods\nIn 1.4  Resources had a ValueMap as parameters  which had among other methods #getAsEnum. In 1.5  PageParameters are used instead  and the StringValues used here have all kinds of toSomething methods  but nothing for enums. I propose adding these for completeness.", "id": "4486"}, "4487": {"ground_truth": "0", "bug_report": "TextTemplate in RenderHead() on component doesn't Re-Render for every page\nI have a project that uses a menu thats repeated on every page. If I first view it on a mounted page /PageName and then look at it on a BookMarkable page/wicket/bookmarkable/page.class.name?foo the images referenced in my template do not appear.(the javascript template image strings do not change)", "id": "4487"}, "4494": {"ground_truth": "0", "bug_report": "HtmlHandler wrongly handles tags not requiring closed tags if the markup does not have 'top' level tag\nHi  I have custom component (extends MarkupContainer implements IMarkupCacheKeyProvider  IMarkupResourceStreamProvider) which fetches its HTML markup from database. Following HTML markup: &lt;img alt='' src='logo.png'&gt; &lt;br&gt;Some text &lt;br&gt;Some more text causes following error: 2012-04-12 10:52:53 012 &#91;http-8080-6&#93; ERROR: Unexpected error occurred Unable to find close tag for: '&lt;img alt='logo' src='logo.png'&gt;' in org.apache.wicket.util.resource.StringResourceStream@3d7e16fc  MarkupStream: &#91;unknown&#93;  at org.apache.wicket.markup.MarkupFragment.&lt;init&gt;(MarkupFragment.java:127)  at org.apache.wicket.markup.MarkupStream.getMarkupFragment(MarkupStream.java:485)  at org.apache.wicket.MarkupContainer.autoAdd(MarkupContainer.java:244)  at org.apache.wicket.MarkupContainer.renderNext(MarkupContainer.java:1421)  at org.apache.wicket.MarkupContainer.renderAll(MarkupContainer.java:1596)  at org.apache.wicket.MarkupContainer.renderComponentTagBody(MarkupContainer.java:1571)  at org.apache.wicket.MarkupContainer.onComponentTagBody(MarkupContainer.java:1525) I think the problem is that org.apache.wicket.markup.parser.filter.HtmlHandler does not handle such markup correctly. It does not call ComponentTag.setHasNoCloseTag(true) for the img tag. Such call is missing in postProcess() method. I think that this problem can be fixed by inserting: top.setHasNoCloseTag(true); after line 80 in HtmlHandler.java file. Michal", "id": "4494"}, "4501": {"ground_truth": "0", "bug_report": "NumberTextField renders its value in unsupported number format\nThe issue is similar to WICKET-3591 but its fix doesn't help when the model object of the NumberTextField is a BigDecimal because BigDecimalConverter#convertToString() produces something like '123  456  789' and this is not supported by &lt;input type='number'&gt;'s spec: http://dev.w3.org/html5/markup/datatypes.html#common.data.float.", "id": "4501"}, "4502": {"ground_truth": "0", "bug_report": "Make it easier to produce a page with links with absolute urls\nWe needed to create a page which links have absolute urls (protocol  host  port included). So I created a simple extension of MountedMapper that makes the relative url returned by super.mapHandler() to an absolute one.So far so far but later Wicket uses org.apache.wicket.request.UrlRenderer#shouldRenderAsFull() to decide whether to actually render the url as full (i.e. as absolute) and since the protocol  the host and the port matches with the current request's url attributes it decides to render the url as relative.Since Url class is final it is not possible to create a custom AbsoluteUrl which #toString() delegates to #toString(StringMode.FULL).I see two solutions:1) provide AbsoluteUrl class which is again final and uses StringMode.FULL2) add a boolean flag to Url that is used by UrlRenderer#shouldRenderAsFull() so I can force full modeDo you have other solutions ?", "id": "4502"}, "4504": {"ground_truth": "0", "bug_report": "AjaxLazyLoadPanel not replaced within AjaxTabbedPanel\nAn AjaxLazyLoadPanel is not replaced when added as panel of an AbstractTab within an AjaxTabbedPanel.A set breakpoint in AjaxLazyLoadPanel constructor at AbstractDefaultAjaxBehavior.respond method is never reached.The attached quickstart will demonstrate the behavior.This is reproducible with version 6.0.0-beta1 and 6.0-SNAPSHOT.", "id": "4504"}, "4505": {"ground_truth": "0", "bug_report": "AbstractTextComponent not escaping html data by default therefore user text is not redisplayed correctly\nUser input is not escaped in all text fields by default (and the default is not configurable).This leads to user entered text not being redisplayed correctly. You can replicate using the project from WICKET-3330. Just enter the text my&frac12;companyname and press enter The field will not redisplay the text entered properly", "id": "4505"}, "4506": {"ground_truth": "0", "bug_report": "Fix missing in 1.4.19  was fixed in 1.3.3:  Discrepancy between Button implementation of getForm and the code in Form.findSubmittingButton()\nThere is a discrepancy between Button implementation of getForm (derived from FromComponent) and the code in org.apache.wicket.markup.html.form.Form.findSubmittingButton()Last one assumes form can be null while org.apache.wicket.markup.html.form.FormComponent.getForm() throws an exception if it is soThis was fixed in 1.3.3 based on https://issues.apache.org/jira/browse/WICKET-1414. Please migrate the fix to 1.4 code line.", "id": "4506"}, "4507": {"ground_truth": "0", "bug_report": "wicktTester.getLastResponseAsString() returns wrong result after starting a Component\n&gt; This following test : @Test public void test() throws Exception { WicketTester tester=new WicketTester(); tester.startComponentInPage(new Label('lableId'  'content') { @Override protected void onComponentTag(ComponentTag tag) { super.onComponentTag(tag); tag.put('test' '123'); } }); tester.assertResultPage('icket:id=/'lableId/' test=/'123/'&gt;content'); assertEquals('icket:id=/'lableId/' test=/'123 /'&gt;content' tester.getLastResponseAsString()); assertEquals('' tester.getResponse().getDocument());}exposes the wrong behaviour of test.getLastResponseAsString() after starting a component.It should return something such as '&lt;span&gt; .... &lt;/span&gt;'  bit it returns a string 'cut in the middle' : cket:id=/'lableId/' test=/'123/'&gt;contentsee attached quickstart", "id": "4507"}, "4509": {"ground_truth": "0", "bug_report": "Spaces in path cause ModifcationWatcher to fail\nThe ModificationWatcher isn't able to reload resource files if there's a space in the path.The problem is that Files#getLocalFileFromUrl(String) receives an URL encoded String in which spaces are encoded to %20. They are never decoded and passed to File(). The fix is not to use the external representation of an URL but the file representation.", "id": "4509"}, "4514": {"ground_truth": "0", "bug_report": "UrlRenderer produces wrong full urls when the passed parameter is not absolute (as Url understands 'absolute')\nCode like:Url baseUrl = Url.parse('one/two/three');baseUrl.setProtocol('http');baseUrl.setHost('www.example.com');baseUrl.setPort(8888);UrlRenderer renderer = new UrlRenderer(new MockWebRequest(baseUrl));renderer.setBaseUrl(baseUrl); // this is needed because MockWebRequest cuts dataString fullUrl = renderer.renderFullUrl(Url.parse('../four'));Produces url: http://www.example.com/../four while it has to be http://www.example.com/one/four", "id": "4514"}, "4518": {"ground_truth": "0", "bug_report": "Wicket example 'forminput' is broken due to bad url for IOnChangeListener\nhttp://localhost:8080/forminput (wicket-examples) doesn't change the locale of the labels when the locale select is changed.The reason seems to be the produced url: './.?5-1.IOnChangeListener-inputForm-localeSelect' This is parsed to a Url with one empty segment and thus HomePageMapper doesn't match it and doesn't handle it.", "id": "4518"}, "4526": {"ground_truth": "0", "bug_report": "OpenCloseTagExpander should include i tag\nThe OpenCloseTagExpander automatically expands similar tags like 'b'  'em' and 'strong' but not 'i'. To be consistent the 'i' tag should also be transformed.", "id": "4526"}, "4527": {"ground_truth": "0", "bug_report": "Recorder#getSelectedChoices() can be very slow under certain circumstances\nIn Recorder#getSelectedChoices() the inner for-loop getPalette().getChoices() is called for every iteration. Depending on the efficiency of the implementation of the underlying model this might result in poor performance.", "id": "4527"}, "4529": {"ground_truth": "0", "bug_report": "AjaxEditableLabel not selecting text or moving cursor on Firefox 11.0 or Safari 5.0.5\nThe class Javadoc for AjaxEditableLabel says:'''onEdit(AjaxRequestTarget) is called when the label is clicked and the editor is to be displayed. The default implementation switches the label for the editor and places the caret at the end of the text.&lt;/li&gt;'''However this does not happen on Firefox or Safari.Looking at the code  it is actually trying to place the caret at the end of the line and selecting the text in the form field. (This selecting the text is what I also want  and also the most common behavior of such ajax-editable fields on other big websites on the Internet)// put focus on the textfield and stupid explorer hack to move the// caret to the endtarget.appendJavaScript('{ var el=wicketGet('' + editor.getMarkupId() + '');' + ' if (el.createTextRange) { ' + ' var v = el.value; var r = el.createTextRange(); ' + ' r.moveStart('character'  v.length); r.select(); } }');target.focusComponent(editor);However the 'stupid explorer hack' as the code calls it  probably only works on explorer  because the el.createTextRange method is quite old and deprecated (it's only needed on MSIE &lt;9)I'm getting good results by just calling select() on the DOM element. I don't have MSIE available to test there but I think it will work there too.// put focus on the textfield and stupid explorer hack to move the// caret to the endtarget.appendJavaScript('{ var el=wicketGet('' + editor.getMarkupId() + '');' + ' el.select(); ' + ' }');target.focusComponent(editor);", "id": "4529"}, "4530": {"ground_truth": "0", "bug_report": "Final methods on ResourceNameIterator prevent full customization of IResourceStreamLocator\nIResourceStreamLocator contains the method newResourceNameIterator(...) which builds a ResourceNameIterator. Unfortunately ResourceNameIterator declares several getter methods (getLocale()  getStyle()  getVariation()  getExtension()) as final and thus ties the public API to the internal implementation of ResourceNameIterator. Therefore it's not possible to fully customize the behavior of ResourceNameIterator by subclassing.", "id": "4530"}, "4537": {"ground_truth": "0", "bug_report": "Add Generics to TabbedPanel:\nIn 1.5  TabbedPanel#tabs has a wildcard signature: List&lt;? extends ITab&gt;. This makes it impossible to add tabs to that list  even though adding panels is one of the stated purposes of the #getTabs() method.On #wicket  dashorst suggested giving TabbedPanel a type parameter &lt;T extends ITab&gt;  which I think is a good idea. It should definitely be added in 6.0.What about 1.5.x? This would be a source-level break  but I think binaries should still work.", "id": "4537"}, "4543": {"ground_truth": "0", "bug_report": "AbstractDefaultAjaxBehavior.getCallbackFunctionBody uses jQuery.extend\nWicket components should not rely on jQuery. jQuery.extend should be made available through the Wicket JS api and AbstractDefaultAjaxBehavior.getCallbackFunctionBody should use that.", "id": "4543"}, "4546": {"ground_truth": "0", "bug_report": "Unencoded ampersands in CSS-/Javascript-Reference\nAmpersands in CSS-/Javascript-References are not encoded properly  see the source code (html) in:http://www.wicket-library.com/wicket-examples/resourceaggregation &lt;!-- BasicGroupingKey &#91;group=GLOBAL  loadOrder=0  css=true&#93; --&gt;&lt;link rel='stylesheet' type='text/css' href='./wicket/resource/org.apache.wicket.Application/merged-resources?refs=org.apache.wicket.examples.resourcedecoration.HomePage:footer.css%7Corg.apache.wicket.examples.resourcedecoration.HomePage:header.css&amp;type=css' /&gt;&lt;!-- BasicGroupingKey &#91;group=APPLICATION  loadOrder=0  css=true&#93; --&gt;&lt;link rel='stylesheet' type='text/css' href='./wicket/resource/org.apache.wicket.Application/merged-resources?refs=org.apache.wicket.examples.resourcedecoration.HomePage:app.css&amp;type=css' /&gt;&lt;!-- BasicGroupingKey &#91;group=PAGE  loadOrder=0  css=true&#93; --&gt;&lt;link rel='stylesheet' type='text/css' href='./wicket/resource/org.apache.wicket.Application/merged-resources?refs=org.apache.wicket.examples.resourcedecoration.HomePage:HomePage.css&amp;type=css' /&gt;", "id": "4546"}, "4559": {"ground_truth": "0", "bug_report": "Component#getMarkupId() generates id that gets hidden by AdBlock\nComponent#getMarkupId() generates ids containing string 'ad'. Element with such id (e.g.  'buttonad') is then hidden by the AdBlock plugin (because it matches AdBlock's CSS selector #buttonad).Since AdBlock is quite a common plugin  this issue might affect most of the applications using Wicket.Test project and screenshot is attached.&#8211;Wicket 1.4.21Firefox 12  AdBlock 2.0.3Linux 3.3.5  x86_64", "id": "4559"}, "4561": {"ground_truth": "0", "bug_report": "Wicket 1.5.6 duplicates segments in absolute URLs\nSince we migrate our application to Wicket 1.5.6 some URLs from BookmarkablePageLinks have duplicate segements for indicating a Shop and a Language item from our persistence model. For indicating a Shop and Language item we use our own ShopMapper and LanguageMapper (subclass of AbstractComponentMapper). This was working until we migrate to 1.5.6.For instance ...correct URL: host/servlet/shop/en/pagewrong URL: host/servlet/shop/en/shop/en/pageThis happens  for example  when the protocol of the linked URL is different from the current protocol (http/https). So  basically  all links that point to pages that are annotated with @RequireHttps are wrong.In our Application class we set the HttpsMapper as RootRequestMapper  e.g.:setRootRequestMapper(new HttpsMapper(new ShopMapper(new LanguageMapper(getRootRequestMapper()))  new HttpsConfig() ) );Using a debugger  I've tracked down the spot where wrong URL is rendered:org.apache.wicket.request.Url.resolveRelative()", "id": "4561"}, "4566": {"ground_truth": "0", "bug_report": "Resource filtering breaks the calculation of rendered resources\nThe calculation of rendered resources at org.apache.wicket.markup.head.internal.HeaderResponse#rendered field is broken when org.apache.wicket.markup.head.filter.FilteringHeaderResponse is in use.The problem is that org.apache.wicket.markup.head.filter.FilteringHeaderResponse#getContent(String) creates its own instance of HeaderResponse and thus has its own 'rendered' set.If a filtered resource depends on a resource which is rendered in the head (i.e. in the default filtered bucked named 'headerBucket') then the latter is also rendered in the custom filter.", "id": "4566"}, "4570": {"ground_truth": "0", "bug_report": "Shared Behavior's renderHead method called only for one component  not for all of them\nWhen using a shared behavior among many components  its renderHead method is called only once. The reason is at the end of the Component.renderHead(HtmlHeaderContainer) method: for (Behavior behavior : getBehaviors()) { if (isBehaviorAccepted(behavior)) { if (response.wasRendered(behavior) == false) // &lt;---- check whether the behavior has been marked as rendered { behavior.renderHead(this  response); response.markRendered(behavior); // &lt;---- behavior marked as rendered } } }When calling this method of the first component  which contains given Behavior  the Behavior is added to the set of the already-rendered elements. This means  its renderHead method is never called for the rest of the components  which contain it.From documentation I suggest: Behaviors can be shared among more components (if they are not 'attached' in bind() method)  as written in Behavior class javadoc: 'They can be bound to a concrete component (...)  but they don't need to.' A Behavior method should behave the same way  as the same code placed directly in the component (in the corresponding method)Moreover  in the documentation of the Behavior.renderHead is written: 'Render to the web response whatever the component wants to contribute to the head section.' So as I understand it  the information about component should also be the 'key' whether to mark the Behavior rendered or not. More precisely  the proposed solution should be something like the following (Couple means something like a class with two fields - Behavior and Component): for (Behavior behavior : getBehaviors()) { if (isBehaviorAccepted(behavior)) { Couple c = new Couple(behavior  this); // &lt;---- create couple if (response.wasRendered(c) == false) // &lt;---- check the couple { behavior.renderHead(this  response); response.markRendered(c); // &lt;---- mark the couple as rendered } } }Maybe this is not a bug  but a feature. In case of the feature I think  that it requires at least a clarification in the documentation. In (probably) all other usage of shared Behavior  the Behavior does not cause any troubles and it behaves as expected from the documentation. But this method has quite inconsistent effect  comparing to the other ones.If an example is needed:I need a Behavior to attach all components  which have to automatically contribute to HTML head a JavaScript and CSS file with the same name as the component. The Behavior does not hold any data (no fields  empty bind method)  so I would like to make it singleton (or not directly pattern Singleton as such - for example let it overridable  but provide a default instance). Because creating new instances does not have much sense in this case and it brings many unnecessary objects on the heap.Using of new instance per component works fine  of course  but the issue is in the situation  if I need the shared instance across the application.", "id": "4570"}, "4574": {"ground_truth": "0", "bug_report": "ThreadContext does not properly remove the ThreadLocal from the current thread\nActually  I only checked 6.0.0-beta2 and master  6.0.0-beta2 is not in the drop down.ThreadLocal.get() returns the current value  if one is set. If not  it creates a new value using the initialValue() method  AND (importantly) registers the ThreadLocal in the Thread's Map of ThreadLocals.In order for the get(false) method to work as expected  we must actually call ThreadLocal.remove() after a ThreadLocal.get() that returned null.Also  after the request was processed  we never properly remove the ThreadLocal from the Thread  we were simply setting it to the previous value  which was null most of the time. This is not enough. The ThreadLocal was still attached to the Thread  just the value it was storing was null.Here's hoping that Jira is working again and I can attach a patch.", "id": "4574"}, "4584": {"ground_truth": "0", "bug_report": "NumberTextField does not have default minimum and maximum\nJavadoc of NumberTextField says:A TextField for HTML5 &lt;input&gt; with type number.Automatically validates the input against the configured min and max attributes. If any of them is null then Double.MIN_VALUE and Double.MAX_VALUE are used respectfully. Note: FormComponent.setType(Class) must be called explicitly!It is not true. We have constructor which sets them to null: public NumberTextField(String id  IModel&lt;N&gt; model  Class&lt;N&gt; type) { super(id  model  type); validator = null; minimum = null; maximum = null; }and if I don't set them manually  in case of error nulls go to RangeValidator (line 84-85: error.setVariable('minimum'  min); error.setVariable('maximum'  max);causing:java.lang.IllegalArgumentException: Argument 'value' may not be null.Nevertheless  I think reflection API should be used to determine if given Number has MAX_VALUE/MIN_VALUE and this one should be used. In other case I think it is ok to use Double.MAX_VALUE/MIN_VALUE.or maybe you have another ideas?", "id": "4584"}, "4587": {"ground_truth": "0", "bug_report": "URLRenderer renderFullUrl\nWhen using the following code to create an absolute url in wicket 1.5.7 from a page class and parameters  there are also duplicate segments in the url. the rendered absolute url is not correct.final Url url = RequestCycle.get().mapUrlFor( pageClass  pageParameters );final String result = RequestCycle.get().getUrlRenderer().renderFullUrl( url );RequestCycle.get().mapUrlFor(..) does not return an 'absolute' url (first segment will not be empty).See also description in WICKET-4561", "id": "4587"}, "4589": {"ground_truth": "0", "bug_report": "Closing  tag is incorrectly setup as autocomponent\nThe closing instance of the &lt;wicket:container&gt; tag returns true when isAutoComponentTag() is called whereas the opening instance correctly returns false.The problem lies probably in the WicketTagIdentifier class which simply checks if there is a wicket:id attribute value and makes all tags (opening or closing) autocomponent tags if there is no wicket:id.Obviously any closing tag doesnt have a wicket:id assigned.", "id": "4589"}, "4592": {"ground_truth": "0", "bug_report": "WicketAjaxDebug.logError used in Wicket.Head.addJavascript - JS error when wicket-ajax-debug.js not loaded\nWicket.Head.addJavascript (defined in wicket-ajax.js) encapsulates javascript in this code:content = 'try{'+content+'}catch(e){WicketAjaxDebug.logError(e);}'; However  WicketAjaxDebug can be undefined as it's declared in wicket-ajax-debug.js which might not be included. As a consequence  catch block will fail and obfuscate any error catched.I believe this catch block should call Wicket.Log.error(e) instead.", "id": "4592"}, "4596": {"ground_truth": "0", "bug_report": "DataTable toolbars do not handle dynamically changing columns in the table\nAll the packaged toolbars for the DataTables fail to handle dynamically changing column in the table.HeadersToolbar - is new columns are added  they do not have headers. If columns are removed  the headers are not removed.NoRecordsToolbar - colspan is static to the number of columns when the table was created. If more columns are added  or if columns are removed  then the incorrect colspan is used.NavigationToolbar - incorrect static colspan  like NoRecordsToolbar.FilterToolbar - same problem as HeadersToolbar  just s/header/filter/", "id": "4596"}, "4608": {"ground_truth": "0", "bug_report": "Vars in ValidationErrors should be properly converted\nCurrently variables in ValidationErrors are substituted with Strings.toString().This is problematic for variables with different representations in different languages (e.g. decimal separator). The converter of the processing component should be used instead.", "id": "4608"}, "4617": {"ground_truth": "0", "bug_report": "ResourceStreamLocator vs ResourceFinder\nI'm a bit confused by the responsibilities of ResourceFinder vs ResourceStreamLocator. Looking around in the code  I found the following: IResourceFinder is apparently only implemented via its extension interface IResourcePath. Its two implementations Path and WebApplicationPath look through a list of filesystem folders for files. ResourceStreamLocator does two things: it loads resources  either via an IResourceFinder (which only finds filesystem resources) or via the classloader (it does this itself). it uses a ResourceNameIterator to generate all possible filename variations based on locale and style and then tries to load one of them via the above mechanisms.Is this correct?If so  I think we have some mixed-up responsibilities here. I propose the following: add a third IResourcePath implementation (e.g. ClassloaderPath) that handles loading of resources in classpaths. It should be able to try multiple paths (e.g. '/'  'META-INF/resources' etc). Instead of a single ResourceFinder  Application should have a list of them  by default containing WebApplicationPath (today's default) and the new ClassloaderPath. ResourceStreamLocator should not do any loading on its own at all and just use the ResourceFinders defined in this new list in Application.This would also get rid of the hard-coded 'META-INF/resources' lookup that currently is done in ResourceStreamLocator (I'll write a second ticket about that  it's causing us some problems).I think this could still be done within 6.0. Objections?", "id": "4617"}, "4622": {"ground_truth": "0", "bug_report": "Optimize PageExpiredException to not load its stacktrace\nThe stacktrace of PageExpiredException is useless. It is being thrown at only one place - PageProvider  so it is always the same. But it is really useless for the end user.Overriding its #fillInStackTrace() to return null will be a minor performance improvement.", "id": "4622"}, "4626": {"ground_truth": "0", "bug_report": "WicketFilter unify the filterPath\nWICKET-4626 WicketFilter unify the filterPathUse of getter/setter internally to limit read/writes to filterPath field location.Removed lazy initialization code from main code path.Provide a new method #canonicaliseFilterPath(String) to convert'/wicket/' into 'wicket/' as expected internally and maybe used byunit tests to further validate correct values for filterPath.Added unit test for this new method and use method in setter.", "id": "4626"}, "4627": {"ground_truth": "0", "bug_report": "Change Url#parse() methods to accept CharSequence instead of String\nRequestCycle#urlFor() methods return CharSequence.By making org.apache.wicket.request.Url#parse() methods accepting CharSequence instead of j.l.String the user will save some typing (adding .toString()).", "id": "4627"}, "4629": {"ground_truth": "0", "bug_report": "AbstractLink does not call getBody to get its body\nAbstractLink#getBody() is not final  and can be overridded  but AbstractLink#onComponentTagBody() does not call it. Instead it references the bodyModel set by the setBody() method.", "id": "4629"}, "4632": {"ground_truth": "0", "bug_report": "ResourceStreamResource should use #getResourceStream() instead of directly using the 'stream' field\norg.apache.wicket.request.resource.ResourceStreamResource#newResourceResponse() resolves the IResourceStream by using #internalGetResourceStream() but later still uses the 'stream' member field.", "id": "4632"}, "4633": {"ground_truth": "0", "bug_report": "MultiFileUploadField after selecting a file does not hide properly input field\nComponent org.apache.wicket.markup.html.form.upload.MultiFileUploadField in related javascript uses code: ''this.style.position = 'absolute'; this.style.left = '-1000px' ' to hide a file input after selecting a file.Unfortunately on my screen (1920x1200) if I put this component on the right side of a page then after selecting a file  'the hidden input' is moved to the left of its container  but still visible for a user.Changing style.position to 'fixed' should resolve the problem  so the input field will be positioned relative to the browser window  not to its ancestor.", "id": "4633"}, "4636": {"ground_truth": "0", "bug_report": "Using setResponsePage() before page rendering should skip the rendering of the page\nThis ticket follows from the email thread http://markmail.org/thread/uk5y4ddoopntmkgdWhen setResponsePage() is used  the current page is still rendered. The response thus generated is then thrown away completely and a replacement request handler is used. I can think of 3 reasons why this should be avoided:1-Performance; it's wasteful to render components to discard them right away2-Needs complete components hierarchy; even if setResponsePage() is used in a page constructor (e.g. when redirecting depending on page parameters)  since the page will be rendered  all of its components or some substitutes must be added to the page. Otherwise Wicket will throw a missing component exception in dev mode.3-Feedback messages; if the needlessly rendered page contains a feedback panel  feedback messages registered in the session will be swallowed by the thrown away page rendering.", "id": "4636"}, "4638": {"ground_truth": "0", "bug_report": "Make it possible to use JsonFunction as a AjaxCallListener's handler\nCurrently the IAjaxCallListener's handlers could be an instance of CharSequence. Wicket wraps them in JsonFunction and sets the respective parameters for the handler.By making JsonFunction itself a CharSequence allows the developer to use it as a handler and to provide the whole JS function code  not just the body which makes the code looks a little bit strange because some variables are assumed to be passed (the parameters) from somewhere else.", "id": "4638"}, "4641": {"ground_truth": "0", "bug_report": "AjaxFallbackLink and log a warning when there are several ajax event behaviors on the same event\nWhen I was using an AjaxFallbackLink I got the warning about multiple Behaviours changing the 'onclick' attribute.I changed it to AjaxLink and the warning disappeared.", "id": "4641"}, "4642": {"ground_truth": "0", "bug_report": "Atmosphere Modul not working on first page after Jetty restart\nAfter Jetty is started if the very first page being visited is a page with AtmosphereBehavior (using @Subscribe)  for some reason by the time the page is being registered by EventBus (#registerPage(String trackingId  Page page)) the session is null and after the page has been rendered its not null any more thus having a different PageKey and so the events for the page are filtered out at line #140 or EventBusIf you just add Session.get().bind() in the constructor method of your page  everything would work as expected.", "id": "4642"}, "4645": {"ground_truth": "0", "bug_report": "encodeURL broken on Tomcat 7.0.28\nDuring page transition wicket used to encode an '../../tisch' which results in an exception:Caused by: java.lang.IllegalArgumentException at org.apache.catalina.connector.Response.normalize(Response.java:1799)The transition (within an ajax call) :http://localhost:8080/wicket/bookmarkable/de.test.pool.manage.ManagePool?11http://localhost:8080/tischIMHO the double parent '..' is correctThere exists already an bugzilla issue created but rejected as invalid https://issues.apache.org/bugzilla/show_bug.cgi?id=53469.If the wicket code works as expected there must be an error in the tomcat. Maybe the wicket development team has closer access to the tomcat developers", "id": "4645"}, "4648": {"ground_truth": "0", "bug_report": "Upgrade Atmosphere to 1.0-beta\nVersion 1.0 of the Atmosphere Framework is nearing completion. Wicket-atmosphere should be upgraded to 1.0-beta. Using the beta is fine  because wicket-atmosphere itself is also beta.", "id": "4648"}, "4649": {"ground_truth": "0", "bug_report": "Add an additional Ajax call listener point - before the call\nWe need to add another point in the Ajax call lifecycle that is called as early as possible.Until now we have the preconditions which are called in jQuery's beforeSend() and they may stop the call completely. If they pass then the dynamic extra parameters are evaluated and the 'before' handlers are executed.But in some cases one may need to execute some handler as early as possible. For example to transfer the value of some complex widget to &lt;input type='hidden'&gt; which will be serialized in jQuery's data with the default means. Using dynamic extra parameters will be able to do the same but the price will be much higher because the hidden field's value will be already in the data with an empty value and one should care to remove it before adding the dynamic value.So I suggest to move 'before' handlers at the top of Wicket.Ajax.doAjax() method and add a new one - 'beforeSend' which will do the same as 'before' handlers until now.", "id": "4649"}, "4663": {"ground_truth": "0", "bug_report": "LazyInitProxyFactory uses wrong ClassLoader in OSGi environment\nThe method LazyInitProxyFactory#createProxy use Thread.currentThread().getContextClassLoader() to create a new proxy instance. It seems that this is not correct in an OSGi environment.Preferred is to use the ClassLoader provided by the AbstractClassResolver class (getClassResolver is not part of IClassResolver). Then it will be something like: ClassLoader classLoader; if (Application.exists()) { AbstractClassResolver classResolver = (AbstractClassResolver) Application.get() .getApplicationSettings() .getClassResolver(); classLoader = classResolver.getClassLoader(); } else { classLoader = Thread.currentThread().getContextClassLoader(); } try { return Proxy.newProxyInstance(classLoader  new Class[] { type  Serializable.class  ILazyInitProxy.class  IWriteReplace.class }  handler); }", "id": "4663"}, "4666": {"ground_truth": "0", "bug_report": "ResourceModel once assigned should not re-assign\nResourceModel's AssignmentWrapper is itself a ResourceModel.But sometimes you want to assign a ResourceModel to a component explicitely via #wrapOnAssignment() before passing the wrapper elsewhere.This is not possible currently  because the passed AssignmentWrapper will re-assign to the component it is passed to.", "id": "4666"}, "4679": {"ground_truth": "0", "bug_report": "XmlPullParser doesn't parse correctly attributes with complex namespace\nHaving a markup like:&lt;a class='addthis_button_google_plusone_badge' g:plusone:size='smallbadge' g:plusone:href='https://plus.google.com/25252/'&gt;&lt;/a&gt; causes XmlPullParser to throw the following exception:java.text.ParseException: Same attribute found twice: g:plusone (line 19  column 100) at org.apache.wicket.markup.parser.XmlPullParser.parseTagText(XmlPullParser.java:673) at org.apache.wicket.markup.parser.XmlPullParser.next(XmlPullParser.java:294) at org.apache.wicket.markup.parser.filter.RootMarkupFilter.nextElement(RootMarkupFilter.java:58).....", "id": "4679"}, "4681": {"ground_truth": "0", "bug_report": "AutoLinkResolver looks in the wrong scope\nWhen turning on MarkupSettings#automaticLinking  AutoLinkResolver is supposed to touch tags like &lt;img&gt; and &lt;a&gt; and set their src/href attributes so that packaged resources are correctly referenced.I found a situation where that does not work: If you have a panel  and e.g. an &lt;img&gt; tag inside that panel  and the &lt;img&gt; tag is NOT enclosed in a container component  it looks for the resource in the scope of the surrounding component  not in the panel's scope. It obviously can't find it there  so it just dumps the raw attribute.If you put that &lt;img&gt; tag into a MarkupContainer (like WMC) then it works correctly. So it looks like the scope is off-by-one or something like that. I'll investigate.", "id": "4681"}, "4683": {"ground_truth": "0", "bug_report": "tag broken in certain situations when  reference added in page header section\nClosing &lt;/script&gt; tag is swallowed in certain situations when external script reference is added (&lt;script src=''&gt;&lt;/script&gt;) to the page &lt;head&gt;&lt;/head&gt; section in Wicket 6.0.0-beta2 and beta3 and SNAPSHOTOriginal source code for &lt;head&gt; section:&lt;head&gt; &lt;meta charset='utf-8' /&gt; &lt;title&gt;Apache Wicket Quickstart&lt;/title&gt; &lt;link href='http://fonts.googleapis.com/css?family=Yanone+Kaffeesatz:regular bold' rel='stylesheet' type='text/css' /&gt; &lt;link rel='stylesheet' href='style.css' type='text/css' media='screen' title='Stylesheet' /&gt; &lt;script type='text/javascript' src='http://akuku/something1.js'&gt;&lt;/script&gt; &lt;script type='text/javascript' src='http://akuku/something2.js'&gt;&lt;/script&gt; &lt;script type='text/javascript' src='http://akuku/something3.js'&gt;&lt;/script&gt; &lt;script type='text/javascript' src='akuku/something4.js'&gt;&lt;/script&gt; &lt;script type='text/javascript' src='/akuku/something5.js'&gt;&lt;/script&gt; &lt;script type='text/javascript' src='akuku/something6.js'&gt;&lt;/script&gt;Rendered HTML: &lt;head&gt; &lt;meta charset='utf-8' /&gt; &lt;title&gt;Apache Wicket Quickstart&lt;/title&gt; &lt;link href='http://fonts.googleapis.com/css?family=Yanone+Kaffeesatz:regular bold' rel='stylesheet' type='text/css' /&gt; &lt;link rel='stylesheet' href='style.css' type='text/css' media='screen' title='Stylesheet'/&gt; &lt;script type='text/javascript' src='http://akuku/something1.js'&gt;&lt;/script&gt; &lt;script type='text/javascript' src='http://akuku/something2.js'&gt;&lt;script type='text/javascript' src='http://akuku/something3.js'&gt;&lt;script type='text/javascript' src='akuku/something4.js'&gt;&lt;/script&gt;&lt;script type='text/javascript' src='/akuku/something5.js'&gt;&lt;script type='text/javascript' src='akuku/something6.js'&gt;&lt;/script&gt; &lt;/head&gt;", "id": "4683"}, "4691": {"ground_truth": "0", "bug_report": "Unescaped html in autocomplete\nCreate list of Strings with html keywords: List&lt;String&gt; list = Arrays.asList('a'  '&lt;td&gt;'  '&lt;li&gt;' '&lt;/td&gt;');Let autocomplete display these values: @Override protected Iterator getChoices(String input) { return list.iterator(); }html is unescaped  strings are 'copy and paste''d to htmlAjax response (from Firebug) looks like this:&lt;ul&gt;&lt;li textvalue='a'&gt;a&lt;/li&gt;&lt;li textvalue='&lt;td&gt;'&gt;&lt;td&gt;&lt;/li&gt;&lt;li textvalue='&lt;li&gt;'&gt;&lt;li&gt;&lt;/li&gt;&lt;li textvalue='&lt;/td&gt;'&gt;&lt;/td&gt;&lt;/li&gt;&lt;/ul&gt;", "id": "4691"}, "4704": {"ground_truth": "0", "bug_report": "Allow using custom CSS classes for the selected and last TabbedPanel tabs\nMake it possible to use custom CSS classes for the selected and last tab in TabbedPanel", "id": "4704"}, "4717": {"ground_truth": "0", "bug_report": "StringValidator.exactLength has wrong variable in ErrorMessage\nIn error message for StringValidator.exactLength is variable ${exact}   but in StringValidator.decorate is added variable length to map and not exact. Exception when is error message interpolate for show in feedback.Caused by: java.lang.IllegalArgumentException: Value of variable [&#91;exact&#93;] could not be resolved while interpolating [['${label}' is not exactly ${exact} characters long.]]property from application.StringValidator.exact='${label}' is not exactly ${exact} characters long.When I added same property in my own properties and change exact to length  it works.", "id": "4717"}, "4723": {"ground_truth": "0", "bug_report": "tracking id retrieved in AtmosphereBehavior#onRequest() is always 0\njquery.atmosphere.js will always use 0 as initial tracking-id to send request and then reassign it from server response.AtmosphereBehavior#getUUID() shouldn't return the tracking-id from request header  since the initial request's tracking-id is 0.The correct way to retrieve tracking-id is calling AtmosphereResource#uuid()", "id": "4723"}, "4727": {"ground_truth": "0", "bug_report": "ThreadContext should be detached before each subscribed page gets notified\nSince the event subscriptions may cross different sessions  before entering request cycles of notified page  the ThreadContext should be detached except application instance.In EventBus#post(Object event)  ThreadContext.detach() should be placed inside the for-loop block of atmosphere resources otherwise Session().get() may return previous page's session.", "id": "4727"}, "4730": {"ground_truth": "0", "bug_report": "Filter component does not clear filter fields\nThe GoAndClearFilter.onClearSubmit() does not clear filter fields because the originalState member has the current values of the filter. I think it should create a new instance of the originalState class instead of clone the model.To verify use the phonebook sample (https://github.com/wicketstuff/core/tree/master/jdk-1.6-parent/phonebook). The clear only works if 'go' was not pressed after enter some values in the filter  but if you press go and then want to clear the filter it keeps the values.Attached is a patch that makes the phonebook sample work.It might also be useful if the originalState attribute were made protected or accessible via protected method to allow users to overwrite the onClearSubmit() method and access the originalState attribute.", "id": "4730"}, "4731": {"ground_truth": "0", "bug_report": "TimeField not able to work with a java.sql.Time\nWhen using the TimeField with a model whose object is a java.sql.Time  I get an error similar to the following when submitting the form:Last cause: Cannot parse '1/1/70' using format java.text.SimpleDateFormat@b4dc7db3Here's how the TimeField is constructed:TimeField tf = new TimeField(id  new Model&lt;java.sql.Time&gt;() {public java.sql.Time getObject() {// return java.sql.Time}});This error is occurring because SqlTimeConverter is trying to convert the string representation of the java.util.Date obtained from the TimeField. TimeField doesn't support anything other than java.util.Date. It would be useful if TimeField could work with subclasses of java.util.Date such as java.sql.Time. In order to achieve this  I would like to propose:Changing setConvertedInput(new Date(date.getMillis())); in DateTimeField.convertInput() to setConvertedInput(newDateInstance(date.getMillis()));Create an overridable newDateInstance(long) method. Users of TimeField can override this method to create a java.sql.Time instance instead of a java.util.Date. The form component conversion process will then work when the model object is a java.sql.Time.", "id": "4731"}, "4732": {"ground_truth": "0", "bug_report": "CssPackageResource doesn't work if the extension isn't css\nCssPackageResource#processResponse is never called if the extension isn't css. It works for .css because PackageResourceReference#getResource checks if the extension is css and then creates a CssPackageResource. For anything else than .css/.js a PackageResource is created.Actually the overridden processResponse method in CssPackageResource (instead of PackageResource) should get called  but ResourceReferenceRegistry#createDefaultResourceReference installs a plain PackageResource which gets called later.", "id": "4732"}, "4735": {"ground_truth": "0", "bug_report": "KittenCaptchaPanel is broken\nThe code from the KittenCaptchaPanel example works fine with wicket versions 1.5.8 and 6.0.0-beta1  but fails to highlight kittens with versions 6.0.0-beta2 and 6.0.0-beta3.", "id": "4735"}, "4743": {"ground_truth": "0", "bug_report": "SerializingObjectSizeOfStrategy do not use framework serializer\nCurrently default implementation of SerializingObjectSizeOfStrategy do not use FrameworkSettings  thus it causes a ObjectNotSerializableException if serializer have custom behaviours.", "id": "4743"}, "4753": {"ground_truth": "0", "bug_report": "Resource bundles are not resolved on PriorityHeaderItems\nIf a bundle X provides resource A  and resource A is rendered as priority header item  the resource A is rendered  not bundle X.", "id": "4753"}, "4755": {"ground_truth": "0", "bug_report": "''NEW VALUE' is not a valid Serializable' error during ajax form submission\nI attached a quickstart with a test in TestHomePage#formSubmitsSuccessfully.The test throws ''NEW VALUE' is not a valid Serializable' error when 'NEW VALUE' string in 'value' textField is submitted as a part of myForm ajax submission.The problem is that a call to Objects#convertValue(nonNullNonArrayValue  Object.class) will always return null if nonNullNonArrayValue is a value that is not null and not an array! Shouldn't it always return the first parameter when the second parameter is Object.class?Sven on Wicket forum suggested to fix this as by adding another if-statement in Objects#convertValue() if (toType.isInstance(value)) { result = toType.cast(value);}See the following forum thread for more information http://apache-wicket.1842946.n4.nabble.com/Issues-with-default-type-conversion-in-1-5-td4651857.html", "id": "4755"}, "4757": {"ground_truth": "0", "bug_report": "FormComponents remain invalid forever if there is no feedback panel\nif there is no feedback panel the error messages are not removed in ondetach and form component re-validation is skipped so the form component  once marked as invalid  will remain invalid forever or at least until its error messages are rendered.the error messages should be dropped and the form component should be re-validated on every form submit.", "id": "4757"}, "4758": {"ground_truth": "0", "bug_report": "DOM ids change of the input fields of FilterToolbar\nThe fix in WICKET-3916 is not effective: https://fisheye6.atlassian.com/changelog/wicket?cs=1148229https://github.com/apache/wicket/blob/master/wicket-core/src/main/java/org/apache/wicket/Component.java#L2506As one can see in Component.internalRenderComponent()  the method Component.onComponentTag()  where the markup id is written to the tag  is called before the behavior had a chance to call setOutputMarkupId(true). (The Behavior.onComponentTag() is called in Component.renderComponentTag() a few lines down. The behavior has to call setOutputMarkupId() earlier  like in onConfigure()", "id": "4758"}, "4760": {"ground_truth": "0", "bug_report": "JavaScriptStripper fails with single line comments\nThe valid inputx++ //x++gets transformed tox++ x++which is syntactically invalid. This breaks the unminified version of bootstrap 2.1.1.The problem doesn't occur with multiline comments because the linebreaks are preserved there.", "id": "4760"}, "4769": {"ground_truth": "0", "bug_report": "Clicking on Label of Radio doesn't update component with Ajax update\nWe just upgraded a application from wicket 1.4 to wicket 6.We discovered that when clicking on the label of a radio button that has a AjaxFormChoiceComponentUpdatingBehavior attached the radio is not selected.I'll attach 2 testcases (one for wicket 1.4 and one for wicket 6)", "id": "4769"}, "4770": {"ground_truth": "0", "bug_report": "Wicket 6: modal windows in Safari are always in drag or resize mode\nIn Wicket 6 using Safari  a modal dialog will not allow interactions with form components. The whole dialog always seems to be in 'drag' mode. Click anywhere on the panel and the dialog will drag.Interaction works fine with all other browsers.", "id": "4770"}, "4773": {"ground_truth": "0", "bug_report": "ComponentFeedbackPanel broken under Wicket 6.0.0 when RenderStrategy.REDIRECT_TO_RENDER\nTest case created on github  see https://github.com/danhaywood/wicket-4773browse to http://localhost:8080/wicket-examples/forminput and follow the instructions.", "id": "4773"}, "4775": {"ground_truth": "0", "bug_report": "PageParameters#mergeWith may loose values of the 'other' PP\nThe code at org.apache.wicket.request.mapper.parameter.PageParameters#mergeWith() looks like:for (NamedPair curNamed : other.getAllNamed()) set(curNamed.getKey()  curNamed.getValue());may loose some values if 'other' has a named parameter with several values.With the current code only the last name/value pair is preserved.", "id": "4775"}, "4780": {"ground_truth": "0", "bug_report": "Using both MountedMapper and CryptoMapper causes warning\nHaving both MountedMapper and CryptoMapper causes:WARN - WebPageRenderer - The Buffered response should be handled by BufferedResponseRequestHandler public void init() { setRootRequestMapper(new CryptoMapper(getRootRequestMapper()  this)); mountPage('/home'  HomePage.class); super.init(); } public HomePage(final PageParameters parameters) { super(parameters); add(new Label('version'  getApplication().getFrameworkSettings().getVersion())); add(new Form&lt;Void&gt;('form')); }--HomePage.html...&lt;form wicket:id='form'&gt;&lt;/form&gt;...", "id": "4780"}, "4784": {"ground_truth": "0", "bug_report": "DOM ids change of the input fields of FilterToolbar\nThe fix in WICKET-3916 is not effective: https://fisheye6.atlassian.com/changelog/wicket?cs=1148229https://github.com/apache/wicket/blob/master/wicket-core/src/main/java/org/apache/wicket/Component.java#L2506As one can see in Component.internalRenderComponent()  the method Component.onComponentTag()  where the markup id is written to the tag  is called before the behavior had a chance to call setOutputMarkupId(true). (The Behavior.onComponentTag() is called in Component.renderComponentTag() a few lines down. The behavior has to call setOutputMarkupId() earlier  like in onConfigure()", "id": "4784"}, "4789": {"ground_truth": "0", "bug_report": "URL rendering regression\nThe way URLs are encoded was changed (WICKET-4645) and now the first request (with ;jsessionid in path) generates invalid internal links:My page is mounted to '/Home/' and I get redirected to '/Home/;jsessionid=1234?0' (fine). There's a Link on the page and the generated URL for it is '../Home;jsessionid=1234?0-1.ILinkListener-link'. Note the missing '/'. This results in a 404 and breaks basically all of my system tests.I'll attach a simple quickstart which demonstrates the problem. It's important to delete the jsessionid cookie before accessing the page.", "id": "4789"}, "4794": {"ground_truth": "0", "bug_report": "RfcCompliantEmailAddressValidator error message not defined\nThe error message of the RfcCompliantEmailAddressValidator seems not to be defined.In case of validation error the following warning occurs: org.apache.wicket.markup.html.form.FormComponentCould not locate error message for component:RequiredTextField@description:form_id:emailand error:[ValidationError message=&#91;null&#93; keys=&#91;RfcCompliantEmailAddressValidator&#93; variables=[[pattern=(??:/r/n)?[ /t])*(???:[^()&lt;&gt;@ ;:/'.[] .../t])))/&gt;(??:/r/n)?[ /t]))))?;/s*)]]]. Tried keys:email.RfcCompliantEmailAddressValidator RfcCompliantEmailAddressValidator.", "id": "4794"}, "4795": {"ground_truth": "0", "bug_report": "Wicket unit tests rely on hashmap iteration order\nStarting from version 7u5 java has supported randomizing the hashmap String key order (enabling this will fix CVE-2012-2739). It is also a good way to test the code if it is relying on hashmap order.More details: http://docs.oracle.com/javase/7/docs/technotes/guides/collections/changes7.htmlIn the latest Java 8 (b58) the randomized hashmap is enabled by default causing some wicket unit tests to fail randomly.", "id": "4795"}, "4796": {"ground_truth": "0", "bug_report": "DatePickerTest fails because of java inconsistensy on localizing March german shortname Mrz vs Mr\nThe Oracle java7 and older return Mrz as german march short name.The Oracle java8 seems to have switched to the official (see http://de.wikipedia.org/wiki/Vorlage:Monat_Name-Nummer ) three letter short name Mr.Some googling showed that IBM java has used the offical short name at least since 2008.I propose as a fix that the non-english test language is changed to something other than Locale.GERMAN in DatePickerTest method myTestExecution. For example Locale.ITALIAN  which has had consistent localization in Java world. Plus of course the reference data in DatesPage1_ExpectedResult.html needs to be regenerated.", "id": "4796"}, "4803": {"ground_truth": "0", "bug_report": "UrlDecoder should log a message when invalid input is provided\nIn the class: org.apache.wicket.protocol.http.WicketURLDecoder there are two IllegalArgumentException which should be wrapped in WicketRuntimeException  otherwise they are caught by the exception handler form the servlet container (jetty  tomcat  ...) which then uses their http 500 error code configuration instead of the exception handling of wicket.Wrapping them would be good for consistency and help manage runtime exceptions. These are the two exceptions:throw new IllegalArgumentException('URLDecoder: Incomplete trailing escape (%) pattern'); throw new IllegalArgumentException('URLDecoder: Illegal hex characters in escape (%) pattern - ' + e.getMessage());", "id": "4803"}, "4804": {"ground_truth": "0", "bug_report": "Add #setStatus(int) in AbstractResource.ResourceResponse\norg.apache.wicket.request.resource.AbstractResource.ResourceResponse provides #setError(int code  String message) but doesn't provide #setStatus(int code).This makes it hard to set custom headers (e.g. cache control) and set status 304 because if HttpServletResponse#setErrorCode() is used then many headers are reset (including the cache control ones).", "id": "4804"}, "4806": {"ground_truth": "0", "bug_report": "AjaxEditableChoiceLabel won't close select onblur\nAjaxEditableChoiceLabel wont close the select combo (showed after clicking in the asociated label) when it losses the focus. It's supossed to call the onCancel method like it does in AjaxEditableLabel but the select turns into a label only selecting a different value in the select combo (it doesn't work pressing Escape or clicking in other part of the page).I fix it localy adding this code:editor.add(new AjaxEventBehavior('blur') { protected void onEvent(AjaxRequestTarget target) { AjaxEditableChoiceLabel.this.onCancel(target); }});For the editor declared as DropDownChoice in line 183 of AjaxEditableChoiceLabel .java.", "id": "4806"}, "4810": {"ground_truth": "0", "bug_report": "CLONE - BaseWicketTester.clickLink() does not work with a ResourceLink with ResourceReference\nWhen using BaseWicketTester.clickLink() with a ResourceLink with a ResourceReference  it does not work.Clicking link in server (Jetty) it works and opens the resource. See attached quickstart.When the ResourceLink is created with the Resource directly  BaseWicketTester.clickLink() works. @Test public void clickingLink() { // doesn't work tester.clickLink('shared'); Assert.assertEquals(tester.getContentTypeFromResponseHeader()  'text/plain'); } @Test public void usingListener() { // doesn't work either tester.executeListener(tester.getComponentFromLastRenderedPage('shared')  IResourceListener.INTERFACE); Assert.assertEquals(tester.getContentTypeFromResponseHeader()  'text/plain'); }", "id": "4810"}, "4812": {"ground_truth": "0", "bug_report": "Make SerializationChecker easier for extending so custom checks can be added to it\nCurrently SerializationChecker is used in DEV mode when there is a problem with the serialization of a page to show which member field causes the problem.The checker can be improved to support additional custom checks like the one described at http://wicketinaction.com/2011/11/detect-attached-models-and-entities/ and similar.", "id": "4812"}, "4827": {"ground_truth": "0", "bug_report": "Modal panel mouse pointer in resize style for MSIE8 and MSIE9\nIn IE8 and IE9 the mouse pointer has the w-resize or e-resize style when hovering above a panel modal window. The wicket example does not have a doctype so Internet Explorer goes into quirks mode. Quirks mode is not an option for us.http://www.wicket-library.com/wicket-examples-6.0.x/ajax/modal-windowI will attach a quickstart.", "id": "4827"}, "4841": {"ground_truth": "0", "bug_report": "Return error code 400 when an Ajax request has no base url set in header/request parameters.\nHello currently we've got a problem with faked ajax requests. these ajax requests misses some parameters  but the wicket-ajax header flag is set. So ServletWebRequest throws an exception:java.lang.IllegalStateException: Current ajax request is missing the base url header or parameter at org.apache.wicket.util.lang.Checks.notNull(Checks.java:38) at org.apache.wicket.protocol.http.servlet.ServletWebRequest.getClientUrl(ServletWebRequest.java:171) at org.apache.wicket.request.UrlRenderer.&lt;init&gt;(UrlRenderer.java:59)These faked requests are so massive  that our application is no longer monitorable. Our workaround rejects these requests via apache config. Instead of logging an exception  in deployment mode wicket should log a warning and reject the request", "id": "4841"}, "4844": {"ground_truth": "0", "bug_report": "AbstractResourceReferenceMapper doesn't escape separators in style/variation names\norg.apache.wicket.request.mapper.AbstractResourceReferenceMapper#encodeResourceReferenceAttributes() doesn't escape '-' character when generating the query string parameter with the locale-style-variation.So using a style with name 'a-b' leads to parameter with name '-a-b' and later is decoded to style == 'a' and variation == 'b'", "id": "4844"}, "4859": {"ground_truth": "1", "bug_report": "Integer overflow in AbstractToolbar\nprivate static int counter = 0;This counter will overflow anytime... Please remove static.", "id": "4859"}, "4861": {"ground_truth": "0", "bug_report": "Making MultiFileUploadField use HTML5 multiple attr & remove confusing fakepath\nWICKET-3370 prepared the terrain (all major browsers except IE already support it).I will make a Git pull request for getting this into the master branch.Here is what the changes do (commit comment):Added the possibility to select multiple files in the OS dialog forbrowsers that support HTML5 'multiple' attribute. For browsers that donot support it  or if you do not set the boolean to true  it will behavethe same as before.New: easier select multiple files from multiple folders shows the multiple files after choosing them - one per lineFixes: the delete buttons are aligned instead of positioning after thevariable length file names useless and confusing 'C:/fakepath' in filenames reported by somebrowsers (in multiple with single select mode) are now hidden.", "id": "4861"}, "4865": {"ground_truth": "0", "bug_report": "Page parameters not working with CryptoMapper\nWhen CryptoMapper is used  page parameters do not work. This is because the incorrect request is set in the request cycle. The incorrect request contains the encrypted url  where the page parameters are encoded into the url segments. When the CryptoMapper maps a url to a request handler  it should set the request to the correct request when the request handler is selected.This was reported on the users@ list  but I have also fallen victim to it when getting urlFor(resourceReference  pageParameters) and the pageParameters not comming out on the other end.See:http://mail-archives.apache.org/mod_mbox/wicket-users/201211.mbox/%3C50991F74.3050605@unknown.za.net%3Ehttps://github.com/jesselong/wicket/commits/for-apache-master-pr-4 (3 commits)", "id": "4865"}, "4869": {"ground_truth": "0", "bug_report": "Wicket-Atmosphere track message length\nWhen activating a PerRequestBroadcastFilter  the methods annotated with @Subscribe are unable to contribute to the AjaxRequestTarget.At the Filter level  the messages are OK but the client receives an empty &lt;ajax-response&gt;.A quickstart is attached where target/WEB-INF/lib is provided because jquery.atmosphere.js has been modified in order to activate track message length.Feel free to ask for more info.Regards Pierre Goupil", "id": "4869"}, "4876": {"ground_truth": "0", "bug_report": "CheckBoxMultipleChoice should implement getAdditionalAttributes as RadioChoice\nToday there is no way to add additional attributes to each checkbox in CheckBoxMultipleChoice  the only way is to override the entire appendOptionHtml and copy the entire original source code and in that add your additional attribute. A much better way is to have Wicket provide a extension hook like org.apache.wicket.markup.html.form.RadioChoice.getAdditionalAttributes(int  T).", "id": "4876"}, "4878": {"ground_truth": "1", "bug_report": "Rendering of feedback messages fails with DebugBar in page\nAfter the page is detached to calculate its size  messages are no longer available for FeedbackPanel to get the CSS styling for messages  failing with a NullPointerException.", "id": "4878"}, "4884": {"ground_truth": "0", "bug_report": "ValidationError messages for NumberTextFields with minimum/maximum are always English\nAlthough my Form's Locale is  e.g.  de_DE  the error message generated from AbstractRangeValidator#validate(IValidatable) is always English.My German custom message for resource key 'RangeValidator.range' in the Page's resource bundle gets ignored too - the default custom message from the resource bundle is used instead.Reason might be that Component#getLocale() invoked from Localizer#getStringIgnoreSettings(String  Component  IModel  Locale  String  String) always returns NumberTextField#HTML5_LOCALE (fix for WICKET-3591).Pls. see attached quickstart.I'm a Wicket newbie  so could very well be that I'm missing something.", "id": "4884"}, "4887": {"ground_truth": "0", "bug_report": "Use a Set to keep the supported wicket elements in WicketTagIdentifier\nWicketTagIdentifier stores a private static collection of wellKnownTagNames as an ArrayList.and a method called isWellKnown is called from within WicketTagIdentifier.onComponentTag and presumably it's called on every Wicket tag parsed. private boolean isWellKnown(final ComponentTag tag) { for (String name : wellKnownTagNames) { if (tag.getName().equalsIgnoreCase(name)) { return true; } } return false; }This method iterates over the list elements until an item is found so has O performance. If this array list was to be changed to a Set instead it would have O(1) performance. I haven't got any metrics on the usage and I don't think the improvement would be sensational but for web apps with large quantities of markup it could make some difference. For such a simple change it's probably worth it.", "id": "4887"}, "4891": {"ground_truth": "0", "bug_report": "UrlRenderer.renderRelativeUrl misbehavior if the filterPath is composed.\nUsing an application with a composed filterPath like:&lt;filter-mapping&gt; &lt;filter-name&gt;wicket.jsessionid&lt;/filter-name&gt; &lt;url-pattern&gt;/demo/test/*&lt;/url-pattern&gt;&lt;/filter-mapping&gt; Wicket fails to properly render a bookmarkable link.I've debuged my app and the problem is here:UrlRenderer.removeCommonPrefixes()Line 309:String filterPath = request.getFilterPath();if (filterPath != null &amp;&amp; segments.isEmpty() == false){ if (filterPath.equals(UrlUtils.normalizePath(segments.get(0)))) { LOG.debug('Removing the filter path '{}' from '{}''  filterPath  segments); segments.remove(0); }}This code assumes that the filter path is a single segment path  not a composed path.I've only reached this bug browsing my website with the cookies disable. This is why it's not critical.", "id": "4891"}, "4901": {"ground_truth": "0", "bug_report": "AjaxPagingNaviagtionLink should provide updateAjaxAttributes like AjaxLink\nIt is cumbersome to override AjaxPagingNavigationLink#newAjaxPagingNavigationBehavior to provide a subclass of AjaxPagingNavigationBehavior with it's updateAjaxAttributes overriden to allow for changing the ajax attributes. It would be easier if the AjaxPagingNavigationLink worked like AjaxLink.", "id": "4901"}, "4902": {"ground_truth": "0", "bug_report": "ConcatBundleResource should use the respective ITextResourceCompressor\nCss and JavaScript bundles are not processed by Css/JavaScriptCompressors.org.apache.wicket.resource.bundles.ConcatBundleResource#readAllResources directly reads the resources' stream.", "id": "4902"}, "4904": {"ground_truth": "0", "bug_report": "Use a behavior that modifies AbstractLink's markup when disabled\nCurrently Wicket transforms &lt;a&gt; tag to &lt;span&gt;&lt;em&gt; when a link is disabled.Recently Wicket-Bootstrap user filed issue https://github.com/l0rdn1kk0n/wicket-bootstrap/issues/79 that this breaks the UI because Twitter Bootstrap needs just 'disabled='disabled'' attribute in &lt;a&gt;.With the new strategy it will be possible to set global strategy and override it per link.", "id": "4904"}, "4905": {"ground_truth": "0", "bug_report": "PagingNavigation: possible to call setStartIndex() earlier than onBeforeRender?\nPagingNavigation has two actions in its onBeforeRender implementation:setDefaultModel(new Model&lt;Integer&gt;((int)Math.max(Integer.MAX_VALUE  pageable.getPageCount())));setStartIndex();Building my own PagingNavigation extending PagingNavigation  not being able to retrieve the start index before onBeforeRender  forces me to put a lot of logical code into my own onBeforeRender implementation.So there's a valid workaround  but I'd expect this to work from onConfigure also  maybe even from onInitialize.As far as I can see it should be possible to call the two methods earlier than onBeforeRender  however I might be missing the 'big picture' and oversee some side effects this could cause.", "id": "4905"}, "4906": {"ground_truth": "0", "bug_report": "Form#visitFormComponents can cause ClassCastException\nThe current method signature of Form#visitComponents allows for passing in an implementation of IVisitor that will cause a ClassCastException. ExampleAdd a CheckBox and TextField to the Form. Pass in an IVisitor&lt;CheckBox&gt; to visitComponents. There will be a ClassCastException when the IVisitor&lt;CheckBox&gt; attempts to visit the TextField.The method signature should be changed topublic final &lt;R&gt; R visitFormComponents(final IVisitor&lt;FormComponent&lt;?&gt;  R&gt; visitor)or the method should be removed to prevent confusion.", "id": "4906"}, "4908": {"ground_truth": "0", "bug_report": "Wrong charset or screwed up characters in Norwegian properties-file\nIn Wicket 6  up to and including 6.3.0  the Application_no.properties file has mangled all the Norwegian special characters (  and ). Seems to be the only one of the Norwegian properties-files with problems  as far as I could tell.Edit: Also  the file is in UTF-8-format  which doesn't work...", "id": "4908"}, "4909": {"ground_truth": "0", "bug_report": "ModalWindow overwrites window.onbeforeunload\nIf window.onbeforeunload is changed after a ModalWindow is opened the change is lost when the ModalWindow is closed. I expected calling ModalWindow#showUnloadConfirmation(false) would fix this  but the javascript for the modal window unconditionally overwrites window.onbeforeunload. I suggest checking settings.unloadConfirmation before overwriting window.onbeforeunload.", "id": "4909"}, "4915": {"ground_truth": "0", "bug_report": "org.apache.wicket.util.resource.Patht#find fails on Windows\nWindows users report that test org.apache.wicket.util.resource.PathTest#loadFromRootUsingSubpathInFilename fails for them.The suggested solution is to rework Path#find to:@Override public IResourceStream find(final Class&lt;?&gt; clazz  final String pathname) { final File file = new File(folder  pathname); final File pathOnlyFile = new File(pathname); if (file.exists()) { return new FileResourceStream(file); } if (pathOnlyFile.exists()) { return new FileResourceStream(pathOnlyFile); } else { return null; } }but I'm not quite sure in this solution.", "id": "4915"}, "4920": {"ground_truth": "0", "bug_report": "Rendered Url on root context with cookies disabled might result in double slash //\nWhen a link is rendered on root context with cookies disabled (or on first access with container sending jsessionid)  a rendered link url might be prepended with './' thus resulting in a double slash  ('.//').", "id": "4920"}, "4923": {"ground_truth": "0", "bug_report": "CryptoMapper ignores original queryString parameters\nWhen an AjaxRequest with parameters (e.g.: Autocomplete.getChoices()) arrives and CryptoMapper decrypts it  original queryString parameters dissapears.Debugging CryptoMapper  I've checked that this method:private Url decryptUrl(final Request request  final Url encryptedUrl) { ...}receives querystrings parameters (on field url.parameter from 'request' parameter) and the new Url returned by the method never adds them to its own list.", "id": "4923"}, "4924": {"ground_truth": "0", "bug_report": "Websocket broadcast support does not work with OSGi\nWICKET-4832 provides websocket support but this does not work in an OSGi environment because the packages are not unique.This patch provides the changes to make it run under OSGi. Most of the changes are in the wicket-native-websocket modules  but WicketFilter from wicket-core has a new method to let AbstractUpgradeFilter only override the required parts (was TODO in original code).", "id": "4924"}, "4927": {"ground_truth": "0", "bug_report": "Header can not be set from IRequestCycleListener#onEndRequest()\nDue to HeaderBufferingWebResponse a header can no longer be set from IRequestCycleListener#onEndRequest().In 1.4.x this was possible because BufferedWebResponse just passed through all headers to HttpServletResponse.", "id": "4927"}, "4932": {"ground_truth": "0", "bug_report": "Mounted page is not throwing ExpireException with setting setRecreateMountedPagesAfterExpiry(false)\nWe have a page that is both bookmarkable (and accessible with certain page parameters) and has a second constructor taking an object. When ever the session time-out we want to show a session expired page. But we get a exception because Wicket is trying to rebuild the page with no page parameters. We have set the setting getPageSettings().setRecreateMountedPagesAfterExpiry(false); This works when clicking on (ajax)links  but it's not working when using the back/forward button in the browser (or javascript:history.go(-1)).I'll attache a quickstart.", "id": "4932"}, "4933": {"ground_truth": "0", "bug_report": "Palette does not handle disabled choices correctly\nIt is possible to add choices to a Palette with the disabled HTML attribute. This attribute is respected by all modern browsers and prevents the selection of disabled choices.However Palette also has a double-click handler  which will ignore the disabled attribute and add the choice to the selection.The Javascript palette.js can be modified to prevent disabled choices from being added to the selection:Wicket.Palette.moveHelper=function(source  dest) { var dirty=false; for (var i=0;i&lt;source.options.length;i++) { if (source.options&#91;i&#93;.selected &amp;&amp; !source.options&#91;i&#93;.disabled) { dest.appendChild(source.options[i]); i--; dirty=true; } } return dirty; };Maybe it makes sense to integrate this into Palette?", "id": "4933"}, "4934": {"ground_truth": "0", "bug_report": "DownloadLink uses wrong encoding for spaces/non-ASCII characters\nWhen downloading a file with spaces and non-ASCII characters in the filename using DownloadLink  all browsers I tested show a wrong filename in the file download dialog. For a file named Test ''.txt  I got the following output from different browsers:IE: Test+''.txtFF: Test+%27%C3%A4%27.txtChrome: Test+%27%27.txtI have attached a patch that fixes the issue for me. The problem is thata) the used URL encoding is wrong. PATH encoding  not QUERY encoding is requiredb) only IE needs the filename to be encoded  other browsers seem to work with the original nameSee e.g. http://stackoverflow.com/questions/93551/how-to-encode-the-filename-parameter-of-content-disposition-header-in-http for a discussion of the underlying issue.Note: I do not believe the attached patch is the optimal fix for this issue. I would prefer removing the encoding handling from DownloadLink and putting it into AbstractResource.setResponseHeaders()  so other components using attachments benefit  too.", "id": "4934"}, "4935": {"ground_truth": "0", "bug_report": "Rendered URL is resulting with double slash when using AuthenticatedWebApplication\nWhen the application requires authentication and a page requiring authentication is the first page to be accessed the url for the Login page is including a double slash causing a 404. This only happens when the page locked down is mounted with mountPackage.", "id": "4935"}, "4945": {"ground_truth": "0", "bug_report": "Wicket-atmosphere filters should be functions on AtmosphereResource\nWith a function on AtmosphereResource  rather than a predicate  it is possible to filter on attributes in the AtmosphereRequest. This would allow you to create filters that differentiate on the receiver  without relying on the heavy-weight contextAwareFilter().", "id": "4945"}, "4946": {"ground_truth": "0", "bug_report": "Allow passing parameters to atmosphere JS\nCurrently  it is not possible to pass parameters to the atmosphere JS  for example to disable websocket. In some situations you might want to change some of the default settings used by wicket-atmosphere to get everything working in your setup. For example  if your hosting provider does not support websocket  you should set the transport to streaming.", "id": "4946"}, "4956": {"ground_truth": "0", "bug_report": "compareTo methods of Actions in BufferedWebResponse violate Comparable contract\nI've never seen this result in an exception so far  but the implementations of the methods is wrong and will fail on java 7 if multiple action instances of the same class are sorted using Collections.sort. The sorting should return 0 if instances are of the same type.", "id": "4956"}, "4962": {"ground_truth": "0", "bug_report": "AjaxFormChoiceComponentUpdatingBehavior cannot be triggered with BaseWicketTester#executeAjaxEvent()\nBaseWicketTester executes AjaxFormComponentUpdatingBehavior only.", "id": "4962"}, "4964": {"ground_truth": "0", "bug_report": "Rename Component#renderHead(HtmlHeaderContainer)\nIt seems it happens somewhat often that users mistakenly override renderHead(HtmlHeaderContainer) rather than renderHead(IHeaderResponse). Code completion makes this a very easy mistake.I propose renaming the somewhat-internal method renderHead(HtmlHeaderContainer) to renderIntoPageHeaderContainer or something like that. We can't just make the method package private  since it is needed by Panel  Border and FormComponentPanel to render the header sections of their associated markup.", "id": "4964"}, "4970": {"ground_truth": "0", "bug_report": "Move the logic for creating the proper PackageResource from PackageResourceReference to ResourceReferenceRegistry\norg.apache.wicket.request.resource.PackageResourceReference#getResource() has a logic that decides what type of PackageResource to return depending on the file extension. It supports only .css and .js at the moment.ResourceReferenceRegistry (RRR) uses this logic for unknown ResRefs. It will be better if this mapping is moved to RRR and be possible to add custom mappings.", "id": "4970"}, "4975": {"ground_truth": "1", "bug_report": "client side memory leak on  date picker\nUnder certain conditions date picker component leaks memory at client side. More concretely DatePicker#renderHead tries to clean up existing date pickers viaAjaxRequestTarget target = component.getRequestCycle().find(AjaxRequestTarget.class); if (target != null) { String escapedComponentMarkupId = getEscapedComponentMarkupId(); String javascript = 'var e = Wicket.$('' + escapedComponentMarkupId + 'Dp' + ''); if (e != null &amp;&amp; typeof(e.parentNode) != 'undefined' &amp;&amp; ' + 'typeof(e.parentNode.parentNode != 'undefined')) {' + 'e.parentNode.parentNode.removeChild(e.parentNode);' + 'YAHOO.wicket.' + escapedComponentMarkupId + 'DpJs.destroy(); delete YAHOO.wicket.' + escapedComponentMarkupId + 'DpJs;}'; target.prependJavaScript(javascript); }but this fails if 'panel' containing date pickers is completely replaced via AJAX. E.g. for date pickers placed on an AJAX navigated repeater. The result is that client side objectYAHOO.wicketobject grows and grows... and for1- Wicket 1.5.x and wicket 1.4.x this means time for creating new date pickers grows steadily.2- For wicket 1.6.x there seems not to have any performance hindrance (only the memory leak).I attach quick starts demonstrating this.", "id": "4975"}, "4983": {"ground_truth": "0", "bug_report": "extra recursion on Wicket.DOM.get\nAny reason for DOM.get not being likeget: function (arg) { if (isUndef(arg)) { return null; } if (arguments.length &gt; 1) { var e = []; for (var i = 0; i &lt; arguments.length; i++) { e.push(get(arguments[i])); } return e; } else if (typeof arg === 'string') { return document.getElementById(arg); } else { return arg; }instead of get: function (arg) { if (isUndef(arg)) { return null; } if (arguments.length &gt; 1) { var e = []; for (var i = 0; i &lt; arguments.length; i++) { e.push(Wicket.$(arguments[i])); } return e; } else if (typeof arg === 'string') { return document.getElementById(arg); } else { return arg; }?", "id": "4983"}, "4986": {"ground_truth": "0", "bug_report": "wicket-ajax-jquery.js fails with 'member not found' on IE for delayed ajax requests\nChannel#done() uses setTimeout() to execute delayed Ajax calls.On IE when the delayed call is executed  jquery's #preventDefault() fails with 'member not found' because the original event object's properties (here e.returnValue) can no longer be accessed.", "id": "4986"}, "4988": {"ground_truth": "0", "bug_report": "AbstractNumberConverter issue when used with NumberFormat#getCurrencyInstance\nSummary of the discussion on users@:There is an issue when using AbstractNumberConverter when #getNumberFormat returns NumberFormat#getCurrencyInstance()I think the problem is due to AbstractNumberConverter#parse(Object  double  double  Locale):if (value instanceof String){ // Convert spaces to no-break space (U+00A0) to fix problems with // browser conversions. // Space is not valid thousands-separator  but no-br space is. value = ((String)value).replace(' '  '/u00A0');}Which replace spaces  so a string like '1 5 ' is invalid while being parsed.public class CurrencyConverter extends AbstractNumberConverter&lt;Double&gt;{ private static final long serialVersionUID = 1L; public CurrencyConverter() { } @Override protected Class&lt;Double&gt; getTargetType() { return Double.class; } @Override public NumberFormat getNumberFormat(Locale locale) { return NumberFormat.getCurrencyInstance(locale); } @Override public Double convertToObject(String value  Locale locale) { locale = Locale.FRANCE; return this.parse(value  Double.MIN_VALUE  Double.MAX_VALUE  locale);// This does work:// final NumberFormat format = this.getNumberFormat(locale);// return this.parse(format  value  locale); }}As Sven indicates  there is (yet another) issue in Java currency formating (space as thousand separator)http://matthiaswessendorf.wordpress.com/2007/12/03/javas-numberformat-bug/http://bugs.sun.com/view_bug.do?bug_id=4510618So will I let you decide whether or not you wish to fix it (the space before the currency symbol).Thanks &amp; best regards Sebastien.", "id": "4988"}, "4989": {"ground_truth": "0", "bug_report": "WicketTester should send copies of its cookies\nThere are some bugs related to cookie handling in BaseWicketTester.Problem 1) a cookie set in the request should not be in the response unless manually set by the server codeProblem 2) wicket tester sends the original cookie instance to the server. If the server code manipulates the cookie anyhow (e.g. change its value) but do not send it back explicitly in the response then the original cookie in WicketTester (the request cookie) is updated while it shouldn't be.A possible solutions for these problems can be found at:https://github.com/apache/wicket/pull/28", "id": "4989"}, "5013": {"ground_truth": "0", "bug_report": "Wicket Enclosure fails with more than one component\nAn enclosure like:&lt;wicket:enclosure child='message'&gt; &lt;span wicket:id='message' /&gt; &lt;a href='#' wicket:id='link'&gt;&lt;/a&gt;&lt;/wicket:enclosure&gt;fails with:org.apache.wicket.WicketRuntimeException: The component(s) below failed to render. Possible reasons could be that: 1) you have added a component in code but forgot to reference it in the markup (thus the component will never be rendered)  2) if your components were added in a parent container then make sure the markup for the child container includes them in &lt;wicket:extend&gt;.1. [ExternalLink &#91;Component id = link&#93;]It will report failed rendering for all components within the enclosure except the child.This works if I turn the enclosure into an inline enclosure:&lt;div wicket:enclosure='message'&gt; &lt;span wicket:id='message' /&gt; &lt;a href='#' wicket:id='link'&gt;&lt;/a&gt;&lt;/div&gt;I got this error when upgrading from Wicket 6.2.0 to 6.3.0.I also noticed that the AjaxEnclosureListener only visits the InlineEnclosures.", "id": "5013"}, "5017": {"ground_truth": "0", "bug_report": "BaseWicketTester#clickLink() doesn not serialize form to request for SubmitLink but does for AjaxSubmitLink\nBaseWicketTester#clickLink() handles AjaxSubmitLink and SubmitLink onconsistently for the former all form inputs are serialized to the request before triggering.", "id": "5017"}, "5020": {"ground_truth": "0", "bug_report": "InlineEnclosureHandler always uses 'wicket' namespace\nThe name of the wicket namespace is hardcoded in InlineEnclosureHandler:public final static String INLINE_ENCLOSURE_ATTRIBUTE_NAME = 'wicket:enclosure';This constant is also used by InlineEnclosure and was probably never meant to be part of the public API.These classes should respect the user defined namespace provided by the MarkupResourceStream.", "id": "5020"}, "5025": {"ground_truth": "0", "bug_report": "Set the component as a context to the ajax listeners\nCurrently to get the component in an Ajax listener (before  success  complete  ...) one has to use: attrs.event.target.In Wicket 1.5 one could use 'this' in ajax call decorators because the script was a value of the inline attribute.Currently 'this' in event listeners is unusable. It would be good to set the component as a context.", "id": "5025"}, "5038": {"ground_truth": "0", "bug_report": "Add equals() and hashcode() implementation to INamedParameters.NamedPair\nIt would be handy to have an equals() and hascode() implementation based on key and value  so that it is possible to do things likepageParameters.getAllNamed().contains(myNamedPair)In case you are interested:My current use case is that the page should check whether it is actually called with the pageparameters needed (i.e. using the unique  canonical URL)  however ignoring some special params.", "id": "5038"}, "5040": {"ground_truth": "0", "bug_report": "Session.exists() returns false when ThreadContext#session is not set to current session\nThere are several places in Wicket which check for the existence of a Session before actually getting a reference to it  e.g. FeedbackCollector: public final List&lt;FeedbackMessage&gt; collect(final IFeedbackMessageFilter filter) { ... if (includeSession &amp;&amp; Session.exists()) { messages.addAll(Session.get().getFeedbackMessages().messages(filter)); } }If no one has called Session#get()  all calls to Session#exists() return false although a session might exist in the session store  i.e. it might just not be set to ThreadContext#session already.", "id": "5040"}, "5050": {"ground_truth": "0", "bug_report": "AutoComplete should not request suggestions if input is no longer active element\nIf an ajax change event handler disables and re-renders an AutoCompleteTextField  a pending ajax request for suggestions will trigger a ListenerInvocationNotAllowedExecption. This leads to a log warning 'behavior not enabled; ignore call' but the redirect to the AccessDeniedPage is ignored by wicket-autocomplete.js.", "id": "5050"}, "5054": {"ground_truth": "0", "bug_report": "Possible bug in org.apache.wicket.util.lang.Packages when building path with repeating names\nWhen trying to build the absolute path from package 'com.foo.bar' with relative path 'baz/foo/qux' in method org.apache.wicket.util.lang.Packages.absolutePath(String  String) the block: else if (absolutePath.size() &lt;= i || absolutePath.get(i).equals(folder) == false) { // Add to stack absolutePath.add(folder); }doesn't run for the 'foo' part of the relative path because absolutePath.get(1) == foo from the package == foo from the relative path.So the resulting absolute path is 'com/foo/bar/baz/qux' rather than the expected 'com/foo/bar/baz/foo/qux'.Seems like the 'else if' should just be a 'else'.", "id": "5054"}, "5055": {"ground_truth": "0", "bug_report": "AutoComplete still triggers redundant events to registered change listener\nAutoComplete still triggers redundant events to registered change listener", "id": "5055"}, "5065": {"ground_truth": "0", "bug_report": "Improve UrlRenderer to be able to render urls without scheme and/or host\nUrlRenderer can be improved to support rendering urls like: //hostname:1234/a/b //hostname/a/b /a/b", "id": "5065"}, "5066": {"ground_truth": "0", "bug_report": "Allow PackageResource to decide itself whether it could be accepted or not\nBy default PackageResource uses IPackageResourceGuard to check whether it can be rendered or not.By making org.apache.wicket.request.resource.PackageResource#accept(Class  String) protected the resource itself can do the check  e.g. allow the access when usually the guard would reject.", "id": "5066"}, "5073": {"ground_truth": "0", "bug_report": "UrlRenderer#removeCommonPrefixes() fails when contextPath+filterPrefix has more segments than the argument\nI get this exception when trying to create a URL with RequestCycle#urlFor:org.apache.wicket.WicketRuntimeException: An error occurred while generating an Url for handler 'ResourceReferenceRequestHandler{resourceReference=scope: org.apache.wicket.Application; name: ImageResource; locale: null; style: null; variation: null  pageParameters=publicId=[f74df62d-cbdb-49db-96e4-36e3ea62610e]  type=[sr]}' at org.apache.wicket.request.cycle.RequestCycle.urlFor(RequestCycle.java:516) &#91;wicket-core-6.6.0.jar:6.6.0&#93; at org.apache.wicket.request.cycle.RequestCycle.urlFor(RequestCycle.java:473) &#91;wicket-core-6.6.0.jar:6.6.0&#93; at xxx.XXXWebApplication.urlFor(XXXWebApplication.java:161) ~&#91;xxx-web-0.1.0-SNAPSHOT.jar:0.1.0-SNAPSHOT&#93;&#91;...&#93;Caused by: java.lang.IndexOutOfBoundsException: Index: 0  Size: 0 at java.util.ArrayList.rangeCheck(ArrayList.java:604) ~&#91;na:1.7.0_10&#93; at java.util.ArrayList.remove(ArrayList.java:445) ~&#91;na:1.7.0_10&#93; at org.apache.wicket.request.UrlRenderer.removeCommonPrefixes(UrlRenderer.java:319) ~&#91;wicket-request-6.6.0.jar:6.6.0&#93; at org.apache.wicket.request.UrlRenderer.renderRelativeUrl(UrlRenderer.java:220) ~&#91;wicket-request-6.6.0.jar:6.6.0&#93; at org.apache.wicket.request.UrlRenderer.renderUrl(UrlRenderer.java:117) ~&#91;wicket-request-6.6.0.jar:6.6.0&#93; at org.apache.wicket.request.cycle.RequestCycle.renderUrl(RequestCycle.java:529) &#91;wicket-core-6.6.0.jar:6.6.0&#93; at org.apache.wicket.request.cycle.RequestCycle.urlFor(RequestCycle.java:511) &#91;wicket-core-6.6.0.jar:6.6.0&#93; ... 46 common frames omittedThe app uses a context path and no filter path. I see that UrlRenderer#removeCommonPrefixes receives an empty list and the code in the method assumes that context path + filter path is always a common prefix and tries to remove it later from the empty list.", "id": "5073"}, "5076": {"ground_truth": "0", "bug_report": "form#onSubmit() is called on just replaced nested forms\nI use wizard api from wicket extensions.Next button is implemented like org.apache.wicket.extensions.wizard.NextButton.It means: if step is complete wizardModel.next() is called and step content is replaced.I send you example - see attachment.In the example Step2Panel contains inner form 'innerForm'.The problem is when we leave step 1 (click to next button) - innerForm.onSubmit from step 2 is called. Obversely when we leave step 2 innerForm.onSubmit is not called!One solution is to call form.process(null) manually in Nextbutton.onClick before step content is replaced. It is wrong again becaouse innerForm.onSubmit is called twice.", "id": "5076"}, "5079": {"ground_truth": "0", "bug_report": "Allow WebApplication-specific Spring configuration\nSpringWebApplicationFactory allows two places to defined a WebApplication: in the global root application context loaded by Spring's ContextLoaderListener in a filter-specific additional web applcation context.SpringComponentInjector is not aware of this additional context but just uses the global one. This imposes the following restrictions: the filter-specific context cannot define any beans to be used by SpringComponentInjector SpringComponentInjector cannot work without a global root application  i.e.ContextLoaderListener is required.Starting with Wicket 6.7.0 the filter-specific context is made accessible to SpringComponentInjector. If no application context is given explicitly to SpringComponentInjector's constructor  by default the injector uses the application context used to create the WebApplication.Benefits: no need to define ContextLoaderListener in web.xml (i.e. less xml) use application-specific beans defined in the filter-specific application context", "id": "5079"}, "5085": {"ground_truth": "0", "bug_report": "InlineEnclosure are piling up on each render\nInlineEnclosureHandler#resolve() uses an auto-incremented id for its resolved InlineEnclosure  On the next render  a new instance will be resolved  since the id of the already resolved InlineEnclosure does not match the id in the markup.But InlineEnclosures are not removed after render as other auto-components  thus all instances pile up in the owning container of the markup.", "id": "5085"}, "5086": {"ground_truth": "0", "bug_report": "FormTester throws an exception when a Palette component is added to a Form associated with a compound property model\nFormTester throws an exception when a Palette component is added to a Form associated with a compound property model:org.apache.wicket.WicketRuntimeException: No get method defined for class ... expression: choicesIt worked fine in Wicket 6.5.0  and works fine if the form is not associated with a compound property model.", "id": "5086"}, "5088": {"ground_truth": "0", "bug_report": "The Bootstrap class does not provide a handle for the CSSResourceReferences.\nThe Bootstrap class provides JavaScriptResourceReference via the plain() and responsive() methods.It should also provide access to bootstrapCss and bootstrapResponsiveCss to enable the applications to use CSS bundles.", "id": "5088"}, "5091": {"ground_truth": "0", "bug_report": "Extract the short names of the ajax attributes as a constants\nCurrently the short names of the AjaxRequestAttributes are hardcoded to AbstractDefaultAjaxBehavior#renderAttributes().", "id": "5091"}, "5104": {"ground_truth": "0", "bug_report": "AjaxSelfUpdatingTimerBehavior in hidden component in ModalWindow causes Ajax Response Error\nI have a ModalWindow which shows a panel with a hidden label with an AjaxSelfUpdatingTimerBehavior. When the modal window is shown  the following error occurs in the Wicket Ajax Debug console:ERROR: Wicket.Ajax.Call.processEvaluation: Exception evaluating javascript: TypeError: Cannot read property 'label5' of undefined  text: (function(){clearTimeout(Wicket.TimerHandles['label5']); delete Wicket.TimerHandles['label5'];})();", "id": "5104"}, "5113": {"ground_truth": "0", "bug_report": "Set a different TimeZone for the RequestLogger\nI'm using wicket 1.5.9. In my log4j.xml I have:&lt;logger name='org.apache.wicket.protocol.http.RequestLogger'&gt; &lt;level value='info'/&gt;&lt;/logger&gt;but when I'm testing my log file output is showing the request logger information using GMT timezone and I need to be GMT+1. Following Martin Grigorov is it possible to remove the final from org.apache.wicket.protocol.http.AbstractRequestLogger#formatDate method?", "id": "5113"}, "5117": {"ground_truth": "0", "bug_report": "Wicket ignores allowDefault:false attribute in multipart ajax requests\nWicket ignores allowDefault:false attribute in multipart ajax requests", "id": "5117"}, "5123": {"ground_truth": "0", "bug_report": "Component.continueToOriginalDestination() can redirect to ./.\nFollowing scenario:Home page redirects to login page via RestartResponseException if no user is logged in.The user logs in  and is led back to the originally called page via continueToOriginalDestination().If the original page was the home page  Wicket's UrlRenderer produces a target url of ./. here (which IE browsers can't handle).", "id": "5123"}, "5124": {"ground_truth": "0", "bug_report": "Improve ResourceReference#getDependencies() API\ncurrently the signature ispublic Iterable&lt;? extends HeaderItem&gt; getDependencies()which is awkward to use.suppose i want a javascript reference that should include a css reference as a dependency  i cannot simply add it to iterable like this:new ResourceReference(Some.class  'some.js') { Iterable getDependencies() { Iterable supers=super.getDependencies(); // supers.add(CSS); &lt;=== cannot do this  instead List list=new ArrayList(); for (reference:supers) { list.add(reference); } // now i can finally add mine list.add(CSS); return list; }}instead change Iterable to a List that is backed by a mutable one. this should make extending much easier. if List is too 'open' create Appendable { append(); } backed by a list and use that.", "id": "5124"}, "5126": {"ground_truth": "0", "bug_report": "SecurePackageResourceGuard is blocking access to web fonts\nSecurePackageResourceGuard is blocking access to web fonts", "id": "5126"}, "5132": {"ground_truth": "0", "bug_report": "Evaluation of returned data (which includes alot of javascript) very slow after ajax call in IE10.\nWe're using ajax to update a treetable. In IE10  when the ajax call returns the data  which contains alot of javascript code  processEvaluation in wicket-ajax-jquery.js stalls on var text = jQuery(node).text();In jQuery procedure Sizzle.getText is called  which eventually returns property elem.textContent. In IE10 this last statement takes about 26 seconds for our case while the same statement in chrome takes about 6 ms.It seems strange that IE10 takes this long to return the textContent of a node  but why is this necessary in the first place?The purpose of var text = jQuery(node).text() would be to get the text of the node. I think it would suffice to state var text = node.childNodes&#91;0&#93;.nodeValue instead of var text = Query(node).text()  because the text is in the node itself  and it's not necessary to get the text from its descendants  because it has no descendants.In our case this modification improves the duration from 25915 ms to 8 ms in IE10.", "id": "5132"}, "5135": {"ground_truth": "1", "bug_report": "wicket-atmosphere EventBus constructor throws NullPointerException under invalid state\nWith invalid configuration  like the WebApplication not yet associated with the servlet  wicket-atmosphere throws NPE.Caused by: org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'atmosphereEventBus' defined in class id.co.bippo.springapp.AppConfig: Instantiation of bean failed; nested exception is org.springframework.beans.factory.BeanDefinitionStoreException: Factory method [public org.apache.wicket.atmosphere.EventBus id.co.bippo.springapp.AppConfig.atmosphereEventBus()] threw exception; nested exception is java.lang.NullPointerException at org.springframework.beans.factory.support.ConstructorResolver.instantiateUsingFactoryMethod(ConstructorResolver.java:581) ~[spring-beans-3.2.2.RELEASE.jar:3.2.2.RELEASE] at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.instantiateUsingFactoryMethod(AbstractAutowireCapableBeanFactory.java:1031) ~[spring-beans-3.2.2.RELEASE.jar:3.2.2.RELEASE] at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:927) ~[spring-beans-3.2.2.RELEASE.jar:3.2.2.RELEASE] at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:490) ~[spring-beans-3.2.2.RELEASE.jar:3.2.2.RELEASE] at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:461) ~[spring-beans-3.2.2.RELEASE.jar:3.2.2.RELEASE] at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:314) ~[spring-beans-3.2.2.RELEASE.jar:3.2.2.RELEASE] at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:194) ~[spring-beans-3.2.2.RELEASE.jar:3.2.2.RELEASE] at org.springframework.beans.factory.support.DefaultListableBeanFactory.findAutowireCandidates(DefaultListableBeanFactory.java:910) ~[spring-beans-3.2.2.RELEASE.jar:3.2.2.RELEASE] at org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(DefaultListableBeanFactory.java:853) ~[spring-beans-3.2.2.RELEASE.jar:3.2.2.RELEASE] at org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveDependency(DefaultListableBeanFactory.java:768) ~[spring-beans-3.2.2.RELEASE.jar:3.2.2.RELEASE] at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor$AutowiredFieldElement.inject(AutowiredAnnotationBeanPostProcessor.java:486) ~[spring-beans-3.2.2.RELEASE.jar:3.2.2.RELEASE] ... 107 common frames omittedCaused by: org.springframework.beans.factory.BeanDefinitionStoreException: Factory method [public org.apache.wicket.atmosphere.EventBus id.co.bippo.springapp.AppConfig.atmosphereEventBus()] threw exception; nested exception is java.lang.NullPointerException at org.springframework.beans.factory.support.SimpleInstantiationStrategy.instantiate(SimpleInstantiationStrategy.java:181) ~[spring-beans-3.2.2.RELEASE.jar:3.2.2.RELEASE] at org.springframework.beans.factory.support.ConstructorResolver.instantiateUsingFactoryMethod(ConstructorResolver.java:570) ~[spring-beans-3.2.2.RELEASE.jar:3.2.2.RELEASE] ... 117 common frames omittedCaused by: java.lang.NullPointerException: null at org.apache.wicket.atmosphere.EventBus.&lt;init&gt;(EventBus.java:113) ~[wicket-atmosphere-0.8.jar:0.8] at id.co.bippo.springapp.SoluvasWebApplication.getEventBus(SoluvasWebApplication.java:296) ~[SoluvasWebApplication.class:na] at id.co.bippo.springapp.AppConfig.atmosphereEventBus(AppConfig.java:270) ~[AppConfig.class:na] at id.co.bippo.springapp.AppConfig$$EnhancerByCGLIB$$a9c1dc07.CGLIB$atmosphereEventBus$1(&lt;generated&gt;) ~[spring-core-3.2.2.RELEASE.jar:na] at id.co.bippo.springapp.AppConfig$$EnhancerByCGLIB$$a9c1dc07$$FastClassByCGLIB$$40a0fc3e.invoke(&lt;generated&gt;) ~[spring-core-3.2.2.RELEASE.jar:na] at org.springframework.cglib.proxy.MethodProxy.invokeSuper(MethodProxy.java:228) ~[spring-core-3.2.2.RELEASE.jar:3.2.2.RELEASE] at org.springframework.context.annotation.ConfigurationClassEnhancer$BeanMethodInterceptor.intercept(ConfigurationClassEnhancer.java:286) ~[spring-context-3.2.2.RELEASE.jar:3.2.2.RELEASE] at id.co.bippo.springapp.AppConfig$$EnhancerByCGLIB$$a9c1dc07.atmosphereEventBus(&lt;generated&gt;) ~[spring-core-3.2.2.RELEASE.jar:na] at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[na:1.7.0_15] at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57) ~[na:1.7.0_15] at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[na:1.7.0_15] at java.lang.reflect.Method.invoke(Method.java:601) ~[na:1.7.0_15] at org.springframework.beans.factory.support.SimpleInstantiationStrategy.instantiate(SimpleInstantiationStrategy.java:160) ~[spring-beans-3.2.2.RELEASE.jar:3.2.2.RELEASE] ... 118 common frames omittedIt should wrap the NPE in a more descriptive error. Suggestion: 'Provided Wicket WebApplication is not associated with a ServletContext. Please ensure Wicket application is fully initialized before creating Atmosphere EventBus.'", "id": "5135"}, "5140": {"ground_truth": "0", "bug_report": "InterceptData never gets cleared from session after continueToOriginalDestination is called and another page is requested afterwards\nWe have the same problem as earlier described by Chris in WICKET-4500:'The above fix is great but we've run into another problem. If an admin user attempts to go to a restricted page and gets redirected via a RedirectToInterceptException but then decides not to log on but then goes to the normal home page authentication and then successfully logs on as a standard user that authentication will redirect to where the admin initially wanted to go to - because they never authenticated as admin continueToOriginalDestination was never called and so Wicket still thinks that when continueToOriginalDestination is called after the standard user's authentication that it needs to redirect to the original admin page... fun!Would it be possible to introduce an explicit 'clearRedirect' method so that when the home page does a RestartResponseException to redirect to the standard user authentication page it can  at the same time  do a 'clearRedirect' so that a subsequent call to continueToOriginalDestination does not attempt to go to the admin page.I can't remove the continueToOriginalDestination from the standard user authentication page because it is still required to perform a continue when it was reached by a RedirectToIntercepException from restricted pages other than the home page. '", "id": "5140"}, "5141": {"ground_truth": "0", "bug_report": "Exception while rendering absolute URL with UrlResourceReference\nWhile rendering absolute url UrlRenderer calls renderFullUrl on line 112 which causes error.", "id": "5141"}, "5143": {"ground_truth": "1", "bug_report": "Create an interface for the roles replacing the current Roles class\nCurrently the roles in wicket are managed by a final class  Roles  that extends HashSet.In my current projects I have to manage permissions considering several factors that include the role  the creator and the type of data  and this must be done also when displaying tables with several rows. Having the possibility to create my own Roles class I can integrate my restrictions with wicket authorization and add some performance improvements (required in this case because the validation must be done at the field level).", "id": "5143"}, "5149": {"ground_truth": "0", "bug_report": "PageRequestHandlerTracker doesn't track resolves of handlers caused by Exception\nPageRequestHandlerTracker should implement #onExceptionRequestHandlerResolved()", "id": "5149"}, "5150": {"ground_truth": "1", "bug_report": "Log additional info when FormComponent fails in updateCollectionModel\nWhen a form component using Collections (e.g. CheckGroup) fails to set the collection in the Model's contained object due to an exception  it produces some log output that looks thus:INFO - FormComponent - no setter for the property attached to [CheckGroup &#91;Component id = group&#93;] This may be misleading  as any exception will produce this output  including for example a NullPointerException that occurs inside the setter itself. In other words  setter for the property may well exist but an exception sometime during the setter invocation still results in the 'no setter' log feedback. Suggested improvement is to include some details about the caught exception in this log message that may more directly point to the cause of the failure.", "id": "5150"}, "5157": {"ground_truth": "0", "bug_report": "URL query parameter values containing equals sign get cut off\nWhen calling a page with a query parameter like 'param1=val1=val2' the value of 'param1' obtained from PageParameters will be 'val1'. Everything after the equals sign inside the parameter value gets cut off.", "id": "5157"}, "5161": {"ground_truth": "0", "bug_report": "The url gets longer when using StatelessForm with GET method\nThe request parameter used for IRequestListener resolution is added to the page parameters for each form submit.", "id": "5161"}, "5164": {"ground_truth": "1", "bug_report": "PageStoreManager.SessionEntry keeps outdated sessionId when container changes sessionId\nPageStoreManager keeps the initial sessionId for each SessionEntry.If the container changes the sessionId later (e.g. Tomcat's 'Session Fixation Protection')  all pages continue to be stored under the the initial sessionId. This is necessary to be able to access old pages even after a change to the sessionId.However PageStoreManager#sessionExpired(String) passes the current sessionId to the PageStore. If it is not longer equal the original sessionId  the PageStore will fail to remove the stored pages for the session.", "id": "5164"}, "5173": {"ground_truth": "0", "bug_report": "Make ThrottlingSettings mutable\nThrottlingSettings can be modifiable so if an Ajax behavior sets some default throttling setting then a component using this behavior can just change the delay or postpone flag without the need to set a completely new one.", "id": "5173"}, "5179": {"ground_truth": "0", "bug_report": "Move Form hidden field rendering to dedicated method\nForm renders its hidden fields in onComponentTagBody()  which is never called when the markup sourcing strategy is PanelMarkupSourcingStrategy. Please can we move this to a dedicated method which can be called from MarkupSourcingStrategy#onComponentTagBody() when the component is instanceof Form.", "id": "5179"}, "5182": {"ground_truth": "0", "bug_report": "Incorrect signature of types which extend Comparable\nAbstractRangeValidator has the following Signature:public abstract class AbstractRangeValidator&lt;R extends Comparable&lt;R&gt; &amp; Serializable  V extends Serializable&gt; extends Behavior implements IValidator&lt;V&gt;Because of this it cannot be used with DateMidnight as its Comparable implementation is in a base class.I think the correct signature should be:public abstract class AbstractRangeValidator&lt;R extends Comparable&lt;? super R&gt; &amp; Serializable  V extends Serializable&gt; extends Behavior implements IValidator&lt;V&gt;", "id": "5182"}, "5198": {"ground_truth": "0", "bug_report": "Change AjaxRequestAttributes#eventPropagation to BUBBLE\nAjaxRequestAttributes#eventPropagation should initially be set to BUBBLE to be consistent with jquery.", "id": "5198"}, "5202": {"ground_truth": "0", "bug_report": "Page redirects can fail when using url encoding\nWhen url encoding is used instead of cookies for session management  some redirections do not work in Wicket 6.8.0. The problem appears to be in UrlRenderer.renderRelativeUrl  which returns the (invalid) relative URL:'..//demo/app;jsessionid=0BFE4703434CFF7BEBAE5CBF6C60B15F' when passed the URL:'http://localhost:8080/demo/app;jsessionid=0BFE4703434CFF7BEBAE5CBF6C60B15F'and when the UrlRenderer's base URL is: 'wicket/page?1-1.ILinkListener-link'This is because the removeCommonPrefixes method tries to compare segments between the encoded target URL and a URL parsed from (URLRenderer line 319):Url commonPrefix = Url.parse(request.getContextPath() + request.getFilterPath());This second URL does not contain the ;jsessionid=... suffix and the removeCommonPrefixes method doesn't remove prefixes properly. The problem doesn't occur when using cookies for session management  of course.This issue is new between Wicket version 6.2.0 and 6.8.0. When deployed into a servlet container using url-encoding for session management  the following app works under Wicket 6.2.0 but fails (because of redirecting to an invalid URL) under Wicket 6.8.0:// ------------------------// App.javaimport org.apache.wicket.protocol.http.WebApplication;import org.apache.wicket.Page;public class App extends WebApplication { @Override public Class&lt;? extends Page&gt; getHomePage() { return A.class; }}// ------------------------// A.javaimport org.apache.wicket.markup.html.WebPage;import org.apache.wicket.markup.html.link.Link;public class A extends WebPage { public A() { add(new Link&lt;Object&gt;('link') { @Override public void onClick() { setResponsePage(B.class); } }); }}// ------------------------// B.javaimport org.apache.wicket.markup.html.WebPage;import org.apache.wicket.markup.html.link.Link;public class B extends WebPage { public B() { add(new Link&lt;Object&gt;('link') { @Override public void onClick() { setResponsePage(A.class); } }); }}// ------------------------Clicking the link on the home page A will successfully navigate to page B. Clicking the link on page B should navigate to page A. Under Wicket 6.2.0  or Wicket 6.8.0 with cookies  it works. With Wicket 6.8.0 and url-encoding  it tries to redirect to an incorrect URL like http://localhost:8080/demo/app//demo/app;jsessionid=0BFE4703434CFF7BEBAE5CBF6C60B15Fwhich fails (note the double slash and repeated context/filter in the URL). It is possible to configure Tomcat to use url encoding instead of cookies for session management by editing the conf/context.xml file within the Tomcat installation and making the root element of that file read: &lt;Context cookies='false'&gt;", "id": "5202"}, "5203": {"ground_truth": "0", "bug_report": "Base url is incorrect for error dispatched pages\nThe fix for https://issues.apache.org/jira/browse/WICKET-4387 includes the following code in org.apache.wicket.protocol.http.servlet.ServletWebRequest#ServletWebRequest(HttpServletRequest httpServletRequest  String filterPrefix  Url url):if (forwardAttributes != null || errorAttributes != null) { if (LOG.isDebugEnabled()) { LOG.debug('Setting filterPrefix('{}') to '' because there is either an error or a forward. {}  {}'  new Object[] {filterPrefix  forwardAttributes  errorAttributes}); } // the filter prefix is not needed when the current request is internal // see WICKET-4387 this.filterPrefix = '';The filterPrefix is actually needed later when a request is made due to an error (e.g. 404):public Url getClientUrl() { if (errorAttributes != null &amp;&amp; !Strings.isEmpty(errorAttributes.getRequestUri())) { String problematicURI = Url.parse(errorAttributes.getRequestUri()  getCharset()) .toString(); return getContextRelativeUrl(problematicURI  filterPrefix);With filterPrefix=='' the urls for any resources in the error page are wrong.", "id": "5203"}, "5206": {"ground_truth": "0", "bug_report": "Provide default messages for upload exceptions\nError message keys for upload exceptions are prefixed with the form's markup id currently. If we let the Localizer do this  Wicket can provide default messages for different locales.", "id": "5206"}, "5207": {"ground_truth": "0", "bug_report": "Use documented jQuery APIs for triggering the special event 'inputchange'\njQuery 1.9/2.0 changed its internals and now the special event 'inputchange' doesn't work.wicket-examples' autocomplete demo shows the problem.", "id": "5207"}, "5220": {"ground_truth": "0", "bug_report": "AjaxEditableLabel not working well in form\nUsing quickstart I created new maven project (using 6.8.0 wicket + extensions).Code of my page ispackage net.betlista;import org.apache.wicket.extensions.ajax.markup.html.AjaxEditableLabel;import org.apache.wicket.markup.html.WebPage;import org.apache.wicket.markup.html.form.Form;import org.apache.wicket.model.CompoundPropertyModel;public class AjaxEditableLabelInFormTestPage extends WebPage { Form&lt;AjaxEditableLabelInFormTestPageModel&gt; form = new Form('form'); AjaxEditableLabel&lt;String&gt; text = new AjaxEditableLabel&lt;String&gt;('text'); public AjaxEditableLabelInFormTestPage() { form.setModel(new CompoundPropertyModel&lt;AjaxEditableLabelInFormTestPage.AjaxEditableLabelInFormTestPageModel&gt;(new AjaxEditableLabelInFormTestPageModel())); form.add(text); add(form); } class AjaxEditableLabelInFormTestPageModel { String text; }}code for markup HTML is&lt;!DOCTYPE html PUBLIC '-//W3C//DTD HTML 4.01 Transitional//EN' 'http://www.w3.org/TR/html4/loose.dtd'&gt;&lt;html&gt; &lt;head&gt; &lt;meta http-equiv='Content-Type' content='text/html; charset=ISO-8859-1'&gt; &lt;title&gt;Insert title here&lt;/title&gt; &lt;/head&gt; &lt;body&gt; &lt;form wicket:id='form'&gt; &lt;span wicket:id='text'&gt;text&lt;/span&gt; &lt;/form&gt; &lt;/body&gt;&lt;/html&gt;and when I edit the label and press tab  it changed to regular page text (span)  but when I press enter (while editing) the component is still input instead of span and the content is not submitted also. It's not possible to change the component to span again...", "id": "5220"}, "5222": {"ground_truth": "0", "bug_report": "Direct iframe removal not supported by Firefox: tab title stays as 'Connecting'\nHi When using the post via iframe feature of Wicket (for multipart Ajax request) with Firefox  the tab title is changed to 'Connecting...' and it doesn't get back to the original page title at all  even after the Ajax call returned.The iframe is removed in the onload of the iframe ( seehttps://github.com/apache/wicket/blob/master/wicket-core/src/main/java/org/apache/wicket/ajax/res/js/wicket-ajax-jquery.js#L868) and it seems to be problematic for Firefox.Looks like there is some literature about it here:http://stackoverflow.com/questions/7285866/never-ending-connecting-message-after-ajax-form-submitand using a pattern like the following should fix it:iframe.onload = function(){ // Do work with the content of the iframe setTimeout(function(){ iframe.parentNode.removeChild(iframe); }  0);}Quickstart coming with a way to reproduce the problem: Launch the application using Start.java; Go to http://localhost:8080/ with Firefox; Upload a file via the Ajax submit button; The tab title stays as 'Connecting...'.Now uncomment the resource replacement line in the WicketApplication file  restart the app and it should work correctly.Patch using a setTimeout call coming too.", "id": "5222"}, "5223": {"ground_truth": "0", "bug_report": "AjaxEditableLabel doesn't provide a way to configure Ajax attributes for its Ajax behaviors\nAjaxEditableLabel uses EditorAjaxBehavior and LabelAjaxBehavior to change its modes.At the moment there is no way to configure custom Ajax attributes for both behaviors.", "id": "5223"}, "5224": {"ground_truth": "0", "bug_report": "ModalWindow is not visible in Safari when opened from a link at the bottom of a large page\nI am not able to see a ModalWindow in Safari and I expect to see it centered on my view port.Steps:1. Start with a large web page with a link to open the ModalWindow at the bottom of the page. You need a large page where you have to scroll down to find the link.2. Click the link3. Observe that the mask for the ModalWindow displays  but the ModalWindow does not. Scrolling back up  re-sizing  and maximizing will still not display the ModalWindow.", "id": "5224"}, "5226": {"ground_truth": "0", "bug_report": "CDI integration fails in Glassfish 4.0 with WELD-000070\nWhen CDI is configured in the Application and a page has a non-static inner class the page throws exception  regardless of whether there are any injected fields.Caused by: org.jboss.weld.exceptions.DefinitionException: WELD-000070 Simple bean &#91;EnhancedAnnotatedTypeImpl&#93; private class com.inversebit.HomePage$AForm cannot be a non-static inner class at org.jboss.weld.injection.producer.BasicInjectionTarget.checkType(BasicInjectionTarget.java:81) at org.jboss.weld.injection.producer.BasicInjectionTarget.&lt;init&gt;(BasicInjectionTarget.java:69) at org.jboss.weld.injection.producer.BeanInjectionTarget.&lt;init&gt;(BeanInjectionTarget.java:52) at org.jboss.weld.manager.InjectionTargetFactoryImpl.createInjectionTarget(InjectionTargetFactoryImpl.java:95) at org.jboss.weld.manager.InjectionTargetFactoryImpl.createInjectionTarget(InjectionTargetFactoryImpl.java:78) ... 65 more", "id": "5226"}, "5229": {"ground_truth": "0", "bug_report": "use jquery 'focusin'/'focusout' for ajax focus tracking\nFocus tracking in wicket-ajax-jquery.js can be simplified with jQuery bubbling 'focusin'/'focusout'.", "id": "5229"}, "5237": {"ground_truth": "0", "bug_report": "Wicket generates invalid HTML by expanding col tags\nhi I just noticed that wicket expands col tags  even though the (x)html specifications forbids it.take this markup as an example:&lt;table&gt; &lt;colgroup&gt; &lt;col width='20%' /&gt; &lt;col width='80%' /&gt; &lt;/colgroup&gt; &lt;tbody&gt; &lt;tr&gt; &lt;td&gt;I take a fifth of the available space&lt;/td&gt; &lt;td&gt;I take four fifth of the available space&lt;/td&gt; &lt;/tr&gt; &lt;/tbody&gt;&lt;/table&gt;Instead of return this as-is  it get's converted to:&lt;table&gt; &lt;colgroup&gt; &lt;col width='20%'&gt;&lt;/col&gt; &lt;col width='80%'&gt;&lt;/col&gt; &lt;/colgroup&gt; &lt;tbody&gt; &lt;tr&gt; &lt;td&gt;I take a fifth of the available space&lt;/td&gt; &lt;td&gt;I take four fifth of the available space&lt;/td&gt; &lt;/tr&gt; &lt;/tbody&gt;&lt;/table&gt;But the specifications mention that col tags must not have end tags. This may be related to WICKET-2765  as this seems to be the point when col was added to the OpenCloseTagExpander class. Note that it is ok to have a non closing col tag in html (self-closing in xhtml). It's all about generating a separated end tag.This happens in wicket 6.8  but I guess it's relevant to all versions down to wicket 1.4.Specs for reference:http://www.w3.org/TR/1999/REC-html401-19991224/struct/tables.html#edef-COLhttp://www.w3.org/TR/html-markup/col.htmlKind regards Konrad", "id": "5237"}, "5243": {"ground_truth": "0", "bug_report": "JS: High stack size in Function Executor causes 'too much recursion'\nThe Function Executor in wicket-ajax-jquery.js uses recursion and deferred calls to the notify() function to ensure synchronous execution of all tasks contained in an AjaxResponse.Each task calls notif() when it is finished. This causes a recursive call to processNext() thus raising the stack for each execution. If there are a lot of task to handle  the stack size will increase beyond the possible stack size in the client causing a 'too much recursion' exception and increasingly low performance.The deferred execution of notify is only necessary if the task executor has to wait for long running tasks to finish at some uncertain point in the future. Examples: downloading of external resources (js  css  images). These task can call back the executor as soon as they are really finished (e.g. load event triggerd).The problem is that the majority of tasks don't need to wait but return instantly instead. Examples: exchanging components  executing custom javascripts that do not use the '|-syntax' to include the notify callback.Current fix: The depth of the stack is counted and if a depth of &gt;= 1000 is reached  a timeout will interrupt the synchronous task queue execution. A new executor will continue with an empty stack.Problems with that approach:  why 1000? several ajax requests might interrupt each other because the synchronous execution is broken. if an executed custom javascript creates a big stack itself (e.g. by using jquery a lot) the stack will add to the stack used by the Function Executor so that it may still be too big.Proposal to fix this: see also the attached patch.Another callback notifyContinue() is supported that can be called whenever the task will return instantly. This callback avoids the recursive call to processNext and continues in a simple loop over all the tasks.", "id": "5243"}, "5247": {"ground_truth": "0", "bug_report": "Broken Link in Tomcat because of Page Mount\nI post this message on the user mailing List (http://apache-wicket.1842946.n4.nabble.com/Broken-Link-in-Tomcat-because-of-Page-Mount-tt4659663.html) and Martin Grigorov asked me  to create a ticket on Jira.Broken Link in Tomcat because of Page MountFollowing situation:-I have a Wicket Application(6.8.0) which runs under the context 'webapp' on a Tomcat 7.0.41-I mount a Page with two parameters (this is important) in the WicketApplication. mountPage('/mount/${parameter1}/${parameter2}'  MountedPage.class);-The mounted Page(MountedPage.class) has only a simple Link-There are two links on the HomePage to the mounted Page. They are declared as follows: add(new Link&lt;Void&gt;('link') { @Override public void onClick() { setResponsePage(MountedPage.class  linkParameters); } }); add(new Link&lt;Void&gt;('brokenLink') { @Override public void onClick() { setResponsePage(new MountedPage(linkParameters)); } });I deploy this Application as a war file on a Tomcat under the context 'webapp'.When I call the first Link on the HomePage and then the Link on the mounted Page  everything works fine.But if I call the second Link and then the Link on the mounted Page  the link is broken.The context is missing in the generated link http://localhost:8080/wicket/bookmarkable/com.mycompany.LinkedPageDoes anyone have an idea  why the second link does not work on Tomcat?I add a Quickstart and the war file as attachment.Ps: Both links works fine in Jetty. Pss:If I remove the mount command  both links will work in Tomcat too.", "id": "5247"}, "5256": {"ground_truth": "0", "bug_report": "Allow configuring the resource used by ResourceStreamRequestHandler\nDuring the migration from Wicket 1.4 to 1.5.10 I found out that the ResourceStreamResource.respond() does not set the ContentType charset if the resource is of type StringResourceStream. Even though the stream holds the charset  it is not set  although quite a few other header parameters are (well this is understandable because not all ResourceStreams are StringResourceStreams. Also  it is difficult to call the resource.setTextEncoding  because the current flow in resourceStreamRequestHandler.respond does not allow easy overriding of any smaller piece of respond than the whole method. The practical issue was to download a CSV file by clicking a button. I managed to fix the issue by copy/paste/Overriding the ResourceStreamRequestHandler.respond  but IMHO this is not nice: private void addCsvButton() { Form&lt;?&gt; form = new Form&lt;Void&gt;('form') { @Override protected void onSubmit() { final String fileName = getFileName('csv'); TableCsvResourceFactory factory = new TableCsvResourceFactory(); final IResourceStream resourceStream = factory.getResourceStream(tableModel.getObject()); ResourceStreamRequestHandler resourceStreamRequestHandler = new ResourceStreamRequestHandler( resourceStream) { final ContentDisposition contentDisposition = ContentDisposition.ATTACHMENT; @Override public void respond(IRequestCycle requestCycle) { Attributes attributes = new Attributes(requestCycle.getRequest()  requestCycle.getResponse()); ResourceStreamResource resource = new ResourceStreamResource(resourceStream); resource.setFileName(fileName); if (contentDisposition != null) { resource.setContentDisposition(contentDisposition); } else { resource.setContentDisposition(Strings.isEmpty(fileName) ? ContentDisposition.INLINE : ContentDisposition.ATTACHMENT); } final Duration cacheDuration = getCacheDuration(); if (cacheDuration != null) { resource.setCacheDuration(cacheDuration); }+ resource.setTextEncoding('UTF-8'); resource.respond(attributes); } }; RequestCycle.get().scheduleRequestHandlerAfterCurrent(resourceStreamRequestHandler); } }; form.setVisible(displayCsv); add(form); }There are a couple of problems with the current implementation of ResourceStreamRequestHandler:1) I didn't figure out yet any other way how to call the  resource.setTextEncoding('UTF-8');except by copy/pasting the whole ResourceStreamRequestHandler.respond() code to the Override. It would be nice  if there would be some cleaner hook to override some smaller part of this method  such as an empty default implementation of setTextEncoding() that would be always called but would not do anything for other types.2) A second approach would be to create a StringResourceStreamRequestHandler extends ResourceStreamRequestHandler that would be otherwise the same  but would use IStringResource instead of IResource  and would also set the TextEncoding.3) However  third  I didn't yet find any good way to get the encoding from the StringResourceStream itself  because the AbstractStringResourceStream has a protected getCharset(). This problem could be overcome by adding public version of getCharset() to StringResourceStream  or as I did  create a parallel subclass CharsetStringResourceStream that is a copy/paste from StringResourceStream but is non-final and has public getCharset(). After this you could dynamically set the text encoding in ResourceStreamRequestHandler.respond for example like this: if (getResourceStream() instanceof CharsetStringResourceStream) { resource.setTextEncoding(((CharsetStringResourceStream)getResourceStream()).getCharsetName()); }Anyway  I think the usage of StringResourceStream with ResourceStreamRequestHandler should be improved somehow  at the moment I think it is a bit awkward to use.", "id": "5256"}, "5259": {"ground_truth": "0", "bug_report": "Url can't parse urls with username and password\nUrl tries to parse the password as the portnumber  because it's after the :  resulting in the following exception:java.lang.NumberFormatException: For input string: '23dc429c-4ffa-4e99-8e24-984571f4c3b6@digdag-rest-dev2.topicusonderwijs.nl' java.lang.NumberFormatException.forInputString(NumberFormatException.java:65) java.lang.Integer.parseInt(Integer.java:492) java.lang.Integer.parseInt(Integer.java:527) org.apache.wicket.request.Url.parse(Url.java:276) org.apache.wicket.request.Url.parse(Url.java:192) org.apache.wicket.protocol.http.servlet.ServletWebResponse.encodeRedirectURL(ServletWebResponse.java:212) org.apache.wicket.protocol.http.servlet.ServletWebResponse.sendRedirect(ServletWebResponse.java:236) org.apache.wicket.protocol.http.BufferedWebResponse$SendRedirectAction.invoke(BufferedWebResponse.java:400) org.apache.wicket.protocol.http.BufferedWebResponse.writeTo(BufferedWebResponse.java:588) org.apache.wicket.protocol.http.HeaderBufferingWebResponse.stopBuffering(HeaderBufferingWebResponse.java:60) org.apache.wicket.protocol.http.HeaderBufferingWebResponse.flush(HeaderBufferingWebResponse.java:97) org.apache.wicket.protocol.http.WicketFilter.processRequestCycle(WicketFilter.java:269) org.apache.wicket.protocol.http.WicketFilter.processRequest(WicketFilter.java:201) org.apache.wicket.protocol.http.WicketFilter.doFilter(WicketFilter.java:282)", "id": "5259"}, "5263": {"ground_truth": "0", "bug_report": "FilenameWithVersionResourceCachingStrategy breaks silently when the versionPrefix is contained in the original filename\nIf a resource name contains the character used as version prefix then FilenameWithVersionResourceCachingStrategy#undecorateUrl() will split the decorated filename wrongly and the resource response will return 404 (Not found).", "id": "5263"}, "5268": {"ground_truth": "0", "bug_report": "ComponentRenderer.renderComponent fails to render two components with different component IDs\nAfter WICKET-5232 was fixed  #renderComponent now accepts component with any component ID. However since the markup of the RenderPage is cached  after calling #renderComponent for one component it will fail for components having different component ID.This could be fixed as I suggested in WICKET-5232: RenderPage could implement IMarkupCacheKeyProvider interface and return null in #getCacheKey.", "id": "5268"}, "5269": {"ground_truth": "0", "bug_report": "XmlAjaxResponse restores wrong response\nXmlAjaxResponse#writeComponent() erroneously sets the passed response into the requestCycle  although it never was the old (=original) response: @Overrideprotected void writeComponent(Response response  ...){ ... // Restore original response RequestCycle.get().setResponse(response);}AjaxRequestHandler#respond(...) restores the correct old response afterwards  but temporarily the current response of the RequestCycle is wrong.", "id": "5269"}, "5270": {"ground_truth": "0", "bug_report": "Do not set the location.hash when clicking on a link\nClicking an AjaxLink or SubmitLink sets the location.hash to an empty value (..../someUrl?some=param#).This interferes with JavaScript libraries which need to use 'hashchange' event.Additionally in two of our apps we experience a strange page reloads after clicking on AjaxLink.The issue is not easy to reproduce but it seems to be caused by the used href='#' somehow.Applying a custom behavior that overrides href='#' with href='javascript:;' fixes the problem.The problem occurred on Google Chrome and IE9 so far.", "id": "5270"}, "5271": {"ground_truth": "0", "bug_report": "Wicket Tree rendering broken in 7.x\nWhile testing WICKET-5267 (EventDelegationBehavior) I've noticed that the Tree component renders with broken layout in Wicket 7.x.It looks like a CSS related issue.", "id": "5271"}, "5273": {"ground_truth": "0", "bug_report": "Tabindex overwritten in modal window for IE - Works in FF  Chrome\nAttribute tabindex gets overwritten in ModalDialog  when using IE 8 9 10.. It works fine in FF  Chrome.This breaks chances of creating accessability by using tab.See attachment for testproject  which works in ff chrome  fails in ie 8 9 10.1) Open modallink (lightbox)2) use tabbutton - in ff  chrome you'll tab between closebutton and content  in ie this fails cause tabindex gets overwritten by -1. I suspect it's this codepart in modal.js that does it.if (Wicket.Browser.isIE()) { this.disabledTabsRevertList = []; for (var j = 0; j &lt; this.tabbableTags.length; j++) { var tagElements = doc.getElementsByTagName(this.tabbableTags&#91;j&#93;); for (var k = 0 ; k &lt; tagElements.length; k++) { // if this is not an iframe window and the element is child of window content  // don't disable tab on it if (win.isIframe() === true || this.isParent(tagElements&#91;k&#93;  win.content) === false) { var element = tagElements[k]; element.hiddenTabIndex = element.tabIndex; element.tabIndex='-1'; this.disabledTabsRevertList.push(element); } } } }", "id": "5273"}, "5279": {"ground_truth": "0", "bug_report": "o.a.w.a.AtmosphereBehavior onBroadcast should log DEBUG  not INFO\nLogging of onBroadcast is too verbose to be on INFO level :14:48:54.812 | INFO | oryBean_Worker-4 | o.a.w.a.EventBus | pache.wicket.atmosphere.EventBus 203 | registering component for page 1 for session A3D08FEE5445F872C8A69289C00F79E3: crumbHolder:jobListPanel14:48:54.831 | INFO | Shared-AsyncOp-0 | o.a.w.a.AtmosphereBehavior | et.atmosphere.AtmosphereBehavior 129 | onBroadcast: 32501&lt;|msg|&gt;&lt;?xml version='1.0' encoding='UTF-8'?&gt;&lt;ajax-response&gt;&lt;component id='jobListPanel1ea9' &gt;&lt;![CDATA[&lt;div id='jobListPanel1ea9'&gt;&lt;h3&gt;Device Presences&lt;/h3&gt;&lt;div class='btn-toolbar'&gt; &lt;a href='#' class='btn btn-danger' id='deleteAllBtn1f27'&gt;&lt;i class='icon-trash'&gt;&lt;/i&gt; Delete all&lt;/a&gt;&lt;span style='display:none;' class='wicket-ajax-indicator' id='deleteAllBtn1f27--ajax-indicator'&gt;&lt;img src='./wicket/resource/org.apache.wicket.ajax.AbstractDefaultAjaxBehavior/indicator-ver-1373820815000.gif' alt=''/&gt;&lt;/span&gt;&lt;/div&gt;&lt;table id='devicePresenceTable1f33' class='table-striped table-bordered table'&gt;&lt;thead&gt; &lt;tr class='navigation'&gt; &lt;td colspan='5'&gt;...It should be DEBUG level only", "id": "5279"}, "5284": {"ground_truth": "0", "bug_report": "Too deep recursion in AbstractHierarchyIterator\nIn application we have code as follows: MarkupContainer mc = ...; ComponentHierarchyIterator iter = mc.visitChildren(FormComponent.class); for (Component c : iter) { ... }However  when run  on many pages this causes java.lang.StackOverflowError  with lots of the stacktrace filled with lines like this:... org.apache.wicket.util.iterator.AbstractHierarchyIterator.moveUp(AbstractHierarchyIterator.java:302) org.apache.wicket.util.iterator.AbstractHierarchyIterator.moveUp(AbstractHierarchyIterator.java:302) org.apache.wicket.util.iterator.AbstractHierarchyIterator.nextNode(AbstractHierarchyIterator.java:259) org.apache.wicket.util.iterator.AbstractHierarchyIterator.moveDown(AbstractHierarchyIterator.java:170) org.apache.wicket.util.iterator.AbstractHierarchyIterator.nextNode(AbstractHierarchyIterator.java:236) org.apache.wicket.util.iterator.AbstractHierarchyIterator.moveUp(AbstractHierarchyIterator.java:297) org.apache.wicket.util.iterator.AbstractHierarchyIterator.nextNode(AbstractHierarchyIterator.java:259) org.apache.wicket.util.iterator.AbstractHierarchyIterator.moveDown(AbstractHierarchyIterator.java:170) org.apache.wicket.util.iterator.AbstractHierarchyIterator.nextNode(AbstractHierarchyIterator.java:236) org.apache.wicket.util.iterator.AbstractHierarchyIterator.moveDown(AbstractHierarchyIterator.java:170) org.apache.wicket.util.iterator.AbstractHierarchyIterator.nextNode(AbstractHierarchyIterator.java:236) org.apache.wicket.util.iterator.AbstractHierarchyIterator.moveDown(AbstractHierarchyIterator.java:170) org.apache.wicket.util.iterator.AbstractHierarchyIterator.nextNode(AbstractHierarchyIterator.java:236) org.apache.wicket.util.iterator.AbstractHierarchyIterator.moveDown(AbstractHierarchyIterator.java:170) org.apache.wicket.util.iterator.AbstractHierarchyIterator.nextNode(AbstractHierarchyIterator.java:236) org.apache.wicket.util.iterator.AbstractHierarchyIterator.moveUp(AbstractHierarchyIterator.java:297) org.apache.wicket.util.iterator.AbstractHierarchyIterator.moveUp(AbstractHierarchyIterator.java:302) org.apache.wicket.util.iterator.AbstractHierarchyIterator.nextNode(AbstractHierarchyIterator.java:259)...It seems that the search for next component in the iteration produces too deep recursion here (not infinite  but too deep for processing a typical page with relatively lots of components) and I suspect that the length of the stack used by the iterator is proportional to the total number of components in the page.", "id": "5284"}, "5286": {"ground_truth": "0", "bug_report": "o.a.w.extensions.markup.html.form.DateTextField should be applicable to HTML5 date input types\nMarkup:&lt;input type='date' wicket:id='startDateFld'/&gt;Java:add(new DateTextField('startDateFld'  new Model&lt;Date&gt;()));It should accept the following HTML5 input types:1. date2. datetime3. datetime-local4. month5. time6. weekError:Component [startDateFld] (path = [24:compId:startDateFld]) must be applied to a tag with [type] attribute matching [text]  not [date] MarkupStream: [markup = file:/home/ceefour/git/quikdo-hub/freq.web/target/classes/com/quikdo/freq/web/DateRangePanel.html&lt;input type='date' wicket:id='startDateFld'/&gt;  index = 0  current = '&lt;input type='date' wicket:id='startDateFld'/&gt;' (line 0  column 0)] at org.apache.wicket.markup.MarkupStream.throwMarkupException(MarkupStream.java:526) at org.apache.wicket.Component.checkComponentTagAttribute(Component.java:3578) at org.apache.wicket.markup.html.form.TextField.onComponentTag(TextField.java:104) at org.apache.wicket.Component.internalRenderComponent(Component.java:2520) at org.apache.wicket.MarkupContainer.onRender(MarkupContainer.java:1493) at org.apache.wicket.Component.internalRender(Component.java:2379) at org.apache.wicket.Component.render(Component.java:2307) at org.apache.wicket.MarkupContainer.renderNext(MarkupContainer.java:1390) at org.apache.wicket.MarkupContainer.renderAll(MarkupContainer.java:1554) at org.apache.wicket.MarkupContainer.renderComponentTagBody(MarkupContainer.java:1529) at org.apache.wicket.MarkupContainer.renderAssociatedMarkup(MarkupContainer.java:689) at org.apache.wicket.markup.html.panel.AssociatedMarkupSourcingStrategy.renderAssociatedMarkup(AssociatedMarkupSourcingStrategy.java:76) at org.apache.wicket.markup.html.panel.PanelMarkupSourcingStrategy.onComponentTagBody(PanelMarkupSourcingStrategy.java:112) at org.apache.wicket.Component.internalRenderComponent(Component.java:2549) at org.apache.wicket.MarkupContainer.onRender(MarkupContainer.java:1493) at org.apache.wicket.Component.internalRender(Component.java:2379) at org.apache.wicket.Component.render(Component.java:2307) at org.apache.wicket.core.util.string.ComponentRenderer.renderComponent(ComponentRenderer.java:107) at com.quikdo.freq.web.FrequencyPage$FrequencyForm$1.load(FrequencyPage.java:91) at com.quikdo.freq.web.FrequencyPage$FrequencyForm$1.load(FrequencyPage.java:1) at org.apache.wicket.model.LoadableDetachableModel.getObject(LoadableDetachableModel.java:121) at de.agilecoders.wicket.core.markup.html.bootstrap.components.PopoverBehavior.newContent(PopoverBehavior.java:68) at de.agilecoders.wicket.core.markup.html.bootstrap.components.PopoverBehavior.onComponentTag(PopoverBehavior.java:47) at org.apache.wicket.Component.renderComponentTag(Component.java:3970) at org.apache.wicket.Component.internalRenderComponent(Component.java:2540) at org.apache.wicket.MarkupContainer.onRender(MarkupContainer.java:1493) at org.apache.wicket.Component.internalRender(Component.java:2379) at org.apache.wicket.Component.render(Component.java:2307) at org.apache.wicket.MarkupContainer.renderNext(MarkupContainer.java:1390) at org.apache.wicket.MarkupContainer.renderAll(MarkupContainer.java:1554) at org.apache.wicket.MarkupContainer.renderComponentTagBody(MarkupContainer.java:1529) at org.apache.wicket.MarkupContainer.onComponentTagBody(MarkupContainer.java:1484) at org.apache.wicket.markup.html.form.Form.onComponentTagBody(Form.java:1683) at org.apache.wicket.markup.html.panel.DefaultMarkupSourcingStrategy.onComponentTagBody(DefaultMarkupSourcingStrategy.java:71) at org.apache.wicket.Component.internalRenderComponent(Component.java:2549) at org.apache.wicket.MarkupContainer.onRender(MarkupContainer.java:1493) at org.apache.wicket.Component.internalRender(Component.java:2379) at org.apache.wicket.Component.render(Component.java:2307) at org.apache.wicket.MarkupContainer.renderNext(MarkupContainer.java:1390) at org.apache.wicket.MarkupContainer.renderAll(MarkupContainer.java:1554) at org.apache.wicket.MarkupContainer.renderComponentTagBody(MarkupContainer.java:1529) at org.apache.wicket.MarkupContainer.onComponentTagBody(MarkupContainer.java:1484) at org.apache.wicket.markup.html.panel.DefaultMarkupSourcingStrategy.onComponentTagBody(DefaultMarkupSourcingStrategy.java:71) at org.apache.wicket.Component.internalRenderComponent(Component.java:2549) at org.apache.wicket.MarkupContainer.onRender(MarkupContainer.java:1493) at org.apache.wicket.Component.internalRender(Component.java:2379) at org.apache.wicket.Component.render(Component.java:2307) at org.apache.wicket.MarkupContainer.renderNext(MarkupContainer.java:1390) at org.apache.wicket.MarkupContainer.renderAll(MarkupContainer.java:1554) at org.apache.wicket.MarkupContainer.renderComponentTagBody(MarkupContainer.java:1529) at org.apache.wicket.MarkupContainer.onComponentTagBody(MarkupContainer.java:1484) at org.apache.wicket.markup.html.panel.DefaultMarkupSourcingStrategy.onComponentTagBody(DefaultMarkupSourcingStrategy.java:71) at org.apache.wicket.Component.internalRenderComponent(Component.java:2549) at org.apache.wicket.MarkupContainer.onRender(MarkupContainer.java:1493) at org.apache.wicket.Component.internalRender(Component.java:2379) at org.apache.wicket.Component.render(Component.java:2307) at org.apache.wicket.MarkupContainer.renderNext(MarkupContainer.java:1390) at org.apache.wicket.MarkupContainer.renderAll(MarkupContainer.java:1554) at org.apache.wicket.Page.onRender(Page.java:876) at org.apache.wicket.markup.html.WebPage.onRender(WebPage.java:142) at org.apache.wicket.Component.internalRender(Component.java:2379) at org.apache.wicket.Component.render(Component.java:2307) at org.apache.wicket.Page.renderPage(Page.java:1010) at org.apache.wicket.request.handler.render.WebPageRenderer.renderPage(WebPageRenderer.java:121) at org.apache.wicket.request.handler.render.WebPageRenderer.respond(WebPageRenderer.java:271) at org.apache.wicket.core.request.handler.RenderPageRequestHandler.respond(RenderPageRequestHandler.java:165) at org.apache.wicket.request.cycle.RequestCycle$HandlerExecutor.respond(RequestCycle.java:861) at org.apache.wicket.request.RequestHandlerStack.execute(RequestHandlerStack.java:64) at org.apache.wicket.request.cycle.RequestCycle.execute(RequestCycle.java:261) at org.apache.wicket.request.cycle.RequestCycle.processRequest(RequestCycle.java:218) at org.apache.wicket.request.cycle.RequestCycle.processRequestAndDetach(RequestCycle.java:289) at org.apache.wicket.protocol.http.WicketFilter.processRequestCycle(WicketFilter.java:259) at org.apache.wicket.protocol.http.WicketFilter.processRequest(WicketFilter.java:201) at org.apache.wicket.protocol.http.WicketFilter.doFilter(WicketFilter.java:282) at org.atmosphere.util.AtmosphereFilterChain.doFilter(AtmosphereFilterChain.java:155) at org.atmosphere.util.AtmosphereFilterChain.invokeFilterChain(AtmosphereFilterChain.java:132) at org.atmosphere.handler.ReflectorServletProcessor$FilterChainServletWrapper.service(ReflectorServletProcessor.java:314) at org.atmosphere.handler.ReflectorServletProcessor.onRequest(ReflectorServletProcessor.java:172) at org.atmosphere.cpr.AsynchronousProcessor.action(AsynchronousProcessor.java:259) at org.atmosphere.cpr.AsynchronousProcessor.suspended(AsynchronousProcessor.java:166) at org.atmosphere.container.BlockingIOCometSupport.service(BlockingIOCometSupport.java:101) at org.atmosphere.container.Tomcat7BIOSupportWithWebSocket.doService(Tomcat7BIOSupportWithWebSocket.java:65) at org.atmosphere.container.TomcatWebSocketUtil.doService(TomcatWebSocketUtil.java:87) at org.atmosphere.container.Tomcat7BIOSupportWithWebSocket.service(Tomcat7BIOSupportWithWebSocket.java:61) at org.atmosphere.cpr.AtmosphereFramework.doCometSupport(AtmosphereFramework.java:1441) at org.atmosphere.cpr.AtmosphereServlet.doPost(AtmosphereServlet.java:296) at org.atmosphere.cpr.AtmosphereServlet.doGet(AtmosphereServlet.java:282) at javax.servlet.http.HttpServlet.service(HttpServlet.java:621) at javax.servlet.http.HttpServlet.service(HttpServlet.java:728) at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:305) at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:210) at com.codahale.metrics.servlet.AbstractInstrumentedFilter.doFilter(AbstractInstrumentedFilter.java:97) at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:243) at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:210) at ch.qos.logback.classic.selector.servlet.LoggerContextFilter.doFilter(LoggerContextFilter.java:70) at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:243) at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:210) at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:222) at org.apache.catalina.core.StandardContextValve.__invoke(StandardContextValve.java:123) at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java) at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:472) at org.apache.catalina.core.StandardHostValve.__invoke(StandardHostValve.java:171) at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java) at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:99) at org.apache.catalina.valves.AccessLogValve.invoke(AccessLogValve.java:947) at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:118) at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:408) at org.apache.coyote.http11.AbstractHttp11Processor.process(AbstractHttp11Processor.java:1009) at org.apache.coyote.AbstractProtocol$AbstractConnectionHandler.process(AbstractProtocol.java:589) at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.run(NioEndpoint.java:1686) at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1145) at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:615) at java.lang.Thread.run(Thread.java:724)", "id": "5286"}, "5294": {"ground_truth": "0", "bug_report": "MarkupCache ignores enforceReload flag\nMarkupCache ignores the enforceReload flag in the loadMarkupAndWatchForChanges() method. v6.9.1 lines 498 to 511 should be wrapped in an 'if (!enforceReload){ }'.", "id": "5294"}, "5296": {"ground_truth": "0", "bug_report": "OnEventHeaderItem should remove 'on' prefix for the event name\nOnEventHeaderItem uses JavaScript event registration  instead of inline DOM attributes  so it should remove 'on' prefixes when it is provided by the user application.For example: onclick =&gt; click.", "id": "5296"}, "5301": {"ground_truth": "0", "bug_report": "Create a module for Native WebSocket based on JSR 356\nTomcat 8 will soon release its RC1 that contains an implementation of JSR 356 - WebSocket 1.0Wicket should provide module to integrate with this API. It should work with other implementations of this JSR too", "id": "5301"}, "5303": {"ground_truth": "0", "bug_report": "Static id counter AbstractToolbar prevents stable component paths for testing\nsee summary", "id": "5303"}, "5304": {"ground_truth": "0", "bug_report": "AbstractResource should check for error code first before for modifications\nSince org.apache.wicket.request.resource.AbstractResource#setResponseHeaders() gives a chance to the application to set custom headers it should first check for error and status codes set and then check for modifications (Not Modified).Because now one needs to reset the modification time of the resource if she wants to set error or status code.", "id": "5304"}, "5307": {"ground_truth": "0", "bug_report": "Export resources' version cache attribute as request cycle metadata\nIt would be nice if the IResourceCachingStrategies provided Wicket export the extracted version for the lifecycle of the request.An application may need this version to be able to check later whether the requested resource is the one that the system will actually deliver.E.g. web container 1 may deliver the page markup to the browser and then disappear due to upgrade. Then all requests for the resources in that page will be automatically redirected to web container 2 that may have new versions of the resources. In this case the application may return 302/303 (redirect) or 404 (Not found) or whatever is the best for the case.", "id": "5307"}, "5308": {"ground_truth": "1", "bug_report": "AuthenticatedWebSession#authenticate should be protected  not public\nA common source of confusion in trainings is that when implementing security using wicket-auth-roles  you have to implement #authenticate in your own session class  but in the login form's #onSubmit you have to call #signIn.Both #authenticate and #signIn are public and both have identical signatures. Their names mean basically the same thing too. This is rather error-prone.I propose changing the visibility of #authenticate to protected. That way  it will still work the same as it does now  except it won't show up in code-completion anymore and won't compete with #signIn anymore.This should not be an API break  since #authenticate is abstract anyway and is always implemented in user code. Raising visibility from protected to public is always legal  so user code should not break from this change.Opinions?", "id": "5308"}, "5309": {"ground_truth": "0", "bug_report": "No page id appended to some stateful pages using repeaters\nMy test case is a page containing a ListView with a single stateful child. In that case  there is no redirect done to append a pageId to the url because the page's statefulness check is erroneous.Analysis:This calls page.isPageStateless() to dertermine whether a pageId should be addedBookmarkableMapper(AbstractBookmarkableMapper).getPageInfo(IPageRequestHandler) line: 440BookmarkableMapper(AbstractBookmarkableMapper).mapHandler(IRequestHandler) line: 387SystemMapper(CompoundRequestMapper).mapHandler(IRequestHandler) line: 215RequestCycle.mapUrlFor(IRequestHandler) line: 429WebPageRenderer.respond(RequestCycle) line: 268RenderPageRequestHandler.respond(IRequestCycle) line: 165RequestCycle$HandlerExecutor.respond(IRequestHandler) line: 861RequestCycle$HandlerExecutor(RequestHandlerStack).execute(IRequestHandler) line: 64RequestCycle.execute(IRequestHandler) line: 261The problem I see is that AbstractRepeater's onPopulate() is called during onBeforeRender() and this is not done when the stateless status of the page is first checked. Therefore  no pageId is added unless other components not located inside repeaters are also stateful. See thread http://wicket-users.markmail.org/thread/6q2dmns7lqjgkok7I will add a quickstart.", "id": "5309"}, "5310": {"ground_truth": "0", "bug_report": "if wicket is an external lib  BundleStringResourceLoader doesn't work\nWe have got serveral Wicket-based Wepapps on our server and in order to save space  we have move all shared libs (including wicket) into a shared folder which is included via the 'common.loader' of the catalina.properties file. (Using Apache Tomcat/7.0.39)The Problem is now  that StringResourceModel works normal  but the BundleStringResourceLoader doesn't work anymore. It always returns null.How to reproduce:Build attached quickstartRemove wicket-libs from warDeploy in Tomcat", "id": "5310"}, "5315": {"ground_truth": "0", "bug_report": "PriorityHeaderItem+OnDomReadyHeaderItem has no priority in Ajax response\nPriorityHeaderItems+OnDomReadyHeaderItem have no priority in Ajax responses.org.apache.wicket.ajax.AbstractAjaxResponse.AjaxHeaderResponse#render() doesn't extract the wrapped header item and thus doesn't process OnDomReady/OnLoad/OnEvent header items properly.", "id": "5315"}, "5326": {"ground_truth": "1", "bug_report": "Wicket doesn't encrypt links and Ajax URLs for mounted pages when CryptoMapper is used\nURL encryption does not work in Wicket links and Ajax URLs.For links the URL appears unencrypted in the href attribute value and is only later forwarded to the encrypted URL using a 302 response.I am uploading a quickstart.", "id": "5326"}, "5333": {"ground_truth": "0", "bug_report": "wicket-bean-validation french translation\nFrench transalation for wicket-bean-validation to put in org/apache/wicket/bean/validation directory", "id": "5333"}, "5352": {"ground_truth": "0", "bug_report": "Make Palette a FormComponentPanel\nHaving Palette extend FormComponentPanel would allow it to be used as any other FormComponent  e.g. controlling required and validation.", "id": "5352"}, "5359": {"ground_truth": "0", "bug_report": "org.apache.wicket.util.string.StringValue#equals broken\nThe #equals implementation for org.apache.wicket.util.string.StringValue is broken. The following throws an exception instead of just printing 'false':StringValue val = StringValue.valueOf('bla'  Locale.FRANCE);StringValue val2 = StringValue.valueOf('bla'  Locale.CANADA);System.out.println(val.equals(val2));This part of #equalsObjects.isEqual(locale  stringValue.locale)should probably be replaced with something like(locale == stringValue.locale || (locale != null &amp;&amp; locale.equals(stringValue.locale))-&gt; Objects.isEqual is not suitable to determine equality of Locale", "id": "5359"}, "5366": {"ground_truth": "0", "bug_report": "ResourceAggregator looses information about priority/filtering/... when using a bundle\nIf a resource reference is part of a bundle and this resource reference is rendered with PriorityHeaderItem then the bundle is not rendered with priority.", "id": "5366"}, "5374": {"ground_truth": "0", "bug_report": "SourcesPage fails on resources with non-ASCII characters\nWhen created with a String input argument  XhtmlRenderer uses the deprecated java.io.StringBufferInputStream  which 'does not properly convert characters into bytes' (javadoc).Thus the rendered output may contain invalid characters for the Ajax response.", "id": "5374"}, "5376": {"ground_truth": "0", "bug_report": "Log the exception if the application cannot start properly\nWicketFilter doesn't provide helpful information when the application cannot be initialized for some reason.At the moment it just does:log.warn('initialization failed  destroying now');1) it doesn't log the cause exception2) the severity is rather FATAL than WARN", "id": "5376"}, "5384": {"ground_truth": "0", "bug_report": "Allow form components to trim the input themselves\nMake org.apache.wicket.markup.html.form.FormComponent#trim non-final so they can trim the input with more sophisticated ways.String#trim() removes only the breaking whitespaces. To trim non-breaking ones the application can use Guava's CharMatcher.WHITESPACE.trimFrom(str) for example.", "id": "5384"}, "5385": {"ground_truth": "0", "bug_report": "wicket-bean-validation PropertyValidator_fr.properties.xml : org.xml.sax.SAXParseException\nFrench translation for wicket-bean-validation was added in WICKET-5333.It was a properties file that was working.Unfortunatly in the source code it was changed in a XML file that is not weel-formed!java.util.InvalidPropertiesFormatException: org.xml.sax.SAXParseException; lineNumber: 24; columnNumber: 110; The content of elements must consist of well-formed character data or markup. at java.util.XMLUtils.load(XMLUtils.java:76) ~&#91;na:1.7.0_21&#93; at java.util.Properties.loadFromXML(Properties.java:868) ~&#91;na:1.7.0_21&#93;", "id": "5385"}, "5388": {"ground_truth": "0", "bug_report": "Allow DebugBar contributors to be removed\nPlease add a way to unregister DebugBar contributors.I wish to remove some of the default contributors and currently have to do this by using reflection to lookup the 'CONTRIBS_META_KEY' field.The reason why I'm removing contributors (perhaps there's a better solution?): PageSizeDebugPanel tries to serialize the whole page during page rendering  while models are still attached. This causes most of our database-backed models to complain that they're being serialized without being detached (as this usually means somebody probably forgot to call detach() somewhere). InspectorDebugPanel - InspectorPage currently shows me a blank component tree because it doesn't have @RequireHttps as all our other pages do and thus redirects to an http:// URL and can't see the session. So we copied InspectorPage (since it's final and can't be subclassed) to add @RequireHttps and likewise copied InspectorDebugPanel.", "id": "5388"}, "5389": {"ground_truth": "0", "bug_report": "Allow continued processing with WicketTester after exception is thrown\nWhen exposing an exception while processing  WicketTester is left in an inconsistent state. Since #setupNextRequestCycle() is not called  no additional processing is possible afterwards: org.apache.wicket.WicketRuntimeException: No RequestCycle is currently set!For tests expecting WicketTester#process() to fail  it would be nice to be able to continue processing with the same tester instance afterwards.", "id": "5389"}, "5400": {"ground_truth": "0", "bug_report": "Behaviors#internalAdd(Behavior) erroneously gets id for stateless behaviors\nsee http://markmail.org/thread/jtd4zn527r343jbm", "id": "5400"}, "5412": {"ground_truth": "0", "bug_report": "Improve 'mvn jetty:run' to behave as Start.java\nMerge Pull Request https://github.com/apache/wicket/pull/59 that updates Jetty 9.0.x and improves 'mvn jetty:run' to support HTTPS as Start.java does.", "id": "5412"}, "5415": {"ground_truth": "0", "bug_report": "Do not initialize pages which were not rendered\nSince WICKET-5083 (6.8.0) Wicket initializes the page before calculating whether the page is stateless.We identified a performance problem when a page is constructed (and thus touched) but then ignored via setResponsePage(AnotherPage.class)/RestartResponsePage and thus is not rendered and initialized.In this case there is no reason to check whether the page is stateful and store it. Using browser back button will go to the previous page anyway.For example: pageA has a link to PageB in PageB's constructor a RestartResponseException(PageC.class) PageC is renderedIn this example PageB will be fully initialized in org.apache.wicket.page.RequestAdapter#commitRequest to check whether it is stateful or not. But there is really no reason to store it at all since PageB has never been rendered.In our case PageB#onInitialize was expensive (read some settings from the backend) and thus we noticed the difference.", "id": "5415"}, "5416": {"ground_truth": "0", "bug_report": "BOM in UTF markup file breaks encoding detection\nI have project with internationalization and experienced this problem with one of the pages with non-english content. Page had UTF-8 encoding  but my JVM encoding is different. I always use '&lt;?xml encoding ... ?&gt;' to specify encoding for markup pages (and 'MarkupSettings.defaultMarkupEncoding' is not set).Unexpectedly I got problem with bad encoding on page. After several hours of debugging I found what source of this issue was UTF BOM (Byte order mark) at the beggining of file and inability of 'XmlReader' to process it. 'XmlReader.getXmlDeclaration' tries to match xml declaration with regular expression  but fails because of BOM. After that encoding defaults to JVM encoding.It's possible to use 'org.apache.commons.io.input.BOMInputStream' to handle BOM or you could handle it manually inside 'XmlReader'.PS: issue found with Wicket 1.5.10 and I see same code in 6.12.0 without BOM handling  so I added it to 'Affects Version/s'  but no proof-in-code available from me at this moment.", "id": "5416"}, "5417": {"ground_truth": "0", "bug_report": "this.replaceWith is broken when called from onInitialize\nWhen calling this.replaceWith within the onInitialize method  wicket throws an exception:'Last cause: org.apache.wicket.Component has not been properly initialized. Something in the hierarchy of com.mycompany.PanelA has not called super.onInitialize() in the override of onInitialize() method'This happens because detach is called on the panel being replaced which clears Component.request flags (sets to 0) which causes the exception on line 864 of Component.java:if (!getRequestFlag(RFLAG_INITIALIZE_SUPER_CALL_VERIFIED)) { // throws here}", "id": "5417"}, "5418": {"ground_truth": "0", "bug_report": "PropertyValidator ignoring groups with the @NotNull annotation only\nWhen using groups in your JSR303 compliant classes  Wicket does not honor the groups for the @NotNull annotation.", "id": "5418"}, "5422": {"ground_truth": "0", "bug_report": "ComponentRenderer.renderComponent() adds a page to DataStore\nI'm using ComponenetRenderer withing CustomTooltipBehavior (wicket-jquery-ui) to generate tooltip content. I add this to about 50 rows in my table so I run renderComponent() method as many times.All worked fine but there was a problem with performance when I used Fragment component with markup attached to the WebPage. I did some digging and finally checked http://localhost:8080/context/wicket/internal/debug/diskDataStore and it appeared that for one request  Wicket stores 51 pages in it. All of the size of the whole page (about 300kB) and all of them named org.apache.wicket.core.util.string.ComponentRenderer$RenderPage.I changed implementation from Fragment to Panel componenet and the size was reduced to (1kB) but still all of these items were stored in the DataStore.It seems that this method is creating a dummy page in order to create the markup  but how can I avoid storing these pages?", "id": "5422"}, "5424": {"ground_truth": "1", "bug_report": "Page.isPageStateless() returning true in regular run but false in WicketTester\nMotivation:Healthcheck/heartbeat pages must always be stateless to prevent significant amounts of session creation and storage.Also each anonymously accessed page in a public site should be stateless due to the same reason (otherwise the site could easily be DoSsed down).It would be nice to verify these requirements by tests.If I create an ought-to-be-stateless page with an AjaxLink which is hidden by a behavior:public class MyPage extends WebPage { public MyPage() { add(new AjaxLink&lt;Void&gt;('link') { @Override public void onClick(AjaxRequestTarget target) { // } }.add(new Behavior() { @Override public void onConfigure(Component c) { c.setVisible(false); } })); add(new Label('isPageStateless'  new AbstractReadOnlyModel&lt;Boolean&gt;() { @Override public Boolean getObject() { return MyPage.this.isPageStateless(); } })); }}then checking through a web server the page correctly prints 'true'  and no HttpSessions are created.However  when I try to verify statelessness through WicketTester  the following test passes:@Testpublic void testName() throws Exception { WicketTester tester = new WicketTester(new WebApplication() { @Override public Class&lt;? extends Page&gt; getHomePage() { return MyPage.class; } }); tester.startPage(MyPage.class); tester.assertLabel('isPageStateless'  'false'); assertFalse(tester.getLastRenderedPage().isPageStateless());}It seems that somehow due to WicketTester  isPageStateless() is being invoked before any behaviors are run (and thus the AjaxLink is still visible)  and since stateless-flag for the page is cached  it remains false.If it's by design that isPageStateless should always return the same result during each request  then I guess that the statelessness resolution process must not depend on anything happening after the page constructor? I assume it's not by design.Suggestions:A) Obvious fix would be to remove stateless-flag caching  since apparently it is causing problems  as also suggested by a hackish comment in Page.init(). In general  caching should always be used sparingly.B) Or maybe whoever is invoking isPageStateless() at an early stage should actually be using Page.peekPageStateless()? But this doesn't really seem like a real fix  more like a temporary hack.C) All caching could also be disabled during test runs  but this would not be a good thing since tests should reproduce the actual behavior as closely as possible.D) In case this is a known issue without a proper fix  how then could I verify page statelessness through WicketTester? Currently I'm clearing the stateless-cache by reflection  which feels kind of bad...", "id": "5424"}, "5425": {"ground_truth": "0", "bug_report": "WicketTester doesn't preserve the request cookies when #executeListener() is used\norg.apache.wicket.util.tester.BaseWicketTester#executeListener(org.apache.wicket.Component  org.apache.wicket.RequestListenerInterface) creates a new new MockHttpServletRequest but doesn't do the cookie management as in org.apache.wicket.util.tester.BaseWicketTester#setupNextRequestCycle() (the only other place where a new MockHttpServletRequest is created).", "id": "5425"}, "5436": {"ground_truth": "0", "bug_report": "Implement BigIntegerConverter\nThere are converters for all the other datatypes (subclass of AbstractNumberConverter)  but none for BigIntegerConverter  it would seem.", "id": "5436"}, "5439": {"ground_truth": "0", "bug_report": "Allow restarting AbstractAjaxTimerBehavior without updating its hosting component\nCurrently when AbstractAjaxTomerBehavior is restarted  its updates its whole hosting component. This is undesirable when you have added the behavior to the page or another component high in the hierarchy.", "id": "5439"}, "5445": {"ground_truth": "0", "bug_report": "Make CaptchaImageResource easier to extend and reuse\nWicket-Extensions' CaptchaImageResource generates its image byte array in the private #render() method. By making this method protected it will be easy to use third-party/custom code to generate the image and re-use the invalidation logic.", "id": "5445"}, "5459": {"ground_truth": "0", "bug_report": "Use method chaining where it makes sense\nIt's quite inconvinient to have Component.setMetaData which return void.For stacking purposes it'll be better to make this method return 'this'.", "id": "5459"}, "5470": {"ground_truth": "0", "bug_report": "Remove 'final' from org.apache.wicket.markup.html.form.EnumChoiceRenderer#getDisplayValue\norg.apache.wicket.markup.html.form.EnumChoiceRenderer#getDisplayValue() adds unnecessary indirection by providing overrideable #postprocess() method.If an application doesn't want to use the default implementation to resolve a display value by using i18n resources then it should provide its own custom implementation of IChoiceRenderer because org.apache.wicket.markup.html.form.EnumChoiceRenderer#getDisplayValue is final and it will throw MissingResourceException.If an application needs to use different logic it should be able to override #getDisplayValue(). If it needs to do something like #postprocess() then it can do:public Object getDisplayValue() { Object orig = super.getDisplayValue(); return manipulate(orig);}", "id": "5470"}, "5472": {"ground_truth": "0", "bug_report": "PackageResource#internalGetResourceStream() should return ProcessingResourceStream only when the resource is existing\nThe fix for WICKET-4762 introduced ProcessingResourceStream - a resource stream that wraps another IResourceStream and processes its InputStream (e.g. compresses it).There is a bug that even when the resource is not found  i.e. the resource stream is null  Wicket still wraps it in ProcessingResourceStream.Another inefficiency is that ResourceStreamWrapper (the parent of ProcessingResourceStream) declares its method #getDelegate() as protected. It should be public.", "id": "5472"}, "5486": {"ground_truth": "0", "bug_report": "WebPageRenderer should honor RedirectPolicy.ALWAYS_REDIRECT more consistently\nIn WebPageRenderer shouldPreserveClientUrl() currently has precedence over RedirectPolicy.ALWAYS_REDIRECT.This can lead to confusion or unexpected behavior when RedirectPolicy.ALWAYS_REDIRECT is explicitely set  but for some reason shouldPreserveClientUrl() returns true and thus no redirect is performed due to the logic in WebPageRenderer.A fix for this particular problem could be implemented in WebPageRenderer as of Wicket 6.12.0 by changing line 211 to: (shouldPreserveClientUrl &amp;&amp; getRedirectPolicy() != RedirectPolicy.ALWAYS_REDIRECT)) //Note that this problem is slightly related to WICKET-5484. Both fixes combined the line could look like this: (shouldPreserveClientUrl &amp;&amp; !isAjax &amp;&amp; getRedirectPolicy() != RedirectPolicy.ALWAYS_REDIRECT)) //", "id": "5486"}, "5490": {"ground_truth": "0", "bug_report": "AuthenticatedWebApplication#onUnauthorizedPage() should work with Component  not Page\nAs discussed at http://markmail.org/message/o2ayjxt7vb7dyjvf org.apache.wicket.authroles.authentication.AuthenticatedWebApplication#onUnauthorizedPage() should have a parameter with type 'Component'  not 'Page' because this Page is partially constructed - on the constructor of org.apache.wicket.Component is executed.All other super constructors (e.g. MarkupContainer  Page  WebPage  YourPage) are not.", "id": "5490"}, "5492": {"ground_truth": "0", "bug_report": "WebApplication ignores a SecurityException when reading the configuration type\nThe WebApplication class has a piece of code in the method getConfigurationType()  that ignores a SecurityException.Code snippet: try { result = System.getProperty('wicket.' + Application.CONFIGURATION); } catch (SecurityException e) { // Ignore - we're not allowed to read system properties. }This apparently causes a performance problem at one of our customers  where they had shared classloading enabled. Permissions were set differently on shared classloader level  which caused the retrieval of the property to fail silently  while taking about 10ms longer. This code is called everytime Component.getMarkupId is called  which means with 300+ components on a page  you get a delay of 3 seconds or more.Ofcourse the problem can be (and has been) solved with a correct configuration. My request however is that the exception is atleast logged at some level (warning for example)  so spotting the problem will become a lot easier (it took us 2 weeks to narrow it down).", "id": "5492"}, "5493": {"ground_truth": "0", "bug_report": "Disable jar indexing\nWicket's pom.xml uses maven-jar-plugin with &lt;index&gt;true&lt;/index&gt;  which creates META-INF/INDEX.LIST file in the JAR files. This is useless when done only for a single jar file and might in some cases even be harmful.I propose to disable the generation INDEX.LIST files both in Wicket 6 and 7.For a full discussion of the drawbacks  see the corresponding bug track at Tomcat's Bugzilla: https://issues.apache.org/bugzilla/show_bug.cgi?id=49236", "id": "5493"}, "5499": {"ground_truth": "0", "bug_report": "Page is not touched during initialization\nAfter migration from 6.12.0 to 6.13.0 our app stopped working.I figured out that there is a new condition in Page#dirty(final boolean isInitialization) on line 288:if (isInitialization == false){ pageManager.touchPage(this);}That means that nely constructed page does not get touched thus is not stored in page store.The problem is that when I do something like thisprintPage = new PrintPage(event.getFormId()  event.getFormData());PageProvider pp = new PageProvider(printPage);RenderPageRequestHandler rh = new RenderPageRequestHandler(pp);CharSequence url = RequestCycle.get().urlFor(rh);I get an URL pointing to page with id X - but that page is not found because it was not stored and I ends with nonsense PageExpired exception.I notice that 6.13.0 version fixed some bugs with stateless / statefull pages  etc. so that may be the cause. Nevertheless I think it's a bug.If you do not want to touch page during creation  then it must get touched whenever it is involved in some request handler.", "id": "5499"}, "5506": {"ground_truth": "0", "bug_report": "DefaultPropertyResolver should resolve the Property according to the getter first\nA domain model model2 may extend a domain model model1 and have JSR303 annotations on one or more getter to override constraints. In such a case  DefaultPropertyResolver cannot detect the right domain model implementation since direct property analysis is done first. Indeed  with the current implementation  if a property is declared in model1 and the getter is overriden in model2  model1 is systematically affected as the property class owner although model2 is the actual implementation associated with the Wicket model. As a consequence  some constraints validations may never been thrown.Swapping direct property analysis and getter analysis solves this problem.Workaround: providing my own property resolver.", "id": "5506"}, "5508": {"ground_truth": "0", "bug_report": "Memory model improvements for Session fields\nCurrently org.apache.wicket.Session#sequence and org.apache.wicket.Session#pageId are primitive ints  non-volatile.They are accessed only in their getter methods where they are read and incremented. To make sure their values are correct the getter methods are synchronized on the session instance. This synchronization may lead to slower execution of the getter when another thread/request does something slower in another synchronized method of Session.Using AtomicInteger should improve here.Other fields of Session like locale and style are not synchronized and different threads may read old value for them. Using AtomicReference should improve this.Some special boolean fields like 'dirty' and 'sessionInvalidated' should be made volatile to avoid dirty reads.With WICKET-5473 org.apache.wicket.Session#nextPageId() and org.apache.wicket.Session#nextSequenceValue() call #dirty() only for bound sessions. The check whether the session is bound or not should really be in #dirty() itself.", "id": "5508"}, "5512": {"ground_truth": "0", "bug_report": "Allow using child selector for JS event bindings\nhttp://api.jquery.com/on/ has an optional 'selector' parameter that is used to to filter the descendants of the selected elements that trigger the event.It would be nice if Wicket's Wicket.Event.add() API provides a way to use it.Additionally it should be possible the selector to be set via AjaxRequestAttributes", "id": "5512"}, "5517": {"ground_truth": "0", "bug_report": "IE11 returns false for Wicket.Browser.isIE()\nAs of Internet Explorer 11 this statement returns false instead of true (like it did prior to version 11):typeof(document.all) !== 'undefined'This statement is used on line 56 of wicket-event-jquery.js which means Wicket.Browser.isIE() will return false in IE11.", "id": "5517"}, "5522": {"ground_truth": "0", "bug_report": "Failing HTTPS redirect to RequireHttps annotated pages with ONE_PASS_RENDER strategy\nActivated JS: Start the quickstart -&gt; Press the submit buttons -&gt; See the secured page with https!Deactivates JS: (NoScript Firefox Plugin): Start the quickstart -&gt; Press the submit buttons -&gt; See the secured page BUT with HTTP!There was no proper https redirect.If I change the rendering strategy to REDIRECT_TO_BUFFER everything works fine  but if I change the strategy to ONE_PASS_RENDER the https forwarding does't work anymore. But only if I deactivate all scripts...Regards Dmitriy", "id": "5522"}, "5523": {"ground_truth": "0", "bug_report": "Ajax indicator not working when display is set to none in css\nI created a simple quickstart with one AjaxLink and one div used as ajax indicator (id ajax_indicator). When I set display: none to ajax_indicator in css  is does not show up when pressing link. When I remove display:none from css  it disappears after when ajax request is finished and works fine for next ajax requests.", "id": "5523"}, "5527": {"ground_truth": "0", "bug_report": "Inefficient DefaultPageStore.SerializedPagesCache\nWe have identified some problems in org.apache.wicket.pageStore.DefaultPageStore.SerializedPagesCache.Some history first: At https://cwiki.apache.org/confluence/display/WICKET/Page+Storage I have explained how the page storage management works in Wicket 1.5+ In brief:First level cache/store is the HttpSession - here Wicket saves the live instances of all touched pages in the last request cycle.Second level cache/store is DefaultPageStore.SerializedPagesCache - here Wicket saves the last N (org.apache.wicket.settings.StoreSettings#getInmemoryCacheSize) used pages in the whole application (by default 40 pages)Third level cache/store is DiskDataStore - here Wicket stores all pages and depending on org.apache.wicket.settings.StoreSettings#getMaxSizePerSession it will 'recycle' the file contentsThe identified problems: org.apache.wicket.pageStore.DefaultPageStore.SerializedPagesCache uses ArrayList as a data structure to keep SerializedPage instances. When the limit N (StoreSettings#getInmemoryCacheSize) is reached the ArrayList uses #remove() to remove the oldest entry. The #remove(0) operation internally uses System.arraycopy() to compact the internal array structure. As you already realize this ArrayList is constantly being recompacted in any application in production. DefaultPageStore.SerializedPagesCache#cache (the same ArrayList) is used as synchronization monitor for every operation (read/write/remove). I.e. we have synchronization on application level !! at the moment DefaultPageStore.SerializedPagesCache stores org.apache.wicket.pageStore.DefaultPageStore.SerializedPage. This is a structure of {String sessionId  int pageId  byte[] data}.Since this data is stored in the application scope it is never replicated  so there is no need to serialize the live page instance to byte[] at all. Only the third level cache (IDataStore) should work with byte[]A workaround to avoid the slowness caused by this is to set 0 or negative value to org.apache.wicket.settings.StoreSettings#setInmemoryCacheSize", "id": "5527"}, "5528": {"ground_truth": "0", "bug_report": "Allow models of subtypes of Select type parameter in SelectOption constructor\nSelectOption's use of the model is read only  so no risk problem if we use an IModel&lt;? extends T&gt; instead of IModel&lt;T&gt;", "id": "5528"}, "5529": {"ground_truth": "0", "bug_report": "Add WebSocketBehavior/Resource#onPush() callback method\nA user reported that WebSocketBehavior misses #onPush() callback method and #onEvent() has to be overridden to be able to process IWebSocketPushMessages.", "id": "5529"}, "5532": {"ground_truth": "0", "bug_report": "NPE calling PackageResource.getResourceStream() if there is no RequestCycle defined\nFrom my email on the list:Since the introduction of the ProcessingResourceStream  it's notpossible to call PackageResource.getResourceStream() anymore if thereis no RequestCycle defined.Typically  we call it in our Application init() to prepare (mostlypreprocess and cache) a couple of resources before opening theapplication to the public.We now have a NPE here:https://github.com/apache/wicket/blob/master/wicket-core/src/main/java/org/apache/wicket/request/resource/PackageResource.java#L496This problem was introduced by this commit:https://github.com/apache/wicket/commit/29b26ffffdd619f4e2fe86aa2d2b02ff3e1d6017#diff-428db8d5278d2ac567e471efd377c7c7Thanks.", "id": "5532"}, "5535": {"ground_truth": "0", "bug_report": "Intern strings generated by Wicket that have bigger chance to be duplicated\nI've been doing some performance measurements recently and I've noticed that Wicket produces some higher number of String objects like: small numbers ('1'  '2'  '3'  ...) generated from repeaters' String.valueOf(nextId) HTML element names/attributes ('span'  'div'  ...) generated in XmlTag#getName  #getAttribute  ...We can reduce memory usage for those by using String#intern().Since Java 7 the interned strings are stored in the Heap memory so this won't affect negatively the perm generation.Interned strings are GC-ed so this is also not a concern.http://java-performance.info/string-intern-in-java-6-7-8/ provides good explanation how to avoid the CPU penalty caused by String#intern() if needed.", "id": "5535"}, "5549": {"ground_truth": "0", "bug_report": "continueToOriginalDestination() fails after redirectToInterceptPage() on AjaxRequest\nConsider the following requests: user clicks link on HomePage wicket-ajax.js sends ajax request to AjaxLink HomePage redirects to InterceptPage user clicks link on InterceptPage request (ajax or normal) is sent to InterceptPage InterceptPage continues to original destination with redirect original Ajax request is sent by the browser and not by wicket-ajax.js Wicket AjaxRequest renders the responseThe resulting &lt;ajax-response/&gt; is rendered in the browser :/.", "id": "5549"}, "5555": {"ground_truth": "0", "bug_report": "AbstractAutoCompleteBehavior.WrappedHeaderItem should depend on wicket-ajax.js\nClassorg.apache.wicket.extensions.ajax.markup.html.autocomplete.AbstractAutoCompleteBehavior.WrappedHeaderItem inherits empty list from HeaderItem in public Iterable&lt;? extends HeaderItem&gt; getDependencies() { return Collections.emptyList(); }Using JavaScriptFilteredIntoFooterHeaderResponse causes renderingWicket.Event.add(window  'domready'  function(event) { new Wicket.AutoComplete(before jQuery refrence.Please  add JQueryResourceReference (other if needed) into dependency list of org.apache.wicket.extensions.ajax.markup.html.autocomplete.AbstractAutoCompleteBehavior.WrappedHeaderItem", "id": "5555"}, "5557": {"ground_truth": "0", "bug_report": "Don't cache the result of AuthenticatedWebApplication#getWebSessionClass()\nCurrently the AuthenticatedWebApplication constructor obtains and holds a reference to the AbstractAuthenticatedWebSession class. This makes it impossible for classes extending AuthenticatedWebApplication to use a class based upon something passed into their constructors. The only option is to provide a 'static'/'constant' class from the getWebSessionClass() method.I don't see any advantage to holding this reference. Instead I propose that the class is changed to simply calling getWebSessionClass() each time the class is needed.", "id": "5557"}, "5558": {"ground_truth": "0", "bug_report": "Autolinking does not always work in inheritted markup\nIf you have auto-linked auto components that point to package resource  like:&lt;wicket:link&gt;&lt;img src='myimage.png'/&gt;&lt;/wicket:link&gt;defined in the grandparent markup  where the grandparent and parent are from different packages  then they do get rendered correctly.Problem is this: AutoLinkResolver checks that the package resource actually exists. It checks by creating a PackageResourceReference and attempts to get the reference from that. The class used as the context for the PackageResourceReference is the class which owns the markup in which the auto-link appeared. The key is the original reference (href or src) in the tag. So far everything is correct.Wicket knows which class owned the markup by using ComponentTag#getMarkupClass(). It is therefore important that ComponentTag#getMarkupClass() always returns the correct class. But it doesn't.When we have a three level merged markup (child  parent  grandparent)  this happens: parent markup is merged into grandparent using MergedMarkup. All ComponentTags that were originally from grandparent are called :#setMarkupClass(GrandParent.class)  so that they will know they came from the grandparent. So far so good.Now  in order to get the child markup stream  we merge child markup onto the parent markup. Now  all ComponentTags in the parent markup are setMarkupClass(Parent.class). Problem is  this is not true. Some of these ComponentTags actually came from the grandparent  so the ComponentTag ends up returning the incorrect class (Parent.class instead of GrandParent.class) in #getMarkupClass().Because ComponentTag#getMarkupClass() can return the wrong value  if the Parent and GrandParent are in different packages  then a resource that would be loadable by the grandparent is no longer loadable  because we are using the parent  which cannot find it.Solution  fix MergedMarkup to only setMarkupClass() if getMarkupClass() == null.", "id": "5558"}, "5589": {"ground_truth": "0", "bug_report": "Upgrade wicket-atmosphere to the latest version of atmosphere\nWicket-atmosphere should be upgraded to atmosphere 2.1.4 and js 2.1.6. It's guava dependency to 17.0", "id": "5589"}, "5594": {"ground_truth": "0", "bug_report": "AjaxButton #onSubmit() #onError() intricacies\nOverriding AjaxButton's hook #onSubmit() is prone to possible programming errors: with JavaScript enabled  #onSubmit() will not be called  leaving the developer without clue that the wrong method was overwritten with JavaScript disabled  #onSubmit(ART  Form) will not be called - furthermore if the markup includes type='submit' or no type attribute  #onSubmit() will be called instead.#onError() and #onError(ART  Form) have identical intricacies.To make things consistent I propose the following change for Wicket 7.x: declare #onSubmit() and #onError() final on AjaxButton in #onComponentTag() make sure the &lt;button&gt;-Tag has type='button'  so the browser does not submit the form when JavaScript is disabled. For fallack support we have AjaxFallbackButton already.Any objections or better ideas?", "id": "5594"}, "5595": {"ground_truth": "0", "bug_report": "Atmosphere: updates infinitly with long polling transport\nI found a problem when I use long polling for the transport :When the EventBus loop to the list of AtmosphereResource (on post method) and if the update is too long of each AtmosphereResource  the list of AtmosphereResource is update and reorder (because atmosphere remove and registry the AtmosphereResource due to long polling) and then the loop on EventBus never stop and update is infinitie.To solve the probleme I do that on line 366 of EventBus.java :for (AtmosphereResource resource : ImmutableList.copyOf(broadcaster.getAtmosphereResources()))rather thanfor (AtmosphereResource resource : broadcaster.getAtmosphereResources())Best regards", "id": "5595"}, "5606": {"ground_truth": "0", "bug_report": "SelectOptions with #setRecreateChoices(true) loses selection on form errors\nHaving SelectOptions#setRecreateChoices(true)  on every render each choice is represented by a new SelectOption instance with a new UUID.If the form has submit errors  no UUID will match the RAW-Input of the Select. Thus the selection is lost.", "id": "5606"}, "5611": {"ground_truth": "0", "bug_report": "Add AjaxChannel.DEFAULT constant = '0' and type 'Queue'\nCan I request AjaxChannel.DEFAULT public static constant with a value of '0' ? I don't feel comfortable typing '0' there  I much prefer a constant. http://apache-wicket.1842946.n4.nabble.com/ListenerInvocationNotAllowedException-and-EmptyRequestHandler-tp4663618p4666126.html", "id": "5611"}, "5616": {"ground_truth": "0", "bug_report": "CLONE - ModalWindow is not visible in Safari when opened from a link at the bottom of a large page\nI am not able to see a ModalWindow in Safari and I expect to see it centered on my view port.Steps:1. Start with a large web page with a link to open the ModalWindow at the bottom of the page. You need a large page where you have to scroll down to find the link.2. Click the link3. Observe that the mask for the ModalWindow displays  but the ModalWindow does not. Scrolling back up  re-sizing  and maximizing will still not display the ModalWindow.", "id": "5616"}, "5620": {"ground_truth": "0", "bug_report": "Remove second  for CDI related stuff in wicket-examples' web.xml\nTrying to deploy wicket-examples.war (7.0) in Tomcat 7/8 fails with:3-Jun-2014 10:28:09.485 SEVERE &#91;localhost-startStop-1&#93; org.apache.catalina.core.StandardContext.listenerStart Exception sending context initialized event to listener instance of class org.jboss.weld.environment.servlet.BeanManagerResourceBindingListener java.lang.RuntimeException: Could not bind BeanManager reference to JNDI: Context is read only If the naming context is read-only  you may need to use a configuration tobind the BeanManager instead  such as Tomcat's context.xml or Jetty's jetty-web.xml. at org.jboss.weld.environment.servlet.BeanManagerResourceBindingListener.contextInitialized(BeanManagerResourceBindingListener.java:84) at org.apache.catalina.core.StandardContext.listenerStart(StandardContext.java:4739) .....", "id": "5620"}, "5624": {"ground_truth": "0", "bug_report": "Do not throw when WebSocket is not supported\nWhen the browser does not support WebSocket  /wicket-websocket-jquery.js throws an 'is not supported' string from the initialize() method  which runs in the DOM ready event. This break any other initialization of the page that takes place after the WebSocket initialization  leading to less than graceful degradation of functionality.", "id": "5624"}, "5626": {"ground_truth": "0", "bug_report": "ConcatBundleResource#reportError() doesn't print the resource attributes\norg.apache.wicket.resource.bundles.ConcatBundleResource#reportError() prints just the scope and the name of the missing resource.It will be much more useful if the attributes (locale  style and variation) are printed too.", "id": "5626"}, "5631": {"ground_truth": "0", "bug_report": "Allow submitting with POST method for PhantomJS\nWith the PhantomJS browser form submit is done using get instead of post due to change &#91;1&#93; since 6.12.0This is incorrect and fails with larger requests  PhantomJS only allows a limited get request size. For PhantomJS post must be used as for other browsers.&#91;1&#93; https://git-wip-us.apache.org/repos/asf?p=wicket.git;a=commitdiff;h=f0b251e3", "id": "5631"}, "5637": {"ground_truth": "0", "bug_report": "Fix the encoding of the Chinese translations for Wizard component\nReported on the users@ mailing lists: http://markmail.org/message/wbdffw5llrxfjqlq", "id": "5637"}, "5642": {"ground_truth": "0", "bug_report": "CheckingOutputObjectStream should filter duplicates by identity  not by equality\nAs discussed at http://markmail.org/message/kdbyimrznubgtz5n the checks for duplicates by equality is not correct (and optimal).CheckingOOS already filters checked objects by identity (see org.apache.wicket.core.util.objects.checker.CheckingObjectOutputStream#checked) so there is no need to check second time (via Stack#equals()).", "id": "5642"}, "5643": {"ground_truth": "0", "bug_report": "WebPageRenderer should bind a Session if redirect is required and the session is temporary.\nWebApplication.storeBufferedResponse does not check if sessionId is null. This could lead to wrong behaviors as it happens in the quickstart project. Let's say we have a stateless home page with page parameters that are populated inside page constructor. Under these conditions class WebPageRenderer will call storeBufferedResponse and will redirect the response to the final URL (line 289). But as the session is temporary  the buffered response is not consumed and WebPageRenderer will rise a warning (line 194).I think we should check for null sessionId inside WebApplication or inside WebPageRender.", "id": "5643"}, "5646": {"ground_truth": "0", "bug_report": "Allow subclasses of ComponentStringResourceLoader to stop at specific components\nSometimes is desirable to stop loading of string resources at a specific component  e.g. to limit overriding of keys to parts of the web page.An additional hook-method in ComponentStringResourceLoader would allow subclasses to implement this without duplicating parental logic.", "id": "5646"}, "5647": {"ground_truth": "0", "bug_report": "missing generic cast causes compile error on OS X / jdk 8\nwhen trying to compile wicket-7 from HEAD it fails under OS X / JDK 1.8.0_11. Casting a NULL to generic type (T) solves the issues. This seems like some odd case of failing type inference.The problematic source line is: return getEnumImpl(key  eClass  null);The compiler error is: Error:(792  35) java: incompatible types: inference variable T has incompatible upper bounds java.lang.Enum&lt;T&gt; TThis will fix the issue: return getEnumImpl(key  eClass  (T)null);I found that there is a fix WICKET-5427 which does not work in most current JDK 1.8.0_11 anymore. -Could not change the wicket-6 branch since the change will break the clirr plugin (see WICKET-5427).-", "id": "5647"}, "5655": {"ground_truth": "0", "bug_report": "Problem with setting of IComponentInheritedModel and FLAG_INHERITABLE_MODEL\nDescribed in the mailing list:http://mail-archives.apache.org/mod_mbox/wicket-users/201407.mbox/%3CCAF2_608c8TOZjprV8Md15KJpRET6YQdXHe%3DwRzF-y5G_zAXcDg%40mail.gmail.com%3EI'm aware of the another issue (https://issues.apache.org/jira/browse/WICKET-3413) which dealt with the exact same code - and I believe there was a mistake in the solution that leads to this issue.Please see the attached quickstart (including a JUnit test) to reproduce the error.", "id": "5655"}, "5656": {"ground_truth": "0", "bug_report": "PropertyResolver does not scan for NotNull in annotation tree\nWhen annotating a field of a bean with e.g. org.hibernate.validator.constraints.NotEmpty  this impliesjavax.validation.constraints.NotNull  but PropertyValidator only checks for the annotations immediately on the filed not the tree of annotations. As a result Wicket does not mark the field as required in the UI  which it should.Also PropertyResolver.findNotNullConstraints() is not even protected  so cannot be patched in a simple way.So as a solution I suggest changing findNotNullConstraints() to be protected and rather be something like findConstraints(filter)  or findConstraints(clazz)  and then in that method method recursively invoking getComposingConstraints to get all constraints  but collecting only those of interest. Possibly some care needs to be taken to prevent infinite recursion where constraints are composed of each other (if that compiles).", "id": "5656"}, "5657": {"ground_truth": "0", "bug_report": "wicket-autocomplete may fail after preceeding Ajax request\nThe following processing sequence leads to a JavaScript error: form is shown including an autoCompleteTextField user enters criteria and immediately presses enter actualUpdateChoices() is scheduled by the throttler form is submitted via ajax autoCompleteTextField is removed from DOM throttler executes actualUpdateChoices() wicket-autocomplete fails with precondition  since element is no longer in DOM: var elementVal = Wicket.$(elementId).value;", "id": "5657"}, "5659": {"ground_truth": "0", "bug_report": "Add a setting to MultiFileUploadField to not close the file uploads' streams\nAs explained at http://markmail.org/message/hdde56myxso5cwgy MultiFileUploadField should provide a setting that decides whether its file uploads should close their streams at the end of the request cycle.", "id": "5659"}, "5671": {"ground_truth": "0", "bug_report": "Rename log4j.properties in the quickstart when creating a project for WildFly\nAs discovered at http://markmail.org/message/wlm4tjvmn62j3cit Wicket Quickstart should remove log4j.properties from the generated project when it will be deployed at WildFly (JBoss 8).maven-archetype-plugin supports special names (e.g. _something_) for files in the fileSet which can be renamed by using system properties.Using this we can rename _log4j.properties_ to log4j.properties by default and to wildfly-doesnt-need-log4j.properties when WildFly is selected from an additional drop-down at http://wicket.apache.org/start/quickstart.html", "id": "5671"}, "5672": {"ground_truth": "0", "bug_report": "Form#findSubmittingComponent() should not throw exceptions if the submitter is disabled/invisible\nAs explained by a user at http://markmail.org/message/s262q4yc3ubymglr it is unexpected that org.apache.wicket.markup.html.form.Form#findSubmittingButton() throws runtime exceptions when the submitter is invisible or disabled.As discussed at http://markmail.org/message/qhjepkihr27uywaj the checks should be moved to the code related to executing the submitter's action method (i.e. onSubmit()) and leave all other users of Form#findSubmittingButton() decide for themselves whether the change of the visiblility/enable state is a problem of not.", "id": "5672"}, "5679": {"ground_truth": "0", "bug_report": "RenderStrategy REDIRECT_TO_RENDER lets fail test with BaseWicketTester#startComponentInPage\nAfter changing the RenderStrategy from REDIRECT_TO_BUFFER to REDIRECT_TO_RENDER tests with BaseWicketTester#startComponentInPage fail.Stacktrace:org.apache.wicket.markup.MarkupNotFoundException: Can not determine Markup. Component is not yet connected to a parent. &#91;Page class = org.apache.wicket.util.tester.BaseWicketTester$StartComponentInPage  id = 0  render count = 1&#93; at org.apache.wicket.Component.getMarkup(Component.java:749) at org.apache.wicket.util.tester.BaseWicketTester$StartComponentInPage.getMarkup(BaseWicketTester.java:1453) at org.apache.wicket.Component.internalRender(Component.java:2309) at org.apache.wicket.Component.render(Component.java:2272) at org.apache.wicket.Page.renderPage(Page.java:1024) at org.apache.wicket.request.handler.render.WebPageRenderer.renderPage(WebPageRenderer.java:122) at org.apache.wicket.request.handler.render.WebPageRenderer.respond(WebPageRenderer.java:221) at org.apache.wicket.util.tester.BaseWicketTester$LastPageRecordingPageRendererProvider$1.respond(BaseWicketTester.java:2657) at org.apache.wicket.core.request.handler.RenderPageRequestHandler.respond(RenderPageRequestHandler.java:175) at org.apache.wicket.request.cycle.RequestCycle$HandlerExecutor.respond(RequestCycle.java:862) at org.apache.wicket.request.RequestHandlerStack.execute(RequestHandlerStack.java:64) at org.apache.wicket.request.cycle.RequestCycle.execute(RequestCycle.java:261) at org.apache.wicket.request.cycle.RequestCycle.processRequest(RequestCycle.java:218) at org.apache.wicket.request.cycle.RequestCycle.processRequestAndDetach(RequestCycle.java:289) at org.apache.wicket.util.tester.BaseWicketTester.processRequest(BaseWicketTester.java:654) at org.apache.wicket.util.tester.BaseWicketTester.processRequest(BaseWicketTester.java:712) at org.apache.wicket.util.tester.BaseWicketTester.processRequest(BaseWicketTester.java:593) at org.apache.wicket.util.tester.BaseWicketTester.startPage(BaseWicketTester.java:818) at org.apache.wicket.util.tester.BaseWicketTester.startPage(BaseWicketTester.java:835) at org.apache.wicket.util.tester.BaseWicketTester.startComponentInPage(BaseWicketTester.java:1387) at org.apache.wicket.util.tester.BaseWicketTester.startComponentInPage(BaseWicketTester.java:1317) at org.foo.StatelessTest.testComponents(StatelessTest.java:97)", "id": "5679"}, "5689": {"ground_truth": "0", "bug_report": "Nested Redirects and REDIRECT_TO_BUFFER\nWhen the render strategy is REDIRECT_TO_BUFFER  redirects cannot be nested. After the second redirect  Wicket renders the buffered first page in preference to the second page. The relevant code is in WebPageRenderer.respond: if (bufferedResponse != null) { logger.warn('The Buffered response should be handled by BufferedResponseRequestHandler'); // if there is saved response for this URL render it bufferedResponse.writeTo((WebResponse)requestCycle.getResponse()); }The attached quickstart demonstrates the issue. Simply navigate to the home page. The observed behavior is that Page1 is displayed  but I expect Page2 to be displayed.I can work around the issue by calling WebApplication.getAndRemoveBufferedResponse() to clear the render buffer  but I am uneasy with this solution since it seems like I am playing with Wicket internals; albeit the function is public.", "id": "5689"}, "5694": {"ground_truth": "0", "bug_report": "Add WicketTester assertion methods for component's markup style  variation and locale\nFrom the users@ mailing list: http://markmail.org/message/r4q5h566novcwakgAdd methods to WicketTester to be able to assert that a given component in the last rendered page (or even the page itself) has been rendered with a markup with a given variation (or style  or locale).", "id": "5694"}, "5695": {"ground_truth": "0", "bug_report": "Use Log4j 2.x for the archetype\nApache Log4j 2 is out since a while.It is similar in functionality to SLF4J + Logback now.Let's upgrade the quickstart from Log4j 1.2.17 to latest 2.x.", "id": "5695"}, "5706": {"ground_truth": "0", "bug_report": "ResourceUtils.getLocaleFromFilename cannot handle filenames with classifiers\nWhen I try to get PathLocale with ResourceUtils  than get wrong values  when the files contains '.' in name.Example: 'jquery.test.js' PathLocale.path=jquery  PathLocale.locale = nullor jquery.test_hu.js'.PathLocale.path=jquery  PathLocale.locale = nullThat's why I'd like to use jquery.test_hu.js' as resource  the ResourceStreamLocator try to find jquery.test_hu_hu_HU.js  jquery.test_hu_hu.js  and after jquery.test_hu.js.Because the ResourceStreamLocator.locate PathLocale data = ResourceUtils.getLocaleFromFilename(path); if ((data != null) &amp;&amp; (data.locale != null)) { path = data.path; locale = data.locale; }doesn't work in this case.Should change the ResourceUtils public static PathLocale getLocaleFromFilename(String path) { int pos = path.indexOf('.');----------------To int pos = path.lastIndexOf('.');", "id": "5706"}, "5710": {"ground_truth": "0", "bug_report": "StringValidator should set 'minlength' attribute to input and textarea\nAt the moment StringValidator sets 'maxlength' to input elements.According to http://www.w3.org/TR/html5/forms.html#the-maxlength-and-minlength-attributes maxlength could be set also to textarea elements.And there is 'minlength' attribute that could also be set automatically by Wicket.", "id": "5710"}, "5711": {"ground_truth": "0", "bug_report": "OnChangeAjaxBehavior should listen for both 'inputchange' and 'change' events for TextField and TextArea\nWICKET-5603 introduced a regression that a TextField using OnChangeAjaxBehavior doesn't work anymore when used as date picker  or Select2.The problem is that usually extensions like DatePicker and Select2 will fire 'change' event when they update the text input.OnChangeAjaxBehavior should use both 'inputchange' and 'change' events for TextField and TextArea components.", "id": "5711"}, "5712": {"ground_truth": "0", "bug_report": "SecuritySettings.setEnforceMounts() does not work when the mounted mapper is not in the root compound mapper\nBookmarkableMapper.isPageMounted() assumes that all mounted mappers are in Application.getRootRequestMapperAsCompound(). Sometimes the mappers make a tree structure  with multiple compounds existing  sometimes separated by wrappers  like HttpsMapper and CryptoMapper.Because of this  BookmarkableMapper fails to realise that a page is mounted and so does not enforce mounting.", "id": "5712"}, "5714": {"ground_truth": "0", "bug_report": "MockHttpServletRequest.buildRequest() should work for parameters with multiple values with multipart content type\nThe following code in the method MockHttpServletRequest.buildRequest() iterates over all values of a parameter. When writing the value to the outputstream it doesn't use the iteration variable  but instead retrieves the value with 'post.getParameterValue(parameterName)' which always returns the first element of the list. List&lt;StringValue&gt; values = post.getParameterValues(parameterName); for (StringValue value : values) { newAttachment(out); out.write('; name=/''.getBytes()); out.write(parameterName.getBytes()); out.write('/''.getBytes()); out.write(crlf.getBytes()); out.write(crlf.getBytes()); out.write(post.getParameterValue(parameterName).toString().getBytes()); out.write(crlf.getBytes()); }So for a given list of values '3'  '2' and '1'  it actually writes '3'  '3' and '3'.", "id": "5714"}, "5716": {"ground_truth": "0", "bug_report": "wicket-autocomplete prevents 'change'-listener when leaving input via mouse click\nwicket-autocomplete's ignoreChange is true initially  this prevents 'change' events being fired when the user enters something and then clicks somewhere else", "id": "5716"}, "5718": {"ground_truth": "0", "bug_report": "Upgrade Atmosphere to 2.2.2\nWicket-atmosphere should be upgraded to the latest version of Atmosphere.", "id": "5718"}, "5728": {"ground_truth": "0", "bug_report": "Component queuing breaks with html tags that don't require close tag.\nComponent queuing try to skip to close tag also for those tags that don't have one. This leads to a EmptyStackException (see ArrayListStack#peek).", "id": "5728"}, "5729": {"ground_truth": "0", "bug_report": "Avoid using input names that conflict with JavaScript DOM API method and attribute names\nIf you use input names that conflict with JavaScript DOM API method and attribute names the ability to use the DOM method/attribute on the form element is hampered.For example  JQuery stops working if you have a form control with input name 'nodeName' (&lt;select name='nodeName'&gt;).This is because form.nodeName is no longer a string  but is a element. JQuery expects element.nodeName to return a string and exceptions ensue.", "id": "5729"}, "5730": {"ground_truth": "0", "bug_report": "Dequeue auto component can't resolve components if they are nested in child markup\nIf a container has an auto component (ex: enclouse) in its markup but this later is nested inside a child  the autocomponent won't be resolved if child is a IQueueRegion. For example (taken from quickstart): &lt;span wicket:id='myBorder'&gt; bar &lt;wicket:enclosure&gt; &lt;span wicket:id='c'&gt;c&lt;/span&gt; &lt;/wicket:enclosure&gt; &lt;/span&gt;", "id": "5730"}, "5733": {"ground_truth": "0", "bug_report": "ContextNotActiveException thrown when using both CDI & Native WebSocket\nNative Websockets does not works anymore while used in conjunction with CDI. Repro step are quite simple  please see attached quickstart.WARN &#91;RequestCycleExtra&#93; Handling the following exception: org.jboss.weld.context.ContextNotActiveException: WELD-001303: No active contexts for scope type javax.enterprise.context.RequestScoped at org.jboss.weld.manager.BeanManagerImpl.getContext(BeanManagerImpl.java:680) &#91;weld-core-impl-2.1.2.Final.jar:2014-01-09 09:23&#93; at org.jboss.weld.bean.proxy.ContextBeanInstance.getInstance(ContextBeanInstance.java:79) &#91;weld-core-impl-2.1.2.Final.jar:2014-01-09 09:23&#93; at org.jboss.weld.bean.proxy.ProxyMethodHandler.invoke(ProxyMethodHandler.java:99) &#91;weld-core-impl-2.1.2.Final.jar:2014-01-09 09:23&#93; at org.jboss.weld.proxies.Conversation$795552506$Proxy$_$$_WeldClientProxy.getId(Unknown Source) &#91;weld-core-impl-2.1.2.Final.jar:&#93; at org.apache.wicket.cdi.ConversationPropagator.onRequestHandlerResolved(ConversationPropagator.java:107) &#91;wicket-cdi-1.1-7.0.0-20141021.124705-313.jar:7.0.0-SNAPSHOT&#93; at org.apache.wicket.request.cycle.RequestCycleListenerCollection$5.notify(RequestCycleListenerCollection.java:155) &#91;wicket-core-7.0.0-20141021.124144-486.jar:7.0.0-SNAPSHOT&#93; at org.apache.wicket.request.cycle.RequestCycleListenerCollection$5.notify(RequestCycleListenerCollection.java:151) &#91;wicket-core-7.0.0-20141021.124144-486.jar:7.0.0-SNAPSHOT&#93; at org.apache.wicket.util.listener.ListenerCollection.notify(ListenerCollection.java:80) &#91;wicket-util-7.0.0-20141021.123902-532.jar:7.0.0-SNAPSHOT&#93; at org.apache.wicket.request.cycle.RequestCycleListenerCollection.onRequestHandlerResolved(RequestCycleListenerCollection.java:150) &#91;wicket-core-7.0.0-20141021.124144-486.jar:7.0.0-SNAPSHOT&#93; at org.apache.wicket.request.cycle.RequestCycleListenerCollection$5.notify(RequestCycleListenerCollection.java:155) &#91;wicket-core-7.0.0-20141021.124144-486.jar:7.0.0-SNAPSHOT&#93; at org.apache.wicket.request.cycle.RequestCycleListenerCollection$5.notify(RequestCycleListenerCollection.java:151) &#91;wicket-core-7.0.0-20141021.124144-486.jar:7.0.0-SNAPSHOT&#93; at org.apache.wicket.util.listener.ListenerCollection.notify(ListenerCollection.java:80) &#91;wicket-util-7.0.0-20141021.123902-532.jar:7.0.0-SNAPSHOT&#93; at org.apache.wicket.request.cycle.RequestCycleListenerCollection.onRequestHandlerResolved(RequestCycleListenerCollection.java:150) &#91;wicket-core-7.0.0-20141021.124144-486.jar:7.0.0-SNAPSHOT&#93; at org.apache.wicket.request.cycle.RequestCycleListenerCollection$5.notify(RequestCycleListenerCollection.java:155) &#91;wicket-core-7.0.0-20141021.124144-486.jar:7.0.0-SNAPSHOT&#93; at org.apache.wicket.request.cycle.RequestCycleListenerCollection$5.notify(RequestCycleListenerCollection.java:151) &#91;wicket-core-7.0.0-20141021.124144-486.jar:7.0.0-SNAPSHOT&#93; at org.apache.wicket.util.listener.ListenerCollection.notify(ListenerCollection.java:80) &#91;wicket-util-7.0.0-20141021.123902-532.jar:7.0.0-SNAPSHOT&#93; at org.apache.wicket.request.cycle.RequestCycleListenerCollection.onRequestHandlerResolved(RequestCycleListenerCollection.java:150) &#91;wicket-core-7.0.0-20141021.124144-486.jar:7.0.0-SNAPSHOT&#93; at org.apache.wicket.request.cycle.RequestCycle.execute(RequestCycle.java:264) &#91;wicket-core-7.0.0-20141021.124144-486.jar:7.0.0-SNAPSHOT&#93; at org.apache.wicket.request.cycle.RequestCycle.processRequest(RequestCycle.java:222) &#91;wicket-core-7.0.0-20141021.124144-486.jar:7.0.0-SNAPSHOT&#93; at org.apache.wicket.request.cycle.RequestCycle.processRequestAndDetach(RequestCycle.java:293) &#91;wicket-core-7.0.0-20141021.124144-486.jar:7.0.0-SNAPSHOT&#93; at org.apache.wicket.protocol.ws.api.AbstractWebSocketProcessor.broadcastMessage(AbstractWebSocketProcessor.java:219) &#91;wicket-native-websocket-core-7.0.0-SNAPSHOT.jar:7.0.0-SNAPSHOT&#93; at org.apache.wicket.protocol.ws.api.AbstractWebSocketProcessor.onClose(AbstractWebSocketProcessor.java:157) &#91;wicket-native-websocket-core-7.0.0-SNAPSHOT.jar:7.0.0-SNAPSHOT&#93; at org.apache.wicket.protocol.ws.javax.WicketEndpoint.onClose(WicketEndpoint.java:71) &#91;wicket-native-websocket-javax-7.0.0-SNAPSHOT.jar:7.0.0-SNAPSHOT&#93; at io.undertow.websockets.jsr.UndertowSession.close(UndertowSession.java:181) &#91;undertow-websockets-jsr-1.0.15.Final.jar:1.0.15.Final&#93; at io.undertow.websockets.jsr.ServerWebSocketContainer.close(ServerWebSocketContainer.java:464) &#91;undertow-websockets-jsr-1.0.15.Final.jar:1.0.15.Final&#93; at io.undertow.websockets.jsr.Bootstrap$WebSocketListener.contextDestroyed(Bootstrap.java:82) &#91;undertow-websockets-jsr-1.0.15.Final.jar:1.0.15.Final&#93; at io.undertow.servlet.core.ApplicationListeners.contextDestroyed(ApplicationListeners.java:185) &#91;undertow-servlet-1.0.15.Final.jar:1.0.15.Final&#93; at io.undertow.servlet.core.DeploymentImpl.destroy(DeploymentImpl.java:224) &#91;undertow-servlet-1.0.15.Final.jar:1.0.15.Final&#93; at io.undertow.servlet.core.DeploymentManagerImpl.undeploy(DeploymentManagerImpl.java:572) &#91;undertow-servlet-1.0.15.Final.jar:1.0.15.Final&#93; at org.wildfly.extension.undertow.deployment.UndertowDeploymentService.stopContext(UndertowDeploymentService.java:119) at org.wildfly.extension.undertow.deployment.UndertowDeploymentService.stop(UndertowDeploymentService.java:101) at org.jboss.msc.service.ServiceControllerImpl$StopTask.stopService(ServiceControllerImpl.java:2056) at org.jboss.msc.service.ServiceControllerImpl$StopTask.run(ServiceControllerImpl.java:2017) at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1145) &#91;rt.jar:1.7.0_65&#93; at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:615) &#91;rt.jar:1.7.0_65&#93; at java.lang.Thread.run(Thread.java:745) &#91;rt.jar:1.7.0_65&#93;Thanks &amp; best regards Sebastien", "id": "5733"}, "5736": {"ground_truth": "0", "bug_report": "Atmosphere Eventbus throws Concurrent Modification Exception\nAs already commented in WICKET-5619 the problem of Concurrent Modification Exceptions are still valid like you can see on the following description when the exception occurs:You have multiple users surfing a page (Page A) which has subscribes for an event (Event A). Now a user (User A) does an action which triggers the Event A to get posted to the Eventbus. While the eventbus posts the event to the registered listeners  a User B leaves the page and unregisters for the event  f.e because he now want's surfs another page  which does not subscribe to the event. Now the ConcurrentModificationException occurs because the unregistering of User B changed the list of listeners while the eventbus is still posting the event to the different listeners. The interesting thing is  that not the initial starter of the event crashes  but all other users which are trying to surf other pages which are listening on the event gets the exception.In my opinion this issue can be solved if the line:  Collection&lt;EventSubscription&gt; eventSubscriptions = subscriptions.get(key);subscriptionsForPage = Iterables.filter(eventSubscriptions  new EventFilter(event)); makes an copy of the EventSubscriptions an works on this copy instead on the original list. When the eventbus now trys to post the event on a component which does not exists anymore he could try to unregister the component from the original subscribers list. Also:Iterable&lt;EventSubscription&gt; subscriptionsForPage; synchronized (this) { key = trackedPages.get(resource.uuid()); Collection&lt;EventSubscription&gt; eventSubscriptions = subscriptions.get(key); subscriptionsForPage = Iterables.filter(eventSubscriptions  new EventFilter(event)); }creates a lazy iterator on the the eventSubscriptions  and will be iterated outside the synchronized block.You need to create a copy of the eventSubscriptions  because this might be changed during the unregistering process:public synchronized void unregister(Component component) { ... Collection&lt;EventSubscription&gt; subscriptionsForPage = subscriptions.get(pageKey); Iterator&lt;EventSubscription&gt; it = subscriptionsForPage.iterator(); while (it.hasNext()) { if (it.next().getComponentPath().equals(componentPath)) it.remove(); } }it.remove() changes the iterator within the lazy Iterator!It is possible to have a quick look at it? This problem affected our productive system!", "id": "5736"}, "5737": {"ground_truth": "0", "bug_report": "Log a warning when WebSocketResponse#sendError() is used\nAs discussed at http://markmail.org/message/x6xj4l2vo6iijan5 it will be better to log the passed error code and message instead of throwing unsupported exception.Additionally it will be good to provide a factory method for the WebSocketResponse so the application can write a proper error response in its own format to the client if needed.", "id": "5737"}, "5739": {"ground_truth": "0", "bug_report": "Add a factory method for WebSocketRequestHandler\nAdd a new factory method to WebSocketSettings for creating instances of WebSocketRequestHandler.", "id": "5739"}, "5747": {"ground_truth": "0", "bug_report": "Wicket Ajax Click handling gets requeued in OnDomReady so fire out of order\nWhile debugging some jquery script ordering  we noticed the following and I'm looking for views on why this is done and/or if it's a bug:1. Wicket assembles all ajax click handlers and writes them out into a single Wicket.Event.add(window 'domready' function(event) { .... script invocation written in to the &lt;head&gt; element of the page.2. For things like click handlers  Wicket writes out Wicket.Ajax.ajax( {'c': 'selection4e2'  'u':'.....'  'm':'POST'}) calls that execute within the onDomReady function defined in (1)3. This invocation of (2) in turn invokes jquery( fn ); This requeues the function invocation at the back of the jquery event queue for onDomReady processing4. Any custom scripts that we added using OnDomReadyHeaderItem  regardless of where we put them on the page after the standard Wicket click handler JS  are now invoked  according to page order.5. The re-queued functions from (3) now execute after my custom scripts. These custom scripts modify the DOM (table paging/filtering etc) and this mechanism now results in Wicket JS errors since the Wicket click handler binding fail to find the required elements in the DOM.Is this re-queueing intentional  and is there a reason that we couldnt just execute the click handler additions in step (1) rather than re-queuing the JS call?A workaround for this is to wrap all of our application JS functions in a separate jQuery( ... ) invocation  so that we can requeue all of our functions after all the requeued Wicket ones. It works  but we dont understand the need for Wicket to perform this requeueing instead of just executing the function as and where defined on the page.", "id": "5747"}, "5751": {"ground_truth": "1", "bug_report": "NullPointerException in IntHashMap\nI was looking through a tester's log file to track down a separate issue. I came across a NullPointerException with IntHashMap  apparently when the server was shutting down.See also WICKET-5584  which also deals with a NullPointerException with IntHashMap  and also seems to relate to a null modCount (judging by the line number).INFO (ExampleServer) [2014-11-06 00:49:24 979] - com.example.server.ExampleServer.stopServer(ExampleServer.java:268): Stopping server.INFO (ServerConnector) [2014-11-06 00:49:24 982] - org.eclipse.jetty.server.AbstractConnector.doStop(AbstractConnector.java:306): Stopped ServerConnector@3b7d3a38{HTTP/1.1}{0.0.0.0:8099}INFO (Application) [2014-11-06 00:49:24 983] - org.apache.wicket.Application.destroyInitializers(Application.java:588): [org.apache.wicket.protocol.http.WicketFilter-55b0dcab] destroy: Wicket core library initializerINFO (Application) [2014-11-06 00:49:24 983] - org.apache.wicket.Application.destroyInitializers(Application.java:588): [org.apache.wicket.protocol.http.WicketFilter-55b0dcab] destroy: Wicket extensions initializerERROR (DiskDataStore) [2014-11-06 00:49:24 988] - org.apache.wicket.pageStore.DiskDataStore.saveIndex(DiskDataStore.java:282): Couldn't write DiskDataStore index to file C:/Windows/SERVIC~2/NETWOR~1/AppData/Local/Temp/org.apache.wicket.protocol.http.WicketFilter-55b0dcab-filestore/DiskDataStoreIndex.java.lang.NullPointerException at org.apache.wicket.util.collections.IntHashMap$HashIterator.&lt;init&gt;(IntHashMap.java:777) at org.apache.wicket.util.collections.IntHashMap$EntryIterator.&lt;init&gt;(IntHashMap.java:871) at org.apache.wicket.util.collections.IntHashMap$EntryIterator.&lt;init&gt;(IntHashMap.java:871) at org.apache.wicket.util.collections.IntHashMap.newEntryIterator(IntHashMap.java:896) at org.apache.wicket.util.collections.IntHashMap$EntrySet.iterator(IntHashMap.java:1055) at org.apache.wicket.util.collections.IntHashMap.writeObject(IntHashMap.java:1128) at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) at java.lang.reflect.Method.invoke(Method.java:483) at java.io.ObjectStreamClass.invokeWriteObject(ObjectStreamClass.java:988) at java.io.ObjectOutputStream.writeSerialData(ObjectOutputStream.java:1496) at java.io.ObjectOutputStream.writeOrdinaryObject(ObjectOutputStream.java:1432) at java.io.ObjectOutputStream.writeObject0(ObjectOutputStream.java:1178) at java.io.ObjectOutputStream.defaultWriteFields(ObjectOutputStream.java:1548) at java.io.ObjectOutputStream.writeSerialData(ObjectOutputStream.java:1509) at java.io.ObjectOutputStream.writeOrdinaryObject(ObjectOutputStream.java:1432) at java.io.ObjectOutputStream.writeObject0(ObjectOutputStream.java:1178) at java.io.ObjectOutputStream.defaultWriteFields(ObjectOutputStream.java:1548) at java.io.ObjectOutputStream.writeSerialData(ObjectOutputStream.java:1509) at java.io.ObjectOutputStream.writeOrdinaryObject(ObjectOutputStream.java:1432) at java.io.ObjectOutputStream.writeObject0(ObjectOutputStream.java:1178) at java.io.ObjectOutputStream.writeObject(ObjectOutputStream.java:348) at java.util.HashMap.internalWriteEntries(HashMap.java:1777) at java.util.HashMap.writeObject(HashMap.java:1354) at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) at java.lang.reflect.Method.invoke(Method.java:483) at java.io.ObjectStreamClass.invokeWriteObject(ObjectStreamClass.java:988) at java.io.ObjectOutputStream.writeSerialData(ObjectOutputStream.java:1496) at java.io.ObjectOutputStream.writeOrdinaryObject(ObjectOutputStream.java:1432) at java.io.ObjectOutputStream.writeObject0(ObjectOutputStream.java:1178) at java.io.ObjectOutputStream.writeObject(ObjectOutputStream.java:348) at org.apache.wicket.pageStore.DiskDataStore.saveIndex(DiskDataStore.java:274) at org.apache.wicket.pageStore.DiskDataStore.destroy(DiskDataStore.java:106) at org.apache.wicket.pageStore.AsynchronousDataStore.destroy(AsynchronousDataStore.java:118) at org.apache.wicket.pageStore.AbstractPageStore.destroy(AbstractPageStore.java:53) at org.apache.wicket.pageStore.AbstractCachingPageStore.destroy(AbstractCachingPageStore.java:102) at org.apache.wicket.page.PageStoreManager.destroy(PageStoreManager.java:437) at org.apache.wicket.Application.internalDestroy(Application.java:659) at org.apache.wicket.protocol.http.WebApplication.internalDestroy(WebApplication.java:607) at org.apache.wicket.protocol.http.WicketFilter.destroy(WicketFilter.java:605) at org.eclipse.jetty.servlet.FilterHolder.destroyInstance(FilterHolder.java:173) at org.eclipse.jetty.servlet.FilterHolder.doStop(FilterHolder.java:151) at org.eclipse.jetty.util.component.AbstractLifeCycle.stop(AbstractLifeCycle.java:89) at org.eclipse.jetty.util.component.ContainerLifeCycle.stop(ContainerLifeCycle.java:143) at org.eclipse.jetty.util.component.ContainerLifeCycle.doStop(ContainerLifeCycle.java:162) at org.eclipse.jetty.server.handler.AbstractHandler.doStop(AbstractHandler.java:73) at org.eclipse.jetty.servlet.ServletHandler.doStop(ServletHandler.java:230) at org.eclipse.jetty.util.component.AbstractLifeCycle.stop(AbstractLifeCycle.java:89) at org.eclipse.jetty.util.component.ContainerLifeCycle.stop(ContainerLifeCycle.java:143) at org.eclipse.jetty.util.component.ContainerLifeCycle.doStop(ContainerLifeCycle.java:162) at org.eclipse.jetty.server.handler.AbstractHandler.doStop(AbstractHandler.java:73) at org.eclipse.jetty.security.SecurityHandler.doStop(SecurityHandler.java:411) at org.eclipse.jetty.security.ConstraintSecurityHandler.doStop(ConstraintSecurityHandler.java:457) at org.eclipse.jetty.util.component.AbstractLifeCycle.stop(AbstractLifeCycle.java:89) at org.eclipse.jetty.util.component.ContainerLifeCycle.stop(ContainerLifeCycle.java:143) at org.eclipse.jetty.util.component.ContainerLifeCycle.doStop(ContainerLifeCycle.java:162) at org.eclipse.jetty.server.handler.AbstractHandler.doStop(AbstractHandler.java:73) at org.eclipse.jetty.server.session.SessionHandler.doStop(SessionHandler.java:127) at org.eclipse.jetty.util.component.AbstractLifeCycle.stop(AbstractLifeCycle.java:89) at org.eclipse.jetty.util.component.ContainerLifeCycle.stop(ContainerLifeCycle.java:143) at org.eclipse.jetty.util.component.ContainerLifeCycle.doStop(ContainerLifeCycle.java:162) at org.eclipse.jetty.server.handler.AbstractHandler.doStop(AbstractHandler.java:73) at org.eclipse.jetty.server.handler.ContextHandler.doStop(ContextHandler.java:833) at org.eclipse.jetty.servlet.ServletContextHandler.doStop(ServletContextHandler.java:215) at org.eclipse.jetty.util.component.AbstractLifeCycle.stop(AbstractLifeCycle.java:89) at org.eclipse.jetty.util.component.ContainerLifeCycle.stop(ContainerLifeCycle.java:143) at org.eclipse.jetty.util.component.ContainerLifeCycle.doStop(ContainerLifeCycle.java:162) at org.eclipse.jetty.server.handler.AbstractHandler.doStop(AbstractHandler.java:73) at org.eclipse.jetty.server.Server.doStop(Server.java:456) at org.eclipse.jetty.util.component.AbstractLifeCycle.stop(AbstractLifeCycle.java:89) at com.example.server.ExampleServer.stopServer(ExampleServer.java:269) at com.example.server.ExampleServer.stop(ExampleServer.java:279)INFO (ContextHandler) [2014-11-06 00:49:24 990] - org.eclipse.jetty.server.handler.ContextHandler.doStop(ContextHandler.java:863): Stopped o.e.j.s.ServletContextHandler@63f259c3{/ null UNAVAILABLE}", "id": "5751"}, "5753": {"ground_truth": "0", "bug_report": "It is impossible to determine the form submitting component's inputName when AjaxFormSubmitBehavior is used\nIt is impossible to determine inputName in Form.delegateSubmit method (was working in version 1.4)as per Martin's comment from this thread: http://markmail.org/message/eiji4elt4mitf2m5I see a way to simplify this code so it will be possible to do what youneed:1) AjaxFormSubmitBehavior should implement IFormSubmitter2) onEvent() should do: getForm().getRootForm().onFormSubmitted(this)then you can cast to AbstractAjaxBehavior and call getComponent() and thencast to IFormSubmittingComponent to get the input nameI'm not sure whether clirr-maven-plugin will allow this change in 6.x thoughPlease file a ticket and I'll take a look in the next days.", "id": "5753"}, "250": {"ground_truth": "0", "bug_report": "Support  src attribute by Link (TextTemplateLink)\nThe Link class has support for the href proper elements and elements for generating an onclick handler. For the TextTemplateLInk this is not enough  as binding it to a &lt;script&gt; tag results in an onclick handler. As in the &lt;head&gt; tag it is impossible to click on anything  this doesn't work.", "id": "250"}}}