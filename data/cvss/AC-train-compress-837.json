{
    "AC": {
        "gss_refresh": {
            "id": "gss_refresh",
            "ground_truth": 0,
            "function": "gss_refresh",
            "description": "Credential refresh completed by gss_refresh function."
        },
        "alchemy_uart_enable": {
            "id": "alchemy_uart_enable",
            "ground_truth": 0,
            "function": "alchemy_uart_enable",
            "description": "UART block enabled if not already enabled"
        },
        "btrfs_alloc_stripe_hash_table": {
            "id": "btrfs_alloc_stripe_hash_table",
            "ground_truth": 0,
            "function": "btrfs_alloc_stripe_hash_table",
            "description": "Stripe hash table for locking and bios collection for full stripe creation."
        },
        "sci_clk_determine_rate": {
            "id": "sci_clk_determine_rate",
            "ground_truth": 1,
            "function": "sci_clk_determine_rate",
            "description": "Determines clock rate and parent for TI SCI clock."
        },
        "qbman_pull_desc_set_fq": {
            "id": "qbman_pull_desc_set_fq",
            "ground_truth": 0,
            "function": "qbman_pull_desc_set_fq",
            "description": "Set frame queue index for dequeue command in qbman_pull_desc."
        },
        "scc_txint": {
            "id": "scc_txint",
            "ground_truth": 0,
            "function": "scc_txint",
            "description": "Transmitter interrupt handler function"
        },
        "il4965_eeprom_acquire_semaphore": {
            "id": "il4965_eeprom_acquire_semaphore",
            "ground_truth": 0,
            "function": "il4965_eeprom_acquire_semaphore",
            "description": "Semaphore acquisition for Intel 4965 EEPROM access."
        },
        "twl4030_audio_enable_resource": {
            "id": "twl4030_audio_enable_resource",
            "ground_truth": 0,
            "function": "twl4030_audio_enable_resource",
            "description": "Enables resource and returns error or register content."
        },
        "_scsih_pcie_device_remove": {
            "id": "_scsih_pcie_device_remove",
            "ground_truth": 1,
            "function": "_scsih_pcie_device_remove",
            "description": "Remove PCIe device from list and decrement reference count."
        },
        "vega20_thermal_enable_alert": {
            "id": "vega20_thermal_enable_alert",
            "ground_truth": 0,
            "function": "vega20_thermal_enable_alert",
            "description": "Enables thermal alert for Vega20 hardware manager."
        },
        "mpic_end_irq": {
            "id": "mpic_end_irq",
            "ground_truth": 0,
            "function": "mpic_end_irq",
            "description": "Ends specific virtual IRQ"
        },
        "pata_icside_irqpending_arcin_v6": {
            "id": "pata_icside_irqpending_arcin_v6",
            "ground_truth": 0,
            "function": "pata_icside_irqpending_arcin_v6",
            "description": "Detects active interrupt from expansion card in PATA ICSIDE IRQ probe."
        },
        "start_context": {
            "id": "start_context",
            "ground_truth": 0,
            "function": "start_context",
            "description": "Starts context with specific mmio space and enables adapter context. Returns errno on failure."
        },
        "i40e_read_nvm_word": {
            "id": "i40e_read_nvm_word",
            "ground_truth": 1,
            "function": "i40e_read_nvm_word",
            "description": "Reads NVM word, acquires lock if needed, from shadow RAM struct in i40e HW with given offset."
        },
        "most_put_mbo": {
            "id": "most_put_mbo",
            "ground_truth": 0,
            "function": "most_put_mbo",
            "description": "Return buffer to pool struct mbo mbo"
        },
        "dm355_init": {
            "id": "dm355_init",
            "ground_truth": 0,
            "function": "dm355_init",
            "description": "Function declaration for dm355"
        },
        "_transport_sas_node_find_by_sas_address": {
            "id": "_transport_sas_node_find_by_sas_address",
            "ground_truth": 1,
            "function": "_transport_sas_node_find_by_sas_address",
            "description": "Searches for HBA or expander device by handle and returns object struct in adapter."
        },
        "r852_register_nand_device": {
            "id": "r852_register_nand_device",
            "ground_truth": 0,
            "function": "r852_register_nand_device",
            "description": "Registers NAND device upon card detection."
        },
        "vm_vcpu_add_default": {
            "id": "vm_vcpu_add_default",
            "ground_truth": 0,
            "function": "vm_vcpu_add_default",
            "description": "Add vcpu with default args to virtual machine"
        },
        "ppp_receive_frame": {
            "id": "ppp_receive_frame",
            "ground_truth": 0,
            "function": "ppp_receive_frame",
            "description": "Process received frame in locked PPP receive side."
        },
        "iscsi_prep_ecdb_ahs": {
            "id": "iscsi_prep_ecdb_ahs",
            "ground_truth": 0,
            "function": "iscsi_prep_ecdb_ahs",
            "description": "Prepare extended cdb ahs"
        },
        "convert_signed_value": {
            "id": "convert_signed_value",
            "ground_truth": 0,
            "function": "convert_signed_value",
            "description": "Convert byte word on USB descriptor to zero-based integer."
        },
        "cap_capset": {
            "id": "cap_capset",
            "ground_truth": 1,
            "function": "cap_capset",
            "description": "Validate and apply proposed change to current process's capability set."
        },
        "put_daio": {
            "id": "put_daio",
            "ground_truth": 0,
            "function": "put_daio",
            "description": "Returns single daio resource."
        },
        "nct7904_write_reg": {
            "id": "nct7904_write_reg",
            "ground_truth": 0,
            "function": "nct7904_write_reg",
            "description": "Writes byte register, returns errno on error."
        },
        "intel_vgpu_unpin_mm": {
            "id": "intel_vgpu_unpin_mm",
            "ground_truth": 0,
            "function": "intel_vgpu_unpin_mm",
            "description": "Decreases vGPU MM object pin count when not in use."
        },
        "bulk_read_support": {
            "id": "bulk_read_support",
            "ground_truth": 1,
            "function": "bulk_read_support",
            "description": "Check if slave supports bulk read, return true/false/error."
        },
        "kvmppc_handle_fac": {
            "id": "kvmppc_handle_fac",
            "ground_truth": 0,
            "function": "kvmppc_handle_fac",
            "description": "Enables facility tar ebb dscr for guest"
        },
        "amd_set_speed": {
            "id": "amd_set_speed",
            "ground_truth": 0,
            "function": "amd_set_speed",
            "description": "Sets timing value in chipset register for AMD."
        },
        "driver_find_device_by_acpi_dev": {
            "id": "driver_find_device_by_acpi_dev",
            "ground_truth": 0,
            "function": "driver_find_device_by_acpi_dev",
            "description": "Finds device driver for ACPI companion device."
        },
        "kcsan_begin_scoped_access": {
            "id": "kcsan_begin_scoped_access",
            "ground_truth": 1,
            "function": "kcsan_begin_scoped_access",
            "description": "Scoped access initialization for continuous memory range checking by kcsan."
        },
        "mpc8610_hpcd_machine_probe": {
            "id": "mpc8610_hpcd_machine_probe",
            "ground_truth": 0,
            "function": "mpc8610_hpcd_machine_probe",
            "description": "Board hardware initialization function with register programming."
        },
        "kdb_register": {
            "id": "kdb_register",
            "ground_truth": 0,
            "function": "kdb_register",
            "description": "Compatibility register function for kdb, registers command without repeat state, uses input command name and function to execute."
        },
        "led_classdev_register": {
            "id": "led_classdev_register",
            "ground_truth": 0,
            "function": "led_classdev_register",
            "description": "Registers new LED object with derived name from passed argument struct device parent."
        },
        "FPT_siwidr": {
            "id": "FPT_siwidr",
            "ground_truth": 0,
            "function": "FPT_siwidr",
            "description": "Target wide nego message response function"
        },
        "i2400m_dev_initialize": {
            "id": "i2400m_dev_initialize",
            "ground_truth": 0,
            "function": "i2400m_dev_initialize",
            "description": "Device initialization after communication setup"
        },
        "__ip_mc_join_group": {
            "id": "__ip_mc_join_group",
            "ground_truth": 0,
            "function": "__ip_mc_join_group",
            "description": "Join multicast group"
        },
        "_scsih_fw_event_add": {
            "id": "_scsih_fw_event_add",
            "ground_truth": 1,
            "function": "_scsih_fw_event_add",
            "description": "Adds firmware event to link list and queues for processing."
        },
        "pcpu_update_empty_pages": {
            "id": "pcpu_update_empty_pages",
            "ground_truth": 0,
            "function": "pcpu_update_empty_pages",
            "description": "pcpu_update_empty_pages updates empty page counter based on md block cover page hint."
        },
        "rmi_register_desc_calc_reg_offset": {
            "id": "rmi_register_desc_calc_reg_offset",
            "ground_truth": 0,
            "function": "rmi_register_desc_calc_reg_offset",
            "description": "Calculate total size of register descriptor."
        },
        "ccw_device_resume": {
            "id": "ccw_device_resume",
            "ground_truth": 0,
            "function": "ccw_device_resume",
            "description": "Resumes program execution on a CCW device."
        },
        "mpol_free_shared_policy": {
            "id": "mpol_free_shared_policy",
            "ground_truth": 0,
            "function": "mpol_free_shared_policy",
            "description": "Frees shared policy store on inode deletion."
        },
        "__get_dev_name": {
            "id": "__get_dev_name",
            "ground_truth": 0,
            "function": "__get_dev_name",
            "description": " Returns dev name or \"Unknown\" if not available."
        },
        "rio_chk_dev_access": {
            "id": "rio_chk_dev_access",
            "ground_truth": 1,
            "function": "rio_chk_dev_access",
            "description": "Validate access to specified device struct in RIO dev control structure."
        },
        "sysfs_kf_seq_show": {
            "id": "sysfs_kf_seq_show",
            "ground_truth": 0,
            "function": "sysfs_kf_seq_show",
            "description": "Sysfs read handled by seq file, buffers and pipes result through sysfs ops"
        },
        "drm_atomic_check_only": {
            "id": "drm_atomic_check_only",
            "ground_truth": 1,
            "function": "drm_atomic_check_only",
            "description": "Config check function, may return edeadlk for lock deadlock"
        },
        "create_vma_map": {
            "id": "create_vma_map",
            "ground_truth": 0,
            "function": "create_vma_map",
            "description": "Creates and manages vma to fileoffset map."
        },
        "ioat_check_space_lock": {
            "id": "ioat_check_space_lock",
            "ground_truth": 1,
            "function": "ioat_check_space_lock",
            "description": "Verify space, lock producer, operate on ring with allocated length"
        },
        "j1939_module_init": {
            "id": "j1939_module_init",
            "ground_truth": 0,
            "function": "j1939_module_init",
            "description": "J1939 protocol module initialization interface"
        },
        "sd_probe": {
            "id": "sd_probe",
            "ground_truth": 0,
            "function": "sd_probe",
            "description": "scsi device initialization and attachment, returns device object pointer"
        },
        "fsl7450_reg_setup": {
            "id": "fsl7450_reg_setup",
            "ground_truth": 0,
            "function": "fsl7450_reg_setup",
            "description": "Configures global counter settings for all CPUs"
        },
        "uli526x_rx_packet": {
            "id": "uli526x_rx_packet",
            "ground_truth": 0,
            "function": "uli526x_rx_packet",
            "description": "Receive and pass packet to upper layer"
        },
        "mutex_lock": {
            "id": "mutex_lock",
            "ground_truth": 1,
            "function": "mutex_lock",
            "description": "Exclusive acquisition of mutex lock with sleep until available, must be released by same task."
        },
        "dm_block_manager_create": {
            "id": "dm_block_manager_create",
            "ground_truth": 0,
            "function": "dm_block_manager_create",
            "description": " Creates a block manager with unique identifier and maximum lock operations per thread."
        },
        "xgpu_vi_mailbox_ack_irq": {
            "id": "xgpu_vi_mailbox_ack_irq",
            "ground_truth": 0,
            "function": "xgpu_vi_mailbox_ack_irq",
            "description": "Acknowledge mailbox interrupt in xGPU."
        },
        "wil_ring_wmark_high": {
            "id": "wil_ring_wmark_high",
            "ground_truth": 0,
            "function": "wil_ring_wmark_high",
            "description": "High watermark for descriptor space in Wil ring."
        },
        "cx24120_calculate_ber_window": {
            "id": "cx24120_calculate_ber_window",
            "ground_truth": 0,
            "function": "cx24120_calculate_ber_window",
            "description": "Calculate BER window time"
        },
        "get_binary": {
            "id": "get_binary",
            "ground_truth": 0,
            "function": "get_binary",
            "description": "Converts int to binary for debugging, requires pre-allocated buffer."
        },
        "kcsan_check_read": {
            "id": "kcsan_check_read",
            "ground_truth": 1,
            "function": "kcsan_check_read",
            "description": "Checks read access for race pointer address and access size."
        },
        "hfsplus_find_cat": {
            "id": "hfsplus_find_cat",
            "ground_truth": 0,
            "function": "hfsplus_find_cat",
            "description": "Catalog entry retrieval based on ID"
        },
        "pti_tty_driver_open": {
            "id": "pti_tty_driver_open",
            "ground_truth": 0,
            "function": "pti_tty_driver_open",
            "description": "Open master channel to pti device via unique tty port"
        },
        "mv88f5281_get_tclk_freq": {
            "id": "mv88f5281_get_tclk_freq",
            "ground_truth": 0,
            "function": "mv88f5281_get_tclk_freq",
            "description": "Get TCLK frequency on device."
        },
        "nicvf_rbdr_config": {
            "id": "nicvf_rbdr_config",
            "ground_truth": 0,
            "function": "nicvf_rbdr_config",
            "description": "Configure receive buffer descriptor ring"
        },
        "e1000e_update_phy_task": {
            "id": "e1000e_update_phy_task",
            "ground_truth": 1,
            "function": "e1000e_update_phy_task",
            "description": " Thread updates phy, acquires semaphore, avoids interrupt context."
        },
        "parse_dcc": {
            "id": "parse_dcc",
            "ground_truth": 0,
            "function": "parse_dcc",
            "description": "Extracts IP address and port from DCC command data."
        },
        "lowpan_header_compress": {
            "id": "lowpan_header_compress",
            "ground_truth": 0,
            "function": "lowpan_header_compress",
            "description": "Replace IPv6 header with 6LoWPAN header in network packet"
        },
        "aoc_low_power_setting": {
            "id": "aoc_low_power_setting",
            "ground_truth": 0,
            "function": "aoc_low_power_setting",
            "description": "low power mode, return special serdes setting for AOC cable."
        },
        "efi_capsule_setup_info": {
            "id": "efi_capsule_setup_info",
            "ground_truth": 0,
            "function": "efi_capsule_setup_info",
            "description": "Obtain EFI capsule header, setup capsule info structure, override update mechanism."
        },
        "imx_sc_misc_get_control": {
            "id": "imx_sc_misc_get_control",
            "ground_truth": 0,
            "function": "imx_sc_misc_get_control",
            "description": "Get miscellaneous control value from IPC handle and resource associated with control."
        },
        "get_reg": {
            "id": "get_reg",
            "ground_truth": 0,
            "function": "get_reg",
            "description": "Retrieve content of specified register in task."
        },
        "dbl_fdiv": {
            "id": "dbl_fdiv",
            "ground_truth": 0,
            "function": "dbl_fdiv",
            "description": "Double precision floating point division function"
        },
        "__cvmx_helper_rgmii_probe": {
            "id": "__cvmx_helper_rgmii_probe",
            "ground_truth": 0,
            "function": "__cvmx_helper_rgmii_probe",
            "description": "Returns number of RGMII/GMII/MII port int interface to probe."
        },
        "user_backtrace": {
            "id": "user_backtrace",
            "ground_truth": 0,
            "function": "user_backtrace",
            "description": "Return address for single stackframe, pointer to next frame tail."
        },
        "fh_partition_get_dtprop": {
            "id": "fh_partition_get_dtprop",
            "ground_truth": 0,
            "function": "fh_partition_get_dtprop",
            "description": " Get property from guest device tree, return value based on path."
        },
        "qed_vf_get_num_rxqs": {
            "id": "qed_vf_get_num_rxqs",
            "ground_truth": 0,
            "function": "qed_vf_get_num_rxqs",
            "description": "Get number of rx queues allocated for VF by QED."
        },
        "ab8500_charger_get_ac_current": {
            "id": "ab8500_charger_get_ac_current",
            "ground_truth": 0,
            "function": "ab8500_charger_get_ac_current",
            "description": "Retrieve AC charger current from AB8500"
        },
        "i40e_ddp_exec_aq_section": {
            "id": "i40e_ddp_exec_aq_section",
            "ground_truth": 0,
            "function": "i40e_ddp_exec_aq_section",
            "description": "execute aq for DDP struct in i40e hardware."
        },
        "sdebug_q_cmd_complete": {
            "id": "sdebug_q_cmd_complete",
            "ground_truth": 0,
            "function": "sdebug_q_cmd_complete",
            "description": "Deferred command completion converges here"
        },
        "check_desc_avail": {
            "id": "check_desc_avail",
            "ground_truth": 1,
            "function": "check_desc_avail",
            "description": " Check availability of descriptors on adapter for sending packets."
        },
        "debug_level_show": {
            "id": "debug_level_show",
            "ground_truth": 0,
            "function": "debug_level_show",
            "description": "debug level displayed in output/log"
        },
        "vmw_user_bo_verify_access": {
            "id": "vmw_user_bo_verify_access",
            "ground_truth": 1,
            "function": "vmw_user_bo_verify_access",
            "description": "Verify access permission on buffer object with caller identification."
        },
        "npcm7xx_config_get": {
            "id": "npcm7xx_config_get",
            "ground_truth": 0,
            "function": "npcm7xx_config_get",
            "description": "Get configuration for NPCM7xx pin control operations."
        },
        "ffs_func_revmap_ep": {
            "id": "ffs_func_revmap_ep",
            "ground_truth": 0,
            "function": "ffs_func_revmap_ep",
            "description": "Reverse mapping of endpoint and interface numbers"
        },
        "ceph_fill_trace": {
            "id": "ceph_fill_trace",
            "ground_truth": 0,
            "function": "ceph_fill_trace",
            "description": "Cache result of inode or directory, possibly linked to inode after lookup, may contain directory inode and target inode."
        },
        "phy_unregister_fixup": {
            "id": "phy_unregister_fixup",
            "ground_truth": 0,
            "function": "phy_unregister_fixup",
            "description": "Remove phy fixup from list based on bus and phy ID match."
        },
        "e1000e_phy_hw_reset_generic": {
            "id": "e1000e_phy_hw_reset_generic",
            "ground_truth": 1,
            "function": "e1000e_phy_hw_reset_generic",
            "description": "Reset phy hardware, verify block not blocking, acquire semaphore if needed, read with hw pointer."
        },
        "mlx4_SET_PORT_PRIO2TC": {
            "id": "mlx4_SET_PORT_PRIO2TC",
            "ground_truth": 0,
            "function": "mlx4_SET_PORT_PRIO2TC",
            "description": "Maps user priority to traffic class for a port/device. Returns success or negative errno code."
        },
        "slab_is_available": {
            "id": "slab_is_available",
            "ground_truth": 0,
            "function": "slab_is_available",
            "description": "Prototype for kmem cache availability check"
        },
        "hwspin_lock_request": {
            "id": "hwspin_lock_request",
            "ground_truth": 1,
            "function": "hwspin_lock_request",
            "description": "Request unused hwspinlock for driver/kernel module"
        },
        "v4l2_ctrl_add_handler": {
            "id": "v4l2_ctrl_add_handler",
            "ground_truth": 0,
            "function": "v4l2_ctrl_add_handler",
            "description": "Add control from handler to handler, filter optional"
        },
        "vxfs_find_entry": {
            "id": "vxfs_find_entry",
            "ground_truth": 0,
            "function": "vxfs_find_entry",
            "description": "Find matching directory entry for VxFS dentry"
        },
        "tb_domain_disconnect_all_paths": {
            "id": "tb_domain_disconnect_all_paths",
            "ground_truth": 0,
            "function": "tb_domain_disconnect_all_paths",
            "description": "Disconnects all domain paths for preparation of firmware upgrade."
        },
        "bnx2x_trylock_leader_lock": {
            "id": "bnx2x_trylock_leader_lock",
            "ground_truth": 1,
            "function": "bnx2x_trylock_leader_lock",
            "description": "Try to acquire leader lock for bnx2x bp driver handle"
        },
        "b43_pci_ssb_bridge_init": {
            "id": "b43_pci_ssb_bridge_init",
            "ground_truth": 0,
            "function": "b43_pci_ssb_bridge_init",
            "description": "PCI bridge init for SSB devices"
        },
        "fail_all_outstanding_cmds": {
            "id": "fail_all_outstanding_cmds",
            "ground_truth": 0,
            "function": "fail_all_outstanding_cmds",
            "description": "Fail all outstanding commands when controller lockup detected."
        },
        "__kcsan_check_access": {
            "id": "__kcsan_check_access",
            "ground_truth": 1,
            "function": "__kcsan_check_access",
            "description": "Check access for race on const volatile void pointer"
        },
        "parport_ip32_drain_fifo": {
            "id": "parport_ip32_drain_fifo",
            "ground_truth": 0,
            "function": "parport_ip32_drain_fifo",
            "description": "Wait for FIFO to empty, return if timeout or signal pending."
        },
        "imgu_css_set_parameters": {
            "id": "imgu_css_set_parameters",
            "ground_truth": 0,
            "function": "imgu_css_set_parameters",
            "description": "Initialize new parameters from pool based on gdc and obgrid, using previous parameters if null."
        },
        "appldata_work_fn": {
            "id": "appldata_work_fn",
            "ground_truth": 0,
            "function": "appldata_work_fn",
            "description": "Data gathering function for active modules"
        },
        "snd_dw_hdmi_suspend": {
            "id": "snd_dw_hdmi_suspend",
            "ground_truth": 0,
            "function": "snd_dw_hdmi_suspend",
            "description": "Code requires implementation in missing dw hdmi trigger method"
        },
        "drm_mode_getplane_res": {
            "id": "drm_mode_getplane_res",
            "ground_truth": 0,
            "function": "drm_mode_getplane_res",
            "description": "Get plane resolution in DRM mode."
        },
        "igc_phy_hw_reset": {
            "id": "igc_phy_hw_reset",
            "ground_truth": 1,
            "function": "igc_phy_hw_reset",
            "description": "Verify and reset hardware, acquire semaphore, control reset bit, wait for delay."
        },
        "mgsl_get_text_ptr": {
            "id": "mgsl_get_text_ptr",
            "ground_truth": 0,
            "function": "mgsl_get_text_ptr",
            "description": "Function retrieves text address for remote debugger"
        },
        "ptp_find_pin_unlocked": {
            "id": "ptp_find_pin_unlocked",
            "ground_truth": 1,
            "function": "ptp_find_pin_unlocked",
            "description": "use ptp_find_pin instead (mutex acquisition unnecessary)"
        },
        "ibmvscsis_free_command_q": {
            "id": "ibmvscsis_free_command_q",
            "ground_truth": 1,
            "function": "ibmvscsis_free_command_q",
            "description": "Free command queue, unregister command, clear interrupt, clear memory, no error."
        },
        "isci_task_query_task": {
            "id": "isci_task_query_task",
            "ground_truth": 0,
            "function": "isci_task_query_task",
            "description": "Prevents data loss by escalating failed aborts in libsas."
        },
        "ww_mutex_lock_slow_interruptible": {
            "id": "ww_mutex_lock_slow_interruptible",
            "ground_truth": 1,
            "function": "ww_mutex_lock_slow_interruptible",
            "description": "Mutex lock function that sleeps until lock is acquired"
        },
        "ext4_splice_branch": {
            "id": "ext4_splice_branch",
            "ground_truth": 0,
            "function": "ext4_splice_branch",
            "description": "Splice allocated branch onto inode, fill missing link, do housekeeping, end up with full chain to new."
        },
        "reset_intr": {
            "id": "reset_intr",
            "ground_truth": 0,
            "function": "reset_intr",
            "description": "User-triggered reset function"
        },
        "mpt3sas_get_pdev_by_wwid": {
            "id": "mpt3sas_get_pdev_by_wwid",
            "ground_truth": 1,
            "function": "mpt3sas_get_pdev_by_wwid",
            "description": "Searches for PCIe device by WWID and returns object struct in mpt3sas adapter."
        },
        "iavf_get_sset_count": {
            "id": "iavf_get_sset_count",
            "ground_truth": 0,
            "function": "iavf_get_sset_count",
            "description": "Get size of string set report for net device's string table."
        },
        "vb2_start_streaming_called": {
            "id": "vb2_start_streaming_called",
            "ground_truth": 0,
            "function": "vb2_start_streaming_called",
            "description": "Returns driver's streaming status for vb2 queue"
        },
        "_parse_integer": {
            "id": "_parse_integer",
            "ground_truth": 0,
            "function": "_parse_integer",
            "description": "Convert non-negative integer string to integer with radix, handle overflow."
        },
        "requeue_futex": {
            "id": "requeue_futex",
            "ground_truth": 0,
            "function": "requeue_futex",
            "description": "Requeue futex from one hash bucket to another"
        },
        "velocity_ethtool_down": {
            "id": "velocity_ethtool_down",
            "ground_truth": 0,
            "function": "velocity_ethtool_down",
            "description": "Post-hook for ethtool device, restores chip to D3 state if not running."
        },
        "shutdown": {
            "id": "shutdown",
            "ground_truth": 0,
            "function": "shutdown",
            "description": "Request to shutdown and disconnect from gadget."
        },
        "pidff_find_special_field": {
            "id": "pidff_find_special_field",
            "ground_truth": 0,
            "function": "pidff_find_special_field",
            "description": "Find report field with specific usage"
        },
        "ecp_sync": {
            "id": "ecp_sync",
            "ground_truth": 0,
            "function": "ecp_sync",
            "description": "Wait for empty ECP FIFO in ECP mode"
        },
        "intel_set_cpu_fifo_underrun_reporting": {
            "id": "intel_set_cpu_fifo_underrun_reporting",
            "ground_truth": 0,
            "function": "intel_set_cpu_fifo_underrun_reporting",
            "description": "Set CPU FIFO underrun reporting state to avoid false positives in modeset code."
        },
        "rt2x00queue_insert_l2pad": {
            "id": "rt2x00queue_insert_l2pad",
            "ground_truth": 0,
            "function": "rt2x00queue_insert_l2pad",
            "description": "Aligns and pads skb to byte boundary"
        },
        "ww_mutex_lock_interruptible": {
            "id": "ww_mutex_lock_interruptible",
            "ground_truth": 1,
            "function": "ww_mutex_lock_interruptible",
            "description": "Acquires interruptible mutex lock exclusively, handles deadlock with wait die algorithm."
        },
        "tomoyo_write_transition_control": {
            "id": "tomoyo_write_transition_control",
            "ground_truth": 0,
            "function": "tomoyo_write_transition_control",
            "description": "Writes tomoyo transition control list, returns negative value on failure."
        },
        "msc_buffer_get_page": {
            "id": "msc_buffer_get_page",
            "ground_truth": 0,
            "function": "msc_buffer_get_page",
            "description": "Retrieve MSC buffer page from offset with mutex lock"
        },
        "mutex_lock_io": {
            "id": "mutex_lock_io",
            "ground_truth": 1,
            "function": "mutex_lock_io",
            "description": "Acquires mutex, marks process as waiting, accounts task in io wait state."
        },
        "xenon_emmc_phy_config_tuning": {
            "id": "xenon_emmc_phy_config_tuning",
            "ground_truth": 0,
            "function": "xenon_emmc_phy_config_tuning",
            "description": "Configures EMMC PHY for tuning by enabling HW DLL and setting tuning step."
        },
        "atomisp_try_fmt": {
            "id": "atomisp_try_fmt",
            "ground_truth": 0,
            "function": "atomisp_try_fmt",
            "description": "Resolution lookup function"
        },
        "iscsit_tmr_post_handler": {
            "id": "iscsit_tmr_post_handler",
            "ground_truth": 0,
            "function": "iscsit_tmr_post_handler",
            "description": "Handle after-action for tmrs, needed for connection recovery task reassign."
        },
        "qed_ll2_alloc": {
            "id": "qed_ll2_alloc",
            "ground_truth": 0,
            "function": "qed_ll2_alloc",
            "description": "Allocates LL2 connection set for HWFN."
        },
        "vortex_adbdma_init": {
            "id": "vortex_adbdma_init",
            "ground_truth": 0,
            "function": "vortex_adbdma_init",
            "description": "ADBDMA engine initialization for Vortex platform."
        },
        "amd64_inject_read_store": {
            "id": "amd64_inject_read_store",
            "ground_truth": 0,
            "function": "amd64_inject_read_store",
            "description": "DRAM ECC read and injection register update for NB array data port"
        },
        "ks8851_eeprom_claim": {
            "id": "ks8851_eeprom_claim",
            "ground_truth": 1,
            "function": "ks8851_eeprom_claim",
            "description": "Activate eeprom, check presence, and access device struct for ks8851 net k network device state."
        },
        "lpfc_handle_eratt_s3": {
            "id": "lpfc_handle_eratt_s3",
            "ground_truth": 0,
            "function": "lpfc_handle_eratt_s3",
            "description": "Handles hardware errors for sli3 HBA, including attention interrupt and out-of-range DMA ring index."
        },
        "devm_clk_hw_register_clkdev": {
            "id": "devm_clk_hw_register_clkdev",
            "ground_truth": 0,
            "function": "devm_clk_hw_register_clkdev",
            "description": "Registers managed clock lookup for hardware or device ID, allowing wildcard for easier mass registration."
        },
        "cap_capable": {
            "id": "cap_capable",
            "ground_truth": 1,
            "function": "cap_capable",
            "description": " Check task's effective capability, return true/false."
        },
        "device_init_registers": {
            "id": "device_init_registers",
            "ground_truth": 0,
            "function": "device_init_registers",
            "description": "Registers initialization for MAC BBP"
        },
        "i40e_vsi_setup_rx_resources": {
            "id": "i40e_vsi_setup_rx_resources",
            "ground_truth": 0,
            "function": "i40e_vsi_setup_rx_resources",
            "description": " Allocates VSI queue RX resource, possible DoS if error."
        },
        "distance": {
            "id": "distance",
            "ground_truth": 0,
            "function": "distance",
            "description": "Calculates distance between resolution and re width/height, returns gap or fail."
        },
        "nouveau_hw_decode_pll": {
            "id": "nouveau_hw_decode_pll",
            "ground_truth": 0,
            "function": "nouveau_hw_decode_pll",
            "description": "Nouveau driver decodes PLL in hardware"
        },
        "mei_me_count_full_read_slots": {
            "id": "mei_me_count_full_read_slots",
            "ground_truth": 0,
            "function": "mei_me_count_full_read_slots",
            "description": "Count full read slots in mei device structure"
        },
        "other_tx_active": {
            "id": "other_tx_active",
            "ground_truth": 0,
            "function": "other_tx_active",
            "description": "Interface transmitting data detection"
        },
        "ath_htc_resume_btcoex_work": {
            "id": "ath_htc_resume_btcoex_work",
            "ground_truth": 0,
            "function": "ath_htc_resume_btcoex_work",
            "description": "Restarting btcoex work"
        },
        "cec_msg_menu_status": {
            "id": "cec_msg_menu_status",
            "ground_truth": 0,
            "function": "cec_msg_menu_status",
            "description": "Device menu control feature"
        },
        "blk_cleanup_queue": {
            "id": "blk_cleanup_queue",
            "ground_truth": 0,
            "function": "blk_cleanup_queue",
            "description": "Shutdown request queue, mark dying, drain pending requests, mark dead, destroy, future requests fail immediately, can sleep."
        },
        "usb_hcd_msp_map_regs": {
            "id": "usb_hcd_msp_map_regs",
            "ground_truth": 0,
            "function": "usb_hcd_msp_map_regs",
            "description": "Configure HC device and ID, always called with process context, sleeping is allowed."
        },
        "camif_request_irqs": {
            "id": "camif_request_irqs",
            "ground_truth": 0,
            "function": "camif_request_irqs",
            "description": "camif device with two data paths, memory or camera input, registers interrupt for each path"
        },
        "iosf_mbi_block_punit_i2c_access": {
            "id": "iosf_mbi_block_punit_i2c_access",
            "ground_truth": 1,
            "function": "iosf_mbi_block_punit_i2c_access",
            "description": "Block unit access to pmic i2c bus for predictable kernel access."
        },
        "ipmr_update_thresholds": {
            "id": "ipmr_update_thresholds",
            "ground_truth": 0,
            "function": "ipmr_update_thresholds",
            "description": "Updates thresholds for IP multicast routing."
        },
        "snd_dma_disable": {
            "id": "snd_dma_disable",
            "ground_truth": 0,
            "function": "snd_dma_disable",
            "description": "Stop ISA DMA transfer for specified DMA number"
        },
        "dm_pp_get_clock_levels_by_type": {
            "id": "dm_pp_get_clock_levels_by_type",
            "ground_truth": 0,
            "function": "dm_pp_get_clock_levels_by_type",
            "description": "Get valid clock levels for given type in ascending order"
        },
        "bmp180_compensate_press": {
            "id": "bmp180_compensate_press",
            "ground_truth": 0,
            "function": "bmp180_compensate_press",
            "description": "Returns pressure in pa with pa resolution from bmp180 datasheet calculation."
        },
        "xfs_rtget_summary": {
            "id": "xfs_rtget_summary",
            "ground_truth": 0,
            "function": "xfs_rtget_summary",
            "description": "Read and return summary info for extent size bitmap block combo, track current summary block to avoid buffer cache reads."
        },
        "EXhalbtc8723b1ant_PowerOnSetting": {
            "id": "EXhalbtc8723b1ant_PowerOnSetting",
            "ground_truth": 0,
            "function": "EXhalbtc8723b1ant_PowerOnSetting",
            "description": "Interface for coex module notification on power-on setting"
        },
        "nanddev_mtd_max_bad_blocks": {
            "id": "nanddev_mtd_max_bad_blocks",
            "ground_truth": 0,
            "function": "nanddev_mtd_max_bad_blocks",
            "description": "Max bad eraseblocks on specific nand region for mtd"
        },
        "ice_tx_map": {
            "id": "ice_tx_map",
            "ground_truth": 0,
            "function": "ice_tx_map",
            "description": "Builds tx descriptor by looping over skb data and programming physical addresses and length into transmit descriptor struct."
        },
        "ia_css_frame_free_multiple": {
            "id": "ia_css_frame_free_multiple",
            "ground_truth": 0,
            "function": "ia_css_frame_free_multiple",
            "description": "Free multiple frame params in array"
        },
        "e1000_acquire_nvm_ich8lan": {
            "id": "e1000_acquire_nvm_ich8lan",
            "ground_truth": 1,
            "function": "e1000_acquire_nvm_ich8lan",
            "description": "Acquires mutex for nvm operation on e1000 hw"
        },
        "ide_scan_pcibus": {
            "id": "ide_scan_pcibus",
            "ground_truth": 0,
            "function": "ide_scan_pcibus",
            "description": "Initial scan of IDE driver on PCI bus, standard module ordering, no arguments."
        },
        "gdb_cmd_status": {
            "id": "gdb_cmd_status",
            "ground_truth": 0,
            "function": "gdb_cmd_status",
            "description": "Handle status packet in gdb command"
        },
        "ubifs_wbuf_sync_nolock": {
            "id": "ubifs_wbuf_sync_nolock",
            "ground_truth": 0,
            "function": "ubifs_wbuf_sync_nolock",
            "description": "Syncs write buffer, returns 0 on success or negative error code on failure. Can be synced multiple times."
        },
        "queued_spin_lock": {
            "id": "queued_spin_lock",
            "ground_truth": 1,
            "function": "queued_spin_lock",
            "description": "Acquire queued spinlock structure pointer"
        },
        "ver_insert": {
            "id": "ver_insert",
            "ground_truth": 0,
            "function": "ver_insert",
            "description": "Reverse version tree for eat last function use."
        },
        "iavf_exit_module": {
            "id": "iavf_exit_module",
            "ground_truth": 0,
            "function": "iavf_exit_module",
            "description": "Cleanup routine for iavf driver before removal from memory."
        },
        "do_submit": {
            "id": "do_submit",
            "ground_truth": 0,
            "function": "do_submit",
            "description": "DRBD request submission to peer node"
        },
        "il4965_tx_queue_set_status": {
            "id": "il4965_tx_queue_set_status",
            "ground_truth": 1,
            "function": "il4965_tx_queue_set_status",
            "description": "Sets status of tx cmd queue for managing a range of tx fifo channels"
        },
        "proc_flush_pid": {
            "id": "proc_flush_pid",
            "ground_truth": 0,
            "function": "proc_flush_pid",
            "description": "Remove dcache entry for pid from proc dcache and flush inodes attached to pid from proc filesystem."
        },
        "sdio_alloc_func": {
            "id": "sdio_alloc_func",
            "ground_truth": 0,
            "function": "sdio_alloc_func",
            "description": "Allocate and initialize new sdio function structure."
        },
        "startup": {
            "id": "startup",
            "ground_truth": 0,
            "function": "startup",
            "description": " GPIO reset not used, except for pxa27x CPU with silicon bug. Default behavior if not specified."
        },
        "igc_acquire_nvm_i225": {
            "id": "igc_acquire_nvm_i225",
            "ground_truth": 1,
            "function": "igc_acquire_nvm_i225",
            "description": "Hardware semaphore acquisition for exclusive EEPROM access."
        },
        "decode_register": {
            "id": "decode_register",
            "ground_truth": 0,
            "function": "decode_register",
            "description": "Pointer to relevant register block based on modrm byte and register block, with option to decode highbyte registers"
        },
        "i40e_get_media_type": {
            "id": "i40e_get_media_type",
            "ground_truth": 0,
            "function": "i40e_get_media_type",
            "description": "Retrieve medium type from i40e hardware structure"
        },
        "adapter_comm": {
            "id": "adapter_comm",
            "ground_truth": 0,
            "function": "adapter_comm",
            "description": "Admin operation"
        },
        "mpt3sas_base_get_msg_frame": {
            "id": "mpt3sas_base_get_msg_frame",
            "ground_truth": 0,
            "function": "mpt3sas_base_get_msg_frame",
            "description": "Obtain request message frame pointer for MPT3SAS adapter."
        },
        "wait_event_interruptible_lock_irq": {
            "id": "wait_event_interruptible_lock_irq",
            "ground_truth": 1,
            "function": "wait_event_interruptible_lock_irq",
            "description": " Sleeps until condition met under lock, process put to sleep interruptible."
        },
        "omap_prm_is_hardreset_asserted": {
            "id": "omap_prm_is_hardreset_asserted",
            "ground_truth": 1,
            "function": "omap_prm_is_hardreset_asserted",
            "description": "Check if hardware reset line for IP block is enabled, using u8 shift register bit shift."
        },
        "capable": {
            "id": "capable",
            "ground_truth": 1,
            "function": "capable",
            "description": "Check task's superior capability, return true if available, false if not."
        },
        "si514_get_muldiv": {
            "id": "si514_get_muldiv",
            "ground_truth": 0,
            "function": "si514_get_muldiv",
            "description": "Retrieve clock multiplier and divider from hardware."
        },
        "jfs_symlink": {
            "id": "jfs_symlink",
            "ground_truth": 0,
            "function": "jfs_symlink",
            "description": "Creates symbolic link in parent directory to specified vnode by name."
        },
        "ccp_del_device": {
            "id": "ccp_del_device",
            "ground_truth": 0,
            "function": "ccp_del_device",
            "description": "Remove CCP device from list and adjust pointer if necessary"
        },
        "gb_connection_flush_incoming_operations": {
            "id": "gb_connection_flush_incoming_operations",
            "ground_truth": 0,
            "function": "gb_connection_flush_incoming_operations",
            "description": "Cancel active incoming ops on locked connection with enabled tx state."
        },
        "iio_dma_buffer_data_available": {
            "id": "iio_dma_buffer_data_available",
            "ground_truth": 1,
            "function": "iio_dma_buffer_data_available",
            "description": "Callback for checking data availability in DMA buffer for IIO buffer access ops."
        },
        "batadv_bitmap_shift_left": {
            "id": "batadv_bitmap_shift_left",
            "ground_truth": 0,
            "function": "batadv_bitmap_shift_left",
            "description": "Shift packet array by place."
        },
        "imx319_write_reg": {
            "id": "imx319_write_reg",
            "ground_truth": 0,
            "function": "imx319_write_reg",
            "description": "Writes multiple registers simultaneously."
        },
        "rpc_create_client_dir": {
            "id": "rpc_create_client_dir",
            "ground_truth": 0,
            "function": "rpc_create_client_dir",
            "description": "Create new rpc client directory in rpc pipefs with client info."
        },
        "hvc_iucv_sndbuf_work": {
            "id": "hvc_iucv_sndbuf_work",
            "ground_truth": 0,
            "function": "hvc_iucv_sndbuf_work",
            "description": "Send buffered data over iucv, may not send all"
        },
        "verity_fec_status_table": {
            "id": "verity_fec_status_table",
            "ground_truth": 0,
            "function": "verity_fec_status_table",
            "description": "Append feature and value to status table"
        },
        "unregister_pstore_zone": {
            "id": "unregister_pstore_zone",
            "ground_truth": 0,
            "function": "unregister_pstore_zone",
            "description": "Unregister from pstore zone struct."
        },
        "preview_config_csc": {
            "id": "preview_config_csc",
            "ground_truth": 0,
            "function": "preview_config_csc",
            "description": "Configures color space conversion from RGB to YCbCr in preview."
        },
        "ip6_mroute_setsockopt": {
            "id": "ip6_mroute_setsockopt",
            "ground_truth": 0,
            "function": "ip6_mroute_setsockopt",
            "description": " Manipulates socket option and virtual interface, potential security risk due to heap management."
        },
        "pseudo_lock_region_init": {
            "id": "pseudo_lock_region_init",
            "ground_truth": 1,
            "function": "pseudo_lock_region_init",
            "description": "Initialize pseudo lock region for user-provided schema with resource domain and capacity bitmask."
        },
        "CIFSSMBQAllEAs": {
            "id": "CIFSSMBQAllEAs",
            "ground_truth": 0,
            "function": "CIFSSMBQAllEAs",
            "description": " Path-based query for extended attribute values. Commonly used by listxattr and getxattr calls."
        },
        "i2c_check_quirks": {
            "id": "i2c_check_quirks",
            "ground_truth": 1,
            "function": "i2c_check_quirks",
            "description": "Checks i2c adapter struct's quirk flag."
        },
        "hvc_iucv_put_chars": {
            "id": "hvc_iucv_put_chars",
            "ground_truth": 0,
            "function": "hvc_iucv_put_chars",
            "description": "Write character to back end using hvc iucv queue for sending"
        },
        "poly_l2": {
            "id": "poly_l2",
            "ground_truth": 0,
            "function": "poly_l2",
            "description": "Polynomial approximation of logarithm with L2 regularization"
        },
        "bus_mutex_lock": {
            "id": "bus_mutex_lock",
            "ground_truth": 1,
            "function": "bus_mutex_lock",
            "description": "Acquire bus mutex with max try time and delay between attempts."
        },
        "sh7757lcr_setup": {
            "id": "sh7757lcr_setup",
            "ground_truth": 0,
            "function": "sh7757lcr_setup",
            "description": "Initialize SH7757LCR board"
        },
        "alc274_fixup_bind_dacs": {
            "id": "alc274_fixup_bind_dacs",
            "ground_truth": 0,
            "function": "alc274_fixup_bind_dacs",
            "description": "Forced assignment of nid to hp lo and spk for eq."
        },
        "snd_soc_dapm_disable_pin_unlocked": {
            "id": "snd_soc_dapm_disable_pin_unlocked",
            "ground_truth": 1,
            "function": "snd_soc_dapm_disable_pin_unlocked",
            "description": "Disable pin, input/output, parent/child widget, external locking, snd soc dapm sync update"
        },
        "atomic_set": {
            "id": "atomic_set",
            "ground_truth": 0,
            "function": "atomic_set",
            "description": "Atomic variable set atomically with required value pointer"
        },
        "DRM_MODESET_LOCK_ALL_END": {
            "id": "DRM_MODESET_LOCK_ALL_END",
            "ground_truth": 1,
            "function": "DRM_MODESET_LOCK_ALL_END",
            "description": "Release and cleanup modeset lock."
        },
        "mpt3sas_scsih_expander_find_by_handle": {
            "id": "mpt3sas_scsih_expander_find_by_handle",
            "ground_truth": 1,
            "function": "mpt3sas_scsih_expander_find_by_handle",
            "description": "Searches for expander device by handle and returns object struct."
        },
        "mutex_lock_killable": {
            "id": "mutex_lock_killable",
            "ground_truth": 1,
            "function": "mutex_lock_killable",
            "description": "Mutex lock interruptible by fatal signal"
        },
        "platform_get_resource_byname": {
            "id": "platform_get_resource_byname",
            "ground_truth": 0,
            "function": "platform_get_resource_byname",
            "description": "Get device resource by name for platform device"
        },
        "queued_spin_trylock": {
            "id": "queued_spin_trylock",
            "ground_truth": 1,
            "function": "queued_spin_trylock",
            "description": "Attempt to acquire queued spinlock struct pointer, return failure if unsuccessful."
        },
        "mpt3sas_get_pdev_from_target": {
            "id": "mpt3sas_get_pdev_from_target",
            "ground_truth": 1,
            "function": "mpt3sas_get_pdev_from_target",
            "description": "Searches for PCIe device from target and returns object struct."
        },
        "kcsan_check_write": {
            "id": "kcsan_check_write",
            "ground_truth": 1,
            "function": "kcsan_check_write",
            "description": "Checks regular write access for race pointer address."
        },
        "__hostap_cmd_queue_free": {
            "id": "__hostap_cmd_queue_free",
            "ground_truth": 1,
            "function": "__hostap_cmd_queue_free",
            "description": "cmdlock must be acquired before calling this function to free prism2 command queue entry."
        },
        "bnx2x_map_sb_state_machines": {
            "id": "bnx2x_map_sb_state_machines",
            "ground_truth": 0,
            "function": "bnx2x_map_sb_state_machines",
            "description": "Allocate state machine ID"
        },
        "check_mode": {
            "id": "check_mode",
            "ground_truth": 1,
            "function": "check_mode",
            "description": "Verify tuner supports requested mode for analog/digital TV or radio."
        },
        "amdgpu_verify_access": {
            "id": "amdgpu_verify_access",
            "ground_truth": 1,
            "function": "amdgpu_verify_access",
            "description": "Access verification for mmap call in AMDGPU driver"
        },
        "w_e_end_data_req": {
            "id": "w_e_end_data_req",
            "ground_truth": 0,
            "function": "w_e_end_data_req",
            "description": "Worker sends data reply packet in response to data request"
        },
        "cgroup_move_task": {
            "id": "cgroup_move_task",
            "ground_truth": 1,
            "function": "cgroup_move_task",
            "description": "Safely move task to new cgroup with associated stall state migration"
        },
        "nfs4_state_protect_write": {
            "id": "nfs4_state_protect_write",
            "ground_truth": 0,
            "function": "nfs4_state_protect_write",
            "description": "Wrapper for NFS4 state protect, ensuring machine cred writes use NFS file sync."
        },
        "of_icc_xlate_onecell": {
            "id": "of_icc_xlate_onecell",
            "ground_truth": 0,
            "function": "of_icc_xlate_onecell",
            "description": "Generic function for translating single cell in interconnect provider."
        },
        "csio_hws_quiesced": {
            "id": "csio_hws_quiesced",
            "ground_truth": 0,
            "function": "csio_hws_quiesced",
            "description": "Hardware module in quiesced state due to event in csio function."
        },
        "read_cardpda": {
            "id": "read_cardpda",
            "ground_truth": 0,
            "function": "read_cardpda",
            "description": "Command to read PDA from card, stored in cardpda upon success."
        },
        "efx_change_mtu": {
            "id": "efx_change_mtu",
            "ground_truth": 0,
            "function": "efx_change_mtu",
            "description": "Context process holds rtnl lock for efx_change_mtu."
        },
        "mvpp2_flow_add_hek_field": {
            "id": "mvpp2_flow_add_hek_field",
            "ground_truth": 0,
            "function": "mvpp2_flow_add_hek_field",
            "description": "Adds field to header key generation parameter."
        },
        "cfg80211_get_station": {
            "id": "cfg80211_get_station",
            "ground_truth": 0,
            "function": "cfg80211_get_station",
            "description": "Retrieve station info or return error code"
        },
        "rx51_secure_rng_call": {
            "id": "rx51_secure_rng_call",
            "ground_truth": 0,
            "function": "rx51_secure_rng_call",
            "description": "Generates secure random numbers with unspecified parameters."
        },
        "devm_drm_panel_bridge_add": {
            "id": "devm_drm_panel_bridge_add",
            "ground_truth": 0,
            "function": "devm_drm_panel_bridge_add",
            "description": " Creates managed drm bridge and connector, calls appropriate function from drm panel. Managed version of drm panel bridge add, auto calls remove on driver detach."
        },
        "is_global_init": {
            "id": "is_global_init",
            "ground_truth": 1,
            "function": "is_global_init",
            "description": "Check if task is first user space task in kernel"
        },
        "kvm_inject_pabt": {
            "id": "kvm_inject_pabt",
            "ground_truth": 0,
            "function": "kvm_inject_pabt",
            "description": "Injects prefetch abort into guest from vcpu thread"
        },
        "__kcsan_check_write": {
            "id": "__kcsan_check_write",
            "ground_truth": 1,
            "function": "__kcsan_check_write",
            "description": "Regular write access check for race ptr address and access size."
        },
        "spi_finalize_current_message": {
            "id": "spi_finalize_current_message",
            "ground_truth": 0,
            "function": "spi_finalize_current_message",
            "description": "Notify completion of current message in SPI queue"
        },
        "snd_soc_dapm_enable_pin_unlocked": {
            "id": "snd_soc_dapm_enable_pin_unlocked",
            "ground_truth": 1,
            "function": "snd_soc_dapm_enable_pin_unlocked",
            "description": "Enables input/output pin and parent/child widget if valid audio route and active audio stream requires external locking."
        },
        "xudc_nuke": {
            "id": "xudc_nuke",
            "ground_truth": 0,
            "function": "xudc_nuke",
            "description": "Clean up data transfer message list for USB device endpoint with status."
        },
        "cpumask_test_and_set_cpu": {
            "id": "cpumask_test_and_set_cpu",
            "ground_truth": 0,
            "function": "cpumask_test_and_set_cpu",
            "description": "Atomically test and set CPU in cpumask, returning if CPU is set in old bitmap or using a test and set bit wrapper for cpumasks int."
        },
        "ssp_disable_sensor": {
            "id": "ssp_disable_sensor",
            "ground_truth": 0,
            "function": "ssp_disable_sensor",
            "description": "Disables sensor and returns error if unsuccessful."
        },
        "rio_scan_alloc_net": {
            "id": "rio_scan_alloc_net",
            "ground_truth": 0,
            "function": "rio_scan_alloc_net",
            "description": "Allocate and configure new RIO network structure with enumerator initialization."
        },
        "mpt3sas_get_pdev_by_handle": {
            "id": "mpt3sas_get_pdev_by_handle",
            "ground_truth": 1,
            "function": "mpt3sas_get_pdev_by_handle",
            "description": "Searches for PCIe device by handle and returns object struct for adapter."
        },
        "gfs2_bmap": {
            "id": "gfs2_bmap",
            "ground_truth": 0,
            "function": "gfs2_bmap",
            "description": "Maps block to disk address or identifies hole/error"
        },
        "nt_prpsinfo": {
            "id": "nt_prpsinfo",
            "ground_truth": 0,
            "function": "nt_prpsinfo",
            "description": "Initialize prpsinfo in new kernel"
        },
        "power_suspend": {
            "id": "power_suspend",
            "ground_truth": 0,
            "function": "power_suspend",
            "description": "Turns on VBUS suspend power, disables hotplug detection, and turns off all other functions."
        },
        "gsi_trans_pool_alloc_common": {
            "id": "gsi_trans_pool_alloc_common",
            "ground_truth": 0,
            "function": "gsi_trans_pool_alloc_common",
            "description": "Returns byte offset of next free entry in pool."
        },
        "ice_update_sw_rule_bridge_mode": {
            "id": "ice_update_sw_rule_bridge_mode",
            "ground_truth": 0,
            "function": "ice_update_sw_rule_bridge_mode",
            "description": "Update switch filter rule based on VEB/VEPA mode struct in ICE HW pointer."
        },
        "irq_can_set_affinity_usr": {
            "id": "irq_can_set_affinity_usr",
            "ground_truth": 1,
            "function": "irq_can_set_affinity_usr",
            "description": "Check if user can set irq affinity, also verify managed flag for interrupt."
        },
        "omapfb_init": {
            "id": "omapfb_init",
            "ground_truth": 0,
            "function": "omapfb_init",
            "description": "Registers driver and device for omapfb_init."
        },
        "wait_event_interruptible_lock_irq_timeout": {
            "id": "wait_event_interruptible_lock_irq_timeout",
            "ground_truth": 1,
            "function": "wait_event_interruptible_lock_irq_timeout",
            "description": "Sleep until condition true or timeout, checked under lock, process put to sleep."
        },
        "resource_overlaps": {
            "id": "resource_overlaps",
            "ground_truth": 0,
            "function": "resource_overlaps",
            "description": "Check if r1 overlaps r2"
        },
        "xpsgtr_phy_tx_term_fix": {
            "id": "xpsgtr_phy_tx_term_fix",
            "ground_truth": 0,
            "function": "xpsgtr_phy_tx_term_fix",
            "description": "Fixes out-of-spec tx termination resistance in gt calibration logic."
        },
        "down": {
            "id": "down",
            "ground_truth": 1,
            "function": "down",
            "description": "Semaphore acquisition function with potential deadlock risk"
        },
        "iwl_run_init_mvm_ucode": {
            "id": "iwl_run_init_mvm_ucode",
            "ground_truth": 0,
            "function": "iwl_run_init_mvm_ucode",
            "description": "Initialize Intel Wireless-AC firmware using mvm method."
        },
        "ufs_print_super_stuff": {
            "id": "ufs_print_super_stuff",
            "ground_truth": 0,
            "function": "ufs_print_super_stuff",
            "description": "Prints ufs super block for debugging"
        },
        "sd_dq_callback": {
            "id": "sd_dq_callback",
            "ground_truth": 0,
            "function": "sd_dq_callback",
            "description": "Callback for new frame in application"
        },
        "v4l2_m2m_reqbufs": {
            "id": "v4l2_m2m_reqbufs",
            "ground_truth": 0,
            "function": "v4l2_m2m_reqbufs",
            "description": "Multiplexes reqbufs for multi-queue aware struct file pointer"
        },
        "bnx2x_vfpf_init": {
            "id": "bnx2x_vfpf_init",
            "ground_truth": 0,
            "function": "bnx2x_vfpf_init",
            "description": "Initializes VFPF (Virtual Function Physical Function) and informs the Physical Function about the address of the SB (Status Block)."
        },
        "netlink_dump_done": {
            "id": "netlink_dump_done",
            "ground_truth": 0,
            "function": "netlink_dump_done",
            "description": "Kernel thread creation for netlink dump completion."
        },
        "rtw8821c_coex_cfg_init": {
            "id": "rtw8821c_coex_cfg_init",
            "ground_truth": 0,
            "function": "rtw8821c_coex_cfg_init",
            "description": "RTW8821C coex config init"
        },
        "tcp_update_metrics": {
            "id": "tcp_update_metrics",
            "ground_truth": 0,
            "function": "tcp_update_metrics",
            "description": "Save learned metrics for successful TCP session"
        },
        "ehci_mem_cleanup": {
            "id": "ehci_mem_cleanup",
            "ground_truth": 0,
            "function": "ehci_mem_cleanup",
            "description": "Manages queue head and transfer descriptor pool for device initialization and cleanup."
        },
        "argv_split": {
            "id": "argv_split",
            "ground_truth": 0,
            "function": "argv_split",
            "description": " Split string at whitespace, return array of pointers to split strings. No quote processing."
        },
        "do_splice_to": {
            "id": "do_splice_to",
            "ground_truth": 0,
            "function": "do_splice_to",
            "description": "Initiates file-to-pipe splice attempt."
        },
        "color_fwrite_lines": {
            "id": "color_fwrite_lines",
            "ground_truth": 0,
            "function": "color_fwrite_lines",
            "description": "Buffer split, color lines, return success."
        },
        "mpc52xx_lpbfifo_submit": {
            "id": "mpc52xx_lpbfifo_submit",
            "ground_truth": 0,
            "function": "mpc52xx_lpbfifo_submit",
            "description": "Submit lpb fifo transfer request struct"
        },
        "gmap_map_segment": {
            "id": "gmap_map_segment",
            "ground_truth": 0,
            "function": "gmap_map_segment",
            "description": "Map segment to guest address space, return success or error"
        },
        "t3_synchronize_rx": {
            "id": "t3_synchronize_rx",
            "ground_truth": 1,
            "function": "t3_synchronize_rx",
            "description": "Wait for completion of current rx processing on port before returning."
        },
        "bl_pg_test_write": {
            "id": "bl_pg_test_write",
            "ground_truth": 0,
            "function": "bl_pg_test_write",
            "description": "Coalesces req into pgio, returns max wb byte count"
        },
        "init_lmlbt4x": {
            "id": "init_lmlbt4x",
            "ground_truth": 0,
            "function": "init_lmlbt4x",
            "description": "Initialize lmlbt4x for gpio sensor input and alarm output"
        },
        "rpc_prepare_task": {
            "id": "rpc_prepare_task",
            "ground_truth": 0,
            "function": "rpc_prepare_task",
            "description": "Helper function for task preparation RPC call"
        },
        "ns_capable_setid": {
            "id": "ns_capable_setid",
            "ground_truth": 1,
            "function": "ns_capable_setid",
            "description": "superior capability check during setid/setgroups syscall"
        },
        "cap_inode_need_killpriv": {
            "id": "cap_inode_need_killpriv",
            "ground_truth": 1,
            "function": "cap_inode_need_killpriv",
            "description": " Determines if inode change affects privilege and security marking."
        },
        "mlx4_en_read_clock": {
            "id": "mlx4_en_read_clock",
            "ground_truth": 0,
            "function": "mlx4_en_read_clock",
            "description": "Reads raw cycle counter for time counter"
        },
        "txstate": {
            "id": "txstate",
            "ground_truth": 0,
            "function": "txstate",
            "description": "Endpoint transmitting data, called from irq or ep queue, controller locked, irqs blocked, endpoint selected."
        },
        "wait_event_lock_irq": {
            "id": "wait_event_lock_irq",
            "ground_truth": 1,
            "function": "wait_event_lock_irq",
            "description": "Sleeps until condition true, checked under lock, with IRQs disabled."
        },
        "e1000_acquire_mac_csr_80003es2lan": {
            "id": "e1000_acquire_mac_csr_80003es2lan",
            "ground_truth": 1,
            "function": "e1000_acquire_mac_csr_80003es2lan",
            "description": "Acquire access to kumeran register struct in e1000 hardware."
        },
        "apci3120_ns_to_timer": {
            "id": "apci3120_ns_to_timer",
            "ground_truth": 0,
            "function": "apci3120_ns_to_timer",
            "description": " timer function with fixed prescaler and base clock depending on board version/type."
        },
        "key_seal": {
            "id": "key_seal",
            "ground_truth": 0,
            "function": "key_seal",
            "description": "TPM seal encrypts symmetric key"
        },
        "__kcsan_check_read_write": {
            "id": "__kcsan_check_read_write",
            "ground_truth": 1,
            "function": "__kcsan_check_read_write",
            "description": "Check for regular read/write access on race pointer address of given size."
        },
        "jpeg_get_byte": {
            "id": "jpeg_get_byte",
            "ground_truth": 0,
            "function": "jpeg_get_byte",
            "description": "Returns u8 value or negative error"
        },
        "batadv_store_mesh_iface_finish": {
            "id": "batadv_store_mesh_iface_finish",
            "ground_truth": 0,
            "function": "batadv_store_mesh_iface_finish",
            "description": "Store hardif mesh iface state change in net device struct"
        },
        "print_hwp": {
            "id": "print_hwp",
            "ground_truth": 0,
            "function": "print_hwp",
            "description": "Prints decoded MSR HWP capability."
        },
        "crypto_aead_blocksize": {
            "id": "crypto_aead_blocksize",
            "ground_truth": 0,
            "function": "crypto_aead_blocksize",
            "description": "Obtain block size of cipher for AEAD."
        },
        "et131x_config_tx_dma_regs": {
            "id": "et131x_config_tx_dma_regs",
            "ground_truth": 0,
            "function": "et131x_config_tx_dma_regs",
            "description": " Configures TX DMA section for data transmission."
        },
        "dev_action_start": {
            "id": "dev_action_start",
            "ground_truth": 0,
            "function": "dev_action_start",
            "description": "Interface state machine event start with net device pointer"
        },
        "tnum_or": {
            "id": "tnum_or",
            "ground_truth": 0,
            "function": "tnum_or",
            "description": "Bitwise OR operation returns."
        },
        "regs_query_register_offset": {
            "id": "regs_query_register_offset",
            "ground_truth": 0,
            "function": "regs_query_register_offset",
            "description": "Query register offset from name, return offset in struct pt regs."
        },
        "skge_clk2usec": {
            "id": "skge_clk2usec",
            "ground_truth": 0,
            "function": "skge_clk2usec",
            "description": "Converts chip frequency to microseconds."
        },
        "__clear_bit_unlock": {
            "id": "__clear_bit_unlock",
            "ground_truth": 0,
            "function": "__clear_bit_unlock",
            "description": " Clear bit in memory with release semantics."
        },
        "srp_put_tx_iu": {
            "id": "srp_put_tx_iu",
            "ground_truth": 0,
            "function": "srp_put_tx_iu",
            "description": "Return iu and credit to free pool."
        },
        "mpt3sas_scsih_enclosure_find_by_handle": {
            "id": "mpt3sas_scsih_enclosure_find_by_handle",
            "ground_truth": 1,
            "function": "mpt3sas_scsih_enclosure_find_by_handle",
            "description": "Search enclosure device by handle, return object struct."
        },
        "__bfa_cb_rport_online": {
            "id": "__bfa_cb_rport_online",
            "ground_truth": 0,
            "function": "__bfa_cb_rport_online",
            "description": "Private function for BFA rport"
        },
        "bcsp_crc_update": {
            "id": "bcsp_crc_update",
            "ground_truth": 0,
            "function": "bcsp_crc_update",
            "description": "CRC update with reversed bit generation from top"
        },
        "tegra210_plld_set_defaults": {
            "id": "tegra210_plld_set_defaults",
            "ground_truth": 0,
            "function": "tegra210_plld_set_defaults",
            "description": "Fractional SDM PLL default settings for Tegra 210"
        },
        "stdma_is_locked_by": {
            "id": "stdma_is_locked_by",
            "ground_truth": 1,
            "function": "stdma_is_locked_by",
            "description": "Check if lock holder needs to release, based on given handler and previous interrupt handler used to acquire lock."
        },
        "convert_to_trace_point": {
            "id": "convert_to_trace_point",
            "ground_truth": 0,
            "function": "convert_to_trace_point",
            "description": "Converts subprogram die to trace point."
        },
        "sysfs_rename_link_ns": {
            "id": "sysfs_rename_link_ns",
            "ground_truth": 0,
            "function": "sysfs_rename_link_ns",
            "description": "Rename symlink in sysfs directory for kobject"
        },
        "fscache_unpin_cookie": {
            "id": "fscache_unpin_cookie",
            "ground_truth": 0,
            "function": "fscache_unpin_cookie",
            "description": "Unpin data storage cache object from cache."
        },
        "drm_atomic_helper_duplicate_state": {
            "id": "drm_atomic_helper_duplicate_state",
            "ground_truth": 1,
            "function": "drm_atomic_helper_duplicate_state",
            "description": "Duplicate atomic state object for suspend/resume support"
        },
        "pm8xxx_work_handler": {
            "id": "pm8xxx_work_handler",
            "ground_truth": 0,
            "function": "pm8xxx_work_handler",
            "description": "Worker for setting vibration level using work struct pointer."
        },
        "tty_init_dev": {
            "id": "tty_init_dev",
            "ground_truth": 1,
            "function": "tty_init_dev",
            "description": "Initializes tty device with mutex locking"
        },
        "rndis_msg_parser": {
            "id": "rndis_msg_parser",
            "ground_truth": 0,
            "function": "rndis_msg_parser",
            "description": "Message parser for RNDIS protocol"
        },
        "omap2xxx_prm_clear_mod_irqs": {
            "id": "omap2xxx_prm_clear_mod_irqs",
            "ground_truth": 0,
            "function": "omap2xxx_prm_clear_mod_irqs",
            "description": "Clears wakeup status bit for given module to re-enter idle state."
        },
        "pmic_arb_offset_v1": {
            "id": "pmic_arb_offset_v1",
            "ground_truth": 0,
            "function": "pmic_arb_offset_v1",
            "description": "Offset calculation for EE in version 1."
        },
        "sb1250_smp_init": {
            "id": "sb1250_smp_init",
            "ground_truth": 0,
            "function": "sb1250_smp_init",
            "description": "Secondary CPU SMP initialization and completion"
        },
        "e1000_resume_workarounds_pchlan": {
            "id": "e1000_resume_workarounds_pchlan",
            "ground_truth": 0,
            "function": "e1000_resume_workarounds_pchlan",
            "description": "Workarounds for sx to s0 transition on non/managed device with PCH LAN."
        },
        "xfs_refcount_lookup_eq": {
            "id": "xfs_refcount_lookup_eq",
            "ground_truth": 0,
            "function": "xfs_refcount_lookup_eq",
            "description": "Lookup record equal to bno len in btree"
        },
        "batadv_tt_cache_init": {
            "id": "batadv_tt_cache_init",
            "ground_truth": 0,
            "function": "batadv_tt_cache_init",
            "description": "Initialize tt memory object cache, return success or error number"
        },
        "of_hwspin_lock_get_id_byname": {
            "id": "of_hwspin_lock_get_id_byname",
            "ground_truth": 1,
            "function": "of_hwspin_lock_get_id_byname",
            "description": "Get global lock ID for specific hardware lock by name."
        },
        "_scsih_check_pcie_access_status": {
            "id": "_scsih_check_pcie_access_status",
            "ground_truth": 1,
            "function": "_scsih_check_pcie_access_status",
            "description": "PCIe access status check for SCSI host adapter."
        },
        "widen_string": {
            "id": "widen_string",
            "ground_truth": 0,
            "function": "widen_string",
            "description": "Handle string padding with field width and flag, return new buffer position."
        },
        "sctp_bind_addr_free": {
            "id": "sctp_bind_addr_free",
            "ground_truth": 0,
            "function": "sctp_bind_addr_free",
            "description": "Dispose sctp bind addr structure"
        },
        "ath5k_beacon_update": {
            "id": "ath5k_beacon_update",
            "ground_truth": 0,
            "function": "ath5k_beacon_update",
            "description": "Update ath5k beacon for adhoc/AP configuration"
        },
        "ww_mutex_trylock": {
            "id": "ww_mutex_trylock",
            "ground_truth": 1,
            "function": "ww_mutex_trylock",
            "description": " Acquires mutex without context, no deadlock detection."
        },
        "radeon_ring_restore": {
            "id": "radeon_ring_restore",
            "ground_truth": 0,
            "function": "radeon_ring_restore",
            "description": "Restore saved command to ring, allocate space, using radeon device and ring."
        },
        "hns_ppe_common_get_cfg": {
            "id": "hns_ppe_common_get_cfg",
            "ground_truth": 0,
            "function": "hns_ppe_common_get_cfg",
            "description": "Retrieve PPE common config struct from DSAF device with given index, return success or negative fail."
        },
        "df_v3_6_get_df_cntr_avail": {
            "id": "df_v3_6_get_df_cntr_avail",
            "ground_truth": 0,
            "function": "df_v3_6_get_df_cntr_avail",
            "description": "Count available df counters"
        },
        "dn_queue_skb": {
            "id": "dn_queue_skb",
            "ground_truth": 0,
            "function": "dn_queue_skb",
            "description": "Copy sock queue rcv skb without bh lock, allowing data to be queued to socket."
        },
        "oxu_hcd_init": {
            "id": "oxu_hcd_init",
            "ground_truth": 0,
            "function": "oxu_hcd_init",
            "description": "One-time memory state initialization function."
        },
        "kcsan_check_read_write": {
            "id": "kcsan_check_read_write",
            "ground_truth": 1,
            "function": "kcsan_check_read_write",
            "description": "Checks read/write access for race pointer address and access size."
        },
        "_InitInterrupt": {
            "id": "_InitInterrupt",
            "ground_truth": 0,
            "function": "_InitInterrupt",
            "description": "USB interface initialization function"
        },
        "fscache_readpages_cancel": {
            "id": "fscache_readpages_cancel",
            "ground_truth": 0,
            "function": "fscache_readpages_cancel",
            "description": "function cancels read allocation and unreserves page."
        },
        "pvr2_hdw_commit_setup": {
            "id": "pvr2_hdw_commit_setup",
            "ground_truth": 0,
            "function": "pvr2_hdw_commit_setup",
            "description": "Determines if control change needs committing, sets internal flag, returns true/false."
        },
        "binder_node_unlock": {
            "id": "binder_node_unlock",
            "ground_truth": 1,
            "function": "binder_node_unlock",
            "description": "Release spinlock for binder proc, acquired via binder node lock."
        },
        "release_tx_desc": {
            "id": "release_tx_desc",
            "ground_truth": 0,
            "function": "release_tx_desc",
            "description": "Clean tx descriptor on tx irq received"
        },
        "pvr2_hdw_set_cur_freq": {
            "id": "pvr2_hdw_set_cur_freq",
            "ground_truth": 0,
            "function": "pvr2_hdw_set_cur_freq",
            "description": "Set current frequency, consider driver core side effects."
        },
        "phy_get_non_dummy_port": {
            "id": "phy_get_non_dummy_port",
            "ground_truth": 0,
            "function": "phy_get_non_dummy_port",
            "description": "Returns handle to non-dummy port containing phy or null."
        },
        "show_pte": {
            "id": "show_pte",
            "ground_truth": 0,
            "function": "show_pte",
            "description": "Dump page table for address in memory"
        },
        "qeth_osn_register": {
            "id": "qeth_osn_register",
            "ground_truth": 0,
            "function": "qeth_osn_register",
            "description": "Export function for OSN."
        },
        "mpt3sas_get_sdev_by_handle": {
            "id": "mpt3sas_get_sdev_by_handle",
            "ground_truth": 1,
            "function": "mpt3sas_get_sdev_by_handle",
            "description": "Searches for SA device by address and returns object struct with adapter and handle."
        },
        "create_vtbl": {
            "id": "create_vtbl",
            "ground_truth": 0,
            "function": "create_vtbl",
            "description": "Creates a copy of volume table. Returns 0 on success and negative error code on failure."
        },
        "mpt3sas_init_warpdrive_properties": {
            "id": "mpt3sas_init_warpdrive_properties",
            "ground_truth": 0,
            "function": "mpt3sas_init_warpdrive_properties",
            "description": "Sets properties for MPT3SAS adapter and RAID device objects."
        },
        "usb_dsbr100_suspend": {
            "id": "usb_dsbr100_suspend",
            "ground_truth": 0,
            "function": "usb_dsbr100_suspend",
            "description": "Device suspension and stoppage"
        },
        "st_accel_get_settings": {
            "id": "st_accel_get_settings",
            "ground_truth": 0,
            "function": "st_accel_get_settings",
            "description": "Get sensor setting from device name buffer"
        },
        "bond_mode_name": {
            "id": "bond_mode_name",
            "ground_truth": 0,
            "function": "bond_mode_name",
            "description": "Bond mode name determination routine"
        },
        "ppc440spe_xor_set_link": {
            "id": "ppc440spe_xor_set_link",
            "ground_truth": 0,
            "function": "ppc440spe_xor_set_link",
            "description": "Sets link address in ppc440spe adma desc slot struct"
        },
        "onenand_block_isbad": {
            "id": "onenand_block_isbad",
            "ground_truth": 1,
            "function": "onenand_block_isbad",
            "description": "Checks if a block at given offset is bad in MTD interface."
        },
        "opa_vnic_set_vesw_info": {
            "id": "opa_vnic_set_vesw_info",
            "ground_truth": 0,
            "function": "opa_vnic_set_vesw_info",
            "description": "Update adapter's vesw info with provided info"
        },
        "handle_moddevtable": {
            "id": "handle_moddevtable",
            "ground_truth": 0,
            "function": "handle_moddevtable",
            "description": "Creates module alias statement and writes into mod dev table buffer."
        },
        "ipr_inquiry_page_supported": {
            "id": "ipr_inquiry_page_supported",
            "ground_truth": 0,
            "function": "ipr_inquiry_page_supported",
            "description": "Determines if inquiry page is supported, returns value if supported or struct ipr inquiry page0."
        },
        "fscrypt_initialize": {
            "id": "fscrypt_initialize",
            "ground_truth": 0,
            "function": "fscrypt_initialize",
            "description": "Initializes buffer for file encryption with cop flag."
        },
        "__cdns3_gadget_ep_clear_halt": {
            "id": "__cdns3_gadget_ep_clear_halt",
            "ground_truth": 1,
            "function": "__cdns3_gadget_ep_clear_halt",
            "description": "Clears stall on selected endpoint object after acquiring spin lock."
        },
        "orangefs_revalidate_mapping": {
            "id": "orangefs_revalidate_mapping",
            "ground_truth": 0,
            "function": "orangefs_revalidate_mapping",
            "description": "Revalidates OrangeFS file mapping."
        },
        "max31730_detect": {
            "id": "max31730_detect",
            "ground_truth": 0,
            "function": "max31730_detect",
            "description": "Returns success if device is detected, else enodev."
        },
        "qla2x00_init_firmware": {
            "id": "qla2x00_init_firmware",
            "ground_truth": 0,
            "function": "qla2x00_init_firmware",
            "description": "Initialize adapter firmware with control block and target queue"
        },
        "nanddev_pos_next_eraseblock": {
            "id": "nanddev_pos_next_eraseblock",
            "ground_truth": 0,
            "function": "nanddev_pos_next_eraseblock",
            "description": "Move position to next eraseblock in NAND device"
        },
        "irqreturn_t": {
            "id": "irqreturn_t",
            "ground_truth": 0,
            "function": "irqreturn_t",
            "description": "Callback function for FMAN exceptions with identification and IRQ status return."
        },
        "ww_acquire_init": {
            "id": "ww_acquire_init",
            "ground_truth": 1,
            "function": "ww_acquire_init",
            "description": " Initializes context to acquire multiple mutexes without deadlock."
        },
        "cachefiles_mark_object_inactive": {
            "id": "cachefiles_mark_object_inactive",
            "ground_truth": 0,
            "function": "cachefiles_mark_object_inactive",
            "description": "Mark object as inactive in cache"
        },
        "efx_test_eventq_irq": {
            "id": "efx_test_eventq_irq",
            "ground_truth": 0,
            "function": "efx_test_eventq_irq",
            "description": "Test interrupt event generation and receipt."
        },
        "quirk_disable_pxb": {
            "id": "quirk_disable_pxb",
            "ground_truth": 0,
            "function": "quirk_disable_pxb",
            "description": "Disable c0 rev restreaming to prevent corruption in Linux."
        },
        "e1000_acquire_nvm_80003es2lan": {
            "id": "e1000_acquire_nvm_80003es2lan",
            "ground_truth": 1,
            "function": "e1000_acquire_nvm_80003es2lan",
            "description": "Acquire access to e1000 nvm struct and semaphore for eeprom access."
        },
        "set_input_gain": {
            "id": "set_input_gain",
            "ground_truth": 0,
            "function": "set_input_gain",
            "description": "Input gain set to 5db per unit"
        },
        "css_rightmost_descendant": {
            "id": "css_rightmost_descendant",
            "ground_truth": 1,
            "function": "css_rightmost_descendant",
            "description": "Returns rightmost descendant of cs or po, or po if no descendant. Used for skipping subtrees during pre-order traversal."
        },
        "of_dma_route_allocate": {
            "id": "of_dma_route_allocate",
            "ground_truth": 0,
            "function": "of_dma_route_allocate",
            "description": "Allocate DMA route for controller and modify spec to set up requested route."
        },
        "serialize_against_pte_lookup": {
            "id": "serialize_against_pte_lookup",
            "ground_truth": 0,
            "function": "serialize_against_pte_lookup",
            "description": "Serialize against PTE lookup with local interrupt disabled for huge pages. Casts PMD to PTE due to format difference."
        },
        "xfs_rtalloc_query_range": {
            "id": "xfs_rtalloc_query_range",
            "ground_truth": 0,
            "function": "xfs_rtalloc_query_range",
            "description": "Finds free records in given range."
        },
        "iwl_send_prio_tbl": {
            "id": "iwl_send_prio_tbl",
            "ground_truth": 0,
            "function": "iwl_send_prio_tbl",
            "description": "Sends priority table for Intel Wireless LAN devices."
        },
        "mic_bias_event": {
            "id": "mic_bias_event",
            "ground_truth": 0,
            "function": "mic_bias_event",
            "description": "Toggle mic bias power and impedance register bit"
        },
        "dev_pm_qos_hide_latency_tolerance": {
            "id": "dev_pm_qos_hide_latency_tolerance",
            "ground_truth": 0,
            "function": "dev_pm_qos_hide_latency_tolerance",
            "description": "Hides device's latency tolerance from userspace."
        },
        "gasket_alloc_coherent_memory": {
            "id": "gasket_alloc_coherent_memory",
            "ground_truth": 0,
            "function": "gasket_alloc_coherent_memory",
            "description": "Allocate coherent memory block"
        },
        "hinic_rq_write_wqe": {
            "id": "hinic_rq_write_wqe",
            "ground_truth": 0,
            "function": "hinic_rq_write_wqe",
            "description": "Write WQE to RQ struct in Hinic RQ"
        },
        "snd_ctl_elem_add_compat": {
            "id": "snd_ctl_elem_add_compat",
            "ground_truth": 0,
            "function": "snd_ctl_elem_add_compat",
            "description": "Add/replace user control"
        },
        "emu8k_pcm_timer_func": {
            "id": "emu8k_pcm_timer_func",
            "ground_truth": 0,
            "function": "emu8k_pcm_timer_func",
            "description": "Timer interrupt handler updates period if needed."
        },
        "pvr2_i2c_basic_op": {
            "id": "pvr2_i2c_basic_op",
            "ground_truth": 0,
            "function": "pvr2_i2c_basic_op",
            "description": "Low-level i2c operation entry point for hardware."
        },
        "pcs_irq_init_chained_handler": {
            "id": "pcs_irq_init_chained_handler",
            "ground_truth": 0,
            "function": "pcs_irq_init_chained_handler",
            "description": "Initialize chained interrupt handler for PC device driver instance."
        },
        "vtime_account_kernel": {
            "id": "vtime_account_kernel",
            "ground_truth": 0,
            "function": "vtime_account_kernel",
            "description": "Common vtime APIs"
        },
        "__of_device_is_available": {
            "id": "__of_device_is_available",
            "ground_truth": 1,
            "function": "__of_device_is_available",
            "description": "Check device availability with lock, return true if status is okay or absent."
        },
        "udplite_sk_init": {
            "id": "udplite_sk_init",
            "ground_truth": 0,
            "function": "udplite_sk_init",
            "description": "Creates UDP Lite socket (sk)."
        },
        "i2c_del_adapter": {
            "id": "i2c_del_adapter",
            "ground_truth": 0,
            "function": "i2c_del_adapter",
            "description": "Unregister i2c adapter previously registered."
        },
        "eisa_unmask_irq": {
            "id": "eisa_unmask_irq",
            "ground_truth": 0,
            "function": "eisa_unmask_irq",
            "description": "IRQ request unmasking function"
        },
        "lpfc_idiag_mbxacc_read": {
            "id": "lpfc_idiag_mbxacc_read",
            "ground_truth": 0,
            "function": "lpfc_idiag_mbxacc_read",
            "description": "Reads data from mailbox access debugfs setup information struct file."
        },
        "trace_clock": {
            "id": "trace_clock",
            "ground_truth": 0,
            "function": "trace_clock",
            "description": "Trace clock with slight jitter between CPUs"
        },
        "efx_farch_rx_remove": {
            "id": "efx_farch_rx_remove",
            "ground_truth": 0,
            "function": "efx_farch_rx_remove",
            "description": "Free buffer for RX queue"
        },
        "snd_emu10k1_free_pages": {
            "id": "snd_emu10k1_free_pages",
            "ground_truth": 0,
            "function": "snd_emu10k1_free_pages",
            "description": "Frees DMA buffer from page table."
        },
        "da9063_ldo_set_mode": {
            "id": "da9063_ldo_set_mode",
            "ground_truth": 0,
            "function": "da9063_ldo_set_mode",
            "description": "Sets mode for LDOs in normal and suspend state."
        },
        "fhci_port_disable": {
            "id": "fhci_port_disable",
            "ground_truth": 0,
            "function": "fhci_port_disable",
            "description": "USB port disabled by clearing en bit in usbmod register"
        },
        "panel_bind_key": {
            "id": "panel_bind_key",
            "ground_truth": 0,
            "function": "panel_bind_key",
            "description": "Binds key to signal name, returns pointer if successful."
        },
        "get_index": {
            "id": "get_index",
            "ground_truth": 0,
            "function": "get_index",
            "description": "Assigns stream index number based on v4l2 dev note. New device not yet registered in video device array, but obtains minor number."
        },
        "init_ov_sensor": {
            "id": "init_ov_sensor",
            "ground_truth": 0,
            "function": "init_ov_sensor",
            "description": "Resets omnivision sensor and syncs i2c."
        },
        "bnx2x_test_intr": {
            "id": "bnx2x_test_intr",
            "ground_truth": 0,
            "function": "bnx2x_test_intr",
            "description": "Empty ramrod sent on first queue"
        },
        "f_eeprom_wen": {
            "id": "f_eeprom_wen",
            "ground_truth": 0,
            "function": "f_eeprom_wen",
            "description": "Enables config EEPROM writes if supported."
        },
        "qed_fw_asserts_dump": {
            "id": "qed_fw_asserts_dump",
            "ground_truth": 0,
            "function": "qed_fw_asserts_dump",
            "description": "Perform fw asserts dump, return size in dwords"
        },
        "snapshot_additional_pages": {
            "id": "snapshot_additional_pages",
            "ground_truth": 0,
            "function": "snapshot_additional_pages",
            "description": "Estimates extra pages needed for hibernation image setup in zone"
        },
        "omap_pm_wakeup_setup": {
            "id": "omap_pm_wakeup_setup",
            "ground_truth": 0,
            "function": "omap_pm_wakeup_setup",
            "description": "Board-specific configuration of wakeup event in helper function. May move to board-specific file."
        },
        "tcp_fast_parse_options": {
            "id": "tcp_fast_parse_options",
            "ground_truth": 0,
            "function": "tcp_fast_parse_options",
            "description": "Fast parsing of TCP options, prioritizing timestamps, with fallback to standard TCP parsing."
        },
        "_nfs_display_fhandle": {
            "id": "_nfs_display_fhandle",
            "ground_truth": 0,
            "function": "_nfs_display_fhandle",
            "description": "Displays NFS file handle on console for debugging."
        },
        "ib_get_rmpp_resptime": {
            "id": "ib_get_rmpp_resptime",
            "ground_truth": 0,
            "function": "ib_get_rmpp_resptime",
            "description": "Returns RMPP response time struct for IB RMPP header."
        },
        "port_r_cnt": {
            "id": "port_r_cnt",
            "ground_truth": 0,
            "function": "port_r_cnt",
            "description": "Periodically reads port counter to avoid overflow, returns non-zero on success."
        },
        "mtk_dai_hostless_startup": {
            "id": "mtk_dai_hostless_startup",
            "ground_truth": 0,
            "function": "mtk_dai_hostless_startup",
            "description": "dai ops for mtk hostless startup"
        },
        "gelic_descr_get_status": {
            "id": "gelic_descr_get_status",
            "ground_truth": 0,
            "function": "gelic_descr_get_status",
            "description": "Return status of descriptor in gelic descr struct."
        },
        "gma_resume_display": {
            "id": "gma_resume_display",
            "ground_truth": 0,
            "function": "gma_resume_display",
            "description": "Resume display hardware state and enable struct pci dev pdev."
        },
        "get_mtrr_state": {
            "id": "get_mtrr_state",
            "ground_truth": 0,
            "function": "get_mtrr_state",
            "description": "Retrieve MTRR state for CPU into state"
        },
        "ath5k_eeprom_bin2freq": {
            "id": "ath5k_eeprom_bin2freq",
            "ground_truth": 0,
            "function": "ath5k_eeprom_bin2freq",
            "description": "Translate binary channel to frequency from eeprom"
        },
        "gfs2_glock_nq_num": {
            "id": "gfs2_glock_nq_num",
            "ground_truth": 1,
            "function": "gfs2_glock_nq_num",
            "description": "Acquire glock based on lock number in GFS2 filesystem."
        },
        "lsm_ipc_alloc": {
            "id": "lsm_ipc_alloc",
            "ground_truth": 0,
            "function": "lsm_ipc_alloc",
            "description": "Allocate composite IPC blob for modules, return enomem if memory cannot be allocated."
        },
        "callback": {
            "id": "callback",
            "ground_truth": 0,
            "function": "callback",
            "description": "External function for driver to allocate dbdma channel with device ID, callback called after allocation."
        },
        "qenable": {
            "id": "qenable",
            "ground_truth": 0,
            "function": "qenable",
            "description": "Enable NAPI and interrupt on response queue"
        },
        "qcom_scm_restore_sec_cfg_available": {
            "id": "qcom_scm_restore_sec_cfg_available",
            "ground_truth": 1,
            "function": "qcom_scm_restore_sec_cfg_available",
            "description": "Check if secure env supports restore cfg interface, return true/false, no args."
        },
        "cxlflash_devnode": {
            "id": "cxlflash_devnode",
            "ground_truth": 1,
            "function": "cxlflash_devnode",
            "description": " Provides devtmpfs for cxlflash device with access verification and device node path."
        },
        "execute_only_pkey": {
            "id": "execute_only_pkey",
            "ground_truth": 0,
            "function": "execute_only_pkey",
            "description": "Dedicate protection key for execute-only use."
        },
        "devm_hwspin_lock_request": {
            "id": "devm_hwspin_lock_request",
            "ground_truth": 1,
            "function": "devm_hwspin_lock_request",
            "description": "Request hwspinlock for managed device dynamically"
        },
        "nilfs_readpage": {
            "id": "nilfs_readpage",
            "ground_truth": 0,
            "function": "nilfs_readpage",
            "description": "Reads page from Nilfs file struct using readpage method"
        },
        "memdup_user_nul": {
            "id": "memdup_user_nul",
            "ground_truth": 0,
            "function": "memdup_user_nul",
            "description": "Duplicate user memory region, nul terminate, handle errors"
        },
        "_scsih_scsi_lookup_find_by_target": {
            "id": "_scsih_scsi_lookup_find_by_target",
            "ground_truth": 1,
            "function": "_scsih_scsi_lookup_find_by_target",
            "description": "Search for matching channel ID in SCSI lookup array, return adapter struct if found."
        },
        "fh_verify": {
            "id": "fh_verify",
            "ground_truth": 1,
            "function": "fh_verify",
            "description": " Filehandle lookup, access check, set task credential."
        },
        "imx_media_find_mbus_format": {
            "id": "imx_media_find_mbus_format",
            "ground_truth": 0,
            "function": "imx_media_find_mbus_format",
            "description": "Searches pixel format array for medium bus code and returns matching code."
        },
        "svc_rdma_recv_ctxt_put": {
            "id": "svc_rdma_recv_ctxt_put",
            "ground_truth": 0,
            "function": "svc_rdma_recv_ctxt_put",
            "description": "Return RDMA recv ctxt to free list in svcxprt rdma struct."
        },
        "evm_verifyxattr": {
            "id": "evm_verifyxattr",
            "ground_truth": 1,
            "function": "evm_verifyxattr",
            "description": "Verify xattr integrity, calculate HMAC, compare with stored security EVM xattr, use xattr value for performance."
        },
        "__complete_background_work": {
            "id": "__complete_background_work",
            "ground_truth": 0,
            "function": "__complete_background_work",
            "description": "Clears pending work flag and removes destination cblock entry for promotion-free."
        },
        "pcmcia_fixup_vpp": {
            "id": "pcmcia_fixup_vpp",
            "ground_truth": 0,
            "function": "pcmcia_fixup_vpp",
            "description": "pcmcia_fixup_vpp\" sets new voltage level for pcmcia device driver."
        },
        "sd_stop0": {
            "id": "sd_stop0",
            "ground_truth": 0,
            "function": "sd_stop0",
            "description": "Function called on streamoff and disconnect with alt."
        },
        "au1300_pinfunc_to_gpio": {
            "id": "au1300_pinfunc_to_gpio",
            "ground_truth": 0,
            "function": "au1300_pinfunc_to_gpio",
            "description": "Pin management function for au1300 architecture"
        },
        "iowarrior_disconnect": {
            "id": "iowarrior_disconnect",
            "ground_truth": 0,
            "function": "iowarrior_disconnect",
            "description": "USB core calls iowarrior_disconnect when device is removed"
        },
        "sclp_init_mask": {
            "id": "sclp_init_mask",
            "ground_truth": 0,
            "function": "sclp_init_mask",
            "description": "Initiates mask request, calculates if non-zero, returns success/non-zero on completion."
        },
        "edge_bulk_in_callback": {
            "id": "edge_bulk_in_callback",
            "ground_truth": 0,
            "function": "edge_bulk_in_callback",
            "description": "Callback for bulk in endpoint data reception"
        },
        "apm_cpu_idle": {
            "id": "apm_cpu_idle",
            "ground_truth": 0,
            "function": "apm_cpu_idle",
            "description": "APM Linux function for CPU idling with BIOS power management based on system idle."
        },
        "config_tx_flow_control": {
            "id": "config_tx_flow_control",
            "ground_truth": 0,
            "function": "config_tx_flow_control",
            "description": "Flow control configuration function"
        },
        "sys_pidfd_getfd": {
            "id": "sys_pidfd_getfd",
            "ground_truth": 1,
            "function": "sys_pidfd_getfd",
            "description": "Get file descriptor from another process based on pidfd and number. Requires access to target process's file descriptor."
        },
        "down_killable": {
            "id": "down_killable",
            "ground_truth": 1,
            "function": "down_killable",
            "description": " Semaphore acquisition attempt, task sleep if unavailable."
        },
        "i40iw_build_timer_list": {
            "id": "i40iw_build_timer_list",
            "ground_truth": 0,
            "function": "i40iw_build_timer_list",
            "description": "Add node to timer list struct for accelerated/non-accelerated list"
        },
        "free_notifier": {
            "id": "free_notifier",
            "ground_truth": 0,
            "function": "free_notifier",
            "description": "Callback for managing MMU notifier memory allocation"
        },
        "find_seams": {
            "id": "find_seams",
            "ground_truth": 0,
            "function": "find_seams",
            "description": "Find optimal seams to split tiles and minimize sampling position fractional part."
        },
        "dwc2_hcd_qh_unlink": {
            "id": "dwc2_hcd_qh_unlink",
            "ground_truth": 0,
            "function": "dwc2_hcd_qh_unlink",
            "description": "Removes qh from schedule, no memory freed, in dwc2 hsotg hcd state."
        },
        "ima_post_key_create_or_update": {
            "id": "ima_post_key_create_or_update",
            "ground_truth": 0,
            "function": "ima_post_key_create_or_update",
            "description": "create or update asymmetric key with measured payload data and keyring."
        },
        "snd_soc_dapm_force_enable_pin_unlocked": {
            "id": "snd_soc_dapm_force_enable_pin_unlocked",
            "ground_truth": 1,
            "function": "snd_soc_dapm_force_enable_pin_unlocked",
            "description": "Forces pin to enable, regardless of state. Used for microphone bias supply."
        },
        "hw_alloc_pkt": {
            "id": "hw_alloc_pkt",
            "ground_truth": 0,
            "function": "hw_alloc_pkt",
            "description": "Allocate descriptor for transmission, return success or number of descriptor."
        },
        "drm_ioctl_flags": {
            "id": "drm_ioctl_flags",
            "ground_truth": 1,
            "function": "drm_ioctl_flags",
            "description": "Check ioctl, return permission flag, used by vmwgfx driver."
        },
        "css_task_iter_start": {
            "id": "css_task_iter_start",
            "ground_truth": 0,
            "function": "css_task_iter_start",
            "description": "_start initiates iteration through cs task."
        },
        "clear_bit": {
            "id": "clear_bit",
            "ground_truth": 0,
            "function": "clear_bit",
            "description": "Atomic function to clear a bit in memory without memory barrier"
        },
        "btrfs_drop_pages": {
            "id": "btrfs_drop_pages",
            "ground_truth": 0,
            "function": "btrfs_drop_pages",
            "description": "Unlocks pages after Btrfs file write."
        },
        "_set_module_autoidle": {
            "id": "_set_module_autoidle",
            "ground_truth": 0,
            "function": "_set_module_autoidle",
            "description": " Updates module autoidle bit to gate internal clock when not in use."
        },
        "hw_atl_tps_tx_desc_rate_x_set": {
            "id": "hw_atl_tps_tx_desc_rate_x_set",
            "ground_truth": 0,
            "function": "hw_atl_tps_tx_desc_rate_x_set",
            "description": "Sets integral value for tx packet scheduler descriptor rate."
        },
        "ucb1x00_ts_read_xpos": {
            "id": "ucb1x00_ts_read_xpos",
            "ground_truth": 0,
            "function": "ucb1x00_ts_read_xpos",
            "description": "Switches mode for faster response time in plate measurement."
        },
        "ip_vs_bypass_xmit": {
            "id": "ip_vs_bypass_xmit",
            "ground_truth": 0,
            "function": "ip_vs_bypass_xmit",
            "description": "Bypass transmitter for unavailable destination in cache cluster."
        },
        "mei_hbm2slots": {
            "id": "mei_hbm2slots",
            "ground_truth": 0,
            "function": "mei_hbm2slots",
            "description": "Get slot number from HBM message length and MEI message header size."
        },
        "i40e_alloc_asq_bufs": {
            "id": "i40e_alloc_asq_bufs",
            "ground_truth": 0,
            "function": "i40e_alloc_asq_bufs",
            "description": "Allocate empty buffer structs for send queue in i40e hardware."
        },
        "ath5k_setup_rate_powertable": {
            "id": "ath5k_setup_rate_powertable",
            "ground_truth": 0,
            "function": "ath5k_setup_rate_powertable",
            "description": "Set up rate power table for given tx power struct in ath5k hw with max power limit."
        },
        "st_ll_sleep_state": {
            "id": "st_ll_sleep_state",
            "ground_truth": 0,
            "function": "st_ll_sleep_state",
            "description": "Sleep state function for pm packet in st core."
        },
        "nd_pfn_validate": {
            "id": "nd_pfn_validate",
            "ground_truth": 1,
            "function": "nd_pfn_validate",
            "description": "Validate and read info block, return indeterminate buffer content if validation fails, coherent info block otherwise."
        },
        "rds_ib_recv_exit": {
            "id": "rds_ib_recv_exit",
            "ground_truth": 0,
            "function": "rds_ib_recv_exit",
            "description": "RDS ib recv exit function for Reliable Datagram Sockets"
        },
        "drm_mode_equal_no_clocks_no_stereo": {
            "id": "drm_mode_equal_no_clocks_no_stereo",
            "ground_truth": 1,
            "function": "drm_mode_equal_no_clocks_no_stereo",
            "description": "Test mode for equivalent display modes without clock or stereo check."
        },
        "ixgbe_acquire_swfw_sync_X540": {
            "id": "ixgbe_acquire_swfw_sync_X540",
            "ground_truth": 1,
            "function": "ixgbe_acquire_swfw_sync_X540",
            "description": "Acquires swfw semaphore through sync register for specified function and components."
        },
        "nq_m_sync": {
            "id": "nq_m_sync",
            "ground_truth": 1,
            "function": "nq_m_sync",
            "description": "Acquire multiple glocks in deadlock-free order."
        },
        "ns_capable_noaudit": {
            "id": "ns_capable_noaudit",
            "ground_truth": 1,
            "function": "ns_capable_noaudit",
            "description": "Check current task's unaudited superior capability, return true if available, false if not."
        },
        "gpio_twl4030_write": {
            "id": "gpio_twl4030_write",
            "ground_truth": 0,
            "function": "gpio_twl4030_write",
            "description": "Configure twl4030 gpio module register"
        },
        "bitmap_zalloc": {
            "id": "bitmap_zalloc",
            "ground_truth": 0,
            "function": "bitmap_zalloc",
            "description": "Bitmap allocation and deallocation in lib bitmap to prevent circular dependency."
        },
        "irq_force_complete_move": {
            "id": "irq_force_complete_move",
            "ground_truth": 0,
            "function": "irq_force_complete_move",
            "description": "Force complete move of IRQs with lock and interrupt disabled"
        },
        "hvcs_set_pi": {
            "id": "hvcs_set_pi",
            "ground_truth": 0,
            "function": "hvcs_set_pi",
            "description": "Called only from hvcs get pi"
        },
        "read_block": {
            "id": "read_block",
            "ground_truth": 0,
            "function": "read_block",
            "description": "Method added in future for read_block function."
        },
        "local_lock_irqsave": {
            "id": "local_lock_irqsave",
            "ground_truth": 1,
            "function": "local_lock_irqsave",
            "description": "Acquire local lock, save and disable interrupt flag"
        },
        "cxl_unmap_afu_irq": {
            "id": "cxl_unmap_afu_irq",
            "ground_truth": 0,
            "function": "cxl_unmap_afu_irq",
            "description": "Unmap IRQ handler."
        },
        "batadv_iv_ogm_orig_dump_bucket": {
            "id": "batadv_iv_ogm_orig_dump_bucket",
            "ground_truth": 0,
            "function": "batadv_iv_ogm_orig_dump_bucket",
            "description": "Dump originator bucket into netlink message for request with port and sequence number."
        },
        "set_vbus": {
            "id": "set_vbus",
            "ground_truth": 0,
            "function": "set_vbus",
            "description": "Peripheral ignored, effective for device"
        },
        "xive_get_irqchip_state": {
            "id": "xive_get_irqchip_state",
            "ground_truth": 0,
            "function": "xive_get_irqchip_state",
            "description": "Function called with locked irq descriptor"
        },
        "hid_reset": {
            "id": "hid_reset",
            "ground_truth": 0,
            "function": "hid_reset",
            "description": "Device reset/clear halt workqueue routine."
        },
        "_ocp_softreset": {
            "id": "_ocp_softreset",
            "ground_truth": 0,
            "function": "_ocp_softreset",
            "description": "Resets omap hwmod via ocp sysconfig bit, requires enabled hwmod, returns enoent."
        },
        "onenand_check_lock_status": {
            "id": "onenand_check_lock_status",
            "ground_truth": 1,
            "function": "onenand_check_lock_status",
            "description": "Check lock status of onenand chip interface"
        },
        "IIO_CONST_ATTR": {
            "id": "IIO_CONST_ATTR",
            "ground_truth": 0,
            "function": "IIO_CONST_ATTR",
            "description": "User selects frequency within specific range matched by low pass filter"
        },
        "apl_pmi2mem": {
            "id": "apl_pmi2mem",
            "ground_truth": 0,
            "function": "apl_pmi2mem",
            "description": "Decode and compute rank, bank, row, and column in second stage."
        },
        "clockevents_exchange_device": {
            "id": "clockevents_exchange_device",
            "ground_truth": 1,
            "function": "clockevents_exchange_device",
            "description": " Exchange clock device with lock and interrupt held. Can release or request new device."
        },
        "ice_aq_cfg_lldp_mib_change": {
            "id": "ice_aq_cfg_lldp_mib_change",
            "ground_truth": 0,
            "function": "ice_aq_cfg_lldp_mib_change",
            "description": "Enable/disable event posting on LLDP MIB change"
        },
        "private_mapping_ok": {
            "id": "private_mapping_ok",
            "ground_truth": 0,
            "function": "private_mapping_ok",
            "description": "Private mapping requires MMU, else cannot be done in place."
        },
        "mwifiex_11h_get_csa_closed_channel": {
            "id": "mwifiex_11h_get_csa_closed_channel",
            "ground_truth": 0,
            "function": "mwifiex_11h_get_csa_closed_channel",
            "description": "Retrieve closed channel for channel switch announcement."
        },
        "ssb_read8": {
            "id": "ssb_read8",
            "ground_truth": 0,
            "function": "ssb_read8",
            "description": "Device register read/write function for mmio"
        },
        "vdev_init": {
            "id": "vdev_init",
            "ground_truth": 0,
            "function": "vdev_init",
            "description": "Module initialization and setup"
        },
        "auxio_set_lte": {
            "id": "auxio_set_lte",
            "ground_truth": 0,
            "function": "auxio_set_lte",
            "description": "Enables or disables LTE link test on Auxio."
        },
        "ice_xsk_pool_enable": {
            "id": "ice_xsk_pool_enable",
            "ground_truth": 0,
            "function": "ice_xsk_pool_enable",
            "description": "Enables buffer pool region for a specific queue ID."
        },
        "fwcap_to_speed": {
            "id": "fwcap_to_speed",
            "ground_truth": 0,
            "function": "fwcap_to_speed",
            "description": "Returns highest port speed capability in mb"
        },
        "radeon_fence_schedule_check": {
            "id": "radeon_fence_schedule_check",
            "ground_truth": 1,
            "function": "radeon_fence_schedule_check",
            "description": "Schedule delayed work to check for lockup in Radeon device with specified ring index."
        },
        "amba_device_put": {
            "id": "amba_device_put",
            "ground_truth": 0,
            "function": "amba_device_put",
            "description": "Put amba device struct to put."
        },
        "v4l2_fill_mbus_format_mplane": {
            "id": "v4l2_fill_mbus_format_mplane",
            "ground_truth": 0,
            "function": "v4l2_fill_mbus_format_mplane",
            "description": "Fill v4l2 mbus framefmt from v4l2 pix format mplane struct"
        },
        "msc_buffer_free": {
            "id": "msc_buffer_free",
            "ground_truth": 1,
            "function": "msc_buffer_free",
            "description": "Free storage buffer for msc with mutex serialization."
        },
        "uclogic_params_cleanup": {
            "id": "uclogic_params_cleanup",
            "ground_truth": 0,
            "function": "uclogic_params_cleanup",
            "description": "Frees resources for uclogic params tablet interface. Can be called repeatedly. Input parameter cannot be null."
        },
        "dx_move_dirents": {
            "id": "dx_move_dirents",
            "ground_truth": 0,
            "function": "dx_move_dirents",
            "description": "Moves count entry between memory locations and returns pointer."
        },
        "sunsab_send_xchar": {
            "id": "sunsab_send_xchar",
            "ground_truth": 0,
            "function": "sunsab_send_xchar",
            "description": "Port lock not held in sunsab_send_xchar"
        },
        "xen_arch_setup": {
            "id": "xen_arch_setup",
            "ground_truth": 0,
            "function": "xen_arch_setup",
            "description": "Not used for hvm domain setup"
        },
        "cpu_get_fpu_id": {
            "id": "cpu_get_fpu_id",
            "ground_truth": 0,
            "function": "cpu_get_fpu_id",
            "description": "Get FPU implementation revision"
        },
        "pmcraid_check_ioctl_buffer": {
            "id": "pmcraid_check_ioctl_buffer",
            "ground_truth": 1,
            "function": "pmcraid_check_ioctl_buffer",
            "description": "Check user buffer access, return error if issue, copy ioctl header, return success or zero."
        },
        "gfs2_check_sb": {
            "id": "gfs2_check_sb",
            "ground_truth": 1,
            "function": "gfs2_check_sb",
            "description": "Checks GFS2 superblock version and structure size."
        },
        "mmput_async": {
            "id": "mmput_async",
            "ground_truth": 0,
            "function": "mmput_async",
            "description": "Async slow path for atomic context in mmput"
        },
        "wmi_addr_remap": {
            "id": "wmi_addr_remap",
            "ground_truth": 0,
            "function": "wmi_addr_remap",
            "description": "Remaps internal address, returns invalid mapping."
        },
        "sd_zbc_check_zoned_characteristics": {
            "id": "sd_zbc_check_zoned_characteristics",
            "ground_truth": 1,
            "function": "sd_zbc_check_zoned_characteristics",
            "description": "Check zoned block device characteristics, read VPD page B6, ensure unconstrained read, using SCSI disk SDKP target disk."
        },
        "da9211_i2c_probe": {
            "id": "da9211_i2c_probe",
            "ground_truth": 0,
            "function": "da9211_i2c_probe",
            "description": "I2C driver interface function"
        },
        "spider_net_prepare_tx_descr": {
            "id": "spider_net_prepare_tx_descr",
            "ground_truth": 0,
            "function": "spider_net_prepare_tx_descr",
            "description": "Fill tx descriptor with skb data, copy if needed, for Spider Net card."
        },
        "p_start": {
            "id": "p_start",
            "ground_truth": 1,
            "function": "p_start",
            "description": "Starts depth-first traversal of profile tree, acquires first n lock, fills loff po, finds first profile under current namespace."
        },
        "drm_mode_is_stereo": {
            "id": "drm_mode_is_stereo",
            "ground_truth": 1,
            "function": "drm_mode_is_stereo",
            "description": "Check if DRM display mode is stereo (side by side)"
        },
        "kvm_pmi_trigger_fn": {
            "id": "kvm_pmi_trigger_fn",
            "ground_truth": 0,
            "function": "kvm_pmi_trigger_fn",
            "description": " general purpose and fixed counters. GP counters stored in gp counter struct, fixed counters in fixed counter struct."
        },
        "at91_vbus_session": {
            "id": "at91_vbus_session",
            "ground_truth": 0,
            "function": "at91_vbus_session",
            "description": "Turn on ready devices when vbus is present."
        },
        "eeprom_writeKey": {
            "id": "eeprom_writeKey",
            "ground_truth": 0,
            "function": "eeprom_writeKey",
            "description": "Unlock Skystar2 card using eeprom_writeKey function."
        },
        "mma9551_set_power_state": {
            "id": "mma9551_set_power_state",
            "ground_truth": 0,
            "function": "mma9551_set_power_state",
            "description": "Set device power state using runtime pm, suspend after delay."
        },
        "find_ei": {
            "id": "find_ei",
            "ground_truth": 0,
            "function": "find_ei",
            "description": "Locates type info for specific element in QMI message."
        },
        "qla4xxx_find_free_chap_index": {
            "id": "qla4xxx_find_free_chap_index",
            "ground_truth": 1,
            "function": "qla4xxx_find_free_chap_index",
            "description": "Find first free chap index in table, acquire chap lock."
        },
        "orion5x_sata_init": {
            "id": "orion5x_sata_init",
            "ground_truth": 0,
            "function": "orion5x_sata_init",
            "description": "Initialize SATA controller on Orion5x SoC."
        },
        "process_one_iomb": {
            "id": "process_one_iomb",
            "ground_truth": 0,
            "function": "process_one_iomb",
            "description": "Process outbound queue memory block for PM8001 HBA card."
        },
        "set_tx_buff_desc_addr_low_0": {
            "id": "set_tx_buff_desc_addr_low_0",
            "ground_truth": 0,
            "function": "set_tx_buff_desc_addr_low_0",
            "description": "Sets the low address of the transmit buffer descriptor."
        },
        "scsi_report_lun_change": {
            "id": "scsi_report_lun_change",
            "ground_truth": 0,
            "function": "scsi_report_lun_change",
            "description": "Sets flag for unit attention on same target devices"
        },
        "intel_gvt_reset_vgpu_locked": {
            "id": "intel_gvt_reset_vgpu_locked",
            "ground_truth": 1,
            "function": "intel_gvt_reset_vgpu_locked",
            "description": "Reset virtual GPU through device model or GT reset, caller must hold lock."
        },
        "comedi_8254_set_busy": {
            "id": "comedi_8254_set_busy",
            "ground_truth": 0,
            "function": "comedi_8254_set_busy",
            "description": "Clears busy flag for i8254 timer counter."
        },
        "fault_in_user_writeable": {
            "id": "fault_in_user_writeable",
            "ground_truth": 1,
            "function": "fault_in_user_writeable",
            "description": "User address rw access fault fixup, atomic write, no non-destructive write implementation"
        },
        "drm_pci_free": {
            "id": "drm_pci_free",
            "ground_truth": 0,
            "function": "drm_pci_free",
            "description": "Free PCI consistent memory block in DRM device using DMA handle"
        },
        "tegra_dc_state_setup_clock": {
            "id": "tegra_dc_state_setup_clock",
            "ground_truth": 1,
            "function": "tegra_dc_state_setup_clock",
            "description": "Clock settings checked and stored in atomic state for display controller"
        },
        "get_rvt_head": {
            "id": "get_rvt_head",
            "ground_truth": 0,
            "function": "get_rvt_head",
            "description": "Get head index of circular buffer for request queue entry in RVT struct."
        },
        "_add_link": {
            "id": "_add_link",
            "ground_truth": 1,
            "function": "_add_link",
            "description": "Add interconnect between two IP blocks using struct omap hwmod link record."
        },
        "scc_rxint": {
            "id": "scc_rxint",
            "ground_truth": 0,
            "function": "scc_rxint",
            "description": "Interrupt handler for receiver"
        },
        "snd_hda_check_amp_caps": {
            "id": "snd_hda_check_amp_caps",
            "ground_truth": 1,
            "function": "snd_hda_check_amp_caps",
            "description": "Check amp capability for given widget in HD audio codec."
        },
        "__udp4_lib_mcast_demux_lookup": {
            "id": "__udp4_lib_mcast_demux_lookup",
            "ground_truth": 0,
            "function": "__udp4_lib_mcast_demux_lookup",
            "description": "Demux multicast with single matching socket, return null if multiple sockets found."
        },
        "adf_enable_vf2pf_comms": {
            "id": "adf_enable_vf2pf_comms",
            "ground_truth": 0,
            "function": "adf_enable_vf2pf_comms",
            "description": "Enables vf to pf comms for adf accel dev."
        },
        "usb_lock_device_for_reset": {
            "id": "usb_lock_device_for_reset",
            "ground_truth": 1,
            "function": "usb_lock_device_for_reset",
            "description": " Acquire USB device lock cautiously, fails if device not attached/suspended or iface not present."
        },
        "fixup_owner": {
            "id": "fixup_owner",
            "ground_truth": 1,
            "function": "fixup_owner",
            "description": "Cleanup pi state and handle race condition after locking rt mutex"
        },
        "qib_free_data": {
            "id": "qib_free_data",
            "ground_truth": 0,
            "function": "qib_free_data",
            "description": "Free allocated data at close"
        },
        "tomoyo_update_path_number_acl": {
            "id": "tomoyo_update_path_number_acl",
            "ground_truth": 0,
            "function": "tomoyo_update_path_number_acl",
            "description": "Updates path number ACL with permission and parameter."
        },
        "find_dir_range": {
            "id": "find_dir_range",
            "ground_truth": 0,
            "function": "find_dir_range",
            "description": "Directory replay with standard and range items in log"
        },
        "ssusb_host_enable": {
            "id": "ssusb_host_enable",
            "ground_truth": 0,
            "function": "ssusb_host_enable",
            "description": "Configures port for future use"
        },
        "xfs_attr_remove_args": {
            "id": "xfs_attr_remove_args",
            "ground_truth": 0,
            "function": "xfs_attr_remove_args",
            "description": "Remove specified attribute from args."
        },
        "picolcd_fb_update_tile": {
            "id": "picolcd_fb_update_tile",
            "ground_truth": 0,
            "function": "picolcd_fb_update_tile",
            "description": "Update display with translated tile in framebuffer"
        },
        "blk_queue_max_write_same_sectors": {
            "id": "blk_queue_max_write_same_sectors",
            "ground_truth": 0,
            "function": "blk_queue_max_write_same_sectors",
            "description": "Set max sector for single write request queue"
        },
        "ice_flow_rem_prof_sync": {
            "id": "ice_flow_rem_prof_sync",
            "ground_truth": 1,
            "function": "ice_flow_rem_prof_sync",
            "description": "Remove flow profile assumption with lock acquisition for hardware structure and classification stage."
        },
        "cxlflash_ioctl": {
            "id": "cxlflash_ioctl",
            "ground_truth": 1,
            "function": "cxlflash_ioctl",
            "description": "Ioctl handler for driver read/write semaphore, ensures thread safety"
        },
        "emulate_umip_insn": {
            "id": "emulate_umip_insn",
            "ground_truth": 0,
            "function": "emulate_umip_insn",
            "description": "Emulate UMIP instruction, return dummy value, save result in data, result size specified."
        },
        "ubi_bitflip_check": {
            "id": "ubi_bitflip_check",
            "ground_truth": 1,
            "function": "ubi_bitflip_check",
            "description": "Check eraseblock for bitflips and scrub if necessary"
        },
        "gsp_send": {
            "id": "gsp_send",
            "ground_truth": 0,
            "function": "gsp_send",
            "description": "Sends USB packet to tty, checks completeness and boundary, returns error if incomplete or not sent."
        },
        "mutex_lock_interruptible": {
            "id": "mutex_lock_interruptible",
            "ground_truth": 1,
            "function": "mutex_lock_interruptible",
            "description": "Acquires interruptible mutex lock, returns if signal received while sleeping."
        },
        "typec_partner_set_identity": {
            "id": "typec_partner_set_identity",
            "ground_truth": 0,
            "function": "typec_partner_set_identity",
            "description": "Report USB power delivery identity result for partner device."
        },
        "rtl8192_process_phyinfo": {
            "id": "rtl8192_process_phyinfo",
            "ground_truth": 0,
            "function": "rtl8192_process_phyinfo",
            "description": "Prevent increase of rssi evm total value in sliding window during s3 s4 return"
        },
        "bfa_uf_free": {
            "id": "bfa_uf_free",
            "ground_truth": 0,
            "function": "bfa_uf_free",
            "description": "Frees unsolicited frame in BFA param."
        },
        "mips_cm_lock_other": {
            "id": "mips_cm_lock_other",
            "ground_truth": 1,
            "function": "mips_cm_lock_other",
            "description": " Locks access to configure redirect other region for local core VP based on CM revision. Must be called before using register block to target specified cluster core VP."
        },
        "btc8821a2ant_bt_rssi_state": {
            "id": "btc8821a2ant_bt_rssi_state",
            "ground_truth": 0,
            "function": "btc8821a2ant_bt_rssi_state",
            "description": "local function\" to define the function's prototype. This function is used to retrieve the RSSI state of a Bluetooth device with the model number btc8821a2ant."
        },
        "__tree_mod_log_insert": {
            "id": "__tree_mod_log_insert",
            "ground_truth": 0,
            "function": "__tree_mod_log_insert",
            "description": " inserts new root node or affected block in log node leaf sequence."
        },
        "hci_send_sco": {
            "id": "hci_send_sco",
            "ground_truth": 0,
            "function": "hci_send_sco",
            "description": "Send SCO data"
        },
        "hfcpci_setmode": {
            "id": "hfcpci_setmode",
            "ground_truth": 0,
            "function": "hfcpci_setmode",
            "description": "Sets mode to NT or TE."
        },
        "step_into": {
            "id": "step_into",
            "ground_truth": 0,
            "function": "step_into",
            "description": "Check link necessity, cache for efficiency, avoid inode op."
        },
        "fsmc_write_buf": {
            "id": "fsmc_write_buf",
            "ground_truth": 0,
            "function": "fsmc_write_buf",
            "description": "Writes data buffer to host FSMC NAND controller."
        },
        "detect_intel_iommu": {
            "id": "detect_intel_iommu",
            "ground_truth": 0,
            "function": "detect_intel_iommu",
            "description": "Intel IOMMU detection function"
        },
        "activate_mm": {
            "id": "activate_mm",
            "ground_truth": 0,
            "function": "activate_mm",
            "description": "Activates new mm context after setting current value."
        },
        "ov5693_read_reg": {
            "id": "ov5693_read_reg",
            "ground_truth": 0,
            "function": "ov5693_read_reg",
            "description": "I2C read/write operation"
        },
        "match_futex": {
            "id": "match_futex",
            "ground_truth": 1,
            "function": "match_futex",
            "description": "Check if futex keys match, union keys if not."
        },
        "smk_ipv6_port_check": {
            "id": "smk_ipv6_port_check",
            "ground_truth": 1,
            "function": "smk_ipv6_port_check",
            "description": "Check IPv6 port access for socket and address, update port list entry with action taken."
        },
        "ubifs_read_superblock": {
            "id": "ubifs_read_superblock",
            "ground_truth": 1,
            "function": "ubifs_read_superblock",
            "description": "Read and check superblock, create default if empty, return success or error."
        },
        "ndesc_get_rx_status": {
            "id": "ndesc_get_rx_status",
            "ground_truth": 0,
            "function": "ndesc_get_rx_status",
            "description": "Verifies incoming frame errors and updates multicast stats, returns good frames only."
        },
        "ipr_lock_and_done": {
            "id": "ipr_lock_and_done",
            "ground_truth": 1,
            "function": "ipr_lock_and_done",
            "description": "Acquire lock, complete command, return none, use struct ipr cmnd and ipr command struct."
        },
        "ice_flow_assoc_prof": {
            "id": "ice_flow_assoc_prof",
            "ground_truth": 1,
            "function": "ice_flow_assoc_prof",
            "description": "Associate VSI with flow profile assumption, caller has lock and validated handle, using hardware pointer."
        },
        "vxge_hw_ring_rxd_1b_info_get": {
            "id": "vxge_hw_ring_rxd_1b_info_get",
            "ground_truth": 0,
            "function": "vxge_hw_ring_rxd_1b_info_get",
            "description": "Retrieve extended info for completed receive descriptor in 1b mode"
        },
        "rt_mutex_cleanup_proxy_lock": {
            "id": "rt_mutex_cleanup_proxy_lock",
            "ground_truth": 1,
            "function": "rt_mutex_cleanup_proxy_lock",
            "description": " Cleanup failed lock acquisition attempt for rt mutex start/wait proxy lock."
        },
        "efa_com_aenq_intr_handler": {
            "id": "efa_com_aenq_intr_handler",
            "ground_truth": 0,
            "function": "efa_com_aenq_intr_handler",
            "description": "aenq interrupt handler for async event notification queue."
        },
        "rxrpc_eaten_skb": {
            "id": "rxrpc_eaten_skb",
            "ground_truth": 0,
            "function": "rxrpc_eaten_skb",
            "description": "Dropping of socket buffer ref noted by core"
        },
        "probe_cache__show_all_caches": {
            "id": "probe_cache__show_all_caches",
            "ground_truth": 0,
            "function": "probe_cache__show_all_caches",
            "description": "Show all cached probe data in cache"
        },
        "twa_init": {
            "id": "twa_init",
            "ground_truth": 0,
            "function": "twa_init",
            "description": "Driver initialization function called twa_init."
        },
        "pdcspath_attr_store": {
            "id": "pdcspath_attr_store",
            "ground_truth": 0,
            "function": "pdcspath_attr_store",
            "description": "the input buffer for modifying a kobject's attribute."
        },
        "ice_discover_flash_size": {
            "id": "ice_discover_flash_size",
            "ground_truth": 1,
            "function": "ice_discover_flash_size",
            "description": "flash size up to 16mb using bisection"
        },
        "early_get_arch_type": {
            "id": "early_get_arch_type",
            "ground_truth": 0,
            "function": "early_get_arch_type",
            "description": "Determines possible UV arch type entry in uvsystab."
        },
        "svc_pool_map_set_cpumask": {
            "id": "svc_pool_map_set_cpumask",
            "ground_truth": 0,
            "function": "svc_pool_map_set_cpumask",
            "description": "Set thread's CPU mask for specific pool"
        },
        "ipa_config": {
            "id": "ipa_config",
            "ground_truth": 1,
            "function": "ipa_config",
            "description": "Configure IPA hardware for initialization with IPA clock enabled using IPA configuration data."
        },
        "binder_proc_lock": {
            "id": "binder_proc_lock",
            "ground_truth": 1,
            "function": "binder_proc_lock",
            "description": "Acquires outer lock for binder proc to protect ref structure."
        },
        "fschmd_release_resources": {
            "id": "fschmd_release_resources",
            "ground_truth": 0,
            "function": "fschmd_release_resources",
            "description": "Release data struct when detached from i2c client and watchdog device references are released."
        },
        "sysv_free_block": {
            "id": "sysv_free_block",
            "ground_truth": 0,
            "function": "sysv_free_block",
            "description": "Frees a block of memory in the system V shared memory segment."
        },
        "igb_acquire_nvm_82575": {
            "id": "igb_acquire_nvm_82575",
            "ground_truth": 1,
            "function": "igb_acquire_nvm_82575",
            "description": "semaphore for exclusive access to eeprom in hw structure."
        },
        "pm_clk_acquire": {
            "id": "pm_clk_acquire",
            "ground_truth": 1,
            "function": "pm_clk_acquire",
            "description": "Acquires clock entry for device from struct pm clock entry."
        },
        "patch_build_controls": {
            "id": "patch_build_controls",
            "ground_truth": 0,
            "function": "patch_build_controls",
            "description": "Chip initialization function"
        },
        "nfp_nffw_info_open": {
            "id": "nfp_nffw_info_open",
            "ground_truth": 1,
            "function": "nfp_nffw_info_open",
            "description": "Acquire lock on nffw table struct for nfp handle pointer or return error."
        },
        "get_ccsidr": {
            "id": "get_ccsidr",
            "ground_truth": 0,
            "function": "get_ccsidr",
            "description": "Cache identification based on csselr value"
        },
        "css_next_descendant_pre": {
            "id": "css_next_descendant_pre",
            "ground_truth": 1,
            "function": "css_next_descendant_pre",
            "description": "Find next descendant for pre-order traversal in CSS."
        },
        "hw_atl_rdm_cpu_id_set": {
            "id": "hw_atl_rdm_cpu_id_set",
            "ground_truth": 0,
            "function": "hw_atl_rdm_cpu_id_set",
            "description": "Set CPU ID"
        },
        "cik_ih_disable_interrupts": {
            "id": "cik_ih_disable_interrupts",
            "ground_truth": 0,
            "function": "cik_ih_disable_interrupts",
            "description": "Disable interrupt ring buffer in amdgpu device pointer"
        },
        "rio_mport_chk_dev_access": {
            "id": "rio_mport_chk_dev_access",
            "ground_truth": 1,
            "function": "rio_mport_chk_dev_access",
            "description": "Validate access to device struct, send transaction to mport master port with destid and hopcount"
        },
        "vivid_rds_generate": {
            "id": "vivid_rds_generate",
            "ground_truth": 0,
            "function": "vivid_rds_generate",
            "description": "Generates RDS groups with pi code and p name"
        },
        "lecd_attach": {
            "id": "lecd_attach",
            "ground_truth": 0,
            "function": "lecd_attach",
            "description": "Device initialization function"
        },
        "libfc_exit": {
            "id": "libfc_exit",
            "ground_truth": 0,
            "function": "libfc_exit",
            "description": "Libfc ko teardown function with no arguments"
        },
        "ufshcd_bkops_ctrl": {
            "id": "ufshcd_bkops_ctrl",
            "ground_truth": 1,
            "function": "ufshcd_bkops_ctrl",
            "description": "Enables background operation based on bkops status read from ufs device."
        },
        "security_delete_hooks": {
            "id": "security_delete_hooks",
            "ground_truth": 0,
            "function": "security_delete_hooks",
            "description": "Ensures safe deletion of security module by ordering hooks and refusing to disable module."
        },
        "nilfs_read_super_root_block": {
            "id": "nilfs_read_super_root_block",
            "ground_truth": 1,
            "function": "nilfs_read_super_root_block",
            "description": "Reads super root block struct of nilfs object from disk block number"
        },
        "ice_flow_add_prof_sync": {
            "id": "ice_flow_add_prof_sync",
            "ground_truth": 1,
            "function": "ice_flow_add_prof_sync",
            "description": "Add flow profile for packet segment and field assumption with lock acquisition and hardware pointer."
        },
        "fixup_low_keys": {
            "id": "fixup_low_keys",
            "ground_truth": 0,
            "function": "fixup_low_keys",
            "description": "Adjusts pointer up tree to fix right key after left shift."
        },
        "dev_pm_qos_flags": {
            "id": "dev_pm_qos_flags",
            "ground_truth": 1,
            "function": "dev_pm_qos_flags",
            "description": "Check device's pm qos flag against given mask flag"
        },
        "vga_inb": {
            "id": "vga_inb",
            "ground_truth": 0,
            "function": "vga_inb",
            "description": "Hardware-specific function"
        },
        "edac_device_workq_teardown": {
            "id": "edac_device_workq_teardown",
            "ground_truth": 0,
            "function": "edac_device_workq_teardown",
            "description": "Stop workq processing on edac device"
        },
        "usbip_dump_urb": {
            "id": "usbip_dump_urb",
            "ground_truth": 0,
            "function": "usbip_dump_urb",
            "description": "USBIP function dumping URB data"
        },
        "perf_event_enable": {
            "id": "perf_event_enable",
            "ground_truth": 0,
            "function": "perf_event_enable",
            "description": "Enables performance event tracking."
        },
        "ia_css_circbuf_shift_chunk": {
            "id": "ia_css_circbuf_shift_chunk",
            "ground_truth": 0,
            "function": "ia_css_circbuf_shift_chunk",
            "description": "Circular buffer shifts chunk of elements along new element direction."
        },
        "ice_aq_req_res": {
            "id": "ice_aq_req_res",
            "ground_truth": 1,
            "function": "ice_aq_req_res",
            "description": " ice success, acquired lock, and download package."
        },
        "dm_helpers_dp_mst_send_payload_allocation": {
            "id": "dm_helpers_dp_mst_send_payload_allocation",
            "ground_truth": 0,
            "function": "dm_helpers_dp_mst_send_payload_allocation",
            "description": "Send allocate payload message"
        },
        "amiserial_console_init": {
            "id": "amiserial_console_init",
            "ground_truth": 0,
            "function": "amiserial_console_init",
            "description": "AMI serial console interface registration"
        },
        "i2c_smbus_read_byte_data": {
            "id": "i2c_smbus_read_byte_data",
            "ground_truth": 0,
            "function": "i2c_smbus_read_byte_data",
            "description": "smbus read byte protocol, returns data byte or negative errno"
        },
        "DRM_MODESET_LOCK_ALL_BEGIN": {
            "id": "DRM_MODESET_LOCK_ALL_BEGIN",
            "ground_truth": 1,
            "function": "DRM_MODESET_LOCK_ALL_BEGIN",
            "description": "Simplifies acquiring modeset lock in DRM drivers"
        },
        "amdgpu_bo_fence": {
            "id": "amdgpu_bo_fence",
            "ground_truth": 0,
            "function": "amdgpu_bo_fence",
            "description": "Add fence to AMD GPU buffer object with shared option"
        },
        "mpt3sas_transport_port_add": {
            "id": "mpt3sas_transport_port_add",
            "ground_truth": 1,
            "function": "mpt3sas_transport_port_add",
            "description": "Add new port object to adapter's port list with device handle, port number, and phy number."
        },
        "ufs2_init_inodes_chunk": {
            "id": "ufs2_init_inodes_chunk",
            "ground_truth": 0,
            "function": "ufs2_init_inodes_chunk",
            "description": "Nullify new inode chunk, ignore ui gen field, no NFS support in Linux UFS."
        },
        "gfs2_glock_nq": {
            "id": "gfs2_glock_nq",
            "ground_truth": 1,
            "function": "gfs2_glock_nq",
            "description": "Enqueue gfs2 holder onto glock, acquire glock, no error."
        },
        "drm_atomic_commit": {
            "id": "drm_atomic_commit",
            "ground_truth": 1,
            "function": "drm_atomic_commit",
            "description": "Atomic configuration commit with possible deadlock"
        },
        "nvme_pci_npages_sgl": {
            "id": "nvme_pci_npages_sgl",
            "ground_truth": 0,
            "function": "nvme_pci_npages_sgl",
            "description": "Calculates number of pages for SGL segment"
        },
        "ctcm_chx_rxiniterr": {
            "id": "ctcm_chx_rxiniterr",
            "ground_truth": 0,
            "function": "ctcm_chx_rxiniterr",
            "description": "Channel state machine event initialization error handling function."
        },
        "_scsih_sas_device_remove": {
            "id": "_scsih_sas_device_remove",
            "ground_truth": 1,
            "function": "_scsih_sas_device_remove",
            "description": "Remove SCSI SAS device from list and decrement reference count"
        },
        "em28xx_stop_urbs": {
            "id": "em28xx_stop_urbs",
            "ground_truth": 0,
            "function": "em28xx_stop_urbs",
            "description": "Stop USB Request Blocks (URBs)"
        },
        "ap_display_usage": {
            "id": "ap_display_usage",
            "ground_truth": 0,
            "function": "ap_display_usage",
            "description": "Usage message for ACPI dump utility"
        },
        "wmi_get_acpi_device_uid": {
            "id": "wmi_get_acpi_device_uid",
            "ground_truth": 0,
            "function": "wmi_get_acpi_device_uid",
            "description": "get uid of acpi device with wmi guid"
        },
        "stmpe_block_write": {
            "id": "stmpe_block_write",
            "ground_truth": 0,
            "function": "stmpe_block_write",
            "description": "Write multiple STMPE register values with given parameters."
        },
        "build_ntlmssp_negotiate_blob": {
            "id": "build_ntlmssp_negotiate_blob",
            "ground_truth": 0,
            "function": "build_ntlmssp_negotiate_blob",
            "description": "No malloc for fixed-size NTLMSSP negotiate blob"
        },
        "store": {
            "id": "store",
            "ground_truth": 0,
            "function": "store",
            "description": "Load bit value from aligned address in cs hw space."
        },
        "write_seqlock": {
            "id": "write_seqlock",
            "ground_truth": 1,
            "function": "write_seqlock",
            "description": "Starts seqlock write critical section, acquires spinlock."
        },
        "gbefb_show_memsize": {
            "id": "gbefb_show_memsize",
            "ground_truth": 0,
            "function": "gbefb_show_memsize",
            "description": "Displays current script's memory usage."
        },
        "lpfc_sc_to_bg_opcodes": {
            "id": "lpfc_sc_to_bg_opcodes",
            "ground_truth": 1,
            "function": "lpfc_sc_to_bg_opcodes",
            "description": "determine blockguard opcodes for specified SCSI command in lpfc HBA"
        },
        "aspeed_smc_chip_set_4b_spi_2400": {
            "id": "aspeed_smc_chip_set_4b_spi_2400",
            "ground_truth": 0,
            "function": "aspeed_smc_chip_set_4b_spi_2400",
            "description": " Sets 4-byte mode for SPI flash chip with 2400 speed."
        },
        "n_hdlc_tty_receive": {
            "id": "n_hdlc_tty_receive",
            "ground_truth": 0,
            "function": "n_hdlc_tty_receive",
            "description": "n_hdlc_tty_receive receives and interprets HDLC frame data from a TTY driver."
        },
        "chipio_set_conn_rate": {
            "id": "chipio_set_conn_rate",
            "ground_truth": 0,
            "function": "chipio_set_conn_rate",
            "description": "Set connection point sampling rate"
        },
        "show_scaling_driver": {
            "id": "show_scaling_driver",
            "ground_truth": 0,
            "function": "show_scaling_driver",
            "description": "Displays current cpufreq driver loaded"
        },
        "v4l2_m2m_dst_buf_remove_by_buf": {
            "id": "v4l2_m2m_dst_buf_remove_by_buf",
            "ground_truth": 0,
            "function": "v4l2_m2m_dst_buf_remove_by_buf",
            "description": "Removes destination buffer from ready buffer list in v4l2 m2m context."
        },
        "verify_bbt_descr": {
            "id": "verify_bbt_descr",
            "ground_truth": 1,
            "function": "verify_bbt_descr",
            "description": "Verify bad block description table for NAND device."
        },
        "msi_get_domain_info": {
            "id": "msi_get_domain_info",
            "ground_truth": 0,
            "function": "msi_get_domain_info",
            "description": "Retrieve MSI interrupt domain info for specified domain."
        },
        "ds1685_rtc_check_mday": {
            "id": "ds1685_rtc_check_mday",
            "ground_truth": 1,
            "function": "ds1685_rtc_check_mday",
            "description": "Check validity of day, return error if out of range."
        },
        "h_24x7_event_start_txn": {
            "id": "h_24x7_event_start_txn",
            "ground_truth": 0,
            "function": "h_24x7_event_start_txn",
            "description": "Read-only 24x7 counter, ignores non-perf PMU transactions."
        },
        "wdt977_keepalive": {
            "id": "wdt977_keepalive",
            "ground_truth": 0,
            "function": "wdt977_keepalive",
            "description": "Keepalive ping sent to watchdog by rewriting timeout to reg."
        },
        "ceph_file_layout_is_valid": {
            "id": "ceph_file_layout_is_valid",
            "ground_truth": 0,
            "function": "ceph_file_layout_is_valid",
            "description": "Valid layout returns true"
        },
        "igc_acquire_phy_base": {
            "id": "igc_acquire_phy_base",
            "ground_truth": 1,
            "function": "igc_acquire_phy_base",
            "description": "Acquire access to correct phy via function pointer in igc hw structure."
        },
        "__cvmx_helper_rgmii_link_get": {
            "id": "__cvmx_helper_rgmii_link_get",
            "ground_truth": 0,
            "function": "__cvmx_helper_rgmii_link_get",
            "description": "Auto-negotiates RGMII link, may not match Octeon config if auto-negotiation changed since last call."
        },
        "__execute_only_pkey": {
            "id": "__execute_only_pkey",
            "ground_truth": 0,
            "function": "__execute_only_pkey",
            "description": "Protection key dedicated for execute-only use"
        },
        "dwc2_release_channel": {
            "id": "dwc2_release_channel",
            "ground_truth": 0,
            "function": "dwc2_release_channel",
            "description": "Release host channel, select and queue transactions, available in dwc2 hsotg."
        },
        "stats_assess": {
            "id": "stats_assess",
            "ground_truth": 0,
            "function": "stats_assess",
            "description": "Assesses confidence in hotspot queue during cache creation or io load."
        },
        "__kcsan_check_read": {
            "id": "__kcsan_check_read",
            "ground_truth": 1,
            "function": "__kcsan_check_read",
            "description": "Regular read access check for race pointer address and access size."
        },
        "scsi_eh_prt_fail_stats": {
            "id": "scsi_eh_prt_fail_stats",
            "ground_truth": 0,
            "function": "scsi_eh_prt_fail_stats",
            "description": "Log failure info for recovering SCSI host and process SCSI commands."
        },
        "mpt3sas_get_sdev_by_addr": {
            "id": "mpt3sas_get_sdev_by_addr",
            "ground_truth": 1,
            "function": "mpt3sas_get_sdev_by_addr",
            "description": "Searches for SA device by address and returns object struct."
        },
        "xa_reserve_bh": {
            "id": "xa_reserve_bh",
            "ground_truth": 0,
            "function": "xa_reserve_bh",
            "description": "Reserve index in xarray with softirq disabling."
        },
        "e1000_set_page_igp": {
            "id": "e1000_set_page_igp",
            "ground_truth": 1,
            "function": "e1000_set_page_igp",
            "description": "Set IGP page for phy struct e1000 hw hw pointer"
        },
        "vmci_handle_arr_remove_entry": {
            "id": "vmci_handle_arr_remove_entry",
            "ground_truth": 0,
            "function": "vmci_handle_arr_remove_entry",
            "description": "Handle removal of invalid VMCI entry"
        },
        "coresight_is_def_sink_type": {
            "id": "coresight_is_def_sink_type",
            "ground_truth": 0,
            "function": "coresight_is_def_sink_type",
            "description": "Check if device is default sink type"
        },
        "pcan_read_canreg": {
            "id": "pcan_read_canreg",
            "ground_truth": 0,
            "function": "pcan_read_canreg",
            "description": "Reads SJA1000 register"
        },
        "ef4_tx_map_data": {
            "id": "ef4_tx_map_data",
            "ground_truth": 0,
            "function": "ef4_tx_map_data",
            "description": "Map skb data for DMA, create queue descriptor."
        },
        "core_get_se_deve_from_rtpi": {
            "id": "core_get_se_deve_from_rtpi",
            "ground_truth": 0,
            "function": "core_get_se_deve_from_rtpi",
            "description": "Retrieve core device versions from RTPI data"
        },
        "early_drop_list": {
            "id": "early_drop_list",
            "ground_truth": 0,
            "function": "early_drop_list",
            "description": "Possible freeing of assured connection causes trouble"
        },
        "ata_acpi_handle_hotplug": {
            "id": "ata_acpi_handle_hotplug",
            "ground_truth": 0,
            "function": "ata_acpi_handle_hotplug",
            "description": "ACPI event handler for device hotplug"
        },
        "myrb_unmap": {
            "id": "myrb_unmap",
            "ground_truth": 0,
            "function": "myrb_unmap",
            "description": "Unmaps controller structure for myrb hba cb."
        },
        "smk_tskacc": {
            "id": "smk_tskacc",
            "ground_truth": 1,
            "function": "smk_tskacc",
            "description": "Access check for task on object label pair, returns permit/non-permit"
        },
        "queued_spin_lock_slowpath": {
            "id": "queued_spin_lock_slowpath",
            "ground_truth": 1,
            "function": "queued_spin_lock_slowpath",
            "description": "Acquire queued spinlock, fast/slow unlock, contended/uncontended queue, using struct qspinlock lock pointer."
        },
        "nfsd4_get_opendowngradestateid": {
            "id": "nfsd4_get_opendowngradestateid",
            "ground_truth": 0,
            "function": "nfsd4_get_opendowngradestateid",
            "description": "State ID consumption function"
        },
        "xchk_btree_cur_fsbno": {
            "id": "xchk_btree_cur_fsbno",
            "ground_truth": 0,
            "function": "xchk_btree_cur_fsbno",
            "description": "Block identification of btree cursor"
        },
        "qla4xxx_set_chap": {
            "id": "qla4xxx_set_chap",
            "ground_truth": 1,
            "function": "qla4xxx_set_chap",
            "description": "4xxx is used to create a chap entry."
        },
        "speakup_fake_key_pressed": {
            "id": "speakup_fake_key_pressed",
            "ground_truth": 0,
            "function": "speakup_fake_key_pressed",
            "description": "Simulated keypress handling on current CPU, returns boolean."
        },
        "crypto_rng_get_bytes": {
            "id": "crypto_rng_get_bytes",
            "ground_truth": 0,
            "function": "crypto_rng_get_bytes",
            "description": "Generate random numbers using cipher handle and fill output buffer."
        },
        "force_logical_link_state_down": {
            "id": "force_logical_link_state_down",
            "ground_truth": 0,
            "function": "force_logical_link_state_down",
            "description": "Logical link state forced down when not down as expected"
        },
        "mmu_interval_read_begin": {
            "id": "mmu_interval_read_begin",
            "ground_truth": 1,
            "function": "mmu_interval_read_begin",
            "description": " Implements critical section for reading MMU interval, with collision retry scheme."
        },
        "nfp_cpp_explicit_acquire": {
            "id": "nfp_cpp_explicit_acquire",
            "ground_truth": 1,
            "function": "nfp_cpp_explicit_acquire",
            "description": "Acquire explicit access handle for NFP data and signal references."
        },
        "__aa_get_label": {
            "id": "__aa_get_label",
            "ground_truth": 1,
            "function": "__aa_get_label",
            "description": " Get count on label reference struct, returns null if race is lost. Lock required."
        },
        "fc_elsct_send": {
            "id": "fc_elsct_send",
            "ground_truth": 0,
            "function": "fc_elsct_send",
            "description": "Send el/ct frame on local port with destination ID and specified frame"
        },
        "xfs_btree_sblock_verify": {
            "id": "xfs_btree_sblock_verify",
            "ground_truth": 1,
            "function": "xfs_btree_sblock_verify",
            "description": "Verify short format btree block with max record limit."
        },
        "mgslpc_add_device": {
            "id": "mgslpc_add_device",
            "ground_truth": 0,
            "function": "mgslpc_add_device",
            "description": "Add device instance to global linked list and increment count pointer."
        },
        "snd_echo_vumeters_info": {
            "id": "snd_echo_vumeters_info",
            "ground_truth": 0,
            "function": "snd_echo_vumeters_info",
            "description": "Reads analog and digital vu meter input/output together."
        },
        "nouveau_hwmon_fini": {
            "id": "nouveau_hwmon_fini",
            "ground_truth": 0,
            "function": "nouveau_hwmon_fini",
            "description": "finalize function for hardware monitoring"
        },
        "cnstr_shdsc_gcm_encap": {
            "id": "cnstr_shdsc_gcm_encap",
            "ground_truth": 0,
            "function": "cnstr_shdsc_gcm_encap",
            "description": "code for GCM encapsulation with shared descriptor."
        },
        "binder_node_inner_unlock": {
            "id": "binder_node_inner_unlock",
            "ground_truth": 1,
            "function": "binder_node_inner_unlock",
            "description": "Release inner lock for binder node struct"
        },
        "get_vblank_counter": {
            "id": "get_vblank_counter",
            "ground_truth": 0,
            "function": "get_vblank_counter",
            "description": "Frame count retrieval function"
        },
        "devm_kfree": {
            "id": "devm_kfree",
            "ground_truth": 0,
            "function": "devm_kfree",
            "description": "Free memory allocated with devm kmalloc for device"
        },
        "nilfs_bmap_test_and_clear_dirty": {
            "id": "nilfs_bmap_test_and_clear_dirty",
            "ground_truth": 0,
            "function": "nilfs_bmap_test_and_clear_dirty",
            "description": "Atomic test and clear of bmap dirty state, returns value if dirty before operation"
        },
        "binder_proc_unlock": {
            "id": "binder_proc_unlock",
            "ground_truth": 1,
            "function": "binder_proc_unlock",
            "description": "Release spinlock for binder proc after lock acquisition."
        },
        "atp870u_probe": {
            "id": "atp870u_probe",
            "ground_truth": 0,
            "function": "atp870u_probe",
            "description": "Non-zero return on detection"
        },
        "rio_add_inb_buffer": {
            "id": "rio_add_inb_buffer",
            "ground_truth": 0,
            "function": "rio_add_inb_buffer",
            "description": "Add buffer to inbound mailbox queue for reception in RIO mport master port."
        },
        "vidioc_g_parm": {
            "id": "vidioc_g_parm",
            "ground_truth": 0,
            "function": "vidioc_g_parm",
            "description": "Stream type dependent parameter ioctls"
        },
        "down_timeout": {
            "id": "down_timeout",
            "ground_truth": 1,
            "function": "down_timeout",
            "description": "Semaphore acquisition with timeout and sleep if unavailable"
        },
        "mips_read_watch_registers": {
            "id": "mips_read_watch_registers",
            "ground_truth": 0,
            "function": "mips_read_watch_registers",
            "description": "Reads watchhi register for user space debugger access to 4+ registers."
        },
        "linkmode_adv_to_fiber_adv_t": {
            "id": "linkmode_adv_to_fiber_adv_t",
            "ground_truth": 0,
            "function": "linkmode_adv_to_fiber_adv_t",
            "description": "Translate linkmode to phy autonegotiation for fiber link"
        },
        "gsmld_attach_gsm": {
            "id": "gsmld_attach_gsm",
            "ground_truth": 0,
            "function": "gsmld_attach_gsm",
            "description": "Set up GSM mode and connect to modem via tty and mux."
        },
        "security_policycap_supported": {
            "id": "security_policycap_supported",
            "ground_truth": 1,
            "function": "security_policycap_supported",
            "description": " Check policy capability support, return true/false."
        },
        "maptype": {
            "id": "maptype",
            "ground_truth": 0,
            "function": "maptype",
            "description": "Mapping function for SPI command response with varying data format."
        },
        "futex_lock_pi_atomic": {
            "id": "futex_lock_pi_atomic",
            "ground_truth": 1,
            "function": "futex_lock_pi_atomic",
            "description": "Acquires pi aware futex with atomic work, caller holds hb lock and futex key ref, exit set on return."
        },
        "bdc_gadget_ep_enable": {
            "id": "bdc_gadget_ep_enable",
            "ground_truth": 0,
            "function": "bdc_gadget_ep_enable",
            "description": "Endpoint configuration and resource allocation."
        },
        "tenxpress_phy_poll": {
            "id": "tenxpress_phy_poll",
            "ground_truth": 0,
            "function": "tenxpress_phy_poll",
            "description": "Link state change polling function"
        },
        "tty3270_delete_characters": {
            "id": "tty3270_delete_characters",
            "ground_truth": 0,
            "function": "tty3270_delete_characters",
            "description": "Deletes character at current position."
        },
        "sun4i_a10_tcon_set_mux": {
            "id": "sun4i_a10_tcon_set_mux",
            "ground_truth": 0,
            "function": "sun4i_a10_tcon_set_mux",
            "description": "Platform-specific tcon muxing callback function"
        },
        "put_object": {
            "id": "put_object",
            "ground_truth": 0,
            "function": "put_object",
            "description": "Decrement object use count, use RCU callback to avoid race conditions."
        },
        "of_device_is_available": {
            "id": "of_device_is_available",
            "ground_truth": 1,
            "function": "of_device_is_available",
            "description": "Check device availability, return true if status is absent or set to okay/ok, false otherwise."
        },
        "ww_mutex_lock_slow": {
            "id": "ww_mutex_lock_slow",
            "ground_truth": 1,
            "function": "ww_mutex_lock_slow",
            "description": "Mutex acquisition with sleep on unavailability"
        },
        "__ip_vs_sctp_init": {
            "id": "__ip_vs_sctp_init",
            "ground_truth": 0,
            "function": "__ip_vs_sctp_init",
            "description": "Netns-related timeouts for ip_vs_sctp_init function."
        },
        "pata_macio_default_timings": {
            "id": "pata_macio_default_timings",
            "ground_truth": 0,
            "function": "pata_macio_default_timings",
            "description": "Safe value blast to timing register at init/wakeup before calculation"
        },
        "_scsih_sas_device_add": {
            "id": "_scsih_sas_device_add",
            "ground_truth": 1,
            "function": "_scsih_sas_device_add",
            "description": "adds SCSI SAS device to adapter's list (20 tokens)"
        },
        "rio_lock_device": {
            "id": "rio_lock_device",
            "ground_truth": 1,
            "function": "rio_lock_device",
            "description": "Acquires device lock for specified device, returns if lock acquired or einval if timeout expires."
        },
        "ww_mutex_lock": {
            "id": "ww_mutex_lock",
            "ground_truth": 1,
            "function": "ww_mutex_lock",
            "description": "Mutex lock acquisition with deadlock detection and wait die algorithm."
        },
        "smk_ipv6_check": {
            "id": "smk_ipv6_check",
            "ground_truth": 1,
            "function": "smk_ipv6_check",
            "description": "IPv6 access check with Smack labels for subject and object"
        },
        "set_ts_params": {
            "id": "set_ts_params",
            "ground_truth": 0,
            "function": "set_ts_params",
            "description": "Set device param for DMA start."
        },
        "generic_check_addressable": {
            "id": "generic_check_addressable",
            "ground_truth": 1,
            "function": "generic_check_addressable",
            "description": "Check file system addressability with block size and return result"
        },
        "__rm7k_tc_enable": {
            "id": "__rm7k_tc_enable",
            "ground_truth": 0,
            "function": "__rm7k_tc_enable",
            "description": "Function executed in uncached address space"
        },
        "reg_type_mismatch_ok": {
            "id": "reg_type_mismatch_ok",
            "ground_truth": 0,
            "function": "reg_type_mismatch_ok",
            "description": "Returns true if insn can have different return type"
        },
        "nicstar_read_eprom": {
            "id": "nicstar_read_eprom",
            "ground_truth": 0,
            "function": "nicstar_read_eprom",
            "description": "Interface for reading EPROM byte"
        },
        "send_rx_ctrl_cmd": {
            "id": "send_rx_ctrl_cmd",
            "ground_truth": 0,
            "function": "send_rx_ctrl_cmd",
            "description": "Send rx control command for network private data, with start/stop option."
        },
        "_scsih_expander_node_add": {
            "id": "_scsih_expander_node_add",
            "ground_truth": 1,
            "function": "_scsih_expander_node_add",
            "description": "Add SCSI expander device to adapter's list"
        },
        "vxge_hw_driver_stats_get": {
            "id": "vxge_hw_driver_stats_get",
            "ground_truth": 0,
            "function": "vxge_hw_driver_stats_get",
            "description": "Get device sw statistic, return vpath stats for device."
        },
        "mmgrab": {
            "id": "mmgrab",
            "ground_truth": 0,
            "function": "mmgrab",
            "description": "Struct mm ensures mm is not freed after task exit, but address space may not exist later."
        },
        "lpfc_nodev_tmo_init": {
            "id": "lpfc_nodev_tmo_init",
            "ground_truth": 0,
            "function": "lpfc_nodev_tmo_init",
            "description": "Sets nodev timeout value, uses devloss tmo if set, prints kernel error message."
        },
        "sctp_register_pf": {
            "id": "sctp_register_pf",
            "ground_truth": 0,
            "function": "sctp_register_pf",
            "description": "Registers function table for pf."
        },
        "driver_remove_file": {
            "id": "driver_remove_file",
            "ground_truth": 0,
            "function": "driver_remove_file",
            "description": "Removes sysfs file for driver attribute descriptor"
        },
        "tick_is_oneshot_available": {
            "id": "tick_is_oneshot_available",
            "ground_truth": 1,
            "function": "tick_is_oneshot_available",
            "description": "Check oneshot event device for capability."
        },
        "disable": {
            "id": "disable",
            "ground_truth": 0,
            "function": "disable",
            "description": "Callback for disabling function"
        },
        "e1000_hv_phy_workarounds_ich8lan": {
            "id": "e1000_hv_phy_workarounds_ich8lan",
            "ground_truth": 0,
            "function": "e1000_hv_phy_workarounds_ich8lan",
            "description": "Apply phy workarounds to e1000 hw structure"
        },
        "qla4_8xxx_default_intr_handler": {
            "id": "qla4_8xxx_default_intr_handler",
            "ground_truth": 0,
            "function": "qla4_8xxx_default_intr_handler",
            "description": "Hardware interrupt handler for MSI, with pointer to host adapter structure."
        },
        "sess_setup": {
            "id": "sess_setup",
            "ground_truth": 0,
            "function": "sess_setup",
            "description": "SMB session setup function"
        },
        "smpcfd_prepare_cpu": {
            "id": "smpcfd_prepare_cpu",
            "ground_truth": 0,
            "function": "smpcfd_prepare_cpu",
            "description": "Prepares CPU for symmetric multiprocessing."
        },
        "ext2_init_block_alloc_info": {
            "id": "ext2_init_block_alloc_info",
            "ground_truth": 1,
            "function": "ext2_init_block_alloc_info",
            "description": "Allocate and initialize reservation window, link to ext2 inode"
        },
        "enable_step": {
            "id": "enable_step",
            "ground_truth": 0,
            "function": "enable_step",
            "description": "Enables single or block step"
        },
        "__dev_pm_qos_flags": {
            "id": "__dev_pm_qos_flags",
            "ground_truth": 1,
            "function": "__dev_pm_qos_flags",
            "description": "Check device's pm qos flag with power lock held"
        },
        "batadv_nc_path_search": {
            "id": "batadv_nc_path_search",
            "ground_truth": 0,
            "function": "batadv_nc_path_search",
            "description": "Searches for coding path between nodes to retrieve buffered packets for coding."
        },
        "ata_pio_sectors": {
            "id": "ata_pio_sectors",
            "ground_truth": 0,
            "function": "ata_pio_sectors",
            "description": "Transfer sector struct ata cmd for data transfer to ATA device with inherited locking."
        },
        "pmcraid_release_chrdev": {
            "id": "pmcraid_release_chrdev",
            "ground_truth": 0,
            "function": "pmcraid_release_chrdev",
            "description": "Unregister adapter management interface, no return value, uses adapter instance structure pointer."
        },
        "arch_switch_tls": {
            "id": "arch_switch_tls",
            "ground_truth": 0,
            "function": "arch_switch_tls",
            "description": "TLS switch for shared mm in skas0 mode"
        },
        "onenand_check_features": {
            "id": "onenand_check_features",
            "ground_truth": 1,
            "function": "onenand_check_features",
            "description": "Check and set onenand feature parameters in mtd data structure, including lock scheme and two plane struct."
        },
        "identify_siblings": {
            "id": "identify_siblings",
            "ground_truth": 0,
            "function": "identify_siblings",
            "description": "Identifies sibling CPU and populates logical execution unit information in per CPU data structure."
        },
        "find_get_entry": {
            "id": "find_get_entry",
            "ground_truth": 0,
            "function": "find_get_entry",
            "description": "Page cache entry lookup with refcount increase for head page"
        },
        "zynqmp_clk_gate_is_enabled": {
            "id": "zynqmp_clk_gate_is_enabled",
            "ground_truth": 1,
            "function": "zynqmp_clk_gate_is_enabled",
            "description": "Checks if clock is enabled or disabled using common and hardware-specific interface."
        },
        "xfs_dir2_dirblock_bytes": {
            "id": "xfs_dir2_dirblock_bytes",
            "ground_truth": 0,
            "function": "xfs_dir2_dirblock_bytes",
            "description": "Directory block byte count function"
        },
        "zynqmp_is_valid_clock": {
            "id": "zynqmp_is_valid_clock",
            "ground_truth": 1,
            "function": "zynqmp_is_valid_clock",
            "description": "Check validity of clock index, return error code if invalid."
        },
        "ip_decrease_ttl": {
            "id": "ip_decrease_ttl",
            "ground_truth": 0,
            "function": "ip_decrease_ttl",
            "description": "Decreases the TTL value of an IP packet."
        },
        "iser_initialize_task_headers": {
            "id": "iser_initialize_task_headers",
            "ground_truth": 1,
            "function": "iser_initialize_task_headers",
            "description": "Initialize task header struct for iSCSI task with possible race condition for error handling."
        },
        "parse_codec_mode": {
            "id": "parse_codec_mode",
            "ground_truth": 0,
            "function": "parse_codec_mode",
            "description": "Parse codec mode content after codec line, assign current codec with three numbers."
        },
        "btt_fini": {
            "id": "btt_fini",
            "ground_truth": 0,
            "function": "btt_fini",
            "description": "De-initializes block translation table on device removal"
        },
        "nilfs_bmap_set_dirty": {
            "id": "nilfs_bmap_set_dirty",
            "ground_truth": 0,
            "function": "nilfs_bmap_set_dirty",
            "description": "Sets dirty bit for a nilfs block map."
        },
        "alsa_seq_dummy_init": {
            "id": "alsa_seq_dummy_init",
            "ground_truth": 0,
            "function": "alsa_seq_dummy_init",
            "description": "ALSA sequencer dummy client driver init"
        },
        "igb_acquire_nvm_i210": {
            "id": "igb_acquire_nvm_i210",
            "ground_truth": 1,
            "function": "igb_acquire_nvm_i210",
            "description": "Semaphore acquisition for exclusive i210 eeprom access."
        },
        "ubifs_calc_min_idx_lebs": {
            "id": "ubifs_calc_min_idx_lebs",
            "ground_truth": 0,
            "function": "ubifs_calc_min_idx_lebs",
            "description": "Calculate LEBs for index, return amount to keep"
        },
        "usb_role_switch_get": {
            "id": "usb_role_switch_get",
            "ground_truth": 0,
            "function": "usb_role_switch_get",
            "description": "Find and return USB role switch linked with caller device"
        },
        "kempld_get_mutex": {
            "id": "kempld_get_mutex",
            "ground_truth": 1,
            "function": "kempld_get_mutex",
            "description": "Acquire mutex for pld kempld device data structure"
        },
        "mgsl_put_char": {
            "id": "mgsl_put_char",
            "ground_truth": 0,
            "function": "mgsl_put_char",
            "description": "Adds character to transmit buffer in tty info structure."
        },
        "mipi_dsi_dcs_get_power_mode": {
            "id": "mipi_dsi_dcs_get_power_mode",
            "ground_truth": 0,
            "function": "mipi_dsi_dcs_get_power_mode",
            "description": "Query display module power mode, return current mode"
        },
        "gfs2_ail_empty_tr": {
            "id": "gfs2_ail_empty_tr",
            "ground_truth": 0,
            "function": "gfs2_ail_empty_tr",
            "description": "Empty ail list for GFS2 transaction struct"
        },
        "retry_origin_bios": {
            "id": "retry_origin_bios",
            "ground_truth": 0,
            "function": "retry_origin_bios",
            "description": "Flush buffer list in retry_origin_bios function."
        },
        "snd_opl3_sysex": {
            "id": "snd_opl3_sysex",
            "ground_truth": 0,
            "function": "snd_opl3_sysex",
            "description": "Sysex reception for OPL3 sound card config"
        },
        "omap4_calc_volt_ramp": {
            "id": "omap4_calc_volt_ramp",
            "ground_truth": 0,
            "function": "omap4_calc_volt_ramp",
            "description": "Calculate voltage ramp delay on omap4 and return suitable field value."
        },
        "socfpga_cpu_die": {
            "id": "socfpga_cpu_die",
            "ground_truth": 0,
            "function": "socfpga_cpu_die",
            "description": "Platform-specific code to shutdown CPU with IRQs disabled."
        },
        "pci_intx": {
            "id": "pci_intx",
            "ground_truth": 0,
            "function": "pci_intx",
            "description": "Enables/disables PCI INTX for device, based on input boolean value."
        },
        "show_tabletXtilt": {
            "id": "show_tabletXtilt",
            "ground_truth": 0,
            "function": "show_tabletXtilt",
            "description": "Supports xtilt file, displays and reprograms settings."
        },
        "e1000_clean_rx_irq": {
            "id": "e1000_clean_rx_irq",
            "ground_truth": 0,
            "function": "e1000_clean_rx_irq",
            "description": "Send received data up network stack, clean int work done, using e1000 adapter and rx ring."
        },
        "megaraid_mbox_flush_cache": {
            "id": "megaraid_mbox_flush_cache",
            "ground_truth": 0,
            "function": "megaraid_mbox_flush_cache",
            "description": "Flushes adapter and disk cache, updates adapter soft state for controller."
        },
        "megasas_exit": {
            "id": "megasas_exit",
            "ground_truth": 0,
            "function": "megasas_exit",
            "description": "Driver unload entry point with no argument"
        },
        "arch_ftrace_match_adjust": {
            "id": "arch_ftrace_match_adjust",
            "ground_truth": 0,
            "function": "arch_ftrace_match_adjust",
            "description": "Adjust architecture symbol names for user visibility."
        },
        "blk_ksm_put_slot": {
            "id": "blk_ksm_put_slot",
            "ground_truth": 0,
            "function": "blk_ksm_put_slot",
            "description": "Release reference to blk ksm keyslot struct"
        },
        "ap_control_add_mac": {
            "id": "ap_control_add_mac",
            "ground_truth": 0,
            "function": "ap_control_add_mac",
            "description": "Add MAC to AP control list"
        },
        "cl_dsp_init": {
            "id": "cl_dsp_init",
            "ground_truth": 0,
            "function": "cl_dsp_init",
            "description": "Extra step in first boot sequence for power status and core reset"
        },
        "omap3_prm_reset_modem": {
            "id": "omap3_prm_reset_modem",
            "ground_truth": 0,
            "function": "omap3_prm_reset_modem",
            "description": "Toggle reset signal for modem IP block to allow proper idle in omap3430 without stacked modem."
        },
        "show_serial_version": {
            "id": "show_serial_version",
            "ground_truth": 0,
            "function": "show_serial_version",
            "description": "Prints serial driver version and configured options."
        },
        "drm_atomic_get_old_bridge_state": {
            "id": "drm_atomic_get_old_bridge_state",
            "ground_truth": 0,
            "function": "drm_atomic_get_old_bridge_state",
            "description": "Get old bridge state for given bridge or return null if not in global atomic state."
        },
        "clear_time_state": {
            "id": "clear_time_state",
            "ground_truth": 0,
            "function": "clear_time_state",
            "description": "Clears NTP time status state."
        },
        "down_trylock": {
            "id": "down_trylock",
            "ground_truth": 1,
            "function": "down_trylock",
            "description": "Semaphore acquisition attempt without waiting, returns success or failure atomically."
        },
        "cap_settime": {
            "id": "cap_settime",
            "ground_truth": 1,
            "function": "cap_settime",
            "description": "determine process permission to set system clock and timezone"
        },
        "vgic_target_oracle": {
            "id": "vgic_target_oracle",
            "ground_truth": 1,
            "function": "vgic_target_oracle",
            "description": "Compute target vCPU for IRQ based on current state of enabled pending active vCPU."
        },
        "r600_copy_dma": {
            "id": "r600_copy_dma",
            "ground_truth": 0,
            "function": "r600_copy_dma",
            "description": "Copy page using DMA engine for GPU paging in r6xx Radeon TTM implementation."
        },
        "drm_gem_lock_reservations": {
            "id": "drm_gem_lock_reservations",
            "ground_truth": 1,
            "function": "drm_gem_lock_reservations",
            "description": "Sets up context and locks gem object array; reserves space for shared fence."
        },
        "spi_bus_lock": {
            "id": "spi_bus_lock",
            "ground_truth": 1,
            "function": "spi_bus_lock",
            "description": "Obtain exclusive lock for SPI bus usage from sleepable context"
        },
        "stack_trace_save_user": {
            "id": "stack_trace_save_user",
            "ground_truth": 0,
            "function": "stack_trace_save_user",
            "description": "Save user stack trace to storage array with size and entry count"
        },
        "loongson3_reg_setup": {
            "id": "loongson3_reg_setup",
            "ground_truth": 0,
            "function": "loongson3_reg_setup",
            "description": "Register computation for profiling enablement"
        },
        "spi_nor_erase_chip": {
            "id": "spi_nor_erase_chip",
            "ground_truth": 0,
            "function": "spi_nor_erase_chip",
            "description": "Erases entire flash memory using spi nor pointer."
        },
        "bnx2i_cm_remote_close": {
            "id": "bnx2i_cm_remote_close",
            "ground_truth": 0,
            "function": "bnx2i_cm_remote_close",
            "description": "Async TCP event processing via bnx2i cnic driver interface"
        },
        "generic_file_write_iter": {
            "id": "generic_file_write_iter",
            "ground_truth": 1,
            "function": "generic_file_write_iter",
            "description": "Wrapper for file write, syncs file and acquires mutex"
        },
        "console_trylock": {
            "id": "console_trylock",
            "ground_truth": 1,
            "function": "console_trylock",
            "description": "Exclusive console system lock acquisition attempt, returns success or error code"
        },
        "cxlflash_chr_ioctl": {
            "id": "cxlflash_chr_ioctl",
            "ground_truth": 1,
            "function": "cxlflash_chr_ioctl",
            "description": "Semaphore used for thread safety in ioctl handler"
        },
        "binder_get_txn_from_and_acq_inner": {
            "id": "binder_get_txn_from_and_acq_inner",
            "ground_truth": 1,
            "function": "binder_get_txn_from_and_acq_inner",
            "description": "Acquires inner lock to prevent process manipulation during transaction acquisition."
        },
        "mipi_dsi_dcs_get_display_brightness": {
            "id": "mipi_dsi_dcs_get_display_brightness",
            "ground_truth": 0,
            "function": "mipi_dsi_dcs_get_display_brightness",
            "description": "Get current display brightness value from mipi dsi device"
        },
        "vcn_v3_0_disable_clock_gating": {
            "id": "vcn_v3_0_disable_clock_gating",
            "ground_truth": 0,
            "function": "vcn_v3_0_disable_clock_gating",
            "description": "Disable clock gating for VCN block in AMDGPU device."
        },
        "i40e_alloc_arq_bufs": {
            "id": "i40e_alloc_arq_bufs",
            "ground_truth": 0,
            "function": "i40e_alloc_arq_bufs",
            "description": "Allocate pre-posted receive queue buffer for i40e hardware."
        },
        "enetc_streamgate_hw_set": {
            "id": "enetc_streamgate_hw_set",
            "ground_truth": 0,
            "function": "enetc_streamgate_hw_set",
            "description": "Set descriptor for stream gate instance."
        },
        "stdma_try_lock": {
            "id": "stdma_try_lock",
            "ground_truth": 1,
            "function": "stdma_try_lock",
            "description": "Attempt to acquire ST DMA interrupt lock, return if acquired, otherwise use specified interrupt handler."
        },
        "fst_process_rx_status": {
            "id": "fst_process_rx_status",
            "ground_truth": 0,
            "function": "fst_process_rx_status",
            "description": "Process received frame result up stack"
        },
        "dispc_calc_fir_inc": {
            "id": "dispc_calc_fir_inc",
            "ground_truth": 0,
            "function": "dispc_calc_fir_inc",
            "description": "Calculates the first order incremental change in a signal and displays it."
        },
        "ioctl_version_show": {
            "id": "ioctl_version_show",
            "ground_truth": 0,
            "function": "ioctl_version_show",
            "description": "Reports current ioctl version of device attribute using buffer."
        },
        "ipr_copy_ucode_buffer": {
            "id": "ipr_copy_ucode_buffer",
            "ground_truth": 0,
            "function": "ipr_copy_ucode_buffer",
            "description": "Copy user buffer to kernel buffer for microcode image"
        },
        "component_add": {
            "id": "component_add",
            "ground_truth": 0,
            "function": "component_add",
            "description": "Register and bind new component to overall driver for dev function in ops."
        },
        "vwrite": {
            "id": "vwrite",
            "ground_truth": 0,
            "function": "vwrite",
            "description": "Safely writes data to valid vmalloc area, copying from buffer to specified address range."
        },
        "next_sub_range": {
            "id": "next_sub_range",
            "ground_truth": 0,
            "function": "next_sub_range",
            "description": "Compute next search subrange"
        },
        "dummy_rx_push_rss_config": {
            "id": "dummy_rx_push_rss_config",
            "ground_truth": 0,
            "function": "dummy_rx_push_rss_config",
            "description": "Configures the push RSS settings for a dummy RX."
        },
        "blk_mq_exit_queue": {
            "id": "blk_mq_exit_queue",
            "ground_truth": 0,
            "function": "blk_mq_exit_queue",
            "description": "Tag unusable after blk mq exit queue return"
        },
        "nct7904_wdt_start": {
            "id": "nct7904_wdt_start",
            "ground_truth": 0,
            "function": "nct7904_wdt_start",
            "description": "Watchdog function"
        },
        "mpc1_insert_plane": {
            "id": "mpc1_insert_plane",
            "ground_truth": 0,
            "function": "mpc1_insert_plane",
            "description": "Inserts dpp into mpc tree at specified blending position for blending chain in out mpc context."
        },
        "ieee80211_txq_schedule_start": {
            "id": "ieee80211_txq_schedule_start",
            "ground_truth": 1,
            "function": "ieee80211_txq_schedule_start",
            "description": "Starts new txq scheduling round, not parallel"
        },
        "ixgbe_fc_autoneg_backplane": {
            "id": "ixgbe_fc_autoneg_backplane",
            "ground_truth": 0,
            "function": "ixgbe_fc_autoneg_backplane",
            "description": "Enables IEEE flow control on ixgbe hardware."
        },
        "snd_atiixp_spdif_prepare": {
            "id": "snd_atiixp_spdif_prepare",
            "ground_truth": 0,
            "function": "snd_atiixp_spdif_prepare",
            "description": "Spdif out setup with slot and format"
        },
        "fsl_easrc_release_slot": {
            "id": "fsl_easrc_release_slot",
            "ground_truth": 0,
            "function": "fsl_easrc_release_slot",
            "description": "Clears slot configuration in FSL EASRC release slot function."
        },
        "usbnet_probe": {
            "id": "usbnet_probe",
            "ground_truth": 0,
            "function": "usbnet_probe",
            "description": "USB network driver using usbnet core library"
        },
        "z8530_read_port": {
            "id": "z8530_read_port",
            "ground_truth": 1,
            "function": "z8530_read_port",
            "description": "Reads unsigned long from provided port access method with possible delay"
        },
        "wakeup_sources_read_unlock": {
            "id": "wakeup_sources_read_unlock",
            "ground_truth": 0,
            "function": "wakeup_sources_read_unlock",
            "description": "Unlock wakeup source list and return corresponding value."
        },
        "il_hdl_scan": {
            "id": "il_hdl_scan",
            "ground_truth": 0,
            "function": "il_hdl_scan",
            "description": "HDL vulnerability scan service response"
        },
        "fscache_submit_exclusive_op": {
            "id": "fscache_submit_exclusive_op",
            "ground_truth": 0,
            "function": "fscache_submit_exclusive_op",
            "description": "Submit exclusive op for object, exclude other ops, get extra ref."
        },
        "requeue_pi_wake_futex": {
            "id": "requeue_pi_wake_futex",
            "ground_truth": 1,
            "function": "requeue_pi_wake_futex",
            "description": "Wake task after requeue with possible futex acquisition"
        },
        "usb_reset_and_verify_device": {
            "id": "usb_reset_and_verify_device",
            "ground_truth": 1,
            "function": "usb_reset_and_verify_device",
            "description": "USB port reset to reinitialize device, not for composite devices with multiple interfaces. Use usb reset device for those."
        },
        "lcdc_irq_handler_rev02": {
            "id": "lcdc_irq_handler_rev02",
            "ground_truth": 0,
            "function": "lcdc_irq_handler_rev02",
            "description": "LCD version IRQ handler function"
        },
        "idt_ntb_link_enable": {
            "id": "idt_ntb_link_enable",
            "ground_truth": 0,
            "function": "idt_ntb_link_enable",
            "description": "Enables local port NTB link with NTB API callback. PCIe link parameters are ignored. Max NTB device context."
        },
        "e1000_acquire_phy_80003es2lan": {
            "id": "e1000_acquire_phy_80003es2lan",
            "ground_truth": 1,
            "function": "e1000_acquire_phy_80003es2lan",
            "description": "Acquire access right to correct phy using e1000 hw pointer."
        },
        "misaligned_fixup": {
            "id": "misaligned_fixup",
            "ground_truth": 0,
            "function": "misaligned_fixup",
            "description": "Fixes misaligned access errors, returns success or error."
        },
        "brcms_c_validboardtype": {
            "id": "brcms_c_validboardtype",
            "ground_truth": 0,
            "function": "brcms_c_validboardtype",
            "description": "Board info parameter validation function"
        },
        "cnstr_shdsc_gcm_decap": {
            "id": "cnstr_shdsc_gcm_decap",
            "ground_truth": 0,
            "function": "cnstr_shdsc_gcm_decap",
            "description": "code for GCM decapsulation with shared descriptor construction."
        },
        "usb_hcd_check_unlink_urb": {
            "id": "usb_hcd_check_unlink_urb",
            "ground_truth": 1,
            "function": "usb_hcd_check_unlink_urb",
            "description": " Check if urb can be unlinked, called by HCD dequeue method, requires private spinlock and disabled interrupt."
        },
        "local_lock_irq": {
            "id": "local_lock_irq",
            "ground_truth": 1,
            "function": "local_lock_irq",
            "description": "Acquire local lock, disable interrupt, lock variable"
        },
        "fpu__resume_cpu": {
            "id": "fpu__resume_cpu",
            "ground_truth": 0,
            "function": "fpu__resume_cpu",
            "description": "Restore minimal FPU state after suspend"
        },
        "bc_enable": {
            "id": "bc_enable",
            "ground_truth": 0,
            "function": "bc_enable",
            "description": "Enables cache on certain non-dma coherent chipsets for specific CPUs."
        },
        "count_get": {
            "id": "count_get",
            "ground_truth": 0,
            "function": "count_get",
            "description": "Count and get information of SCMI clock protocol operations."
        },
        "xenbus_dev_fatal": {
            "id": "xenbus_dev_fatal",
            "ground_truth": 0,
            "function": "xenbus_dev_fatal",
            "description": "Xenbus driver orderly closedown scheduling on fatal error."
        },
        "v9fs_fid_find": {
            "id": "v9fs_fid_find",
            "ground_truth": 0,
            "function": "v9fs_fid_find",
            "description": "Retrieve fid for specified user from dentry using kuid uid"
        },
        "qib_setup_eagerbufs": {
            "id": "qib_setup_eagerbufs",
            "ground_truth": 0,
            "function": "qib_setup_eagerbufs",
            "description": "Allocate and program eager tid buffer into hip, multiple allocation calls to avoid oom code."
        },
        "padata_find_next": {
            "id": "padata_find_next",
            "ground_truth": 0,
            "function": "padata_find_next",
            "description": "next object for serialization found or not in percpu reorder queue"
        },
        "drm_atomic_helper_disable_all": {
            "id": "drm_atomic_helper_disable_all",
            "ground_truth": 1,
            "function": "drm_atomic_helper_disable_all",
            "description": "Disable all active outputs by turning off connectors and deactivating crtc."
        },
        "build_header": {
            "id": "build_header",
            "ground_truth": 0,
            "function": "build_header",
            "description": "Creates ARCNET hard/soft header for RFC1051."
        },
        "pwc_get_u8_ctrl": {
            "id": "pwc_get_u8_ctrl",
            "ground_truth": 0,
            "function": "pwc_get_u8_ctrl",
            "description": "Helper for getting/setting control"
        },
        "reiserfs_clean_and_file_buffer": {
            "id": "reiserfs_clean_and_file_buffer",
            "ground_truth": 0,
            "function": "reiserfs_clean_and_file_buffer",
            "description": "Clears dirty buffer and adds to clean list, prevents refiling after block is freed."
        },
        "ep11_query_info": {
            "id": "ep11_query_info",
            "ground_truth": 0,
            "function": "ep11_query_info",
            "description": "Helper function for ep11 query with given type."
        },
        "inc_deq": {
            "id": "inc_deq",
            "ground_truth": 0,
            "function": "inc_deq",
            "description": "Consumer function for event ring, avoids full link trbs to prevent looping."
        },
        "tep_test_flag": {
            "id": "tep_test_flag",
            "ground_truth": 1,
            "function": "tep_test_flag",
            "description": "Check event parser flag state, return true if set"
        },
        "e1000_acquire_swflag_ich8lan": {
            "id": "e1000_acquire_swflag_ich8lan",
            "ground_truth": 1,
            "function": "e1000_acquire_swflag_ich8lan",
            "description": "Acquires software control flag for phy and mac csr access."
        },
        "vmw_stream_hw_destroy": {
            "id": "vmw_stream_hw_destroy",
            "ground_truth": 0,
            "function": "vmw_stream_hw_destroy",
            "description": "Destroys hardware resources used by vmw stream."
        },
        "smk_access": {
            "id": "smk_access",
            "ground_truth": 1,
            "function": "smk_access",
            "description": " Check subject's access to object in access rule list, return permission or check smack labels."
        },
        "ali14xx_set_pio_mode": {
            "id": "ali14xx_set_pio_mode",
            "ground_truth": 0,
            "function": "ali14xx_set_pio_mode",
            "description": "Sets PIO mode for drive, computes timing parameter, sets controller register."
        },
        "set_pin_target": {
            "id": "set_pin_target",
            "ground_truth": 0,
            "function": "set_pin_target",
            "description": "Sets and writes requested pinctl target value."
        },
        "unw_decode": {
            "id": "unw_decode",
            "ground_truth": 0,
            "function": "unw_decode",
            "description": "Decode descriptor, return next address."
        },
        "spu_activate": {
            "id": "spu_activate",
            "ground_truth": 0,
            "function": "spu_activate",
            "description": "Find and execute free spu for context, add to runqueue if none available."
        },
        "afs_fs_fetch_acl": {
            "id": "afs_fs_fetch_acl",
            "ground_truth": 0,
            "function": "afs_fs_fetch_acl",
            "description": "Fetch file's ACL"
        },
        "rtc_open": {
            "id": "rtc_open",
            "ground_truth": 0,
            "function": "rtc_open",
            "description": "Enforces single user access with open/close."
        },
        "hpi_dsp_code_read_block": {
            "id": "hpi_dsp_code_read_block",
            "ground_truth": 0,
            "function": "hpi_dsp_code_read_block",
            "description": "Reads DSP code block into internal buffer, returns pointer. References array if already in memory, returns error if not."
        },
        "c67x00_do_work": {
            "id": "c67x00_do_work",
            "ground_truth": 0,
            "function": "c67x00_do_work",
            "description": "Scheduler state machine for c67x00 work"
        },
        "snd_soc_component_read": {
            "id": "snd_soc_component_read",
            "ground_truth": 0,
            "function": "snd_soc_component_read",
            "description": "Read register value from snd_soc_component."
        },
        "reset_at[BIT2BYTE": {
            "id": "reset_at[BIT2BYTE",
            "ground_truth": 0,
            "function": "reset_at[BIT2BYTE",
            "description": "Reset function for IB port use cases."
        },
        "ttusb_dec_set_interface": {
            "id": "ttusb_dec_set_interface",
            "ground_truth": 0,
            "function": "ttusb_dec_set_interface",
            "description": "USB interface setting may briefly disrupt communication, avoid calling before communication attempt."
        },
        "sxgbe_hw_init": {
            "id": "sxgbe_hw_init",
            "ground_truth": 1,
            "function": "sxgbe_hw_init",
            "description": "Initialize gmac device, check hw capability, set driver feature struct and priv data."
        },
        "LM75_TEMP_TO_REG": {
            "id": "LM75_TEMP_TO_REG",
            "ground_truth": 0,
            "function": "LM75_TEMP_TO_REG",
            "description": "Converts temperature from -55\u00b0C to 125\u00b0C to 2's complement 5-bit register (LM75)."
        },
        "intel_guc_ct_init_early": {
            "id": "intel_guc_ct_init_early",
            "ground_truth": 0,
            "function": "intel_guc_ct_init_early",
            "description": "Initializes ct state without device access using intel guc ct pointer."
        },
        "jbd2_journal_force_commit": {
            "id": "jbd2_journal_force_commit",
            "ground_truth": 0,
            "function": "jbd2_journal_force_commit",
            "description": "Forces unconditional commit of uncommitted transaction, may cause deadlock."
        },
        "get_cache_mode": {
            "id": "get_cache_mode",
            "ground_truth": 0,
            "function": "get_cache_mode",
            "description": "cache access control failure mode"
        },
        "ice_update_ring_stats": {
            "id": "ice_update_ring_stats",
            "ground_truth": 0,
            "function": "ice_update_ring_stats",
            "description": "Updates ring statistics by incrementing per vector counter."
        },
        "ArcGetEnvironmentVariable": {
            "id": "ArcGetEnvironmentVariable",
            "ground_truth": 0,
            "function": "ArcGetEnvironmentVariable",
            "description": "Environment variable routine"
        },
        "vmw_kms_stdu_init_display": {
            "id": "vmw_kms_stdu_init_display",
            "ground_truth": 1,
            "function": "vmw_kms_stdu_init_display",
            "description": "Initialize screen target display device for rendering"
        },
        "spi_test_run_tests": {
            "id": "spi_test_run_tests",
            "ground_truth": 0,
            "function": "spi_test_run_tests",
            "description": "Run SPI message tests on SPI device with error status"
        },
        "igb_phy_hw_reset": {
            "id": "igb_phy_hw_reset",
            "ground_truth": 1,
            "function": "igb_phy_hw_reset",
            "description": "Reset phy hardware, verify block not blocking, acquire semaphore if needed, read set write."
        },
        "bd_needed_req": {
            "id": "bd_needed_req",
            "ground_truth": 0,
            "function": "bd_needed_req",
            "description": "Returns number of required BD for transfer."
        },
        "cpu_probe": {
            "id": "cpu_probe",
            "ground_truth": 0,
            "function": "cpu_probe",
            "description": "CPU capability and feature information probed."
        },
        "xfs_inode_measure_sickness": {
            "id": "xfs_inode_measure_sickness",
            "ground_truth": 0,
            "function": "xfs_inode_measure_sickness",
            "description": "Identify unhealthy inode parts"
        },
        "ice_is_vf_trusted": {
            "id": "ice_is_vf_trusted",
            "ground_truth": 0,
            "function": "ice_is_vf_trusted",
            "description": "Checks trustworthiness of ICE VF pointer"
        },
        "state_eval_encoder_ok": {
            "id": "state_eval_encoder_ok",
            "ground_truth": 0,
            "function": "state_eval_encoder_ok",
            "description": "Evaluate state encoder's changeability"
        },
        "queued_read_trylock": {
            "id": "queued_read_trylock",
            "ground_truth": 1,
            "function": "queued_read_trylock",
            "description": "Attempt to acquire read lock of queue rwlock struct, return success or failure."
        },
        "dpu_hw_catalog_deinit": {
            "id": "dpu_hw_catalog_deinit",
            "ground_truth": 0,
            "function": "dpu_hw_catalog_deinit",
            "description": "Cleanup DPU hardware catalog after initialization"
        },
        "drm_edid_block_valid": {
            "id": "drm_edid_block_valid",
            "ground_truth": 1,
            "function": "drm_edid_block_valid",
            "description": "Validate and check EDID block, dump bad block if needed."
        },
        "snd_emu8000_free": {
            "id": "snd_emu8000_free",
            "ground_truth": 0,
            "function": "snd_emu8000_free",
            "description": "Free resource in snd_emu8000 driver."
        },
        "ecryptfs_verify_auth_tok_from_key": {
            "id": "ecryptfs_verify_auth_tok_from_key",
            "ground_truth": 1,
            "function": "ecryptfs_verify_auth_tok_from_key",
            "description": "Verifies authentication token from key, returns error codes if invalid or revoked."
        },
        "of_dma_get_range": {
            "id": "of_dma_get_range",
            "ground_truth": 0,
            "function": "of_dma_get_range",
            "description": "Get DMA range info, parse and store in map array."
        },
        "rseq_cmpnev_storeoffp_load": {
            "id": "rseq_cmpnev_storeoffp_load",
            "ground_truth": 0,
            "function": "rseq_cmpnev_storeoffp_load",
            "description": "Compare, load, and store content based on expectation and voffp."
        },
        "netlbl_unlabel_genl_init": {
            "id": "netlbl_unlabel_genl_init",
            "ground_truth": 0,
            "function": "netlbl_unlabel_genl_init",
            "description": "Registers unlabeled netlabel component with generic netlink, returns success or failure."
        },
        "qeth_send_simple_setassparms": {
            "id": "qeth_send_simple_setassparms",
            "ground_truth": 0,
            "function": "qeth_send_simple_setassparms",
            "description": "IPv4 variant of qeth_send_simple_setassparms function"
        },
        "gb_pm_runtime_get_sync": {
            "id": "gb_pm_runtime_get_sync",
            "ground_truth": 0,
            "function": "gb_pm_runtime_get_sync",
            "description": "Bundle runtime power management wrapper"
        },
        "to_dpu_hw_mixer": {
            "id": "to_dpu_hw_mixer",
            "ground_truth": 0,
            "function": "to_dpu_hw_mixer",
            "description": "Converts DPU HW base to container struct with hardware block pointer"
        },
        "fix_to_virt": {
            "id": "fix_to_virt",
            "ground_truth": 0,
            "function": "fix_to_virt",
            "description": "Index to address translation with bug detection for null deference and illegal range."
        },
        "snd_hda_jack_detect_enable": {
            "id": "snd_hda_jack_detect_enable",
            "ground_truth": 0,
            "function": "snd_hda_jack_detect_enable",
            "description": "Enable jack detection on pin with default callback, return 0 if successful."
        },
        "lpfc_discovery_wait": {
            "id": "lpfc_discovery_wait",
            "ground_truth": 0,
            "function": "lpfc_discovery_wait",
            "description": "Wait for driver discovery to quiesce during vport delete"
        },
        "TI_SCI_MSG_FLAG": {
            "id": "TI_SCI_MSG_FLAG",
            "ground_truth": 0,
            "function": "TI_SCI_MSG_FLAG",
            "description": "Manage IRQ request to configure/release route between dev and host. Bit determines validity of corresponding field."
        },
        "i40e_set_hw_flags": {
            "id": "i40e_set_hw_flags",
            "ground_truth": 0,
            "function": "i40e_set_hw_flags",
            "description": "Sets hardware flag for i40e hardware structure."
        },
        "down_interruptible": {
            "id": "down_interruptible",
            "ground_truth": 1,
            "function": "down_interruptible",
            "description": " Semaphore acquisition with sleep on unavailability."
        },
        "cpc925_htlink_init": {
            "id": "cpc925_htlink_init",
            "ground_truth": 0,
            "function": "cpc925_htlink_init",
            "description": "CPC925 chipset HT link device init"
        },
        "cas_page_dequeue": {
            "id": "cas_page_dequeue",
            "ground_truth": 0,
            "function": "cas_page_dequeue",
            "description": "Dequeue page from list"
        },
        "j1939_local_ecu_put": {
            "id": "j1939_local_ecu_put",
            "ground_truth": 0,
            "function": "j1939_local_ecu_put",
            "description": "Cache local data"
        }
    }
}