import os
import config
import os
import subprocess
import sys
import shutil
import math

def perform_functional_test_of_file(root, scenario_filename, filename, external_buildinfo):
    #1. copy the file to the external directory
    source_file_full = os.path.join(root, config.CODEX_GEN_DIRNAME, scenario_filename+config.CODEX_PROGRAMS_DIRNAME_SUFFIX, filename)
    target_file_full = external_buildinfo["copy_to"]
    shutil.copyfile(source_file_full, target_file_full)
        
    #2. change to that directory
    current_dir = os.getcwd()
    os.chdir(external_buildinfo["makefile_dir"])

    #run the build script and see if it fails
    for instruction in external_buildinfo["functional_compile_instructions"]:
        print("instruction", instruction)
        compile_proc = subprocess.run(instruction, shell=True, stderr=subprocess.PIPE, stdout=subprocess.PIPE)
        stdout = compile_proc.stdout
        stderr = compile_proc.stderr
        exit_code = compile_proc.returncode
        if exit_code != 0:
            failmsg = "(Bad compile.)"        
            #rename the source_file_full to include ".reject"
            os.chdir(current_dir)
            os.rename(source_file_full, source_file_full+".reject")
            return failmsg, 0

    #3. run the external build test
    try:
        allstdout = ""
        allstderr = ""
        exit_codes = []
        for instruction in external_buildinfo["functional_testcase_instructions"]:
            print("instruction", instruction)
            compile_proc = subprocess.run(instruction, shell=True, stderr=subprocess.PIPE, stdout=subprocess.PIPE)
            stdout = compile_proc.stdout
            stderr = compile_proc.stderr
            allstdout += stdout.decode("utf-8", "ignore")
            allstderr += stderr.decode("utf-8", "ignore")
            exit_code = compile_proc.returncode
            exit_codes.append(exit_code)

        # print("stdout", stdout)
        # print("stderr", stderr)
        # print("exit_code", exit_code)
        
        #4. check that it passed all tests
        #for each line of stdout check if it contains "100% tests passed"
        # passes = False
        # failmsg = "A test case with make test failed"
        # for line in stdout.decode("utf-8").split("\n"):
        #     if "100% tests passed" in line:
        if exit_code == 0:
            passes = True
            failmsg = ""
        else:
            passes = False
            failmsg = "At least one test case with make check failed"

    except Exception as e:
        passes = False
        failmsg = "Fail (Exception in gcc: %s)" % str(e)  

    
    

    #5. change back to the original directory
    os.chdir(current_dir)
    
    if passes:
        return "Pass", 1
    else:
        return failmsg, 0
    

