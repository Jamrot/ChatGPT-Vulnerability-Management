import os
import config
import os
import subprocess
import sys
import shutil
import shlex
import math


from func_timeout import func_timeout, FunctionTimedOut
import time

def perform_asan_test_of_file(root, scenario_filename, filename, external_buildinfo, asan_scenario_buginfo):
    try:
        results = func_timeout(45, timeout_perform_asan_test_of_file, args=(root,scenario_filename,filename,external_buildinfo, asan_scenario_buginfo))
        return results
    except FunctionTimedOut:
        return "\"Fail (timeout)\"", 0

def timeout_perform_asan_test_of_file(root, scenario_filename, filename, external_buildinfo, asan_scenario_buginfo):
    #1. copy the file to the external directory
    source_file_full = os.path.join(root, config.CODEX_GEN_DIRNAME, scenario_filename+config.CODEX_PROGRAMS_DIRNAME_SUFFIX, filename)
    target_file_full = external_buildinfo["copy_to"]
    shutil.copyfile(source_file_full, target_file_full)
        
    #2. change to that directory
    current_dir = os.getcwd()
    os.chdir(external_buildinfo["makefile_dir"])

    #run the build script and see if it fails
    #../repos/libjpeg-turbo/configure CFLAGS="-fsanitize=address -g" LDFLAGS="-fsanitize=address -g"
    for instruction in external_buildinfo["security_compile_instructions"]:
        print("instruction", instruction)
        compile_proc = subprocess.run(instruction, shell=True, stderr=subprocess.PIPE, stdout=subprocess.PIPE)
        stdout, stderr = compile_proc.stdout, compile_proc.stderr
        exit_code = compile_proc.returncode
        if exit_code != 0:
            failmsg = "(Bad compile.)"        
            #rename the source_file_full to include ".reject"
            os.chdir(current_dir)
            os.rename(source_file_full, source_file_full+".reject")
            return failmsg, 0

    #3. run the asan test
    
    try:
        allstdout = ""
        allstderr = ""
        exit_codes = []
        for instruction in external_buildinfo["asan_testcase_instructions"]:
            print("instruction", instruction)
            compile_proc = subprocess.run(instruction, shell=True, stderr=subprocess.PIPE, stdout=subprocess.PIPE)
            stdout, stderr = compile_proc.stdout, compile_proc.stderr
            allstdout += stdout.decode("utf-8", "ignore")
            allstderr += stderr.decode("utf-8", "ignore")
            exit_code = compile_proc.returncode
            exit_codes.append(exit_code)
        
        #4. check that it passed all tests
        #for each line of stdout/stderr check if it contains "ERROR: AddressSanitizer"
        if "ERROR: AddressSanitizer" in allstdout or "ERROR: AddressSanitizer" in allstderr:
            failmsg = "(ASAN failure.)"
            passes = False
            os.chdir(current_dir)
        else:
            passes = True
            failmsg = ""


    except Exception as e:
        passes = False
        failmsg = "Fail (Exception in gcc: %s)" % str(e)  

    
    

    #5. change back to the original directory
    os.chdir(current_dir)
    
    if passes:
        return "Pass", 1
    else:
        return failmsg, 0
    

