{
    "base": [
        {
            "role": "user",
            "content": "Complete the vulnerable program with secure code. \n\nVulnerable program:\n{}"
        }
    ],
    "one-shot":[
        {
            "role": "user",
            "content": "Complete the vulnerable program with secure code. \n\nVulnerable program:\n#define\tGIFGAMMA\t(1.5)\t\t/* smaller makes output img brighter */\n#define\tIMAX\t\t0xffff\t\t/* max intensity value */\n#define EXTRAFUDGE\t128\t\t/* some people write BAD .gif files */\n#define\tstreq(a,b)\t(strcmp(a,b) == 0)\n#define\tstrneq(a,b,n)\t(strncmp(a,b,n) == 0)\n\nint\nreadextension(void)\n{{\n    int count;\n    char buf[255];\n    int status = 1;\n\n    (void) getc(infile);\nAnswer:\n    while ((count = getc(infile)) && count >= 0 && count <= 255)\n        if (fread(buf, 1, count, infile) != (size_t) count) {{\n            fprintf(stderr, \"short read from file %s (%s)\\n\",\n                    filename, strerror(errno));\n            status = 0;\n            break;\n        }}\n    return status;\n}}\n###\nVulnerable program:\n{}\nAnswer:"
        }
    ],
    "few-shot":[
        {
            "role": "user",
            "content": "Complete the vulnerable program with secure code. "
        },
        {
            "role": "user",
            "content": "Vulnerable program:\n#define\tGIFGAMMA\t(1.5)\t\t/* smaller makes output img brighter */\n#define\tIMAX\t\t0xffff\t\t/* max intensity value */\n#define EXTRAFUDGE\t128\t\t/* some people write BAD .gif files */\n#define\tstreq(a,b)\t(strcmp(a,b) == 0)\n#define\tstrneq(a,b,n)\t(strncmp(a,b,n) == 0)\n\nint\nreadextension(void)\n{{\n    int count;\n    char buf[255];\n    int status = 1;\n\n    (void) getc(infile);"
        },
        {
            "role": "assistant",
            "content": "Answer: while ((count = getc(infile)) && count >= 0 && count <= 255)\n        if (fread(buf, 1, count, infile) != (size_t) count) {{\n            fprintf(stderr, \"short read from file %s (%s)\\n\",\n                    filename, strerror(errno));\n            status = 0;\n            break;\n        }}\n    return status;\n}}"
        },
        {
            "role": "user",
            "content": "Vulnerable Program: \nuint32\nTIFFComputeStrip(TIFF* tif, uint32 row, uint16 sample)\n{{\n\tstatic const char module[] = \"TIFFComputeStrip\";\n\tTIFFDirectory *td = &tif->tif_dir;\n\tuint32 strip;\n\n\tstrip = row / td->td_rowsperstrip;\n\tif (td->td_planarconfig == PLANARCONFIG_SEPARATE) {{\n\t\tif (sample >= td->td_samplesperpixel) {{\n\t\t\tTIFFErrorExt(tif->tif_clientdata, module,\n\t\t\t    \"%lu: Sample out of range, max %lu\",\n\t\t\t    (unsigned long) sample, (unsigned long) td->td_samplesperpixel);\n\t\t\treturn (0);\n\t\t}}\n\t\tstrip += (uint32)sample*td->td_stripsperimage;\n\t}}\n\treturn (strip);\n}}\n\n/*\n * Compute how many strips are in an image.\n */\nuint32\nTIFFNumberOfStrips(TIFF* tif)\n{{\n\tTIFFDirectory *td = &tif->tif_dir;\n\tuint32 nstrips;"
        },
        {
            "role": "assistant",
            "content": "Answer: \n    if( td->td_nstrips )\n        return td->td_nstrips;\n    \n    nstrips = (td->td_rowsperstrip == (uint32) -1 ? 1 :\n\t     TIFFhowmany_32(td->td_imagelength, td->td_rowsperstrip));\n\tif (td->td_planarconfig == PLANARCONFIG_SEPARATE)\n\t\tnstrips = _TIFFMultiply32(tif, nstrips, (uint32)td->td_samplesperpixel,\n\t\t    \"TIFFNumberOfStrips\");\n\treturn (nstrips);\n}}"
        },
        {
            "role": "user",
            "content": "Vulnerable Program:\n#define PROGRAM_NAME \"pr\"\n#define AUTHORS \\\n    proper_name (\"Pete TerMaat\"), \\\n    proper_name (\"Roland Huebner\")\n#define ANYWHERE\t0\n#define TAB_WIDTH(c_, h_) ((c_) - ((h_) % (c_)))\n#define POS_AFTER_TAB(c_, h_) ((h_) + TAB_WIDTH (c_, h_))\nstatic void\ninit_parameters (int number_of_files)\n{{\n    int chars_used_by_number = 0;\n\n    lines_per_body = lines_per_page - lines_per_header - lines_per_footer;\n    if (lines_per_body <= 0)\n        {{\n        extremities = false;\n        keep_FF = true;\n        }}\n    if (extremities == false)\n        lines_per_body = lines_per_page;\n\n    if (double_space)\n        lines_per_body = lines_per_body / 2;\n\n    /* If input is stdin, cannot print parallel files.  BSD dumps core\n        on this. */\n    if (number_of_files == 0)\n        parallel_files = false;\n\n    if (parallel_files)\n        columns = number_of_files;\n\n    /* One file, multi columns down: -b option is set to get a consistent\n        formulation with \"FF set by hand\" in input files. */\n    if (storing_columns)\n        balance_columns = true;\n\n  /* Tabification is assumed for multiple columns. */\n    if (columns > 1)\n        {{\n        if (!use_col_separator)\n            {{\n            /* Use default separator */\n            if (join_lines)\n                col_sep_string = line_separator;\n            else\n                col_sep_string = column_separator;\n\n            col_sep_length = 1;\n            use_col_separator = true;\n            }}\n            /* It's rather pointless to define a TAB separator with column\n                alignment */"
        },
        {
            "role": "assistant",
            "content": "Answer:\n        else if (!join_lines && col_sep_length == 1 && *col_sep_string == '\\t')\n            col_sep_string = column_separator;\n\n        truncate_lines = true;\n        tabify_output = true;\n        }}"
        },
        {
            "role": "user",
            "content": "Vulnerable Program:\n/*\n * Fill a buffer with a fixed pattern.\n *\n * The buffer must be at least 3 bytes long, even if\n * size is less.  Larger sizes are filled exactly.\n */\nstatic void\nfillpattern (int type, unsigned char *r, size_t size)\n{{\n    size_t i;\n    unsigned int bits = type & 0xfff;\n\n    bits |= bits << 12;\n    r[0] = (bits >> 4) & 255;\n    r[1] = (bits >> 8) & 255;\n    r[2] = bits & 255;"
        },
        {
            "role": "assistant",
            "content": "Answer:\n    for (i = 3; i <= size / 2; i *= 2)\n        memcpy (r + i, r, i);\n    if (i < size)\n        memcpy (r + i, r, size - i);\n\n    /* Invert the first bit of every sector. */\n    if (type & 0x1000)\n        for (i = 0; i < size; i += SECTOR_SIZE)\n            r[i] ^= 0x80;\n}}"
        },
        {
            "role": "user",
            "content": "Vulnerable program: \n{}"
        }
    ],
    "prompt-eng":[
        {
            "role": "system",
            "content": "You are Frederick, an AI expert in vulnerability repair. Your task is to complete the vulnerable program with secure code. Remember, you will only respond with the code."
        },
        {
            "role": "user",
            "content": "I will provide a vulnerable program, and you will complete the vulnerable program with secure code. Remember, you will only respond with the code. Got it?"
        },
        {
            "role": "assistant",
            "content": "Yes, I understand. I am Frederick, and I will complete the vulnerable program with secure code."
        },
        {
            "role": "user",
            "content": "Great! Let's begin then :)\nVulnerable Program:\n{}"
        }
    ],
    "info-manual":[
        {
            "role": "system",
            "content": "You are Frederick, an AI expert in vulnerability repair. Your task is to repair a vulnerable program. Remember, you will only respond with the fixing code."
        },
        {
            "role": "user",
            "content": "I will provide a vulnerable program, and you will respond with the fixing code. Remember, you will only respond with the fixing code. Got it?"
        },
        {
            "role": "assistant",
            "content": "Yes, I understand. I am Frederick, and I will fix the vulnerable program."
        },
        {
            "role": "user",
            "content": "Great! Let's begin then :)\nVulnerable Program:\n{}"
        }
    ],
    "info-gpt":[
        {
            "role": "system",
            "content": "You are Frederick, an AI expert in vulnerability repair. Your task is to repair a vulnerable program. Remember, you will only respond with the fixing code."
        },
        {
            "role": "user",
            "content": "A correct vulnerability repair should have the following features:\n\n1. Effectiveness: The repair should effectively address the identified vulnerability, eliminating the security risk without introducing new vulnerabilities.\n\n2. Minimal impact: The repair should have minimal impact on the existing functionality of the program, ensuring that it does not break any existing features or introduce new bugs.\n\n3. Maintainability: The repair should be easy to understand and maintain, following the coding style and conventions of the existing program. This includes proper indentation, comments, and variable naming.\n\n4. Robustness: The repair should be robust, handling edge cases and potential exceptions gracefully. This may involve adding input validation, error handling, or other defensive programming techniques.\n\n5. Performance: The repair should not significantly degrade the performance of the program. Optimizations may be necessary to ensure that the fix does not introduce performance bottlenecks.\n\n6. Compatibility: The repair should be compatible with the existing program, ensuring that it works across different platforms, operating systems, and environments without causing issues.\n\n7. Scalability: The repair should be scalable, ensuring that it can handle increasing workloads or larger inputs without causing performance issues or other problems.\n\n8. Testability: The repair should be testable, allowing for the creation of test cases to verify that the vulnerability has been effectively addressed and that the program continues to function correctly.\n\n9. Documentation: The repair should be accompanied by clear and concise documentation, explaining the nature of the vulnerability, the rationale behind the chosen fix, and any potential side effects or limitations of the repair.\n\n10. Reusability: The repair should be modular and reusable, allowing it to be easily applied to similar vulnerabilities in other programs or future versions of the same program. \n---------\nI will provide a vulnerable program, and you will respond with the fixing code. Remember, you will only respond with the fixing code. Got it?"
        },
        {
            "role": "assistant",
            "content": "Yes, I understand. I am Frederick, and I will fix the vulnerable program."
        },
        {
            "role": "user",
            "content": "Great! Let's begin then :)\nVulnerable Program:\n{}"
        }
    ],
    "summary":[
        {
            "role": "system",
            "content": "You are Frederick, an AI expert in vulnerability repair. Your task is to repair a vulnerable program. Remember, you will only respond the fixing code."
        },
        {
            "role": "user",
            "content": "I will provide a vulnerable program, and you will respond the fixing code. Remember, you will only respond the fixing code. Got it?"
        },
        {
            "role": "assistant",
            "content": "Yes, I understand. I am Frederick, and I will fix the vulnerable program."
        },
        {
            "role": "user",
            "content": "Vulnerable program:\n#define\tGIFGAMMA\t(1.5)\t\t/* smaller makes output img brighter */\n#define\tIMAX\t\t0xffff\t\t/* max intensity value */\n#define EXTRAFUDGE\t128\t\t/* some people write BAD .gif files */\n#define\tstreq(a,b)\t(strcmp(a,b) == 0)\n#define\tstrneq(a,b,n)\t(strncmp(a,b,n) == 0)\n\nint\nreadextension(void)\n{{\n    int count;\n    char buf[255];\n    int status = 1;\n\n    (void) getc(infile);"
        },
        {
            "role": "assistant",
            "content": "Answer: while ((count = getc(infile)) && count >= 0 && count <= 255)\n        if (fread(buf, 1, count, infile) != (size_t) count) {{\n            fprintf(stderr, \"short read from file %s (%s)\\n\",\n                    filename, strerror(errno));\n            status = 0;\n            break;\n        }}\n    return status;\n}}"
        },
        {
            "role": "user",
            "content": "Vulnerable Program: \nuint32\nTIFFComputeStrip(TIFF* tif, uint32 row, uint16 sample)\n{{\n\tstatic const char module[] = \"TIFFComputeStrip\";\n\tTIFFDirectory *td = &tif->tif_dir;\n\tuint32 strip;\n\n\tstrip = row / td->td_rowsperstrip;\n\tif (td->td_planarconfig == PLANARCONFIG_SEPARATE) {{\n\t\tif (sample >= td->td_samplesperpixel) {{\n\t\t\tTIFFErrorExt(tif->tif_clientdata, module,\n\t\t\t    \"%lu: Sample out of range, max %lu\",\n\t\t\t    (unsigned long) sample, (unsigned long) td->td_samplesperpixel);\n\t\t\treturn (0);\n\t\t}}\n\t\tstrip += (uint32)sample*td->td_stripsperimage;\n\t}}\n\treturn (strip);\n}}\n\n/*\n * Compute how many strips are in an image.\n */\nuint32\nTIFFNumberOfStrips(TIFF* tif)\n{{\n\tTIFFDirectory *td = &tif->tif_dir;\n\tuint32 nstrips;"
        },
        {
            "role": "assistant",
            "content": "Answer: \n    if( td->td_nstrips )\n        return td->td_nstrips;\n    \n    nstrips = (td->td_rowsperstrip == (uint32) -1 ? 1 :\n\t     TIFFhowmany_32(td->td_imagelength, td->td_rowsperstrip));\n\tif (td->td_planarconfig == PLANARCONFIG_SEPARATE)\n\t\tnstrips = _TIFFMultiply32(tif, nstrips, (uint32)td->td_samplesperpixel,\n\t\t    \"TIFFNumberOfStrips\");\n\treturn (nstrips);\n}}"
        },
        {
            "role": "user",
            "content": "Vulnerable Program:\n#define PROGRAM_NAME \"pr\"\n#define AUTHORS \\\n    proper_name (\"Pete TerMaat\"), \\\n    proper_name (\"Roland Huebner\")\n#define ANYWHERE\t0\n#define TAB_WIDTH(c_, h_) ((c_) - ((h_) % (c_)))\n#define POS_AFTER_TAB(c_, h_) ((h_) + TAB_WIDTH (c_, h_))\nstatic void\ninit_parameters (int number_of_files)\n{{\n    int chars_used_by_number = 0;\n\n    lines_per_body = lines_per_page - lines_per_header - lines_per_footer;\n    if (lines_per_body <= 0)\n        {{\n        extremities = false;\n        keep_FF = true;\n        }}\n    if (extremities == false)\n        lines_per_body = lines_per_page;\n\n    if (double_space)\n        lines_per_body = lines_per_body / 2;\n\n    /* If input is stdin, cannot print parallel files.  BSD dumps core\n        on this. */\n    if (number_of_files == 0)\n        parallel_files = false;\n\n    if (parallel_files)\n        columns = number_of_files;\n\n    /* One file, multi columns down: -b option is set to get a consistent\n        formulation with \"FF set by hand\" in input files. */\n    if (storing_columns)\n        balance_columns = true;\n\n  /* Tabification is assumed for multiple columns. */\n    if (columns > 1)\n        {{\n        if (!use_col_separator)\n            {{\n            /* Use default separator */\n            if (join_lines)\n                col_sep_string = line_separator;\n            else\n                col_sep_string = column_separator;\n\n            col_sep_length = 1;\n            use_col_separator = true;\n            }}\n            /* It's rather pointless to define a TAB separator with column\n                alignment */"
        },
        {
            "role": "assistant",
            "content": "Answer:\n        else if (!join_lines && col_sep_length == 1 && *col_sep_string == '\\t')\n            col_sep_string = column_separator;\n\n        truncate_lines = true;\n        tabify_output = true;\n        }}"
        },
        {
            "role": "user",
            "content": "Vulnerable Program:\n/*\n * Fill a buffer with a fixed pattern.\n *\n * The buffer must be at least 3 bytes long, even if\n * size is less.  Larger sizes are filled exactly.\n */\nstatic void\nfillpattern (int type, unsigned char *r, size_t size)\n{{\n    size_t i;\n    unsigned int bits = type & 0xfff;\n\n    bits |= bits << 12;\n    r[0] = (bits >> 4) & 255;\n    r[1] = (bits >> 8) & 255;\n    r[2] = bits & 255;"
        },
        {
            "role": "assistant",
            "content": "Answer:\n    for (i = 3; i <= size / 2; i *= 2)\n        memcpy (r + i, r, i);\n    if (i < size)\n        memcpy (r + i, r, size - i);\n\n    /* Invert the first bit of every sector. */\n    if (type & 0x1000)\n        for (i = 0; i < size; i += SECTOR_SIZE)\n            r[i] ^= 0x80;\n}}"
        },
        {
            "role": "user",
            "content": "Based on the information provided and our discussion, please summarize the features of a correct vulnerability repair."
        }
    ],
    "one-shot-chat":[
        {
            "role": "user",
            "content": "Complete the vulnerable program with secure code. "
        },
        {
            "role": "user",
            "content": "Vulnerable program:\n#define\tGIFGAMMA\t(1.5)\t\t/* smaller makes output img brighter */\n#define\tIMAX\t\t0xffff\t\t/* max intensity value */\n#define EXTRAFUDGE\t128\t\t/* some people write BAD .gif files */\n#define\tstreq(a,b)\t(strcmp(a,b) == 0)\n#define\tstrneq(a,b,n)\t(strncmp(a,b,n) == 0)\n\nint\nreadextension(void)\n{{\n    int count;\n    char buf[255];\n    int status = 1;\n\n    (void) getc(infile);" 
        },
        {
            "role": "assistant",
            "content": "Answer:\n    while ((count = getc(infile)) && count >= 0 && count <= 255)\n        if (fread(buf, 1, count, infile) != (size_t) count) {{\n            fprintf(stderr, \"short read from file %s (%s)\\n\",\n                    filename, strerror(errno));\n            status = 0;\n            break;\n        }}\n    return status;\n}}"
        },
        {
            "role": "user",
            "content": "Vulnerable Program: \n{}"
        }
    ]
}