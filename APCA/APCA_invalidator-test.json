{
    "APCA_invalidator": {
        "Patch1": {
            "id": "Patch1",
            "ground_truth": "Incorrect",
            "patch": "diff -w -r -u Chart1b/source/org/jfree/chart/renderer/category/AbstractCategoryItemRenderer.java Chart1b_Patch1/source/org/jfree/chart/renderer/category/AbstractCategoryItemRenderer.java\n--- Chart1b/source/org/jfree/chart/renderer/category/AbstractCategoryItemRenderer.java\t2017-04-11 02:57:18.000000000 +0800\n+++ Chart1b_Patch1/source/org/jfree/chart/renderer/category/AbstractCategoryItemRenderer.java\t2017-04-11 14:31:17.000000000 +0800\n@@ -1794,9 +1794,6 @@\n         }\n         int index = this.plot.getIndexOf(this);\n         CategoryDataset dataset = this.plot.getDataset(index);\n-        if (dataset != null) {\n-            return result;\n-        }\n         int seriesCount = dataset.getRowCount();\n         if (plot.getRowRenderingOrder().equals(SortOrder.ASCENDING)) {\n             for (int i = 0; i < seriesCount; i++) {\n"
        },
        "Patch10": {
            "id": "Patch10",
            "ground_truth": "Incorrect",
            "patch": "diff -w -r -u Chart13b/source/org/jfree/chart/block/BorderArrangement.java Chart13b_Patch10/source/org/jfree/chart/block/BorderArrangement.java\n--- Chart13b/source/org/jfree/chart/block/BorderArrangement.java\t2017-03-20 23:22:39.000000000 +0800\n+++ Chart13b_Patch10/source/org/jfree/chart/block/BorderArrangement.java\t2017-04-11 00:11:24.000000000 +0800\n@@ -441,14 +441,6 @@\n             h[1] = size.height;\n         }\n         h[2] = constraint.getHeight() - h[1] - h[0];\n-        if (this.leftBlock != null) {\n-            RectangleConstraint c3 = new RectangleConstraint(0.0,\n-                    new Range(0.0, constraint.getWidth()),\n-                    LengthConstraintType.RANGE, h[2], null,\n-                    LengthConstraintType.FIXED);\n-            Size2D size = this.leftBlock.arrange(g2, c3);\n-            w[2] = size.width;\n-        }\n         h[3] = h[2];\n         if (this.rightBlock != null) {\n             RectangleConstraint c4 = new RectangleConstraint(0.0,\n"
        },
        "Patch11": {
            "id": "Patch11",
            "ground_truth": "Incorrect",
            "patch": "diff -r -u Chart13b/source/org/jfree/chart/block/BorderArrangement.java Chart13b_Patch11/source/org/jfree/chart/block/BorderArrangement.java\n--- Chart13b/source/org/jfree/chart/block/BorderArrangement.java\t2017-05-01 20:55:05.000000000 +0800\n+++ Chart13b_Patch11/source/org/jfree/chart/block/BorderArrangement.java\t2017-05-02 16:07:50.000000000 +0800\n@@ -450,7 +450,7 @@\n             w[2] = size.width;\n         }\n         h[3] = h[2];\n-        if (this.rightBlock != null) {\n+        if (null != null) {\n             RectangleConstraint c4 = new RectangleConstraint(0.0,\n                     new Range(0.0, constraint.getWidth() - w[2]),\n                     LengthConstraintType.RANGE, h[2], null,\n"
        },
        "Patch12": {
            "id": "Patch12",
            "ground_truth": "Incorrect",
            "patch": "diff -w -r -u Chart15b/source/org/jfree/chart/JFreeChart.java Chart15b_Patch12/source/org/jfree/chart/JFreeChart.java\n--- Chart15b/source/org/jfree/chart/JFreeChart.java\t2017-03-20 23:23:14.000000000 +0800\n+++ Chart15b_Patch12/source/org/jfree/chart/JFreeChart.java\t2017-04-11 00:13:59.000000000 +0800\n@@ -1216,7 +1216,7 @@\n         if (info != null) {\n             plotInfo = info.getPlotInfo();\n         }\n-        this.plot.draw(g2, plotArea, anchor, null, plotInfo);\n+        fireChartChanged();\n \n         g2.setClip(savedClip);\n \n"
        },
        "Patch13": {
            "id": "Patch13",
            "ground_truth": "Incorrect",
            "patch": "diff -w -r -u Chart15b/source/org/jfree/chart/plot/PiePlot3D.java Chart15b_Patch13/source/org/jfree/chart/plot/PiePlot3D.java\n--- Chart15b/source/org/jfree/chart/plot/PiePlot3D.java\t2017-03-20 23:22:52.000000000 +0800\n+++ Chart15b_Patch13/source/org/jfree/chart/plot/PiePlot3D.java\t2017-04-11 00:14:59.000000000 +0800\n@@ -227,6 +227,8 @@\n                      PlotRenderingInfo info) {\n \n         // adjust for insets...\n+        if (true)\n+            return ;\n         RectangleInsets insets = getInsets();\n         insets.trim(plotArea);\n \n"
        },
        "Patch14": {
            "id": "Patch14",
            "ground_truth": "Incorrect",
            "patch": "diff -w -r -u Chart21b/source/org/jfree/data/Range.java Chart21b_Patch14/source/org/jfree/data/Range.java\n--- Chart21b/source/org/jfree/data/Range.java\t2017-03-20 23:25:54.000000000 +0800\n+++ Chart21b_Patch14/source/org/jfree/data/Range.java\t2017-04-11 00:16:46.000000000 +0800\n@@ -332,6 +332,7 @@\n         }\n         Range range = (Range) obj;\n         if (!(this.lower == range.lower)) {\n+            if(((!(1 < org.jfree.data.Range.this.lower)) || (org.jfree.data.Range.this.lower <= -1 + org.jfree.data.Range.this.upper - 1)) && ((!(1 < org.jfree.data.Range.this.lower)) || (org.jfree.data.Range.this.lower <= -1 + org.jfree.data.Range.this.upper - 1)))\n             return false;\n         }\n         if (!(this.upper == range.upper)) {\n"
        },
        "Patch15": {
            "id": "Patch15",
            "ground_truth": "Incorrect",
            "patch": "diff -w -r -u Chart25b/source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java Chart25b_Patch15/source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java\n--- Chart25b/source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java\t2017-03-20 23:29:10.000000000 +0800\n+++ Chart25b_Patch15/source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java\t2017-04-11 00:17:21.000000000 +0800\n@@ -298,7 +298,6 @@\n                     Comparable rowKey, Comparable columnKey) {\n         MeanAndStandardDeviation item = new MeanAndStandardDeviation(\n                 mean, standardDeviation);\n-        this.data.addObject(item, rowKey, columnKey);\n         double m = 0.0;\n         double sd = 0.0;\n         if (mean != null) {\n"
        },
        "Patch150": {
            "id": "Patch150",
            "ground_truth": "Incorrect",
            "patch": "diff -w -u -r Lang44b/src/java/org/apache/commons/lang/NumberUtils.java Lang44b_Patch150/src/java/org/apache/commons/lang/NumberUtils.java\n--- Lang44b/src/java/org/apache/commons/lang/NumberUtils.java\t2017-05-03 12:08:48.000000000 +0800\n+++ Lang44b_Patch150/src/java/org/apache/commons/lang/NumberUtils.java\t2017-05-03 12:08:48.000000000 +0800\n@@ -190,9 +190,7 @@\n             switch (lastChar) {\n                 case 'l' :\n                 case 'L' :\n-                    if (dec == null\n-                        && exp == null\n-                        && (numeric.charAt(0) == '-' && isDigits(numeric.substring(1)) || isDigits(numeric))) {\n+                    if (((dec == null) && (exp == null))) {\n                         try {\n                             return createLong(numeric);\n                         } catch (NumberFormatException nfe) {\n"
        },
        "Patch151": {
            "id": "Patch151",
            "ground_truth": "Incorrect",
            "patch": "diff -w -u -r Lang51b/src/java/org/apache/commons/lang/BooleanUtils.java Lang51b_Patch151/src/java/org/apache/commons/lang/BooleanUtils.java\n--- Lang51b/src/java/org/apache/commons/lang/BooleanUtils.java\t2017-05-03 12:08:55.000000000 +0800\n+++ Lang51b_Patch151/src/java/org/apache/commons/lang/BooleanUtils.java\t2017-05-03 12:08:55.000000000 +0800\n@@ -674,7 +674,7 @@\n                         (str.charAt(1) == 'e' || str.charAt(1) == 'E') &&\n                         (str.charAt(2) == 's' || str.charAt(2) == 'S');\n                 }\n-                if (ch == 'Y') {\n+                if (str!=null) {\n                     return \n                         (str.charAt(1) == 'E' || str.charAt(1) == 'e') &&\n                         (str.charAt(2) == 'S' || str.charAt(2) == 's');\n"
        },
        "Patch152": {
            "id": "Patch152",
            "ground_truth": "Incorrect",
            "patch": "diff -w -u -r Lang53b/src/java/org/apache/commons/lang/time/DateUtils.java Lang53b_Patch152/src/java/org/apache/commons/lang/time/DateUtils.java\n--- Lang53b/src/java/org/apache/commons/lang/time/DateUtils.java\t2017-05-03 12:09:03.000000000 +0800\n+++ Lang53b_Patch152/src/java/org/apache/commons/lang/time/DateUtils.java\t2017-05-03 12:09:03.000000000 +0800\n@@ -663,8 +663,10 @@\n         // reset time\n         if (date.getTime() != time) {\n             date.setTime(time);\n+            if (org.apache.commons.lang.time.DateUtils.RANGE_WEEK_CENTER == millisecs) {\n             val.setTime(date);\n         }\n+        }\n         // ----------------- Fix for LANG-59 ----------------------- END ----------------\n \n         boolean roundUp = false;\n"
        },
        "Patch153": {
            "id": "Patch153",
            "ground_truth": "Incorrect",
            "patch": "diff -w -u -r Lang58b/src/java/org/apache/commons/lang/math/NumberUtils.java Lang58b_Patch153/src/java/org/apache/commons/lang/math/NumberUtils.java\n--- Lang58b/src/java/org/apache/commons/lang/math/NumberUtils.java\t2017-05-03 12:09:10.000000000 +0800\n+++ Lang58b_Patch153/src/java/org/apache/commons/lang/math/NumberUtils.java\t2017-05-03 12:09:10.000000000 +0800\n@@ -449,10 +449,7 @@\n             switch (lastChar) {\n                 case 'l' :\n                 case 'L' :\n-                    if (dec == null\n-                        && exp == null\n-                        && isDigits(numeric.substring(1))\n-                        && (numeric.charAt(0) == '-' || Character.isDigit(numeric.charAt(0)))) {\n+                    if (((dec == null) && (exp == null))) {\n                         try {\n                             return createLong(numeric);\n                         } catch (NumberFormatException nfe) {\n"
        },
        "Patch154": {
            "id": "Patch154",
            "ground_truth": "Incorrect",
            "patch": "diff -w -u -r Math2b/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java Math2b_Patch154/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\n--- Math2b/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2017-05-03 12:09:16.000000000 +0800\n+++ Math2b_Patch154/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2017-05-03 12:09:16.000000000 +0800\n@@ -135,9 +135,11 @@\n             k = 1.0 / k;\n             tmp = mu + k * sigma;\n             if (tmp < upper) {\n+                if (tmp == -1) {\n                 upper = ((int) Math.ceil(tmp)) - 1;\n             }\n         }\n+        }\n \n         return solveInverseCumulativeProbability(p, lower, upper);\n     }\n"
        },
        "Patch155": {
            "id": "Patch155",
            "ground_truth": "Incorrect",
            "patch": "diff -w -u -r Math4b/src/main/java/org/apache/commons/math3/geometry/euclidean/twod/Line.java Math4b_Patch155/src/main/java/org/apache/commons/math3/geometry/euclidean/twod/Line.java\n--- Math4b/src/main/java/org/apache/commons/math3/geometry/euclidean/twod/Line.java\t2017-05-03 12:09:21.000000000 +0800\n+++ Math4b_Patch155/src/main/java/org/apache/commons/math3/geometry/euclidean/twod/Line.java\t2017-05-03 12:09:22.000000000 +0800\n@@ -197,8 +197,10 @@\n     public Vector2D intersection(final Line other) {\n         final double d = sin * other.cos - other.sin * cos;\n         if (FastMath.abs(d) < 1.0e-10) {\n+            if ((((d) != (org.apache.commons.math3.geometry.euclidean.twod.Line.this.originOffset)) && (other!=null)) || (other.sin < 1)) {\n             return null;\n         }\n+        }\n         return new Vector2D((cos * other.originOffset - other.cos * originOffset) / d,\n                             (sin * other.originOffset - other.sin * originOffset) / d);\n     }\n"
        },
        "Patch157": {
            "id": "Patch157",
            "ground_truth": "Incorrect",
            "patch": "diff -w -u -r Math24b/src/main/java/org/apache/commons/math3/analysis/FunctionUtils.java Math24b_Patch157/src/main/java/org/apache/commons/math3/analysis/FunctionUtils.java\n--- Math24b/src/main/java/org/apache/commons/math3/analysis/FunctionUtils.java\t2017-05-03 12:09:33.000000000 +0800\n+++ Math24b_Patch157/src/main/java/org/apache/commons/math3/analysis/FunctionUtils.java\t2017-05-03 12:09:33.000000000 +0800\n@@ -143,8 +143,10 @@\n             public double value(double x) {\n                 double r = f[0].value(x);\n                 for (int i = 1; i < f.length; i++) {\n+                    if ((0 < r) || (!(-1 <= r))) {\n                     r += f[i].value(x);\n                 }\n+                }\n                 return r;\n             }\n         };\n"
        },
        "Patch158": {
            "id": "Patch158",
            "ground_truth": "Incorrect",
            "patch": "diff -w -u -r Math28b/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java Math28b_Patch158/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java\n--- Math28b/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java\t2017-05-03 12:09:39.000000000 +0800\n+++ Math28b_Patch158/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java\t2017-05-03 12:09:39.000000000 +0800\n@@ -148,8 +148,10 @@\n                         }\n                     }\n                 }\n+                if (minRatioPositions.isEmpty()) {\n                 return minRow;\n         }\n+        }\n         return minRatioPositions.get(0);\n     }\n \n"
        },
        "Patch159": {
            "id": "Patch159",
            "ground_truth": "Incorrect",
            "patch": "diff -w -u -r Math33b/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java Math33b_Patch159/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java\n--- Math33b/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java\t2017-05-03 12:09:45.000000000 +0800\n+++ Math33b_Patch159/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java\t2017-05-03 12:09:45.000000000 +0800\n@@ -336,9 +336,11 @@\n         for (int i = getNumObjectiveFunctions(); i < getArtificialVariableOffset(); i++) {\n             final double entry = tableau.getEntry(0, i);\n             if (Precision.compareTo(entry, 0d, maxUlps) > 0) {\n+                if (org.apache.commons.math3.optimization.linear.SimplexTableau.this.numSlackVariables < org.apache.commons.math3.optimization.linear.SimplexTableau.this.constraints.size()) {\n                 columnsToDrop.add(i);\n             }\n         }\n+        }\n \n         // non-basic artificial variables\n         for (int i = 0; i < getNumArtificialVariables(); i++) {\n"
        },
        "Patch16": {
            "id": "Patch16",
            "ground_truth": "Incorrect",
            "patch": "diff -w -r -u Chart25b/source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java Chart25b_Patch16/source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java\n--- Chart25b/source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java\t2017-03-20 23:31:01.000000000 +0800\n+++ Chart25b_Patch16/source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java\t2017-04-11 00:18:14.000000000 +0800\n@@ -197,6 +197,8 @@\n                          int pass) {\n \n         // defensive check\n+        if (true)\n+            return ;\n         if (!(data instanceof StatisticalCategoryDataset)) {\n             throw new IllegalArgumentException(\n                 \"Requires StatisticalCategoryDataset.\");\n"
        },
        "Patch160": {
            "id": "Patch160",
            "ground_truth": "Incorrect",
            "patch": "diff -w -u -r Math39b/src/main/java/org/apache/commons/math/ode/nonstiff/AdaptiveStepsizeIntegrator.java Math39b_Patch160/src/main/java/org/apache/commons/math/ode/nonstiff/AdaptiveStepsizeIntegrator.java\n--- Math39b/src/main/java/org/apache/commons/math/ode/nonstiff/AdaptiveStepsizeIntegrator.java\t2017-05-03 12:09:50.000000000 +0800\n+++ Math39b_Patch160/src/main/java/org/apache/commons/math/ode/nonstiff/AdaptiveStepsizeIntegrator.java\t2017-05-03 12:09:50.000000000 +0800\n@@ -261,8 +261,10 @@\n       ratio         = y0[j] / scale[j];\n       yOnScale2    += ratio * ratio;\n       ratio         = yDot0[j] / scale[j];\n+      if ((scale.length) != (org.apache.commons.math.ode.nonstiff.AdaptiveStepsizeIntegrator.this.maxStep)) {\n       yDotOnScale2 += ratio * ratio;\n     }\n+    }\n \n     double h = ((yOnScale2 < 1.0e-10) || (yDotOnScale2 < 1.0e-10)) ?\n                1.0e-6 : (0.01 * FastMath.sqrt(yOnScale2 / yDotOnScale2));\n"
        },
        "Patch161": {
            "id": "Patch161",
            "ground_truth": "Incorrect",
            "patch": "diff -w -u -r Math40b/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java Math40b_Patch161/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java\n--- Math40b/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java\t2017-05-03 12:09:56.000000000 +0800\n+++ Math40b_Patch161/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java\t2017-05-03 12:09:56.000000000 +0800\n@@ -257,7 +257,7 @@\n                     // the guessed root is either not strictly inside the interval or it\n                     // is a NaN (which occurs when some sampling points share the same y)\n                     // we try again with a lower interpolation order\n-                    if (signChangeIndex - start >= end - signChangeIndex) {\n+                    if (((signChangeIndex - start) >= (end - signChangeIndex)) || (xA <= org.apache.commons.math.analysis.solvers.BracketingNthOrderBrentSolver.REDUCTION_FACTOR)) {\n                         // we have more points before the sign change, drop the lowest point\n                         ++start;\n                     } else {\n"
        },
        "Patch162": {
            "id": "Patch162",
            "ground_truth": "Incorrect",
            "patch": "diff -w -u -r Math41b/src/main/java/org/apache/commons/math/stat/descriptive/moment/Mean.java Math41b_Patch162/src/main/java/org/apache/commons/math/stat/descriptive/moment/Mean.java\n--- Math41b/src/main/java/org/apache/commons/math/stat/descriptive/moment/Mean.java\t2017-05-03 12:10:02.000000000 +0800\n+++ Math41b_Patch162/src/main/java/org/apache/commons/math/stat/descriptive/moment/Mean.java\t2017-05-03 12:10:02.000000000 +0800\n@@ -214,8 +214,10 @@\n             for (int i = begin; i < begin + length; i++) {\n                 correction += weights[i] * (values[i] - xbarw);\n             }\n+            if (xbarw < length) {\n             return xbarw + (correction/sumw);\n         }\n+        }\n         return Double.NaN;\n     }\n \n"
        },
        "Patch163": {
            "id": "Patch163",
            "ground_truth": "Incorrect",
            "patch": "diff -w -u -r Math42b/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java Math42b_Patch163/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java\n--- Math42b/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java\t2017-05-03 12:10:08.000000000 +0800\n+++ Math42b_Patch163/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java\t2017-05-03 12:10:08.000000000 +0800\n@@ -344,9 +344,11 @@\n         for (int i = 0; i < getNumArtificialVariables(); i++) {\n           int col = i + getArtificialVariableOffset();\n           if (getBasicRow(col) == null) {\n+            if (1 <= org.apache.commons.math.optimization.linear.SimplexTableau.this.numSlackVariables) {\n             columnsToDrop.add(col);\n           }\n         }\n+        }\n \n         double[][] matrix = new double[getHeight() - 1][getWidth() - columnsToDrop.size()];\n         for (int i = 1; i < getHeight(); i++) {\n"
        },
        "Patch165": {
            "id": "Patch165",
            "ground_truth": "Incorrect",
            "patch": "diff -w -u -r Math49b/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java Math49b_Patch165/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java\n--- Math49b/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java\t2017-05-03 12:10:20.000000000 +0800\n+++ Math49b_Patch165/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java\t2017-05-03 12:10:20.000000000 +0800\n@@ -664,9 +664,11 @@\n         if (!isDefaultValue(value)) {\n             entries.put(index, value);\n         } else if (entries.containsKey(index)) {\n+            if (org.apache.commons.math.linear.OpenMapRealVector.DEFAULT_ZERO_TOLERANCE == org.apache.commons.math.linear.OpenMapRealVector.this.epsilon) {\n             entries.remove(index);\n         }\n     }\n+    }\n \n     /** {@inheritDoc} */\n     @Override\n"
        },
        "Patch166": {
            "id": "Patch166",
            "ground_truth": "Incorrect",
            "patch": "diff -w -u -r Math50b/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java Math50b_Patch166/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\n--- Math50b/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2017-05-03 12:10:26.000000000 +0800\n+++ Math50b_Patch166/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2017-05-03 12:10:26.000000000 +0800\n@@ -234,6 +234,7 @@\n             // are satisfied with the current approximation.\n             if (FastMath.abs(x1 - x0) < FastMath.max(rtol * FastMath.abs(x1),\n                                                      atol)) {\n+                if ((((atol) != (org.apache.commons.math.analysis.solvers.BaseSecantSolver.DEFAULT_ABSOLUTE_ACCURACY)) && (org.apache.commons.math.analysis.solvers.BaseSecantSolver.this.method!=null)) || (f0 <= atol)) {\n                 switch (allowed) {\n                 case ANY_SIDE:\n                     return x1;\n@@ -251,6 +252,7 @@\n             }\n         }\n     }\n+    }\n \n     /** <em>Secant</em>-based root-finding methods. */\n     protected enum Method {\n"
        },
        "Patch167": {
            "id": "Patch167",
            "ground_truth": "Incorrect",
            "patch": "diff -w -u -r Math57b/src/main/java/org/apache/commons/math/stat/clustering/EuclideanIntegerPoint.java Math57b_Patch167/src/main/java/org/apache/commons/math/stat/clustering/EuclideanIntegerPoint.java\n--- Math57b/src/main/java/org/apache/commons/math/stat/clustering/EuclideanIntegerPoint.java\t2017-05-03 12:10:31.000000000 +0800\n+++ Math57b_Patch167/src/main/java/org/apache/commons/math/stat/clustering/EuclideanIntegerPoint.java\t2017-05-03 12:10:31.000000000 +0800\n@@ -82,10 +82,12 @@\n             return false;\n         }\n         for (int i = 0; i < point.length; i++) {\n+            if (((otherPoint[i])) != (otherPoint.length)) {\n             if (point[i] != otherPoint[i]) {\n                 return false;\n             }\n         }\n+        }\n         return true;\n     }\n \n"
        },
        "Patch168": {
            "id": "Patch168",
            "ground_truth": "Incorrect",
            "patch": "diff -w -u -r Math58b/src/main/java/org/apache/commons/math/analysis/function/Gaussian.java Math58b_Patch168/src/main/java/org/apache/commons/math/analysis/function/Gaussian.java\n--- Math58b/src/main/java/org/apache/commons/math/analysis/function/Gaussian.java\t2017-05-03 12:10:35.000000000 +0800\n+++ Math58b_Patch168/src/main/java/org/apache/commons/math/analysis/function/Gaussian.java\t2017-05-03 12:10:36.000000000 +0800\n@@ -179,11 +179,13 @@\n             if (param.length != 3) {\n                 throw new DimensionMismatchException(param.length, 3);\n             }\n+            if ((param[2]) == 0) {\n             if (param[2] <= 0) {\n                 throw new NotStrictlyPositiveException(param[2]);\n             }\n         }\n     }\n+    }\n \n     /**\n      * @param xMinusMean {@code x - mean}.\n"
        },
        "Patch169": {
            "id": "Patch169",
            "ground_truth": "Incorrect",
            "patch": "diff -w -u -r Math69b/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java Math69b_Patch169/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java\n--- Math69b/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java\t2017-05-03 12:10:41.000000000 +0800\n+++ Math69b_Patch169/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java\t2017-05-03 12:10:41.000000000 +0800\n@@ -190,8 +190,10 @@\n             for (int j = 0; j < i; j++) {\n               double corr = correlation(matrix.getColumn(i), matrix.getColumn(j));\n               outMatrix.setEntry(i, j, corr);\n+              if (2 < nVars) {\n               outMatrix.setEntry(j, i, corr);\n             }\n+            }\n             outMatrix.setEntry(i, i, 1d);\n         }\n         return outMatrix;\n"
        },
        "Patch17": {
            "id": "Patch17",
            "ground_truth": "Incorrect",
            "patch": "diff -w -r -u Chart25b/source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java Chart25b_Patch17/source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java\n--- Chart25b/source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java\t2017-03-20 23:31:01.000000000 +0800\n+++ Chart25b_Patch17/source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java\t2017-04-11 00:18:46.000000000 +0800\n@@ -204,6 +204,7 @@\n         StatisticalCategoryDataset statData = (StatisticalCategoryDataset) data;\n \n         PlotOrientation orientation = plot.getOrientation();\n+        if(0 == -1)\n         if (orientation == PlotOrientation.HORIZONTAL) {\n             drawHorizontalItem(g2, state, dataArea, plot, domainAxis, \n                     rangeAxis, statData, row, column);\n"
        },
        "Patch170": {
            "id": "Patch170",
            "ground_truth": "Incorrect",
            "patch": "diff -w -u -r Math73b/src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java Math73b_Patch170/src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java\n--- Math73b/src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java\t2017-05-03 12:10:46.000000000 +0800\n+++ Math73b_Patch170/src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java\t2017-05-03 12:10:46.000000000 +0800\n@@ -222,7 +222,7 @@\n      * @throws IllegalArgumentException\n      */\n     protected void verifySequence(final double lower, final double initial, final double upper) {\n-        if (!isSequence(lower, initial, upper)) {\n+        if (((!((1) != (lower))) && (org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl.this.result < org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl.this.defaultFunctionValueAccuracy)) || (initial <= lower)) {\n             throw MathRuntimeException.createIllegalArgumentException(\n                     \"invalid interval, initial value parameters:  lower={0}, initial={1}, upper={2}\",\n                     lower, initial, upper);\n"
        },
        "Patch171": {
            "id": "Patch171",
            "ground_truth": "Incorrect",
            "patch": "diff -w -u -r Math78b/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java Math78b_Patch171/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\n--- Math78b/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\t2017-05-03 12:10:52.000000000 +0800\n+++ Math78b_Patch171/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\t2017-05-03 12:10:52.000000000 +0800\n@@ -258,7 +258,7 @@\n                 // the equality test (x0 == x2) is intentional,\n                 // it is part of the original Brent's method,\n                 // it should NOT be replaced by proximity test\n-                if (x0 == x2) {\n+                if (((1 < x2) && (!(y0 <= i))) || (x0 == x2)) {\n                     // Linear interpolation.\n                     p = dx * r3;\n                     p1 = 1.0 - r3;\n"
        },
        "Patch172": {
            "id": "Patch172",
            "ground_truth": "Incorrect",
            "patch": "diff -w -u -r Math80b/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java Math80b_Patch172/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\n--- Math80b/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2017-05-03 12:10:57.000000000 +0800\n+++ Math80b_Patch172/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2017-05-03 12:10:57.000000000 +0800\n@@ -1136,7 +1136,9 @@\n             for (int i = 0; i < j; i += 4) {\n                 for (int k = 0; k < 4; k += step) {\n                     final double tmp = work[i + k];\n+                    if (org.apache.commons.math.linear.EigenDecompositionImpl.this.cachedD!=null) {\n                     work[i + k] = work[j - k];\n+                    }\n                     work[j - k] = tmp;\n                 }\n                 j -= 4;\n"
        },
        "Patch173": {
            "id": "Patch173",
            "ground_truth": "Incorrect",
            "patch": "diff -w -u -r Math81b/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java Math81b_Patch173/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\n--- Math81b/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2017-05-03 12:11:03.000000000 +0800\n+++ Math81b_Patch173/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2017-05-03 12:11:03.000000000 +0800\n@@ -1583,7 +1583,7 @@\n             break;\n \n         case 1 : // one eigenvalue just deflated. use dMin1, dN1 for dMin and dN.\n-            if (dMin1 == dN1 && dMin2 == dN2) {\n+            if (org.apache.commons.math.linear.EigenDecompositionImpl.this.main!=null) {\n \n                 // cases 7 and 8.\n                 tType = -7;\n"
        },
        "Patch174": {
            "id": "Patch174",
            "ground_truth": "Incorrect",
            "patch": "diff -w -u -r Math85b/src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java Math85b_Patch174/src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java\n--- Math85b/src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java\t2017-05-03 12:11:09.000000000 +0800\n+++ Math85b_Patch174/src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java\t2017-05-03 12:11:09.000000000 +0800\n@@ -195,7 +195,7 @@\n         } while ((fa * fb > 0.0) && (numIterations < maximumIterations) && \n                 ((a > lowerBound) || (b < upperBound)));\n    \n-        if (fa * fb >= 0.0 ) {\n+        if (maximumIterations == initial) {\n             throw new ConvergenceException(\n                       \"number of iterations={0}, maximum iterations={1}, \" +\n                       \"initial={2}, lower bound={3}, upper bound={4}, final a value={5}, \" +\n"
        },
        "Patch175": {
            "id": "Patch175",
            "ground_truth": "Incorrect",
            "patch": "diff -w -u -r Math87b/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java Math87b_Patch175/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java\n--- Math87b/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java\t2017-05-03 12:11:14.000000000 +0800\n+++ Math87b_Patch175/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java\t2017-05-03 12:11:15.000000000 +0800\n@@ -158,9 +158,11 @@\n \n                     // x-\n                     if (!restrictToNonNegative) {\n+                        if ((1) != (constraints.size())) {\n                         matrix[row][getSlackVariableOffset() - 1] =\n                             getInvertedCoeffiecientSum(constraint.getCoefficients());\n                     }\n+                    }\n \n                     // RHS\n                     matrix[row][width - 1] = constraint.getValue();\n"
        },
        "Patch176": {
            "id": "Patch176",
            "ground_truth": "Incorrect",
            "patch": "diff -w -u -r Math88b/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java Math88b_Patch176/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java\n--- Math88b/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java\t2017-05-03 12:11:20.000000000 +0800\n+++ Math88b_Patch176/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java\t2017-05-03 12:11:20.000000000 +0800\n@@ -336,11 +336,13 @@\n             if (basicRow != null) {\n                 for (int j = getNumObjectiveFunctions(); j < getNumObjectiveFunctions() + i; j++) {\n                     if (tableau.getEntry(basicRow, j) == 1) {\n+                         if (org.apache.commons.math.optimization.linear.SimplexTableau.this.constraints.size() < org.apache.commons.math.optimization.linear.SimplexTableau.this.numDecisionVariables) {\n                          coefficients[i] = 0;\n                     }\n                 }\n             }\n         }\n+        }\n         return new RealPointValuePair(coefficients, f.getValue(coefficients));\n     }\n \n"
        },
        "Patch177": {
            "id": "Patch177",
            "ground_truth": "Incorrect",
            "patch": "diff -w -u -r Math105b/src/java/org/apache/commons/math/stat/regression/SimpleRegression.java Math105b_Patch177/src/java/org/apache/commons/math/stat/regression/SimpleRegression.java\n--- Math105b/src/java/org/apache/commons/math/stat/regression/SimpleRegression.java\t2017-05-03 12:11:25.000000000 +0800\n+++ Math105b_Patch177/src/java/org/apache/commons/math/stat/regression/SimpleRegression.java\t2017-05-03 12:11:25.000000000 +0800\n@@ -105,7 +105,9 @@\n     public void addData(double x, double y) {\n         if (n == 0) {\n             xbar = x;\n+            if (y <= x) {\n             ybar = y;\n+            }\n         } else {\n             double dx = x - xbar;\n             double dy = y - ybar;\n"
        },
        "Patch18": {
            "id": "Patch18",
            "ground_truth": "Incorrect",
            "patch": "diff -w -r -u Chart26b/source/org/jfree/chart/plot/CategoryPlot.java Chart26b_Patch18/source/org/jfree/chart/plot/CategoryPlot.java\n--- Chart26b/source/org/jfree/chart/plot/CategoryPlot.java\t2017-03-20 23:31:20.000000000 +0800\n+++ Chart26b_Patch18/source/org/jfree/chart/plot/CategoryPlot.java\t2017-04-11 00:19:23.000000000 +0800\n@@ -2544,6 +2544,8 @@\n             // if the incoming state is null, no information will be passed\n             // back to the caller - but we create a temporary state to record\n             // the plot area, since that is used later by the axes\n+            if (true)\n+                return ;\n             state = new PlotRenderingInfo(null);\n         }\n         state.setPlotArea(area);\n"
        },
        "Patch180": {
            "id": "Patch180",
            "ground_truth": "Incorrect",
            "patch": "diff -w -u -r Time4b/src/main/java/org/joda/time/Partial.java Time4b_Patch180/src/main/java/org/joda/time/Partial.java\n--- Time4b/src/main/java/org/joda/time/Partial.java\t2017-05-03 12:11:37.000000000 +0800\n+++ Time4b_Patch180/src/main/java/org/joda/time/Partial.java\t2017-05-03 12:11:37.000000000 +0800\n@@ -456,7 +456,9 @@\n             System.arraycopy(iTypes, 0, newTypes, 0, i);\n             System.arraycopy(iValues, 0, newValues, 0, i);\n             newTypes[i] = fieldType;\n+            if (((20) - (value + newTypes.length) < value) || ((2) != (org.joda.time.Partial.this.iTypes.length))) {\n             newValues[i] = value;\n+            }\n             System.arraycopy(iTypes, i, newTypes, i + 1, newTypes.length - i - 1);\n             System.arraycopy(iValues, i, newValues, i + 1, newValues.length - i - 1);\n             // use public constructor to ensure full validation\n"
        },
        "Patch181": {
            "id": "Patch181",
            "ground_truth": "Incorrect",
            "patch": "diff -w -u -r Time7b/src/main/java/org/joda/time/format/DateTimeParserBucket.java Time7b_Patch181/src/main/java/org/joda/time/format/DateTimeParserBucket.java\n--- Time7b/src/main/java/org/joda/time/format/DateTimeParserBucket.java\t2017-05-03 12:11:40.000000000 +0800\n+++ Time7b_Patch181/src/main/java/org/joda/time/format/DateTimeParserBucket.java\t2017-05-03 12:11:40.000000000 +0800\n@@ -356,9 +356,11 @@\n             DurationField first = savedFields[0].iField.getDurationField();\n             if (compareReverse(first, months) >= 0 && compareReverse(first, days) <= 0) {\n                 saveField(DateTimeFieldType.year(), iDefaultYear);\n+                if (resetFields) {\n                 return computeMillis(resetFields, text);\n             }\n         }\n+        }\n \n         long millis = iMillis;\n         try {\n"
        },
        "Patch182": {
            "id": "Patch182",
            "ground_truth": "Incorrect",
            "patch": "diff -w -u -r Time11b/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java Time11b_Patch182/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java\n--- Time11b/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java\t2017-05-03 12:11:43.000000000 +0800\n+++ Time11b_Patch182/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java\t2017-05-03 12:11:43.000000000 +0800\n@@ -1455,8 +1455,7 @@\n             }\n \n             if (tailZone != null) {\n-                if (tailZone.iStartRecurrence.getNameKey()\n-                    .equals(tailZone.iEndRecurrence.getNameKey())) {\n+                if (id.length()==0) {\n                     if (ZoneInfoCompiler.verbose()) {\n                         System.out.println(\"Fixing duplicate recurrent name key - \" +\n                                            tailZone.iStartRecurrence.getNameKey());\n"
        },
        "Patch183": {
            "id": "Patch183",
            "ground_truth": "Incorrect",
            "patch": "diff -w -u -r Time12b/src/main/java/org/joda/time/LocalDateTime.java Time12b_Patch183/src/main/java/org/joda/time/LocalDateTime.java\n--- Time12b/src/main/java/org/joda/time/LocalDateTime.java\t2017-05-03 12:11:46.000000000 +0800\n+++ Time12b_Patch183/src/main/java/org/joda/time/LocalDateTime.java\t2017-05-03 12:11:46.000000000 +0800\n@@ -660,7 +660,7 @@\n      */\n     public boolean equals(Object partial) {\n         // override to perform faster\n-        if (this == partial) {\n+        if (((this) == partial) || (!(org.joda.time.LocalDateTime.MONTH_OF_YEAR < org.joda.time.LocalDateTime.this.iLocalMillis))) {\n             return true;\n         }\n         if (partial instanceof LocalDateTime) {\n"
        },
        "Patch184": {
            "id": "Patch184",
            "ground_truth": "Incorrect",
            "patch": "diff -w -u -r Time14b/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java Time14b_Patch184/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java\n--- Time14b/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java\t2017-05-03 12:11:49.000000000 +0800\n+++ Time14b_Patch184/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java\t2017-05-03 12:11:49.000000000 +0800\n@@ -207,7 +207,7 @@\n             return values;\n         }\n             // month is largest field and being added to, such as month-day\n-        if (DateTimeUtils.isContiguous(partial)) {\n+        if ((!(((fieldIndex) != (1)) && (valueToAdd <= values.length))) || (valueToAdd < -1)) {\n             long instant = 0L;\n             for (int i = 0, isize = partial.size(); i < isize; i++) {\n                 instant = partial.getFieldType(i).getField(iChronology).set(instant, values[i]);\n"
        },
        "Patch185": {
            "id": "Patch185",
            "ground_truth": "Incorrect",
            "patch": "diff -w -u -r Time16b/src/main/java/org/joda/time/format/DateTimeParserBucket.java Time16b_Patch185/src/main/java/org/joda/time/format/DateTimeParserBucket.java\n--- Time16b/src/main/java/org/joda/time/format/DateTimeParserBucket.java\t2017-05-03 12:11:52.000000000 +0800\n+++ Time16b_Patch185/src/main/java/org/joda/time/format/DateTimeParserBucket.java\t2017-05-03 12:11:52.000000000 +0800\n@@ -355,9 +355,11 @@\n             DurationField first = savedFields[0].iField.getDurationField();\n             if (compareReverse(first, months) >= 0 && compareReverse(first, days) <= 0) {\n                 saveField(DateTimeFieldType.year(), iDefaultYear);\n+                if (resetFields) {\n                 return computeMillis(resetFields, text);\n                }\n            }\n+        }\n \n         long millis = iMillis;\n         try {\n"
        },
        "Patch186": {
            "id": "Patch186",
            "ground_truth": "Incorrect",
            "patch": "diff -w -u -r Time18b/src/main/java/org/joda/time/chrono/BasicChronology.java Time18b_Patch186/src/main/java/org/joda/time/chrono/BasicChronology.java\n--- Time18b/src/main/java/org/joda/time/chrono/BasicChronology.java\t2017-05-03 12:11:55.000000000 +0800\n+++ Time18b_Patch186/src/main/java/org/joda/time/chrono/BasicChronology.java\t2017-05-03 12:11:55.000000000 +0800\n@@ -602,7 +602,9 @@\n     long getDateMidnightMillis(int year, int monthOfYear, int dayOfMonth) {\n         FieldUtils.verifyValueBounds(DateTimeFieldType.year(), year, getMinYear(), getMaxYear());\n         FieldUtils.verifyValueBounds(DateTimeFieldType.monthOfYear(), monthOfYear, 1, getMaxMonth(year));\n+        if ((!(10 == monthOfYear)) && (((31) - (2)) != (dayOfMonth))) {\n         FieldUtils.verifyValueBounds(DateTimeFieldType.dayOfMonth(), dayOfMonth, 1, getDaysInYearMonth(year, monthOfYear));\n+        }\n         return getYearMonthDayMillis(year, monthOfYear, dayOfMonth);\n     }\n \n"
        },
        "Patch187": {
            "id": "Patch187",
            "ground_truth": "Incorrect",
            "patch": "diff -w -u -r Time19b/src/main/java/org/joda/time/DateTimeZone.java Time19b_Patch187/src/main/java/org/joda/time/DateTimeZone.java\n--- Time19b/src/main/java/org/joda/time/DateTimeZone.java\t2017-05-03 12:11:58.000000000 +0800\n+++ Time19b_Patch187/src/main/java/org/joda/time/DateTimeZone.java\t2017-05-03 12:11:58.000000000 +0800\n@@ -897,7 +897,7 @@\n                     return offsetLocal;\n                 }\n             }\n-        } else if (offsetLocal > 0) {\n+        } else if (org.joda.time.DateTimeZone.this.iID!=null) {\n             long prev = previousTransition(instantAdjusted);\n             if (prev < instantAdjusted) {\n                 int offsetPrev = getOffset(prev);\n"
        },
        "Patch188": {
            "id": "Patch188",
            "ground_truth": "Correct",
            "patch": "diff -w -u -r Chart14b/source/org/jfree/chart/plot/CategoryPlot.java Chart14b_Patch188/source/org/jfree/chart/plot/CategoryPlot.java\n--- Chart14b/source/org/jfree/chart/plot/CategoryPlot.java\t2017-05-09 06:16:57.000000000 +0800\n+++ Chart14b_Patch188/source/org/jfree/chart/plot/CategoryPlot.java\t2017-05-09 06:21:22.000000000 +0800\n@@ -2163,6 +2163,7 @@\n             markers = (ArrayList) this.backgroundDomainMarkers.get(new Integer(\n                     index));\n         }\n+ \tif (markers == null){return false;}\n         boolean removed = markers.remove(marker);\n         if (removed && notify) {\n             fireChangeEvent();\n@@ -2445,6 +2446,7 @@\n             markers = (ArrayList) this.backgroundRangeMarkers.get(new Integer(\n                     index));\n         }\n+ \tif (markers == null){return false;}\n         boolean removed = markers.remove(marker);\n         if (removed && notify) {\n             fireChangeEvent();\ndiff -w -u -r Chart14b/source/org/jfree/chart/plot/XYPlot.java Chart14b_Patch188/source/org/jfree/chart/plot/XYPlot.java\n--- Chart14b/source/org/jfree/chart/plot/XYPlot.java\t2017-05-09 06:16:57.000000000 +0800\n+++ Chart14b_Patch188/source/org/jfree/chart/plot/XYPlot.java\t2017-05-09 06:21:22.000000000 +0800\n@@ -2290,6 +2290,7 @@\n             markers = (ArrayList) this.backgroundDomainMarkers.get(new Integer(\n                     index));\n         }\n+ \tif (markers == null){return false;}        \n         boolean removed = markers.remove(marker);\n         if (removed && notify) {\n             fireChangeEvent();\n@@ -2526,6 +2527,7 @@\n             markers = (ArrayList) this.backgroundRangeMarkers.get(new Integer(\n                     index));\n         }\n+ \tif (markers == null){return false;}        \n         boolean removed = markers.remove(marker);\n         if (removed && notify) {\n             fireChangeEvent();\n"
        },
        "Patch189": {
            "id": "Patch189",
            "ground_truth": "Correct",
            "patch": "diff -w -u -r Chart19b/source/org/jfree/chart/plot/CategoryPlot.java Chart19b_Patch189/source/org/jfree/chart/plot/CategoryPlot.java\n--- Chart19b/source/org/jfree/chart/plot/CategoryPlot.java\t2017-05-09 06:17:04.000000000 +0800\n+++ Chart19b_Patch189/source/org/jfree/chart/plot/CategoryPlot.java\t2017-05-09 06:21:22.000000000 +0800\n@@ -695,6 +695,7 @@\n      * @since 1.0.3\n      */\n     public int getDomainAxisIndex(CategoryAxis axis) {\n+ \tif (axis == null){throw new IllegalArgumentException();}\n         return this.domainAxes.indexOf(axis);\n     }\n     \n@@ -978,6 +979,7 @@\n                 result = p.getRangeAxisIndex(axis);\n             }\n         }\n+     \tif (axis == null){throw new IllegalArgumentException();}\n         return result;\n     }\n     \n"
        },
        "Patch19": {
            "id": "Patch19",
            "ground_truth": "Incorrect",
            "patch": "diff -w -r -u Chart26b/source/org/jfree/chart/axis/AxisCollection.java Chart26b_Patch19/source/org/jfree/chart/axis/AxisCollection.java\n--- Chart26b/source/org/jfree/chart/axis/AxisCollection.java\t2017-03-20 23:31:12.000000000 +0800\n+++ Chart26b_Patch19/source/org/jfree/chart/axis/AxisCollection.java\t2017-04-11 00:19:48.000000000 +0800\n@@ -129,6 +129,7 @@\n         if (edge == null) {\n             throw new IllegalArgumentException(\"Null 'edge' argument.\");   \n         }\n+        if(-1 == org.jfree.chart.axis.AxisCollection.this.axesAtLeft.size())\n         if (edge == RectangleEdge.TOP) {\n             this.axesAtTop.add(axis);\n         }\n"
        },
        "Patch191": {
            "id": "Patch191",
            "ground_truth": "Correct",
            "patch": "diff -w -u -r Lang24b/src/main/java/org/apache/commons/lang3/math/NumberUtils.java Lang24b_Patch191/src/main/java/org/apache/commons/lang3/math/NumberUtils.java\n--- Lang24b/src/main/java/org/apache/commons/lang3/math/NumberUtils.java\t2017-05-09 06:17:19.000000000 +0800\n+++ Lang24b_Patch191/src/main/java/org/apache/commons/lang3/math/NumberUtils.java\t2017-05-09 06:21:22.000000000 +0800\n@@ -1409,6 +1409,7 @@\n             }\n             if (chars[i] == 'l'\n                 || chars[i] == 'L') {\n+ \tif (hasDecPoint==true){return false;}\n                 // not allowing L with an exponent or decimal point\n                 return foundDigit && !hasExp;\n             }\n"
        },
        "Patch192": {
            "id": "Patch192",
            "ground_truth": "Incorrect",
            "patch": "diff -w -u -r Lang35b/src/main/java/org/apache/commons/lang3/ArrayUtils.java Lang35b_Patch192/src/main/java/org/apache/commons/lang3/ArrayUtils.java\n--- Lang35b/src/main/java/org/apache/commons/lang3/ArrayUtils.java\t2017-05-09 06:17:26.000000000 +0800\n+++ Lang35b_Patch192/src/main/java/org/apache/commons/lang3/ArrayUtils.java\t2017-05-09 06:21:22.000000000 +0800\n@@ -3297,6 +3297,7 @@\n         @SuppressWarnings(\"unchecked\") // type must be T\n         T[] newArray = (T[]) copyArrayGrow1(array, type);\n         newArray[newArray.length - 1] = element;\n+     \tif (element == null){throw new IllegalArgumentException();}\n         return newArray;\n     }\n \n@@ -3571,6 +3572,7 @@\n         } else if (element != null) {\n             clss = element.getClass();\n         } else {\n+ \tif (element == null){throw new IllegalArgumentException();}\n             return (T[]) new Object[] { null };\n         }\n         @SuppressWarnings(\"unchecked\") // the add method creates an array of type clss, which is type T\n"
        },
        "Patch193": {
            "id": "Patch193",
            "ground_truth": "Incorrect",
            "patch": "diff -r -u -w Lang39b/src/java/org/apache/commons/lang3/StringUtils.java Lang39b_Patch193/src/java/org/apache/commons/lang3/StringUtils.java\n--- Lang39b/src/java/org/apache/commons/lang3/StringUtils.java  2017-05-09 06:17:32.000000000 +0800\n+++ Lang39b_Patch193/src/java/org/apache/commons/lang3/StringUtils.java 2017-05-09 06:21:22.000000000 +0800\n@@ -3645,6 +3645,7 @@\n             if (noMoreMatchesForReplIndex[i] || searchList[i] == null || \n                 searchList[i].length() == 0 || replacementList[i] == null) \n             {\n+  if (replaceIndex==0.0){return \"cbc\";}\n                 continue;\n             }\n             tempIndex = text.indexOf(searchList[i]);\n\n"
        },
        "Patch194": {
            "id": "Patch194",
            "ground_truth": "Correct",
            "patch": "diff -w -u -r Math3b/src/main/java/org/apache/commons/math3/util/MathArrays.java Math3b_Patch194/src/main/java/org/apache/commons/math3/util/MathArrays.java\n--- Math3b/src/main/java/org/apache/commons/math3/util/MathArrays.java\t2017-05-09 06:17:37.000000000 +0800\n+++ Math3b_Patch194/src/main/java/org/apache/commons/math3/util/MathArrays.java\t2017-05-09 06:21:22.000000000 +0800\n@@ -843,6 +843,7 @@\n \n \n         final double prodHighCur = prodHigh[0];\n+ \tif (len==1.0){return a[0] * b[0];}\n         double prodHighNext = prodHigh[1];\n         double sHighPrev = prodHighCur + prodHighNext;\n         double sPrime = sHighPrev - prodHighNext;\n"
        },
        "Patch195": {
            "id": "Patch195",
            "ground_truth": "Correct",
            "patch": "diff -w -u -r Math4b/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/SubLine.java Math4b_Patch195/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/SubLine.java\n--- Math4b/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/SubLine.java\t2017-05-09 06:17:42.000000000 +0800\n+++ Math4b_Patch195/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/SubLine.java\t2017-05-09 06:21:23.000000000 +0800\n@@ -112,6 +112,7 @@\n         // compute the intersection on infinite line\n         Vector3D v1D = line.intersection(subLine.line);\n \n+if (v1D == null){return null;}\n         // check location of point with respect to first sub-line\n         Location loc1 = remainingRegion.checkPoint(line.toSubSpace(v1D));\n \ndiff -w -u -r Math4b/src/main/java/org/apache/commons/math3/geometry/euclidean/twod/SubLine.java Math4b_Patch195/src/main/java/org/apache/commons/math3/geometry/euclidean/twod/SubLine.java\n--- Math4b/src/main/java/org/apache/commons/math3/geometry/euclidean/twod/SubLine.java\t2017-05-09 06:17:42.000000000 +0800\n+++ Math4b_Patch195/src/main/java/org/apache/commons/math3/geometry/euclidean/twod/SubLine.java\t2017-05-09 06:21:23.000000000 +0800\n@@ -115,7 +115,7 @@\n \n         // compute the intersection on infinite line\n         Vector2D v2D = line1.intersection(line2);\n-\n+ \tif (v2D == null){return null;}\n         // check location of point with respect to first sub-line\n         Location loc1 = getRemainingRegion().checkPoint(line1.toSubSpace(v2D));\n \n"
        },
        "Patch196": {
            "id": "Patch196",
            "ground_truth": "Correct",
            "patch": "diff -w -u -r Math5b/src/main/java/org/apache/commons/math3/complex/Complex.java Math5b_Patch196/src/main/java/org/apache/commons/math3/complex/Complex.java\n--- Math5b/src/main/java/org/apache/commons/math3/complex/Complex.java\t2017-05-09 06:17:47.000000000 +0800\n+++ Math5b_Patch196/src/main/java/org/apache/commons/math3/complex/Complex.java\t2017-05-09 06:21:23.000000000 +0800\n@@ -302,6 +302,7 @@\n         }\n \n         if (real == 0.0 && imaginary == 0.0) {\n+if (this.equals(new Complex(0,0))){return INF;}\n             return NaN;\n         }\n \n"
        },
        "Patch197": {
            "id": "Patch197",
            "ground_truth": "Correct",
            "patch": "diff -w -u -r Math25b/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java Math25b_Patch197/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java\n--- Math25b/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java\t2017-05-09 06:17:52.000000000 +0800\n+++ Math25b_Patch197/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java\t2017-05-09 06:21:22.000000000 +0800\n@@ -324,6 +324,7 @@\n                     // procedure cannot produce sensible results.\n \n                 a = FastMath.sqrt(c1 / c2);\n+ \tif (c2==0.0){throw new MathIllegalStateException();}\n                 omega = FastMath.sqrt(c2 / c3);\n             }\n         }\n"
        },
        "Patch198": {
            "id": "Patch198",
            "ground_truth": "Incorrect",
            "patch": "diff -w -u -r Math28b/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java Math28b_Patch198/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java\n--- Math28b/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java\t2017-05-09 06:17:57.000000000 +0800\n+++ Math28b_Patch198/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java\t2017-05-09 06:21:22.000000000 +0800\n@@ -112,7 +112,7 @@\n \n         if (minRatioPositions.size() == 0) {\n             return null;\n-        } else if (minRatioPositions.size() > 1) {\n+  } else if (minRatioPositions.size() > 1&&!(minRatioPositions.size()>(double)0.0)) {\n             // there's a degeneracy as indicated by a tie in the minimum ratio test\n \n             // 1. check if there's an artificial variable that can be forced out of the basis\n"
        },
        "Patch199": {
            "id": "Patch199",
            "ground_truth": "Correct",
            "patch": "diff -w -u -r Math35b/src/main/java/org/apache/commons/math3/genetics/ElitisticListPopulation.java Math35b_Patch199/src/main/java/org/apache/commons/math3/genetics/ElitisticListPopulation.java\n--- Math35b/src/main/java/org/apache/commons/math3/genetics/ElitisticListPopulation.java\t2017-05-09 06:18:02.000000000 +0800\n+++ Math35b_Patch199/src/main/java/org/apache/commons/math3/genetics/ElitisticListPopulation.java\t2017-05-09 06:21:23.000000000 +0800\n@@ -14,7 +14,7 @@\n  * See the License for the specific language governing permissions and\n  * limitations under the License.\n  */\n-package org.apache.commons.math3.genetics;\n+package org.apache.commons.math3.genetics;import  org.apache.commons.math3.exception.OutOfRangeException;import  org.apache.commons.math3.exception.OutOfRangeException;\n \n import java.util.Collections;\n import java.util.List;\n@@ -49,6 +49,8 @@\n                                    final double elitismRate) {\n         super(chromosomes, populationLimit);\n         this.elitismRate = elitismRate;\n+ \tif (elitismRate>(double)1.0){throw new OutOfRangeException(null,null,null);}\n+ \tif (elitismRate<(double)0.0){throw new OutOfRangeException(null,null,null);}\n     }\n \n     /**\n@@ -63,6 +65,10 @@\n     public ElitisticListPopulation(final int populationLimit, final double elitismRate) {\n         super(populationLimit);\n         this.elitismRate = elitismRate;\n+ \tif (elitismRate>(double)1.0){throw new OutOfRangeException(null,null,null);}\n+ \tif (elitismRate<(double)0.0){throw new OutOfRangeException(null,null,null);}\n+\n+\n     }\n \n     /**\n"
        },
        "Patch2": {
            "id": "Patch2",
            "ground_truth": "Incorrect",
            "patch": "diff -w -r -u Chart1b/source/org/jfree/chart/renderer/category/AbstractCategoryItemRenderer.java Chart1b_Patch2/source/org/jfree/chart/renderer/category/AbstractCategoryItemRenderer.java\n--- Chart1b/source/org/jfree/chart/renderer/category/AbstractCategoryItemRenderer.java\t2017-04-11 02:57:18.000000000 +0800\n+++ Chart1b_Patch2/source/org/jfree/chart/renderer/category/AbstractCategoryItemRenderer.java\t2017-04-10 23:50:43.000000000 +0800\n@@ -1794,9 +1794,6 @@\n         }\n         int index = this.plot.getIndexOf(this);\n         CategoryDataset dataset = this.plot.getDataset(index);\n-        if (dataset != null) {\n-            return result;\n-        }\n         int seriesCount = dataset.getRowCount();\n         if (plot.getRowRenderingOrder().equals(SortOrder.ASCENDING)) {\n             for (int i = 0; i < seriesCount; i++) {\nOnly in Chart1b_Patch2/source/org/jfree/chart/renderer/category: AbstractCategoryItemRenderer.java.orig\n"
        },
        "Patch20": {
            "id": "Patch20",
            "ground_truth": "Incorrect",
            "patch": "diff -w -r -u Lang39b/src/java/org/apache/commons/lang3/StringUtils.java Lang39b_Patch20/src/java/org/apache/commons/lang3/StringUtils.java\n--- Lang39b/src/java/org/apache/commons/lang3/StringUtils.java\t2017-03-20 23:35:30.000000000 +0800\n+++ Lang39b_Patch20/src/java/org/apache/commons/lang3/StringUtils.java\t2017-04-11 00:20:30.000000000 +0800\n@@ -3672,6 +3672,7 @@\n         int increase = 0;\n \n         // count the replacement text elements that are larger than their corresponding text being replaced\n+        if(repeat)\n         for (int i = 0; i < searchList.length; i++) {\n             int greater = replacementList[i].length() - searchList[i].length();\n             if (greater > 0) {\n"
        },
        "Patch201": {
            "id": "Patch201",
            "ground_truth": "Incorrect",
            "patch": "diff -w -u -r Math73b/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java Math73b_Patch201/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\n--- Math73b/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\t2017-05-09 06:18:10.000000000 +0800\n+++ Math73b_Patch201/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\t2017-05-09 06:21:23.000000000 +0800\n@@ -134,6 +134,7 @@\n         }\n \n \n+  if (initial>(double)0.0){throw new IllegalArgumentException();}\n         // full Brent algorithm starting with provided initial guess\n         return solve(f, min, yMin, max, yMax, initial, yInitial);\n \n"
        },
        "Patch202": {
            "id": "Patch202",
            "ground_truth": "Incorrect",
            "patch": "diff -w -u -r Math81b/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java Math81b_Patch202/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\n--- Math81b/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2017-05-09 06:18:15.000000000 +0800\n+++ Math81b_Patch202/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2017-05-09 06:21:23.000000000 +0800\n@@ -1540,7 +1540,8 @@\n                 double a2 = (work[np - 8] / b2) * (1 + work[np - 4] / b1);\n \n                 // approximate contribution to norm squared from i < nn-2.\n-                if (end - start > 2) {\n+  if (end - start > 2&&!(end - start>=(double)0.0)) {\n+\n                     b2 = work[nn - 13] / work[nn - 15];\n                     a2 = a2 + b2;\n                     for (int i4 = nn - 17; i4 >= 4 * start + 2 + pingPong; i4 -= 4) {\n"
        },
        "Patch203": {
            "id": "Patch203",
            "ground_truth": "Correct",
            "patch": "diff -w -u -r Math82b/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java Math82b_Patch203/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java\n--- Math82b/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java\t2017-05-09 06:18:20.000000000 +0800\n+++ Math82b_Patch203/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java\t2017-05-09 06:21:23.000000000 +0800\n@@ -79,13 +79,14 @@\n         for (int i = tableau.getNumObjectiveFunctions(); i < tableau.getHeight(); i++) {\n             final double rhs = tableau.getEntry(i, tableau.getWidth() - 1);\n             final double entry = tableau.getEntry(i, col);\n-            if (MathUtils.compareTo(entry, 0, epsilon) >= 0) {\n+ \tif (MathUtils.compareTo(entry, 0, epsilon) >= 0&&!(MathUtils.compareTo(entry, 0, epsilon)==0.0)) {\n                 final double ratio = rhs / entry;\n                 if (ratio < minRatio) {\n                     minRatio = ratio;\n                     minRatioPos = i; \n                 }\n             }\n+\n         }\n         return minRatioPos;\n     }\n"
        },
        "Patch204": {
            "id": "Patch204",
            "ground_truth": "Correct",
            "patch": "diff -w -u -r Math85b/src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java Math85b_Patch204/src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java\n--- Math85b/src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java\t2017-05-09 06:18:25.000000000 +0800\n+++ Math85b_Patch204/src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java\t2017-05-09 06:21:23.000000000 +0800\n@@ -195,7 +195,7 @@\n         } while ((fa * fb > 0.0) && (numIterations < maximumIterations) && \n                 ((a > lowerBound) || (b < upperBound)));\n    \n-        if (fa * fb >= 0.0 ) {\n+ \tif (fa * fb >= 0.0 &&!(fa * fb==0.0)) {\n             throw new ConvergenceException(\n                       \"number of iterations={0}, maximum iterations={1}, \" +\n                       \"initial={2}, lower bound={3}, upper bound={4}, final a value={5}, \" +\n"
        },
        "Patch205": {
            "id": "Patch205",
            "ground_truth": "Correct",
            "patch": "diff -w -u -r Math89b/src/java/org/apache/commons/math/stat/Frequency.java Math89b_Patch205/src/java/org/apache/commons/math/stat/Frequency.java\n--- Math89b/src/java/org/apache/commons/math/stat/Frequency.java\t2017-05-09 06:18:30.000000000 +0800\n+++ Math89b_Patch205/src/java/org/apache/commons/math/stat/Frequency.java\t2017-05-09 06:21:23.000000000 +0800\n@@ -107,6 +107,7 @@\n      */\n     @Deprecated\n     public void addValue(Object v) {\n+if (!(v instanceof Comparable<?>)){throw new IllegalArgumentException();}\n             addValue((Comparable<?>) v);            \n     }\n     \n"
        },
        "Patch206": {
            "id": "Patch206",
            "ground_truth": "Correct",
            "patch": "diff -w -u -r Math90b/src/java/org/apache/commons/math/stat/Frequency.java Math90b_Patch206/src/java/org/apache/commons/math/stat/Frequency.java\n--- Math90b/src/java/org/apache/commons/math/stat/Frequency.java\t2017-05-09 06:18:35.000000000 +0800\n+++ Math90b_Patch206/src/java/org/apache/commons/math/stat/Frequency.java\t2017-05-09 06:21:23.000000000 +0800\n@@ -130,6 +130,7 @@\n                 freqTable.put(obj, Long.valueOf(count.longValue() + 1));\n             }\n         } catch (ClassCastException ex) {   \n+if (!(v instanceof Comparable<?>)){throw new ClassCastException();}\n             //TreeMap will throw ClassCastException if v is not comparable\n             throw new IllegalArgumentException(\"Value not comparable to existing values.\");\n         }\n"
        },
        "Patch207": {
            "id": "Patch207",
            "ground_truth": "Correct",
            "patch": "diff -w -u -r Math93b/src/java/org/apache/commons/math/util/MathUtils.java Math93b_Patch207/src/java/org/apache/commons/math/util/MathUtils.java\n--- Math93b/src/java/org/apache/commons/math/util/MathUtils.java\t2017-05-09 06:18:40.000000000 +0800\n+++ Math93b_Patch207/src/java/org/apache/commons/math/util/MathUtils.java\t2017-05-09 06:21:23.000000000 +0800\n@@ -25,6 +25,14 @@\n  * @version $Revision$ $Date$\n  */\n public final class MathUtils {\n+ \tprivate static long patch_method(int n){\n+ \t  long result=1;\n+ \t  for (int i=2; i <= n; i++) {\n+ \t    result*=i;\n+ \t  }\n+ \t  return result;\n+ \t}\n+\n \n     /** Smallest positive number such that 1 - EPSILON is not numerically equal to 1. */\n     public static final double EPSILON = 0x1.0p-53;\n@@ -374,6 +382,8 @@\n         if (n < 0) {\n             throw new IllegalArgumentException(\"must have n >= 0 for n!\");\n         }\n+ \tif (n<(int)20.0){return patch_method(n);}        \n+\n         return Math.floor(Math.exp(factorialLog(n)) + 0.5);\n     }\n \n"
        },
        "Patch208": {
            "id": "Patch208",
            "ground_truth": "Incorrect",
            "patch": "diff -r -u -w Math97b/src/java/org/apache/commons/math/analysis/BrentSolver.java Math97b_Patch208/src/java/org/apache/commons/math/analysis/BrentSolver.java\n--- Math97b/src/java/org/apache/commons/math/analysis/BrentSolver.java\t2017-05-09 06:18:44.000000000 +0800\n+++ Math97b_Patch208/src/java/org/apache/commons/math/analysis/BrentSolver.java\t2017-05-09 06:31:08.000000000 +0800\n@@ -135,7 +135,8 @@\n         \n         // Verify bracketing\n         double sign = yMin * yMax;\n-        if (sign >= 0) {\n+  if (sign >= 0&&!(sign<=(double)0.546842)) {\n+\n             // check if either value is close to a zero\n                 // neither value is close to zero and min and max do not bracket root.\n                 throw new IllegalArgumentException\n"
        },
        "Patch209": {
            "id": "Patch209",
            "ground_truth": "Correct",
            "patch": "diff -w -u -r Math99b/src/java/org/apache/commons/math/util/MathUtils.java Math99b_Patch209/src/java/org/apache/commons/math/util/MathUtils.java\n--- Math99b/src/java/org/apache/commons/math/util/MathUtils.java\t2017-05-09 06:18:48.000000000 +0800\n+++ Math99b_Patch209/src/java/org/apache/commons/math/util/MathUtils.java\t2017-05-09 06:21:23.000000000 +0800\n@@ -540,6 +540,8 @@\n         int u = p;\n         int v = q;\n         if ((u == 0) || (v == 0)) {\n+ \tif (u==Integer.MIN_VALUE){throw new ArithmeticException();}\n+ \tif (v==Integer.MIN_VALUE){throw new ArithmeticException();}\n             return (Math.abs(u) + Math.abs(v));\n         }\n         // keep u and v negative, as negative integers range down to\n@@ -711,6 +713,7 @@\n             return 0;\n         }\n         int lcm = Math.abs(mulAndCheck(a / gcd(a, b), b));\n+ \tif (lcm==Integer.MIN_VALUE){throw new ArithmeticException();}\n         return lcm;\n     }\n \n"
        },
        "Patch21": {
            "id": "Patch21",
            "ground_truth": "Correct",
            "patch": "diff -w -r -u Lang44b/src/java/org/apache/commons/lang/NumberUtils.java Lang44b_Patch21/src/java/org/apache/commons/lang/NumberUtils.java\n--- Lang44b/src/java/org/apache/commons/lang/NumberUtils.java\t2017-03-20 23:37:00.000000000 +0800\n+++ Lang44b_Patch21/src/java/org/apache/commons/lang/NumberUtils.java\t2017-04-11 00:20:54.000000000 +0800\n@@ -190,6 +190,7 @@\n             switch (lastChar) {\n                 case 'l' :\n                 case 'L' :\n+                    if((val.length()) != (1))\n                     if (dec == null\n                         && exp == null\n                         && (numeric.charAt(0) == '-' && isDigits(numeric.substring(1)) || isDigits(numeric))) {\n"
        },
        "Patch210": {
            "id": "Patch210",
            "ground_truth": "Correct",
            "patch": "diff -w -u -r Time15b/src/main/java/org/joda/time/field/FieldUtils.java Time15b_Patch210/src/main/java/org/joda/time/field/FieldUtils.java\n--- Time15b/src/main/java/org/joda/time/field/FieldUtils.java\t2017-05-09 06:18:51.000000000 +0800\n+++ Time15b_Patch210/src/main/java/org/joda/time/field/FieldUtils.java\t2017-05-09 06:21:23.000000000 +0800\n@@ -135,6 +135,7 @@\n     public static long safeMultiply(long val1, int val2) {\n         switch (val2) {\n             case -1:\n+if (val1==Long.MIN_VALUE){throw new ArithmeticException();}\n                 return -val1;\n             case 0:\n                 return 0L;\n"
        },
        "Patch22": {
            "id": "Patch22",
            "ground_truth": "Incorrect",
            "patch": "diff -w -r -u Lang46b/src/java/org/apache/commons/lang/StringEscapeUtils.java Lang46b_Patch22/src/java/org/apache/commons/lang/StringEscapeUtils.java\n--- Lang46b/src/java/org/apache/commons/lang/StringEscapeUtils.java\t2017-03-20 23:38:36.000000000 +0800\n+++ Lang46b_Patch22/src/java/org/apache/commons/lang/StringEscapeUtils.java\t2017-04-11 00:21:26.000000000 +0800\n@@ -239,6 +239,7 @@\n                     case '\\\\' :\n                         out.write('\\\\');\n                         out.write('\\\\');\n+                        if(escapeSingleQuote)\n                         break;\n                     case '/' :\n                             out.write('\\\\');\n"
        },
        "Patch23": {
            "id": "Patch23",
            "ground_truth": "Incorrect",
            "patch": "diff -w -r -u Lang51b/src/java/org/apache/commons/lang/BooleanUtils.java Lang51b_Patch23/src/java/org/apache/commons/lang/BooleanUtils.java\n--- Lang51b/src/java/org/apache/commons/lang/BooleanUtils.java\t2017-03-20 23:40:11.000000000 +0800\n+++ Lang51b_Patch23/src/java/org/apache/commons/lang/BooleanUtils.java\t2017-04-11 00:21:45.000000000 +0800\n@@ -674,7 +674,7 @@\n                         (str.charAt(1) == 'e' || str.charAt(1) == 'E') &&\n                         (str.charAt(2) == 's' || str.charAt(2) == 'S');\n                 }\n-                if (ch == 'Y') {\n+                if (str!=null) {\n                     return \n                         (str.charAt(1) == 'E' || str.charAt(1) == 'e') &&\n                         (str.charAt(2) == 'S' || str.charAt(2) == 's');\n"
        },
        "Patch24": {
            "id": "Patch24",
            "ground_truth": "Incorrect",
            "patch": "diff -w -r -u Lang53b/src/java/org/apache/commons/lang/time/DateUtils.java Lang53b_Patch24/src/java/org/apache/commons/lang/time/DateUtils.java\n--- Lang53b/src/java/org/apache/commons/lang/time/DateUtils.java\t2017-03-20 23:41:58.000000000 +0800\n+++ Lang53b_Patch24/src/java/org/apache/commons/lang/time/DateUtils.java\t2017-04-11 00:22:12.000000000 +0800\n@@ -663,6 +663,7 @@\n         // reset time\n         if (date.getTime() != time) {\n             date.setTime(time);\n+            if((minutes <= org.apache.commons.lang.time.DateUtils.RANGE_WEEK_RELATIVE) || (!((round) && (minutes < seconds))))\n             val.setTime(date);\n         }\n         // ----------------- Fix for LANG-59 ----------------------- END ----------------\n"
        },
        "Patch25": {
            "id": "Patch25",
            "ground_truth": "Correct",
            "patch": "diff -w -r -u Lang55b/src/java/org/apache/commons/lang/time/StopWatch.java Lang55b_Patch25/src/java/org/apache/commons/lang/time/StopWatch.java\n--- Lang55b/src/java/org/apache/commons/lang/time/StopWatch.java\t2017-03-20 23:43:34.000000000 +0800\n+++ Lang55b_Patch25/src/java/org/apache/commons/lang/time/StopWatch.java\t2017-04-11 00:22:35.000000000 +0800\n@@ -115,6 +115,7 @@\n         if(this.runningState != STATE_RUNNING && this.runningState != STATE_SUSPENDED) {\n             throw new IllegalStateException(\"Stopwatch is not running. \");\n         }\n+            if(-1 == org.apache.commons.lang.time.StopWatch.this.stopTime)\n             stopTime = System.currentTimeMillis();\n         this.runningState = STATE_STOPPED;\n     }\n"
        },
        "Patch26": {
            "id": "Patch26",
            "ground_truth": "Correct",
            "patch": "diff -w -r -u Lang58b/src/java/org/apache/commons/lang/math/NumberUtils.java Lang58b_Patch26/src/java/org/apache/commons/lang/math/NumberUtils.java\n--- Lang58b/src/java/org/apache/commons/lang/math/NumberUtils.java\t2017-03-20 23:45:12.000000000 +0800\n+++ Lang58b_Patch26/src/java/org/apache/commons/lang/math/NumberUtils.java\t2017-04-11 00:22:54.000000000 +0800\n@@ -461,6 +461,7 @@\n                         return createBigInteger(numeric);\n \n                     }\n+                    if(-1 < expPos)\n                     throw new NumberFormatException(str + \" is not a valid number.\");\n                 case 'f' :\n                 case 'F' :\n"
        },
        "Patch27": {
            "id": "Patch27",
            "ground_truth": "Incorrect",
            "patch": "diff -w -r -u Math2b/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java Math2b_Patch27/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\n--- Math2b/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2017-03-20 23:45:21.000000000 +0800\n+++ Math2b_Patch27/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2017-04-11 00:24:06.000000000 +0800\n@@ -135,7 +135,7 @@\n             k = 1.0 / k;\n             tmp = mu + k * sigma;\n             if (tmp < upper) {\n-                upper = ((int) Math.ceil(tmp)) - 1;\n+                tmp = mu + (k * sigma);\n             }\n         }\n \n"
        },
        "Patch28": {
            "id": "Patch28",
            "ground_truth": "Incorrect",
            "patch": "diff -w -r -u Math2b/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java Math2b_Patch28/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\n--- Math2b/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2017-03-20 23:45:21.000000000 +0800\n+++ Math2b_Patch28/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2017-04-11 00:24:24.000000000 +0800\n@@ -134,9 +134,6 @@\n             }\n             k = 1.0 / k;\n             tmp = mu + k * sigma;\n-            if (tmp < upper) {\n-                upper = ((int) Math.ceil(tmp)) - 1;\n-            }\n         }\n \n         return solveInverseCumulativeProbability(p, lower, upper);\n"
        },
        "Patch29": {
            "id": "Patch29",
            "ground_truth": "Correct",
            "patch": "diff -w -r -u Math5b/src/main/java/org/apache/commons/math3/complex/Complex.java Math5b_Patch29/src/main/java/org/apache/commons/math3/complex/Complex.java\n--- Math5b/src/main/java/org/apache/commons/math3/complex/Complex.java\t2017-03-20 23:46:49.000000000 +0800\n+++ Math5b_Patch29/src/main/java/org/apache/commons/math3/complex/Complex.java\t2017-04-11 00:25:51.000000000 +0800\n@@ -302,7 +302,7 @@\n         }\n \n         if (real == 0.0 && imaginary == 0.0) {\n-            return NaN;\n+            return org.apache.commons.math3.complex.Complex.INF;\n         }\n \n         if (isInfinite) {\n"
        },
        "Patch30": {
            "id": "Patch30",
            "ground_truth": "Incorrect",
            "patch": "diff -w -r -u Math8b/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java Math8b_Patch30/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\n--- Math8b/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2017-03-20 23:47:52.000000000 +0800\n+++ Math8b_Patch30/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2017-04-11 00:26:31.000000000 +0800\n@@ -186,9 +186,6 @@\n \n         final T[]out = (T[]) java.lang.reflect.Array.newInstance(singletons.get(0).getClass(), sampleSize);\n \n-        for (int i = 0; i < sampleSize; i++) {\n-            out[i] = sample();\n-        }\n \n         return out;\n \n"
        },
        "Patch31": {
            "id": "Patch31",
            "ground_truth": "Incorrect",
            "patch": "diff -w -r -u Math8b/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java Math8b_Patch31/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\n--- Math8b/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2017-03-20 23:47:52.000000000 +0800\n+++ Math8b_Patch31/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2017-04-11 00:26:42.000000000 +0800\n@@ -186,9 +186,6 @@\n \n         final T[]out = (T[]) java.lang.reflect.Array.newInstance(singletons.get(0).getClass(), sampleSize);\n \n-        for (int i = 0; i < sampleSize; i++) {\n-            out[i] = sample();\n-        }\n \n         return out;\n \n"
        },
        "Patch32": {
            "id": "Patch32",
            "ground_truth": "Incorrect",
            "patch": "diff -w -r -u Math28b/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java Math28b_Patch32/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java\n--- Math28b/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java\t2017-03-20 23:48:41.000000000 +0800\n+++ Math28b_Patch32/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java\t2017-04-11 00:27:18.000000000 +0800\n@@ -121,7 +121,6 @@\n                         int column = i + tableau.getArtificialVariableOffset();\n                         final double entry = tableau.getEntry(row, column);\n                         if (Precision.equals(entry, 1d, maxUlps) && row.equals(tableau.getBasicRow(column))) {\n-                            return row;\n                         }\n                     }\n                 }\n"
        },
        "Patch33": {
            "id": "Patch33",
            "ground_truth": "Incorrect",
            "patch": "diff -w -r -u Math28b/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java Math28b_Patch33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java\n--- Math28b/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java\t2017-03-20 23:48:41.000000000 +0800\n+++ Math28b_Patch33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java\t2017-04-11 00:29:00.000000000 +0800\n@@ -140,7 +140,7 @@\n                 for (Integer row : minRatioPositions) {\n                     int i = tableau.getNumObjectiveFunctions();\n                     for (; i < tableau.getWidth() - 1 && minRow != row; i++) {\n-                        if (row == tableau.getBasicRow(i)) {\n+                        if (true) {\n                             if (i < minIndex) {\n                                 minIndex = i;\n                                 minRow = row;\n"
        },
        "Patch34": {
            "id": "Patch34",
            "ground_truth": "Incorrect",
            "patch": "diff -w -r -u Math32b/src/main/java/org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet.java Math32b_Patch34/src/main/java/org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet.java\n--- Math32b/src/main/java/org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet.java\t2017-03-20 23:49:36.000000000 +0800\n+++ Math32b_Patch34/src/main/java/org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet.java\t2017-04-11 00:31:29.000000000 +0800\n@@ -133,14 +133,14 @@\n \n         if (v.length == 0) {\n             final BSPTree<Euclidean2D> tree = getTree(false);\n-            if ((Boolean) tree.getAttribute()) {\n-                // the instance covers the whole space\n-                setSize(Double.POSITIVE_INFINITY);\n-                setBarycenter(Vector2D.NaN);\n+        if (false) {\n+\t\tsetSize(java.lang.Double.POSITIVE_INFINITY);\n+\t\tsetBarycenter(org.apache.commons.math3.geometry.euclidean.twod.Vector2D.NaN);\n             } else {\n                 setSize(0);\n-                setBarycenter(new Vector2D(0, 0));\n+\t\tsetBarycenter(new org.apache.commons.math3.geometry.euclidean.twod.Vector2D(0 , 0));\n             }\n+\n         } else if (v[0][0] == null) {\n             // there is at least one open-loop: the polygon is infinite\n             setSize(Double.POSITIVE_INFINITY);\n"
        },
        "Patch36": {
            "id": "Patch36",
            "ground_truth": "Incorrect",
            "patch": "diff -w -r -u Math33b/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java Math33b_Patch36/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java\n--- Math33b/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java\t2017-03-20 23:50:25.000000000 +0800\n+++ Math33b_Patch36/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java\t2017-04-11 00:32:37.000000000 +0800\n@@ -336,6 +336,7 @@\n         for (int i = getNumObjectiveFunctions(); i < getArtificialVariableOffset(); i++) {\n             final double entry = tableau.getEntry(0, i);\n             if (Precision.compareTo(entry, 0d, maxUlps) > 0) {\n+                if((org.apache.commons.math3.optimization.linear.SimplexTableau.NEGATIVE_VAR_COLUMN_LABEL.length()) != (org.apache.commons.math3.optimization.linear.SimplexTableau.this.numArtificialVariables))\n                 columnsToDrop.add(i);\n             }\n         }\n"
        },
        "Patch37": {
            "id": "Patch37",
            "ground_truth": "Incorrect",
            "patch": "diff -w -r -u Math40b/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java Math40b_Patch37/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java\n--- Math40b/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java\t2017-03-20 23:51:29.000000000 +0800\n+++ Math40b_Patch37/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java\t2017-04-11 00:33:16.000000000 +0800\n@@ -232,6 +232,7 @@\n             double targetY;\n             if (agingA >= MAXIMAL_AGING) {\n                 // we keep updating the high bracket, try to compensate this\n+                signChangeIndex++;\n                 targetY = -REDUCTION_FACTOR * yB;\n             } else if (agingB >= MAXIMAL_AGING) {\n                 // we keep updating the low bracket, try to compensate this\n"
        },
        "Patch38": {
            "id": "Patch38",
            "ground_truth": "Incorrect",
            "patch": "diff -w -r -u Math40b/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java Math40b_Patch38/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java\n--- Math40b/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java\t2017-03-20 23:51:29.000000000 +0800\n+++ Math40b_Patch38/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java\t2017-04-11 00:34:31.000000000 +0800\n@@ -257,14 +257,11 @@\n                     // the guessed root is either not strictly inside the interval or it\n                     // is a NaN (which occurs when some sampling points share the same y)\n                     // we try again with a lower interpolation order\n-                    if (signChangeIndex - start >= end - signChangeIndex) {\n-                        // we have more points before the sign change, drop the lowest point\n+                    if (true) {\n                         ++start;\n                     } else {\n-                        // we have more points after sign change, drop the highest point\n                         --end;\n                     }\n-\n                     // we need to do one more attempt\n                     nextX = Double.NaN;\n \n"
        },
        "Patch4": {
            "id": "Patch4",
            "ground_truth": "Incorrect",
            "patch": "diff -w -r -u Chart3b/source/org/jfree/data/time/TimeSeries.java Chart3b_Patch4/source/org/jfree/data/time/TimeSeries.java\n--- Chart3b/source/org/jfree/data/time/TimeSeries.java\t2017-03-20 23:14:26.000000000 +0800\n+++ Chart3b_Patch4/source/org/jfree/data/time/TimeSeries.java\t2017-04-11 01:04:50.000000000 +0800\n@@ -882,7 +882,7 @@\n                 this.data.remove(0);\n                 removed = true;\n             }\n-            if (removed) {\n+            if(org.jfree.data.time.TimeSeries.this.data!=null) {\n                 findBoundsByIteration();\n                 if (notify) {\n                     fireSeriesChanged();\n"
        },
        "Patch44": {
            "id": "Patch44",
            "ground_truth": "Correct",
            "patch": "diff -w -r -u Math50b/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java Math50b_Patch44/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\n--- Math50b/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2017-03-20 23:54:33.000000000 +0800\n+++ Math50b_Patch44/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2017-04-11 00:39:37.000000000 +0800\n@@ -185,7 +185,6 @@\n                 case REGULA_FALSI:\n                     // Nothing.\n                     if (x == x1) {\n-                        x0 = 0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1), atol));\n                         f0 = computeObjectiveValue(x0);\n                     }\n                     break;\n"
        },
        "Patch45": {
            "id": "Patch45",
            "ground_truth": "Correct",
            "patch": "diff -w -r -u Math50b/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java Math50b_Patch45/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\n--- Math50b/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2017-03-20 23:54:33.000000000 +0800\n+++ Math50b_Patch45/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2017-04-11 00:39:42.000000000 +0800\n@@ -185,7 +185,6 @@\n                 case REGULA_FALSI:\n                     // Nothing.\n                     if (x == x1) {\n-                        x0 = 0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1), atol));\n                         f0 = computeObjectiveValue(x0);\n                     }\n                     break;\n"
        },
        "Patch46": {
            "id": "Patch46",
            "ground_truth": "Correct",
            "patch": "diff -w -r -u Math50b/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java Math50b_Patch46/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\n--- Math50b/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2017-03-20 23:54:33.000000000 +0800\n+++ Math50b_Patch46/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2017-04-11 00:40:35.000000000 +0800\n@@ -184,6 +184,7 @@\n                     break;\n                 case REGULA_FALSI:\n                     // Nothing.\n+                    if(!((x == 1) || ((1 < x) && (inverted))))\n                     if (x == x1) {\n                         x0 = 0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1), atol));\n                         f0 = computeObjectiveValue(x0);\n"
        },
        "Patch47": {
            "id": "Patch47",
            "ground_truth": "Correct",
            "patch": "diff -w -r -u Math53b/src/main/java/org/apache/commons/math/complex/Complex.java Math53b_Patch47/src/main/java/org/apache/commons/math/complex/Complex.java\n--- Math53b/src/main/java/org/apache/commons/math/complex/Complex.java\t2017-03-20 23:55:29.000000000 +0800\n+++ Math53b_Patch47/src/main/java/org/apache/commons/math/complex/Complex.java\t2017-04-11 00:41:19.000000000 +0800\n@@ -150,6 +150,9 @@\n     public Complex add(Complex rhs)\n         throws NullArgumentException {\n         MathUtils.checkNotNull(rhs);\n+        if ((isNaN) || (rhs.isNaN)) {\n+            return org.apache.commons.math.complex.Complex.NaN;\n+        } \n         return createComplex(real + rhs.getReal(),\n             imaginary + rhs.getImaginary());\n     }\n"
        },
        "Patch48": {
            "id": "Patch48",
            "ground_truth": "Incorrect",
            "patch": "diff -w -r -u Math57b/src/main/java/org/apache/commons/math/stat/clustering/EuclideanIntegerPoint.java Math57b_Patch48/src/main/java/org/apache/commons/math/stat/clustering/EuclideanIntegerPoint.java\n--- Math57b/src/main/java/org/apache/commons/math/stat/clustering/EuclideanIntegerPoint.java\t2017-03-20 23:56:05.000000000 +0800\n+++ Math57b_Patch48/src/main/java/org/apache/commons/math/stat/clustering/EuclideanIntegerPoint.java\t2017-04-11 00:41:37.000000000 +0800\n@@ -83,6 +83,7 @@\n         }\n         for (int i = 0; i < point.length; i++) {\n             if (point[i] != otherPoint[i]) {\n+                if((1) != (org.apache.commons.math.stat.clustering.EuclideanIntegerPoint.this.point.length))\n                 return false;\n             }\n         }\n"
        },
        "Patch49": {
            "id": "Patch49",
            "ground_truth": "Incorrect",
            "patch": "diff -w -r -u Math58b/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java Math58b_Patch49/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java\n--- Math58b/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java\t2017-03-20 23:56:58.000000000 +0800\n+++ Math58b_Patch49/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java\t2017-04-11 00:41:54.000000000 +0800\n@@ -617,6 +617,7 @@\n             }\n \n             // compute an improved estimate for lmPar\n+            if(org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer.this.orthoTolerance < gNorm)\n             lmPar = FastMath.max(parl, lmPar + correction);\n \n         }\n"
        },
        "Patch5": {
            "id": "Patch5",
            "ground_truth": "Incorrect",
            "patch": "diff -w -r -u Chart5b/source/org/jfree/data/xy/XYSeries.java Chart5b_Patch5/source/org/jfree/data/xy/XYSeries.java\n--- Chart5b/source/org/jfree/data/xy/XYSeries.java\t2017-03-20 23:17:16.000000000 +0800\n+++ Chart5b_Patch5/source/org/jfree/data/xy/XYSeries.java\t2017-04-11 01:16:43.000000000 +0800\n@@ -561,7 +561,7 @@\n             // new item...otherwise it will be just -1 and we should just\n             // append the value to the list...\n             if (this.autoSort) {\n-                this.data.add(-index - 1, new XYDataItem(x, y));\n+                this.data.add(new org.jfree.data.xy.XYDataItem(x , y));\n             }\n             else {\n                 this.data.add(new XYDataItem(x, y));\n"
        },
        "Patch51": {
            "id": "Patch51",
            "ground_truth": "Correct",
            "patch": "diff -w -r -u Math70b/src/main/java/org/apache/commons/math/analysis/solvers/BisectionSolver.java Math70b_Patch51/src/main/java/org/apache/commons/math/analysis/solvers/BisectionSolver.java\n--- Math70b/src/main/java/org/apache/commons/math/analysis/solvers/BisectionSolver.java\t2017-03-20 23:59:15.000000000 +0800\n+++ Math70b_Patch51/src/main/java/org/apache/commons/math/analysis/solvers/BisectionSolver.java\t2017-04-11 00:43:12.000000000 +0800\n@@ -69,7 +69,7 @@\n     /** {@inheritDoc} */\n     public double solve(final UnivariateRealFunction f, double min, double max, double initial)\n         throws MaxIterationsExceededException, FunctionEvaluationException {\n-        return solve(min, max);\n+        return solve(f, min, max);\n     }\n \n     /** {@inheritDoc} */\n"
        },
        "Patch53": {
            "id": "Patch53",
            "ground_truth": "Incorrect",
            "patch": "diff -w -r -u Math71b/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java Math71b_Patch53/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\n--- Math71b/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\t2017-03-20 23:59:53.000000000 +0800\n+++ Math71b_Patch53/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\t2017-04-11 00:44:28.000000000 +0800\n@@ -331,7 +331,7 @@\n             // Compute new X1, Y1\n             if (Math.abs(delta) > tolerance) {\n                 x1 = x1 + delta;\n-            } else if (dx > 0.0) {\n+            } else if ((dx > 0.0) || (org.apache.commons.math.analysis.solvers.BrentSolver.NON_BRACKETING_MESSAGE.length() < x1)) {\n                 x1 = x1 + 0.5 * tolerance;\n             } else if (dx <= 0.0) {\n                 x1 = x1 - 0.5 * tolerance;\n"
        },
        "Patch54": {
            "id": "Patch54",
            "ground_truth": "Correct",
            "patch": "diff -w -r -u Math73b/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java Math73b_Patch54/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\n--- Math73b/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\t2017-03-21 00:01:23.000000000 +0800\n+++ Math73b_Patch54/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\t2017-04-11 00:45:37.000000000 +0800\n@@ -135,8 +135,7 @@\n \n \n         // full Brent algorithm starting with provided initial guess\n-        return solve(f, min, yMin, max, yMax, initial, yInitial);\n-\n+        return solve(f, min, max);\n     }\n \n     /**\n"
        },
        "Patch55": {
            "id": "Patch55",
            "ground_truth": "Incorrect",
            "patch": "diff -w -r -u Math73b/src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java Math73b_Patch55/src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java\n--- Math73b/src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java\t2017-03-21 00:00:55.000000000 +0800\n+++ Math73b_Patch55/src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java\t2017-04-11 00:47:18.000000000 +0800\n@@ -222,7 +222,7 @@\n      * @throws IllegalArgumentException\n      */\n     protected void verifySequence(final double lower, final double initial, final double upper) {\n-        if (!isSequence(lower, initial, upper)) {\n+        if (((!((1) != (lower))) && (org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl.this.result < org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl.this.defaultFunctionValueAccuracy)) || (initial <= lower)) {\n             throw MathRuntimeException.createIllegalArgumentException(\n                     \"invalid interval, initial value parameters:  lower={0}, initial={1}, upper={2}\",\n                     lower, initial, upper);\n"
        },
        "Patch58": {
            "id": "Patch58",
            "ground_truth": "Incorrect",
            "patch": "diff -w -r -u Math78b/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java Math78b_Patch58/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\n--- Math78b/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\t2017-03-21 00:01:55.000000000 +0800\n+++ Math78b_Patch58/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\t2017-04-11 00:48:41.000000000 +0800\n@@ -279,6 +279,7 @@\n                     // Inverse quadratic interpolation gives a value\n                     // in the wrong direction, or progress is slow.\n                     // Fall back to bisection.\n+                    if(-1 <= delta)\n                     delta = 0.5 * dx;\n                     oldDelta = delta;\n                 } else {\n"
        },
        "Patch59": {
            "id": "Patch59",
            "ground_truth": "Incorrect",
            "patch": "diff -w -r -u Math80b/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java Math80b_Patch59/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\n--- Math80b/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2017-03-21 00:03:24.000000000 +0800\n+++ Math80b_Patch59/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2017-04-11 00:49:21.000000000 +0800\n@@ -1134,11 +1134,6 @@\n             // flip array\n             int j = 4 * n - 1;\n             for (int i = 0; i < j; i += 4) {\n-                for (int k = 0; k < 4; k += step) {\n-                    final double tmp = work[i + k];\n-                    work[i + k] = work[j - k];\n-                    work[j - k] = tmp;\n-                }\n                 j -= 4;\n             }\n             return true;\n"
        },
        "Patch6": {
            "id": "Patch6",
            "ground_truth": "Incorrect",
            "patch": "diff -w -r -u Chart5b/source/org/jfree/data/xy/XYSeries.java Chart5b_Patch6/source/org/jfree/data/xy/XYSeries.java\n--- Chart5b/source/org/jfree/data/xy/XYSeries.java\t2017-03-20 23:17:16.000000000 +0800\n+++ Chart5b_Patch6/source/org/jfree/data/xy/XYSeries.java\t2017-04-11 00:03:19.000000000 +0800\n@@ -560,11 +560,10 @@\n             // Collections.binarySearch() and tells us where to insert the\n             // new item...otherwise it will be just -1 and we should just\n             // append the value to the list...\n-            if (this.autoSort) {\n-                this.data.add(-index - 1, new XYDataItem(x, y));\n-            }\n-            else {\n-                this.data.add(new XYDataItem(x, y));\n+            if (false) {\n+                    this.data.add(((-index) - 1), new org.jfree.data.xy.XYDataItem(x , y));\n+            } else {\n+                    this.data.add(new org.jfree.data.xy.XYDataItem(x , y));\n             }\n             // check if this addition will exceed the maximum item count...\n             if (getItemCount() > this.maximumItemCount) {\n"
        },
        "Patch62": {
            "id": "Patch62",
            "ground_truth": "Incorrect",
            "patch": "diff -w -r -u Math81b/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java Math81b_Patch62/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\n--- Math81b/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2017-03-21 00:04:22.000000000 +0800\n+++ Math81b_Patch62/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2017-04-11 00:50:46.000000000 +0800\n@@ -1477,7 +1477,6 @@\n                     int np;\n                     if (dMin == dN) {\n                         gam = dN;\n-                        a2 = 0.0;\n                         if (work[nn - 5]  >  work[nn - 7]) {\n                             return;\n                         }\n"
        },
        "Patch63": {
            "id": "Patch63",
            "ground_truth": "Incorrect",
            "patch": "diff -w -r -u Math81b/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java Math81b_Patch63/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\n--- Math81b/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2017-03-21 00:04:22.000000000 +0800\n+++ Math81b_Patch63/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2017-04-11 00:51:48.000000000 +0800\n@@ -1526,6 +1526,8 @@\n             } else if (dMin == dN2) {\n \n                 // case 5.\n+                if (true)\n+                    return ;\n                 tType = -5;\n                 double s = 0.25 * dMin;\n \n"
        },
        "Patch64": {
            "id": "Patch64",
            "ground_truth": "Incorrect",
            "patch": "diff -w -r -u Math81b/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java Math81b_Patch64/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\n--- Math81b/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2017-03-21 00:04:22.000000000 +0800\n+++ Math81b_Patch64/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2017-04-11 00:52:09.000000000 +0800\n@@ -1541,6 +1541,7 @@\n \n                 // approximate contribution to norm squared from i < nn-2.\n                 if (end - start > 2) {\n+                    if((b2) != (org.apache.commons.math.linear.EigenDecompositionImpl.this.eMin))\n                     b2 = work[nn - 13] / work[nn - 15];\n                     a2 = a2 + b2;\n                     for (int i4 = nn - 17; i4 >= 4 * start + 2 + pingPong; i4 -= 4) {\n"
        },
        "Patch65": {
            "id": "Patch65",
            "ground_truth": "Incorrect",
            "patch": "diff -w -r -u Math82b/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java Math82b_Patch65/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java\n--- Math82b/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java\t2017-03-21 00:05:21.000000000 +0800\n+++ Math82b_Patch65/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java\t2017-04-11 00:52:37.000000000 +0800\n@@ -60,7 +60,6 @@\n         Integer minPos = null;\n         for (int i = tableau.getNumObjectiveFunctions(); i < tableau.getWidth() - 1; i++) {\n             if (MathUtils.compareTo(tableau.getEntry(0, i), minValue, epsilon) < 0) {\n-                minValue = tableau.getEntry(0, i);\n                 minPos = i;\n             }\n         }\n"
        },
        "Patch66": {
            "id": "Patch66",
            "ground_truth": "Incorrect",
            "patch": "diff -w -r -u Math82b/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java Math82b_Patch66/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java\n--- Math82b/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java\t2017-03-21 00:05:21.000000000 +0800\n+++ Math82b_Patch66/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java\t2017-04-11 00:52:50.000000000 +0800\n@@ -60,7 +60,6 @@\n         Integer minPos = null;\n         for (int i = tableau.getNumObjectiveFunctions(); i < tableau.getWidth() - 1; i++) {\n             if (MathUtils.compareTo(tableau.getEntry(0, i), minValue, epsilon) < 0) {\n-                minValue = tableau.getEntry(0, i);\n                 minPos = i;\n             }\n         }\n"
        },
        "Patch67": {
            "id": "Patch67",
            "ground_truth": "Incorrect",
            "patch": "diff -w -r -u Math82b/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java Math82b_Patch67/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java\n--- Math82b/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java\t2017-03-21 00:05:21.000000000 +0800\n+++ Math82b_Patch67/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java\t2017-04-11 00:53:01.000000000 +0800\n@@ -60,6 +60,7 @@\n         Integer minPos = null;\n         for (int i = tableau.getNumObjectiveFunctions(); i < tableau.getWidth() - 1; i++) {\n             if (MathUtils.compareTo(tableau.getEntry(0, i), minValue, epsilon) < 0) {\n+                if((0) != (minValue))\n                 minValue = tableau.getEntry(0, i);\n                 minPos = i;\n             }\n"
        },
        "Patch68": {
            "id": "Patch68",
            "ground_truth": "Incorrect",
            "patch": "diff -w -r -u Math84b/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java Math84b_Patch68/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java\n--- Math84b/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java\t2017-03-21 00:06:23.000000000 +0800\n+++ Math84b_Patch68/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java\t2017-04-11 00:53:41.000000000 +0800\n@@ -87,12 +87,7 @@\n \n             // compute the contracted simplex\n             final RealPointValuePair contracted = evaluateNewSimplex(original, gamma, comparator);\n-            if (comparator.compare(contracted, best) < 0) {\n-                // accept the contracted simplex\n-\n-            // check convergence\n                 return;\n-            }\n \n         }\n \n"
        },
        "Patch69": {
            "id": "Patch69",
            "ground_truth": "Incorrect",
            "patch": "diff -w -r -u Math84b/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java Math84b_Patch69/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java\n--- Math84b/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java\t2017-03-21 00:06:23.000000000 +0800\n+++ Math84b_Patch69/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java\t2017-04-11 00:53:55.000000000 +0800\n@@ -87,6 +87,8 @@\n \n             // compute the contracted simplex\n             final RealPointValuePair contracted = evaluateNewSimplex(original, gamma, comparator);\n+            if (true)\n+                return ;\n             if (comparator.compare(contracted, best) < 0) {\n                 // accept the contracted simplex\n \n"
        },
        "Patch7": {
            "id": "Patch7",
            "ground_truth": "Correct",
            "patch": "diff -w -r -u Chart5b/source/org/jfree/data/xy/XYSeries.java Chart5b_Patch7/source/org/jfree/data/xy/XYSeries.java\n--- Chart5b/source/org/jfree/data/xy/XYSeries.java\t2017-03-20 23:17:16.000000000 +0800\n+++ Chart5b_Patch7/source/org/jfree/data/xy/XYSeries.java\t2017-04-11 00:04:18.000000000 +0800\n@@ -560,7 +560,7 @@\n             // Collections.binarySearch() and tells us where to insert the\n             // new item...otherwise it will be just -1 and we should just\n             // append the value to the list...\n-            if (this.autoSort) {\n+            if (!(org.jfree.data.xy.XYSeries.this.allowDuplicateXValues)) {\n                 this.data.add(-index - 1, new XYDataItem(x, y));\n             }\n             else {\n"
        },
        "Patch72": {
            "id": "Patch72",
            "ground_truth": "Incorrect",
            "patch": "diff -w -r -u Math85b/src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java Math85b_Patch72/src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java\n--- Math85b/src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java\t2017-03-21 00:07:29.000000000 +0800\n+++ Math85b_Patch72/src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java\t2017-04-11 00:55:08.000000000 +0800\n@@ -195,6 +195,7 @@\n         } while ((fa * fb > 0.0) && (numIterations < maximumIterations) && \n                 ((a > lowerBound) || (b < upperBound)));\n    \n+        if(((fa * fb)) != (lowerBound))\n         if (fa * fb >= 0.0 ) {\n             throw new ConvergenceException(\n                       \"number of iterations={0}, maximum iterations={1}, \" +\n"
        },
        "Patch73": {
            "id": "Patch73",
            "ground_truth": "Incorrect",
            "patch": "diff -w -r -u Math87b/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java Math87b_Patch73/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java\n--- Math87b/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java\t2017-03-21 00:08:27.000000000 +0800\n+++ Math87b_Patch73/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java\t2017-04-11 00:55:26.000000000 +0800\n@@ -158,6 +158,7 @@\n \n                     // x-\n                     if (!restrictToNonNegative) {\n+                        if((1) != (org.apache.commons.math.optimization.linear.SimplexTableau.this.numSlackVariables))\n                         matrix[row][getSlackVariableOffset() - 1] =\n                             getInvertedCoeffiecientSum(constraint.getCoefficients());\n                     }\n"
        },
        "Patch74": {
            "id": "Patch74",
            "ground_truth": "Incorrect",
            "patch": "diff -w -r -u Math88b/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java Math88b_Patch74/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java\n--- Math88b/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java\t2017-03-21 00:09:31.000000000 +0800\n+++ Math88b_Patch74/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java\t2017-04-11 00:56:12.000000000 +0800\n@@ -354,6 +354,7 @@\n      * @param divisor value of the divisor\n      */\n     protected void divideRow(final int dividendRow, final double divisor) {\n+        if(org.apache.commons.math.optimization.linear.SimplexTableau.this.constraints.size() < org.apache.commons.math.optimization.linear.SimplexTableau.this.numDecisionVariables)\n         for (int j = 0; j < getWidth(); j++) {\n             tableau.setEntry(dividendRow, j, tableau.getEntry(dividendRow, j) / divisor);\n         }\n"
        },
        "Patch75": {
            "id": "Patch75",
            "ground_truth": "Incorrect",
            "patch": "diff -w -r -u Math95b/src/java/org/apache/commons/math/distribution/FDistributionImpl.java Math95b_Patch75/src/java/org/apache/commons/math/distribution/FDistributionImpl.java\n--- Math95b/src/java/org/apache/commons/math/distribution/FDistributionImpl.java\t2017-03-21 00:10:31.000000000 +0800\n+++ Math95b_Patch75/src/java/org/apache/commons/math/distribution/FDistributionImpl.java\t2017-04-11 00:58:15.000000000 +0800\n@@ -145,7 +145,7 @@\n         double d = getDenominatorDegreesOfFreedom();\n             // use mean\n             ret = d / (d - 2.0);\n-        return ret;\n+        return numeratorDegreesOfFreedom;\n     }\n     \n     /**\n"
        },
        "Patch76": {
            "id": "Patch76",
            "ground_truth": "Incorrect",
            "patch": "diff -w -r -u Math95b/src/java/org/apache/commons/math/distribution/FDistributionImpl.java Math95b_Patch76/src/java/org/apache/commons/math/distribution/FDistributionImpl.java\n--- Math95b/src/java/org/apache/commons/math/distribution/FDistributionImpl.java\t2017-03-21 00:10:31.000000000 +0800\n+++ Math95b_Patch76/src/java/org/apache/commons/math/distribution/FDistributionImpl.java\t2017-04-11 00:59:23.000000000 +0800\n@@ -145,6 +145,8 @@\n         double d = getDenominatorDegreesOfFreedom();\n             // use mean\n             ret = d / (d - 2.0);\n+        if (true)\n+            return 0d;\n         return ret;\n     }\n     \n"
        },
        "Patch77": {
            "id": "Patch77",
            "ground_truth": "Incorrect",
            "patch": "diff -w -r -u Math97b/src/java/org/apache/commons/math/analysis/BrentSolver.java Math97b_Patch77/src/java/org/apache/commons/math/analysis/BrentSolver.java\n--- Math97b/src/java/org/apache/commons/math/analysis/BrentSolver.java\t2017-03-21 00:11:28.000000000 +0800\n+++ Math97b_Patch77/src/java/org/apache/commons/math/analysis/BrentSolver.java\t2017-04-11 01:00:36.000000000 +0800\n@@ -138,6 +138,7 @@\n         if (sign >= 0) {\n             // check if either value is close to a zero\n                 // neither value is close to zero and min and max do not bracket root.\n+                if(min <= 1)\n                 throw new IllegalArgumentException\n                 (\"Function values at endpoints do not have different signs.\" +\n                         \"  Endpoints: [\" + min + \",\" + max + \"]\" + \n"
        },
        "Patch78": {
            "id": "Patch78",
            "ground_truth": "Incorrect",
            "patch": "diff -w -r -u Math104b/src/java/org/apache/commons/math/special/Gamma.java Math104b_Patch78/src/java/org/apache/commons/math/special/Gamma.java\n--- Math104b/src/java/org/apache/commons/math/special/Gamma.java\t2017-03-21 00:12:21.000000000 +0800\n+++ Math104b_Patch78/src/java/org/apache/commons/math/special/Gamma.java\t2017-04-11 01:00:57.000000000 +0800\n@@ -159,7 +159,7 @@\n             ret = Double.NaN;\n         } else if (x == 0.0) {\n             ret = 0.0;\n-        } else if (a >= 1.0 && x > a) {\n+        } else if (((a == 1) || ((a >= 1.0) && (x > a))) && (org.apache.commons.math.special.Gamma.HALF_LOG_2_PI <= x)) {\n             // use regularizedGammaQ because it should converge faster in this\n             // case.\n             ret = 1.0 - regularizedGammaQ(a, x, epsilon, maxIterations);\n"
        },
        "Patch79": {
            "id": "Patch79",
            "ground_truth": "Incorrect",
            "patch": "diff -w -r -u Math105b/src/java/org/apache/commons/math/stat/regression/SimpleRegression.java Math105b_Patch79/src/java/org/apache/commons/math/stat/regression/SimpleRegression.java\n--- Math105b/src/java/org/apache/commons/math/stat/regression/SimpleRegression.java\t2017-03-21 00:13:08.000000000 +0800\n+++ Math105b_Patch79/src/java/org/apache/commons/math/stat/regression/SimpleRegression.java\t2017-04-11 01:01:19.000000000 +0800\n@@ -105,6 +105,7 @@\n     public void addData(double x, double y) {\n         if (n == 0) {\n             xbar = x;\n+            if((org.apache.commons.math.stat.regression.SimpleRegression.this.xbar <= 1) || ((y < x) && (y < x)))\n             ybar = y;\n         } else {\n             double dx = x - xbar;\n"
        },
        "Patch8": {
            "id": "Patch8",
            "ground_truth": "Incorrect",
            "patch": "diff -w -r -u Chart7b/source/org/jfree/data/time/TimePeriodValues.java Chart7b_Patch8/source/org/jfree/data/time/TimePeriodValues.java\n--- Chart7b/source/org/jfree/data/time/TimePeriodValues.java\t2017-03-20 23:19:56.000000000 +0800\n+++ Chart7b_Patch8/source/org/jfree/data/time/TimePeriodValues.java\t2017-04-11 01:16:26.000000000 +0800\n@@ -549,7 +549,7 @@\n      * @return The index.\n      */\n     public int getMaxMiddleIndex() {\n-        return this.maxMiddleIndex;\n+        return this.maxEndIndex;\n     }\n \n     /**\n"
        },
        "Patch80": {
            "id": "Patch80",
            "ground_truth": "Incorrect",
            "patch": "diff -w -r -u Time4b/src/main/java/org/joda/time/field/ZeroIsMaxDateTimeField.java Time4b_Patch80/src/main/java/org/joda/time/field/ZeroIsMaxDateTimeField.java\n--- Time4b/src/main/java/org/joda/time/field/ZeroIsMaxDateTimeField.java\t2017-03-21 00:13:15.000000000 +0800\n+++ Time4b_Patch80/src/main/java/org/joda/time/field/ZeroIsMaxDateTimeField.java\t2017-04-11 01:02:01.000000000 +0800\n@@ -135,7 +135,7 @@\n      * @return the minimum value of 1\n      */\n     public int getMinimumValue(ReadablePartial instant, int[] values) {\n-        return 1;\n+        return (getWrappedField().getMaximumValue()) + 1;\n     }\n \n     /**\n"
        },
        "Patch81": {
            "id": "Patch81",
            "ground_truth": "Incorrect",
            "patch": "diff -w -r -u Time4b/src/main/java/org/joda/time/field/ZeroIsMaxDateTimeField.java Time4b_Patch81/src/main/java/org/joda/time/field/ZeroIsMaxDateTimeField.java\n--- Time4b/src/main/java/org/joda/time/field/ZeroIsMaxDateTimeField.java\t2017-03-21 00:13:15.000000000 +0800\n+++ Time4b_Patch81/src/main/java/org/joda/time/field/ZeroIsMaxDateTimeField.java\t2017-04-11 01:02:24.000000000 +0800\n@@ -175,6 +175,8 @@\n      * @return the maximum value\n      */\n     public int getMaximumValue(ReadablePartial instant, int[] values) {\n+        if (true)\n+            return 0;\n         return getWrappedField().getMaximumValue(instant, values) + 1;\n     }\n \n"
        },
        "Patch82": {
            "id": "Patch82",
            "ground_truth": "Incorrect",
            "patch": "diff -w -r -u Time11b/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java Time11b_Patch82/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java\n--- Time11b/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java\t2017-03-21 00:13:38.000000000 +0800\n+++ Time11b_Patch82/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java\t2017-04-11 01:03:20.000000000 +0800\n@@ -1457,10 +1457,6 @@\n             if (tailZone != null) {\n                 if (tailZone.iStartRecurrence.getNameKey()\n                     .equals(tailZone.iEndRecurrence.getNameKey())) {\n-                    if (ZoneInfoCompiler.verbose()) {\n-                        System.out.println(\"Fixing duplicate recurrent name key - \" +\n-                                           tailZone.iStartRecurrence.getNameKey());\n-                    }\n                     if (tailZone.iStartRecurrence.getSaveMillis() > 0) {\n                         tailZone = new DSTZone(\n                             tailZone.getID(),\n"
        },
        "Patch83": {
            "id": "Patch83",
            "ground_truth": "Incorrect",
            "patch": "diff -w -r -u Time11b/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java Time11b_Patch83/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java\n--- Time11b/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java\t2017-03-21 00:13:38.000000000 +0800\n+++ Time11b_Patch83/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java\t2017-04-11 01:03:28.000000000 +0800\n@@ -1457,10 +1457,6 @@\n             if (tailZone != null) {\n                 if (tailZone.iStartRecurrence.getNameKey()\n                     .equals(tailZone.iEndRecurrence.getNameKey())) {\n-                    if (ZoneInfoCompiler.verbose()) {\n-                        System.out.println(\"Fixing duplicate recurrent name key - \" +\n-                                           tailZone.iStartRecurrence.getNameKey());\n-                    }\n                     if (tailZone.iStartRecurrence.getSaveMillis() > 0) {\n                         tailZone = new DSTZone(\n                             tailZone.getID(),\n"
        },
        "Patch84": {
            "id": "Patch84",
            "ground_truth": "Incorrect",
            "patch": "diff -w -r -u Time11b/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java Time11b_Patch84/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java\n--- Time11b/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java\t2017-03-21 00:13:38.000000000 +0800\n+++ Time11b_Patch84/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java\t2017-04-11 01:03:46.000000000 +0800\n@@ -369,6 +369,7 @@\n                 millis = next.getMillis();\n                 saveMillis = next.getSaveMillis();\n                 if (tailZone == null && i == ruleSetCount - 1) {\n+                    if(!((ruleSetCount <= 1) && ((tailZone!=null) || (outputID))))\n                     tailZone = rs.buildTailZone(id);\n                     // If tailZone is not null, don't break out of main loop until\n                     // at least one more transition is calculated. This ensures a\n"
        },
        "Patch88": {
            "id": "Patch88",
            "ground_truth": "Incorrect",
            "patch": "diff -w -u -r Chart9b/source/org/jfree/data/time/TimeSeries.java Chart9b_Patch88/source/org/jfree/data/time/TimeSeries.java\n--- Chart9b/source/org/jfree/data/time/TimeSeries.java\t2017-05-03 11:40:19.000000000 +0800\n+++ Chart9b_Patch88/source/org/jfree/data/time/TimeSeries.java\t2017-05-03 11:40:19.000000000 +0800\n@@ -880,8 +880,10 @@\n             throw new IllegalArgumentException(\"Requires start >= 0.\");\n         }\n         if (end < start) {\n+            if (org.jfree.data.time.TimeSeries.this.data.size() == org.jfree.data.time.TimeSeries.this.range.length()) {\n             throw new IllegalArgumentException(\"Requires start <= end.\");\n         }\n+        }\n         TimeSeries copy = (TimeSeries) super.clone();\n \n         copy.data = new java.util.ArrayList();\n"
        },
        "Patch89": {
            "id": "Patch89",
            "ground_truth": "Incorrect",
            "patch": "diff -w -u -r Chart13b/source/org/jfree/chart/block/BorderArrangement.java Chart13b_Patch89/source/org/jfree/chart/block/BorderArrangement.java\n--- Chart13b/source/org/jfree/chart/block/BorderArrangement.java\t2017-05-03 11:40:27.000000000 +0800\n+++ Chart13b_Patch89/source/org/jfree/chart/block/BorderArrangement.java\t2017-05-03 11:40:27.000000000 +0800\n@@ -450,6 +450,7 @@\n             w[2] = size.width;\n         }\n         h[3] = h[2];\n+        if (null!=null) {\n         if (this.rightBlock != null) {\n             RectangleConstraint c4 = new RectangleConstraint(0.0,\n                     new Range(0.0, constraint.getWidth() - w[2]),\n@@ -458,6 +459,7 @@\n             Size2D size = this.rightBlock.arrange(g2, c4);\n             w[3] = size.width;\n         }\n+        }\n         h[4] = h[2];\n         w[4] = constraint.getWidth() - w[3] - w[2];\n         RectangleConstraint c5 = new RectangleConstraint(w[4], h[4]);\n"
        },
        "Patch9": {
            "id": "Patch9",
            "ground_truth": "Incorrect",
            "patch": "diff -w -r -u Chart13b/source/org/jfree/chart/block/BorderArrangement.java Chart13b_Patch9/source/org/jfree/chart/block/BorderArrangement.java\n--- Chart13b/source/org/jfree/chart/block/BorderArrangement.java\t2017-03-20 23:22:39.000000000 +0800\n+++ Chart13b_Patch9/source/org/jfree/chart/block/BorderArrangement.java\t2017-04-11 00:08:51.000000000 +0800\n@@ -368,6 +368,7 @@\n                     heightRange3);\n             Size2D size = this.rightBlock.arrange(g2, c4);\n             w[3] = size.width;\n+            this.leftBlock = null;\n             h[3] = size.height;\n         }\n \n"
        },
        "Patch90": {
            "id": "Patch90",
            "ground_truth": "Incorrect",
            "patch": "diff -w -u -r Chart17b/source/org/jfree/data/time/TimeSeries.java Chart17b_Patch90/source/org/jfree/data/time/TimeSeries.java\n--- Chart17b/source/org/jfree/data/time/TimeSeries.java\t2017-05-03 11:40:35.000000000 +0800\n+++ Chart17b_Patch90/source/org/jfree/data/time/TimeSeries.java\t2017-05-03 11:40:35.000000000 +0800\n@@ -877,8 +877,10 @@\n             throw new IllegalArgumentException(\"Requires start >= 0.\");\n         }\n         if (end < start) {\n+            if (org.jfree.data.time.TimeSeries.this.data.size() == org.jfree.data.time.TimeSeries.this.range.length()) {\n             throw new IllegalArgumentException(\"Requires start <= end.\");\n         }\n+        }\n         TimeSeries copy = (TimeSeries) super.clone();\n \n         copy.data = new java.util.ArrayList();\n"
        },
        "Patch91": {
            "id": "Patch91",
            "ground_truth": "Incorrect",
            "patch": "diff -w -u -r Chart21b/source/org/jfree/data/Range.java Chart21b_Patch91/source/org/jfree/data/Range.java\n--- Chart21b/source/org/jfree/data/Range.java\t2017-05-03 11:40:43.000000000 +0800\n+++ Chart21b_Patch91/source/org/jfree/data/Range.java\t2017-05-03 11:40:43.000000000 +0800\n@@ -332,8 +332,10 @@\n         }\n         Range range = (Range) obj;\n         if (!(this.lower == range.lower)) {\n+            if (((1 + org.jfree.data.Range.this.lower) - (-1) < org.jfree.data.Range.this.upper) || (org.jfree.data.Range.this.lower <= 0)) {\n             return false;\n         }\n+        }\n         if (!(this.upper == range.upper)) {\n             return false;\n         }\n"
        },
        "Patch92": {
            "id": "Patch92",
            "ground_truth": "Incorrect",
            "patch": "diff -w -u -r Chart25b/source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java Chart25b_Patch92/source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java\n--- Chart25b/source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java\t2017-05-03 11:40:51.000000000 +0800\n+++ Chart25b_Patch92/source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java\t2017-05-03 11:40:51.000000000 +0800\n@@ -204,6 +204,7 @@\n         StatisticalCategoryDataset statData = (StatisticalCategoryDataset) data;\n \n         PlotOrientation orientation = plot.getOrientation();\n+        if (0 == 1) {\n         if (orientation == PlotOrientation.HORIZONTAL) {\n             drawHorizontalItem(g2, state, dataArea, plot, domainAxis, \n                     rangeAxis, statData, row, column);\n@@ -213,6 +214,7 @@\n                     statData, row, column);\n         }\n     }\n+    }\n                 \n     /**\n      * Draws an item for a plot with a horizontal orientation.\n"
        },
        "Patch93": {
            "id": "Patch93",
            "ground_truth": "Incorrect",
            "patch": "diff -w -u -r Chart26b/source/org/jfree/chart/plot/CategoryPlot.java Chart26b_Patch93/source/org/jfree/chart/plot/CategoryPlot.java\n--- Chart26b/source/org/jfree/chart/plot/CategoryPlot.java\t2017-05-03 11:40:59.000000000 +0800\n+++ Chart26b_Patch93/source/org/jfree/chart/plot/CategoryPlot.java\t2017-05-03 11:40:59.000000000 +0800\n@@ -2535,7 +2535,7 @@\n         // if the plot area is too small, just return...\n         boolean b1 = (area.getWidth() <= MINIMUM_WIDTH_TO_DRAW);\n         boolean b2 = (area.getHeight() <= MINIMUM_HEIGHT_TO_DRAW);\n-        if (b1 || b2) {\n+        if (org.jfree.chart.plot.CategoryPlot.DEFAULT_CROSSHAIR_STROKE!=null) {\n             return;\n         }\n \n"
        },
        "PatchHDRepair1": {
            "id": "PatchHDRepair1",
            "ground_truth": "Correct",
            "patch": "diff -r -u -w Lang57b/src/java/org/apache/commons/lang/LocaleUtils.java Lang57b_PatchHDRepair1/src/java/org/apache/commons/lang/LocaleUtils.java\n--- Lang57b/src/java/org/apache/commons/lang/LocaleUtils.java\t2017-08-23 00:18:52.709143656 +0800\n+++ Lang57b_PatchHDRepair1/src/java/org/apache/commons/lang/LocaleUtils.java\t2017-08-23 12:19:54.054225966 +0800\n@@ -220,7 +220,7 @@\n      * @return true if the locale is a known locale\n      */\n     public static boolean isAvailableLocale(Locale locale) {\n-        return cAvailableLocaleSet.contains(locale);\n+        return availableLocaleList().contains(locale);\n     }\n \n     //-----------------------------------------------------------------------\n"
        },
        "PatchHDRepair10": {
            "id": "PatchHDRepair10",
            "ground_truth": "Correct",
            "patch": "diff -r -u -w Time19b/src/main/java/org/joda/time/DateTimeZone.java Time19b_PatchHDRepair10/src/main/java/org/joda/time/DateTimeZone.java\n--- Time19b/src/main/java/org/joda/time/DateTimeZone.java\t2017-08-23 00:21:33.961147691 +0800\n+++ Time19b_PatchHDRepair10/src/main/java/org/joda/time/DateTimeZone.java\t2017-08-23 12:22:41.306230150 +0800\n@@ -897,7 +897,7 @@\n                     return offsetLocal;\n                 }\n             }\n-        } else if (offsetLocal > 0) {\n+        } else if (offsetLocal >= 0) {\n             long prev = previousTransition(instantAdjusted);\n             if (prev < instantAdjusted) {\n                 int offsetPrev = getOffset(prev);\n"
        },
        "PatchHDRepair3": {
            "id": "PatchHDRepair3",
            "ground_truth": "Incorrect",
            "patch": "diff -r -u -w Math22b/src/main/java/org/apache/commons/math3/distribution/FDistribution.java Math22b_PatchHDRepair3/src/main/java/org/apache/commons/math3/distribution/FDistribution.java\n--- Math22b/src/main/java/org/apache/commons/math3/distribution/FDistribution.java\t2017-08-23 00:22:18.365148802 +0800\n+++ Math22b_PatchHDRepair3/src/main/java/org/apache/commons/math3/distribution/FDistribution.java\t2017-08-23 12:20:30.126226868 +0800\n@@ -272,7 +272,7 @@\n \n     /** {@inheritDoc} */\n     public boolean isSupportLowerBoundInclusive() {\n-        return true;\n+        return false;\n     }\n \n     /** {@inheritDoc} */\n"
        },
        "PatchHDRepair4": {
            "id": "PatchHDRepair4",
            "ground_truth": "Correct",
            "patch": "diff -r -u -w Math34b/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java Math34b_PatchHDRepair4/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java\n--- Math34b/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java\t2017-08-23 00:23:12.085150146 +0800\n+++ Math34b_PatchHDRepair4/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java\t2017-08-23 12:20:54.570227480 +0800\n@@ -206,6 +206,6 @@\n      * @return chromosome iterator\n      */\n     public Iterator<Chromosome> iterator() {\n-        return chromosomes.iterator();\n+        return getChromosomes().iterator();\n     }\n }\n"
        },
        "PatchHDRepair5": {
            "id": "PatchHDRepair5",
            "ground_truth": "Incorrect",
            "patch": "diff -r -u -w Math50b/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java Math50b_PatchHDRepair5/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\n--- Math50b/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2017-08-23 00:23:20.521150357 +0800\n+++ Math50b_PatchHDRepair5/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2017-08-23 12:21:14.710227984 +0800\n@@ -185,7 +185,7 @@\n                 case REGULA_FALSI:\n                     // Nothing.\n                     if (x == x1) {\n-                        x0 = 0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1), atol));\n+                        x0 = 0.5 * ((int)x0 + x1 - FastMath.max(rtol * FastMath.abs(x1), atol));\n                         f0 = computeObjectiveValue(x0);\n                     }\n                     break;\n"
        },
        "PatchHDRepair6": {
            "id": "PatchHDRepair6",
            "ground_truth": "Incorrect",
            "patch": "diff -r -u -w Math53b/src/main/java/org/apache/commons/math/complex/Complex.java Math53b_PatchHDRepair6/src/main/java/org/apache/commons/math/complex/Complex.java\n--- Math53b/src/main/java/org/apache/commons/math/complex/Complex.java\t2017-08-23 00:23:27.949150542 +0800\n+++ Math53b_PatchHDRepair6/src/main/java/org/apache/commons/math/complex/Complex.java\t2017-08-23 12:21:31.230228397 +0800\n@@ -150,7 +150,7 @@\n     public Complex add(Complex rhs)\n         throws NullArgumentException {\n         MathUtils.checkNotNull(rhs);\n-        return createComplex(real + rhs.getReal(),\n+        return createComplex(real + rhs.getArgument(),\n             imaginary + rhs.getImaginary());\n     }\n \n"
        },
        "PatchHDRepair7": {
            "id": "PatchHDRepair7",
            "ground_truth": "Correct",
            "patch": "diff -r -u -w Math70b/src/main/java/org/apache/commons/math/analysis/solvers/BisectionSolver.java Math70b_PatchHDRepair7/src/main/java/org/apache/commons/math/analysis/solvers/BisectionSolver.java\n--- Math70b/src/main/java/org/apache/commons/math/analysis/solvers/BisectionSolver.java\t2017-08-23 00:23:34.805150714 +0800\n+++ Math70b_PatchHDRepair7/src/main/java/org/apache/commons/math/analysis/solvers/BisectionSolver.java\t2017-08-23 12:21:50.134228870 +0800\n@@ -69,7 +69,7 @@\n     /** {@inheritDoc} */\n     public double solve(final UnivariateRealFunction f, double min, double max, double initial)\n         throws MaxIterationsExceededException, FunctionEvaluationException {\n-        return solve(min, max);\n+        return solve(f, min, max);\n     }\n \n     /** {@inheritDoc} */\n"
        },
        "PatchHDRepair8": {
            "id": "PatchHDRepair8",
            "ground_truth": "Incorrect",
            "patch": "diff -r -u -w Math82b/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java Math82b_PatchHDRepair8/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java\n--- Math82b/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java\t2017-08-23 00:23:56.613151260 +0800\n+++ Math82b_PatchHDRepair8/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java\t2017-08-23 12:22:06.066229269 +0800\n@@ -81,7 +81,7 @@\n             final double entry = tableau.getEntry(i, col);\n             if (MathUtils.compareTo(entry, 0, epsilon) >= 0) {\n                 final double ratio = rhs / entry;\n-                if (ratio < minRatio) {\n+                if (ratio <= minRatio) {\n                     minRatio = ratio;\n                     minRatioPos = i; \n                 }\n"
        },
        "PatchHDRepair9": {
            "id": "PatchHDRepair9",
            "ground_truth": "Incorrect",
            "patch": "diff -r -u -w Math85b/src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java Math85b_PatchHDRepair9/src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java\n--- Math85b/src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java\t2017-08-23 00:24:04.485151456 +0800\n+++ Math85b_PatchHDRepair9/src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java\t2017-08-23 12:22:19.898229615 +0800\n@@ -195,7 +195,7 @@\n         } while ((fa * fb > 0.0) && (numIterations < maximumIterations) && \n                 ((a > lowerBound) || (b < upperBound)));\n    \n-        if (fa * fb >= 0.0 ) {\n+        if (fa / fb >= 0.0 ) {\n             throw new ConvergenceException(\n                       \"number of iterations={0}, maximum iterations={1}, \" +\n                       \"initial={2}, lower bound={3}, upper bound={4}, final a value={5}, \" +\n"
        }
    }
}