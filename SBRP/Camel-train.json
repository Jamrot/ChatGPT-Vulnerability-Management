{"Camel": {"72": {"ground_truth": "0", "bug_report": "FileConfigureTest can't pass in Windows box\nBecause of the File.separator is different between the unix and windows system. So the test can't pass in windows box.I just attached a patch for it. Please have a look at it  I tested it in windows box.", "id": "72"}, "84": {"ground_truth": "0", "bug_report": "Throw Useful Exception on No TypeConverter Available\nWhen there is no type converter available an NPE is thrown that requires tracing through sources to find root of problem", "id": "84"}, "100": {"ground_truth": "0", "bug_report": "Most recent snapshot requires ActiveMQ\nThis may be moot given the projects' relationship  but it's a recently introduced side effect. Before the most recent snapshot  I was able to use Camel without any ActiveMQ jar's floating around so long as I never tried to use any 'activemq:queue:foo' URI's. Now with the most recent snapshot  the first time I do something that uses AnnotationTypeCoverterLoader  ActiveMQConverter gets loaded  and then causes a NoClassDefFoundError for ActiveMQDestination.", "id": "100"}, "112": {"ground_truth": "0", "bug_report": "JMSXGroupID is not copied across ActiveMQ endpoints\nSee thread: http://www.nabble.com/MethodName-in-header-is-ignored-by-beanRef%28%29-tf4285009s22882.html#a12198390", "id": "112"}, "132": {"ground_truth": "0", "bug_report": "enable polling via the http component\nenable polling via the http component", "id": "132"}, "143": {"ground_truth": "0", "bug_report": "XPath namespaces configuration not possible through xml\nXpath xml element offers no way to define namespace mappings.", "id": "143"}, "161": {"ground_truth": "0", "bug_report": "URL link broken in org.apache.camel.Processor API doc\n'Message Transformer' link is broken.", "id": "161"}, "166": {"ground_truth": "0", "bug_report": "org.apache.camel.processor.UnitOfWorkWithAsyncFlowTest failure\nRunning org.apache.camel.processor.UnitOfWorkWithAsyncFlowTestTests run: 3  Failures: 1  Errors: 0  Skipped: 0  Time elapsed: 20.345 sec &lt;&lt;&lt; FAILURE!This prevents developer from building camel under Linux platform. Thanks!", "id": "166"}, "199": {"ground_truth": "0", "bug_report": "New converter : Node -> Source\nCurrently  there is no converter from Node -&gt; Source.It is required when using Camel's splitter() functionality inside ServiceMix:from('jbi:service:urn:eu:java:smx:fleetintegrator:camel') .splitter(xpath('/traces/trace')) .to('jbi:endpoint:urn:eu:java:smx:fleetintegrator:jms:mq');", "id": "199"}, "210": {"ground_truth": "0", "bug_report": "exception clause doesn't proceed with pipeline\nProblem is very similar to CAMEL-191 but this time with exception clause.As exceptions are not cleared pipeline doesn't proceed.", "id": "210"}, "214": {"ground_truth": "0", "bug_report": "the 1.2.0 release didnt' seem to include the javadocs or doc directory (or manual)!\nI wondered if this was due to your machine Hiram having some dodgy maven plugin around or something?", "id": "214"}, "224": {"ground_truth": "0", "bug_report": "Headers lost after XSLT processing\nAfter xslt processing the message headers are lost. See attached unit test  this test fails since revision 590680.http://svn.apache.org/viewvc?view=rev&amp;revision=590680", "id": "224"}, "232": {"ground_truth": "0", "bug_report": "Fix performance counters\nFix performance counters", "id": "232"}, "237": {"ground_truth": "0", "bug_report": "Upgrade geronimo-specs version to 1.1\nfrom 1.0", "id": "237"}, "269": {"ground_truth": "0", "bug_report": "Add getter method for routeCollection property in RouteBuilder class\nI need to stop a RouteBuilder. A solution for this issue could be access to routeCollection property in RouteBuilder class.", "id": "269"}, "275": {"ground_truth": "0", "bug_report": "cxf camel transport should support to register itself to the cxf bus automatically\nwhen cxf bus init  all tranports module on the classpath should register itself to the bus automatically.cxf machenism for this is just add a spring bean to describe the transport id and transport factory class mapping per as below&lt;beans xmlns='http://www.springframework.org/schema/beans' xmlns:xsi='http://www.w3.org/2001/XMLSchema-instance' xmlns:foo='http://cxf.apache.org/configuration/foo' xsi:schemaLocation=' http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd'&gt; &lt;bean class='org.apache.camel.component.cxf.transport.CamelTransportFactory' lazy-init='true'&gt; &lt;property name='bus' ref='cxf'/&gt; &lt;property name='transportIds'&gt; &lt;list&gt; &lt;value&gt;http://cxf.apache.org/transports/camel&lt;/value&gt; &lt;/list&gt; &lt;/property&gt; &lt;/bean&gt;&lt;/beans&gt;", "id": "275"}, "277": {"ground_truth": "0", "bug_report": "[Spring integration] TheadType is missing in org/apache/camel/model/jaxb.index\nTheadType is missing in org/apache/camel/model/jaxb.index =&gt; JAXB don't know how to unmarshall thread.Bug description found in Camel Users forum : http://www.nabble.com/Processor-thread-pool-td13212513s22882.html", "id": "277"}, "278": {"ground_truth": "0", "bug_report": "[Spring integration] Bad urls in META-INF/spring.schemas\nhttp/://activemq.apache.org/camel/schema/spring/camel-spring-1.1.xsd becomes http/://activemq.apache.org/camel/schema/spring/camel-spring-1.1.0.xsdhttp/://activemq.apache.org/camel/schema/spring/camel-spring-1.2.xsd becomes http/://activemq.apache.org/camel/schema/spring/camel-spring-1.2.0.xsdThere's no camel-spring-1.1.xsd and camel-spring-1.2.xsd under http://activemq.apache.org/camel/schema/spring/", "id": "278"}, "283": {"ground_truth": "0", "bug_report": "DeadLetterChannel - logging improvements when exchange handled by dead letter\nThe submitted patch have these improvements to the logger in deadletterchannel for delivery attempts outputs exchange id so we can correlate the lines in the log files. now also logs when the exchange could not be delivered and was handled by the failure processer (usually a deadletterchannel) minor issues with existing debug logging when sleeping (now also output millis) to be in line with other similar log lines in CamelI have not outputted the exchange itself (exchange.toString()) when the delivery could not be delivered successfully since there could be sensitive data in the exchange (e.g. an invoice input message) that we do not want to be logged in our log.But I think the logging of the exchange id is a good improvement and that they are aligned in the same position in the logline so it's easier to grep/find in the logs when you investigate and incident.", "id": "283"}, "286": {"ground_truth": "1", "bug_report": "NullPointerException in CXF routes when there is an endpoint between router and service CXF endpoints\nWhen an endpoint is added between a cxf router and a cxf service endpoint the message exchange is interrupted by a NullPointerException.Example code:----JAVA-BEGIN---------------------------------------------------------//This code worksfrom(StringUtils.join(cxfRouterURI)).to(StringUtils.join(cxfServiceURI)); // This code crashes (same problem with seda and log endpoints)String anyEndpoint = 'activemq:someQueue';----JAVA-END---------------------------------------------------------from(StringUtils.join(cxfRouterURI)).to(anyEndpoint).to(StringUtils.join(cxfServiceURI)); ----EXCEPTION-BEGIN-----------------------------------09/01/2008 18:32:40 org.apache.cxf.phase.PhaseInterceptorChain doInterceptINFO: Interceptor has thrown exception  unwinding noworg.apache.cxf.interceptor.Fault at org.apache.camel.component.cxf.interceptors.RawMessageContentRedirectInterceptor.handleMessage(RawMessageContentRedirectInterceptor.java:43) at org.apache.cxf.phase.PhaseInterceptorChain.doIntercept(PhaseInterceptorChain.java:207) at org.apache.camel.component.cxf.invoker.CxfClient.invokeWithMessageStream(CxfClient.java:137) at org.apache.camel.component.cxf.invoker.CxfClient.dispatch(CxfClient.java:89) at org.apache.camel.component.cxf.CxfProducer.process(CxfProducer.java:202) at org.apache.camel.component.cxf.CxfProducer.process(CxfProducer.java:152) at org.apache.camel.impl.converter.AsyncProcessorTypeConverter$ProcessorToAsynProcessorBridge.process(AsyncProcessorTypeConverter.java:44) at org.apache.camel.processor.SendProcessor.process(SendProcessor.java:73) at org.apache.camel.processor.DeadLetterChannel.process(DeadLetterChannel.java:143) at org.apache.camel.processor.DeadLetterChannel.process(DeadLetterChannel.java:87) at org.apache.camel.processor.Pipeline.process(Pipeline.java:101) at org.apache.camel.processor.Pipeline.process(Pipeline.java:85) at org.apache.camel.processor.UnitOfWorkProcessor.process(UnitOfWorkProcessor.java:40) at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:44) at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:68) at org.apache.camel.component.cxf.CamelInvoker.invoke(CamelInvoker.java:71) at org.apache.camel.component.cxf.interceptors.AbstractInvokerInterceptor.handleMessage(AbstractInvokerInterceptor.java:65) at org.apache.cxf.phase.PhaseInterceptorChain.doIntercept(PhaseInterceptorChain.java:207) at org.apache.camel.component.cxf.CxfMessageObserver.onMessage(CxfMessageObserver.java:83) at org.apache.cxf.transport.http_jetty.JettyHTTPDestination.serviceRequest(JettyHTTPDestination.java:284) at org.apache.cxf.transport.http_jetty.JettyHTTPDestination.doService(JettyHTTPDestination.java:240) at org.apache.cxf.transport.http_jetty.JettyHTTPHandler.handle(JettyHTTPHandler.java:54) at org.mortbay.jetty.handler.ContextHandler.handle(ContextHandler.java:712) at org.mortbay.jetty.handler.ContextHandlerCollection.handle(ContextHandlerCollection.java:211) at org.mortbay.jetty.handler.HandlerWrapper.handle(HandlerWrapper.java:139) at org.mortbay.jetty.Server.handle(Server.java:313) at org.mortbay.jetty.HttpConnection.handleRequest(HttpConnection.java:506) at org.mortbay.jetty.HttpConnection$RequestHandler.content(HttpConnection.java:844) at org.mortbay.jetty.HttpParser.parseNext(HttpParser.java:726) at org.mortbay.jetty.HttpParser.parseAvailable(HttpParser.java:211) at org.mortbay.jetty.HttpConnection.handle(HttpConnection.java:381) at org.mortbay.io.nio.SelectChannelEndPoint.run(SelectChannelEndPoint.java:396) at org.mortbay.thread.BoundedThreadPool$PoolThread.run(BoundedThreadPool.java:442)Caused by: java.lang.NullPointerException at org.apache.commons.io.IOUtils.copyLarge(IOUtils.java:1025) at org.apache.commons.io.IOUtils.copy(IOUtils.java:999) at org.apache.camel.component.cxf.interceptors.RawMessageContentRedirectInterceptor.handleMessage(RawMessageContentRedirectInterceptor.java:39) ... 32 more ----EXCEPTION-END-----------------------------------Known workaround:Change the code like this:----JAVA-BEGIN--------------------------------------------------------- String anyEndpoint = 'activemq:someQueue'; from(StringUtils.join(cxfRouterURI)).process(new Processor(){ public void process(Exchange exchange) throws Exception { exchange.setOut(exchange.getIn()); } }).to(anyEndpoint).to(StringUtils.join(cxfServiceURI));----JAVA-END---------------------------------------------------------", "id": "286"}, "288": {"ground_truth": "0", "bug_report": "support to set the aggregation stragey of multicastProcessor\nI have a use case   the router configuration could like this from('direct:a').multicast().to('direct:x'  'direct:y'  'direct:z');  from('direct:x').process(new AppendingProcessor('x')).to('direct:aggregater'); from('direct:y').process(new AppendingProcessor('y')).to('direct:aggregater'); from('direct:z').process(new AppendingProcessor('z')).to('direct:aggregater'); from('direct:aggregater').aggregator(header('cheese')  new BodyAggregatingStrategy()). completedPredicate(header('aggregated').isEqualTo(3)).to('mock:result');Now I send the message to endpoint 'direct:a' and I want to get the final result of the processors.And this requirement is much like the CAMEL-260.", "id": "288"}, "291": {"ground_truth": "0", "bug_report": "MulticastRecipientList - recipient list that uses multicast processor\nProbably it would be useful to have recipientList that in InOut mode doesn't work as a pipeline. I faced that problem  however InOnly is ok. It seems in InOut it reminds of RoutingSlip. Optionally we could use MulticastProcessor to process 'recipients'. If you think it makes sense  attached patch enhances camel-core with such feature.", "id": "291"}, "298": {"ground_truth": "0", "bug_report": "Remove tangle between impl and impl.converter\nCurrently impl and impl.converter reference each other. If possible such cycles should be avoided.When I looked into it I found that impl.converter references only a single class CachingInjector. No other class in camel-core seems to use this class. So my suggestion is to move CachingInjector to impl.converter. So the cycle i removed. As far as I can see this should cause no ther issues.", "id": "298"}, "304": {"ground_truth": "0", "bug_report": "Multithreaded HTTP invocations doesn't work\nDescription of the bug:http://www.nabble.com/Multithreaded-http-endpoint-to13646722s22882.html#a13646722", "id": "304"}, "320": {"ground_truth": "0", "bug_report": "DefaultParameterMappingStrategy doesn't load its defaults\nThis is preventing BeanProcessor from using bean methods with a Message parameter  or bean methods not named 'process' that have an Exchange as their parameter. For example  to map to a Message the it tries using the ParameterExpression bodyAs(Message.class) instead of inmessageExpression().", "id": "320"}, "323": {"ground_truth": "0", "bug_report": "spring-2.5.1.jar is twice in the camel distro\nI downloaded the latest snapshot apache-camel-1.3-20080210.022044-67.zip fromhttp://people.apache.org/repo/m2-snapshot-repository/org/apache/camel/apache-camel/1.3-SNAPSHOT/The .zip file contains spring-2.5.1.jar twice/camel/lib/camel/lib/optionalIs Spring both mandatory and optional?And btw it includes an old version of commons-logging-1.0.4.jar. v1.1 of commons logging is out.", "id": "323"}, "324": {"ground_truth": "0", "bug_report": "bad content length header value in http response\nBy default HttpBinding class copies all request header attributes from the request to the response including 'Content-Length'. So the consequence is that the response is declaring the same size as the request which can lead to serious truncation problems! the workaround is simply to add the line:out.removeHeader('Content-Length'); in the writeResponse method of the httpbinding class allowing jetty to set the right value.", "id": "324"}, "335": {"ground_truth": "0", "bug_report": "Mail component is missing some configuration possibilities\nIt should be possible to configure the behaviour of the mail component. see thread: http://www.nabble.com/Problem-with-Camel-Mail-Component-in-Route-td15497818s12049.html#a15497818", "id": "335"}, "340": {"ground_truth": "0", "bug_report": "Mina TCP does not support InOut pattern\nSee this thread:http://www.nabble.com/camel-mina-TCP-InOut-exchange-td15530602s22882.htmlThis builder does not support InOut when a client send a textline to localhost:8888.The client never receives a response.url = 'mina:tcp://localhost:8888?textline=true';from(uri).process(new Processor() { public void process(Exchange e) { String in = e.getIn().getBody(String.class); // append newline at end to denote end of data for textline codec e.getOut().setBody('Hello ' + in + '/n'); } });Attached is a patch that fixes this by introducing a new parameter to the URL for fluent builder sync=true (ie is there a better name?)Using this url instead and the patch then Camel will send a response back to the client:mina:tcp://localhost:8888?textline=true&amp;sync=true", "id": "340"}, "356": {"ground_truth": "0", "bug_report": "Synchronous mode should handle exceptions being thrown from MINA\nCamel MINA in synchronous mode (InOut exchange pattern) does not handle exception thrown from MINA. Currently MINA intercepts this and logs the exception at WARN level.We should override the proper method in Mina and handle it so the end user can deal with it.Also it has been raisen on the forum that it does not propogate header and other properties. This should be raised in another ticket.In the weekend I will work on a patch for Camel to fix this problem.", "id": "356"}, "362": {"ground_truth": "0", "bug_report": "camel-mina: allowing the lazy creation of a connection\nIn the current implementation with a mina component producer if the server is not up when we start Camel it fails. This is because the mina session creation is in the doStart method which is called when Camel starts.A simple solution is to optionally allow to lazily create the session just before sending the exchange in the Producer's process method.", "id": "362"}, "363": {"ground_truth": "0", "bug_report": "camel-cxf component can't deal with the exception message in MESSAGE dataFormat\nFrom: Willem JiangTo: camel-user@activemq.apache.orgSubject: Re: camel-cxf throwing a faultDate: Wed  05 Mar 2008 16:26:41 +0800Reply-To: camel-user@activemq.apache.orgHi Marc It looks like camel-cxf component's issue which can't deal with the exception message in MESSAGE dataFormat.Could you fill a JIRA for it ? I will fix it later this week.As usual  you just need throw the exception from the processor   CXF will try to marshal it into a soap fault.Regards WillemMarc Giger wrote:&gt; Hi &gt;&gt; I'm trying to get the following camel route working where the&gt; dataformat is MESSAGE.&gt;&gt; &lt;from uri='cxf:bean:routerEndpoint?dataFormat=MESSAGE'/&gt; &gt; &lt;process ref='decryptProcessor'/&gt; &gt; &lt;choice&gt;&gt; &lt;when&gt; &gt; &lt;methodCall bean='endpointSelector' method='matches'/&gt;&gt; &lt;to uri='cxf:bean:serviceEndpoint?dataFormat=MESSAGE'/&gt; &gt; &lt;/when&gt;&gt; &lt;otherwise&gt; &gt; &lt;to uri='cxf:bean:localEndpoint?dataFormat=MESSAGE'/&gt; &gt; &lt;/otherwise&gt;&gt; &lt;/choice&gt; &gt;&gt; if the endpointSelector bean returns true the request is redirected to&gt; a remote webservice.&gt; otherwise the request is forwarded to a local cxf service (with&gt; local-transport)&gt;&gt; Now  if I invoke the routerEndpoint and somewhere in the pipeline&gt; happens an exception (in my case in the decryptProcessor)  I get the&gt; following Exception in the outFault chain:&gt;&gt; Mar 4  2008 10:48:35 PM org.apache.cxf.phase.PhaseInterceptorChain&gt; doIntercept INFO: Interceptor has thrown exception  unwinding now&gt; org.apache.cxf.interceptor.Fault&gt; at&gt; org.apache.camel.component.cxf.interceptors.RawMessageContentRedirectInterceptor.handleMessage(RawMessageContentRedirectInterceptor.java:43)&gt; at&gt; org.apache.cxf.phase.PhaseInterceptorChain.doIntercept(PhaseInterceptorChain.java:208)&gt; at&gt; org.apache.cxf.interceptor.OutgoingChainInterceptor.handleMessage(OutgoingChainInterceptor.java:74)&gt; at&gt; org.apache.cxf.phase.PhaseInterceptorChain.doIntercept(PhaseInterceptorChain.java:208)&gt; at&gt; org.apache.cxf.transport.ChainInitiationObserver.onMessage(ChainInitiationObserver.java:77)&gt; at&gt; org.apache.cxf.transport.servlet.ServletDestination.doMessage(ServletDestination.java:79)&gt; at&gt; org.apache.cxf.transport.servlet.ServletController.invokeDestination(ServletController.java:264)&gt; at&gt; org.apache.cxf.transport.servlet.ServletController.invoke(ServletController.java:160)&gt; at&gt; org.apache.cxf.transport.servlet.AbstractCXFServlet.invoke(AbstractCXFServlet.java:170)&gt; at&gt; org.apache.cxf.transport.servlet.AbstractCXFServlet.doPost(AbstractCXFServlet.java:148)&gt; at javax.servlet.http.HttpServlet.service(HttpServlet.java:727) at&gt; javax.servlet.http.HttpServlet.service(HttpServlet.java:820) at&gt; org.mortbay.jetty.servlet.ServletHolder.handle(ServletHolder.java:487)&gt; at&gt; org.mortbay.jetty.servlet.ServletHandler.handle(ServletHandler.java:362)&gt; at&gt; org.mortbay.jetty.security.SecurityHandler.handle(SecurityHandler.java:216)&gt; at&gt; org.mortbay.jetty.servlet.SessionHandler.handle(SessionHandler.java:181)&gt; at&gt; org.mortbay.jetty.handler.ContextHandler.handle(ContextHandler.java:712)&gt; at&gt; org.mortbay.jetty.webapp.WebAppContext.handle(WebAppContext.java:405)&gt; at&gt; org.mortbay.jetty.handler.ContextHandlerCollection.handle(ContextHandlerCollection.java:211)&gt; at&gt; org.mortbay.jetty.handler.HandlerCollection.handle(HandlerCollection.java:114)&gt; at&gt; org.mortbay.jetty.handler.HandlerWrapper.handle(HandlerWrapper.java:139)&gt; at org.mortbay.jetty.Server.handle(Server.java:313) at&gt; org.mortbay.jetty.HttpConnection.handleRequest(HttpConnection.java:506)&gt; at&gt; org.mortbay.jetty.HttpConnection$RequestHandler.content(HttpConnection.java:844)&gt; at org.mortbay.jetty.HttpParser.parseNext(HttpParser.java:644) at&gt; org.mortbay.jetty.HttpParser.parseAvailable(HttpParser.java:211) at&gt; org.mortbay.jetty.HttpConnection.handle(HttpConnection.java:381) at&gt; org.mortbay.io.nio.SelectChannelEndPoint.run(SelectChannelEndPoint.java:396)&gt; at&gt; org.mortbay.thread.BoundedThreadPool$PoolThread.run(BoundedThreadPool.java:442)&gt; Caused by: java.lang.NullPointerException at&gt; org.apache.commons.io.IOUtils.copyLarge(IOUtils.java:1025) at&gt; org.apache.commons.io.IOUtils.copy(IOUtils.java:999) at&gt; org.apache.camel.component.cxf.interceptors.RawMessageContentRedirectInterceptor.handleMessage(RawMessageContentRedirectInterceptor.java:39) ...&gt; 28 more&gt;&gt; This is because the InputStream is null in&gt; RawMessageContentRedirectInterceptor:&gt;&gt; public void handleMessage(Message message) throws Fault {&gt;&gt; InputStream is = message.getContent(InputStream.class);&gt; OutputStream os = message.getContent(OutputStream.class);&gt; &gt; try { &gt; IOUtils.copy(is  os);&gt; is.close();&gt; os.flush();&gt; } catch (Exception e) {&gt; throw new Fault(e);&gt; }&gt; }&gt;&gt; How can I return a custom soap-fault in a processor/filter?&gt;&gt; Thanks &gt;&gt; Marc&gt;&gt;", "id": "363"}, "370": {"ground_truth": "0", "bug_report": "SftpConsumer is not connecting and retrieving remote files\nSftpConsumer does not connect to server due to patch for CAMEL-251. The SftpConsumer also checks remote file modification timestamp against last poll timestamp but incorrectly converts seconds to milliseconds using integer math so the resulting conversion is always negative and will never retrieve file. I will attach the fixes to this issue.", "id": "370"}, "371": {"ground_truth": "0", "bug_report": "Mina Producer should have configurable timeout\nCurrently the camel mina producer (MinaProducer) defaults to have a 10 sec timeout.This is currently not possible to configured eg from the URL parameters etc.Also we should documented on the wiki that 10 sec. is default.", "id": "371"}, "374": {"ground_truth": "0", "bug_report": "HttpBinding.writeResponse doesn't set the response status code (i.e. it's always 200)\nWhen writing out an Http response  the HttpBinding should check for the existing of the header HttpProducer.HTTP_RESPONSE_CODE and set it in the response if it's there. This allows requests made via the http component to be output with the correct status code info. If also allows processors in the flow to control the status code by setting the header themselves.", "id": "374"}, "375": {"ground_truth": "0", "bug_report": "camel-mina improvements\nThis ticket holds reference to the various camel-mina improvments and bugfixes lately.", "id": "375"}, "384": {"ground_truth": "0", "bug_report": "Support for a full customized soap-fault incl. fault-code and detail\nDon't wrap a Fault in a Fault.", "id": "384"}, "389": {"ground_truth": "0", "bug_report": "Parallel processing route\nAdding the support of this user story CXF Consumer -&gt; Route ---&gt; parallelly send messages and recieve responses---&gt; aggregate response --&gt; further process ----&gt; returnHere is more information about this story &#91;1&#93;http://www.nabble.com/Parallel-processing-route-td15642110.html#a15642110", "id": "389"}, "394": {"ground_truth": "0", "bug_report": "Improve logging for camel-mina\nCurrently camel-mina does not log using similar log classnames for a MinaProducer and MinaConsumer. This can be a bit misleading in the log files.MinaConsumer uses an anonymous inner class to do the IoHandler where as MinaProducer does not. This renders the loglines such asMinaConsumer$1 - XXXMinaProducer$RecieveHandler - XXXMinaConsumer should use a non anonymous inner classes so logging is the same:MinaConsumer$RecieveHandler - XXXMinaProducer$ResponseHandler - XXX", "id": "394"}, "395": {"ground_truth": "0", "bug_report": "MinaProducer waits for MINA worker thread to timeout when stopping JVM from standalone client\nI was working on a camel-mina-example sample that starts a MinaProducer to send data to a TCP server. When my sample terminates the JVM it waits 60 seconds until the MINA worker threads times out (default 60 sec).As a workaround using System.exit(0) will terminate my client JVM immediately. And running my client as a JUnit tests will also in fact terminate the JVM immediately.The code below demonstrates this: Running as JUnit runs within a few seconds. Run it as a standard java main app and it terminates after 60+ secondsThe code is a test I am working on for the patch to fix it. (I got it fixed but I want a better unit test)public class MinaProducerTest extends ContextTestSupport { public static void main(String[] args) throws Exception { MinaProducerTest test = new MinaProducerTest(); test.producerRunningFromMain(); } private void producerRunningFromMain() throws Exception { long start = System.currentTimeMillis(); System.out.println('+++ start +++'); context = new DefaultCamelContext(); context.addRoutes(createRouteBuilder()); context.start(); testProducer(); context.stop(); System.out.println('+++ stop +++'); long end = System.currentTimeMillis(); assertTrue('Should stop within 5 seconds'  end - start &lt; 5000); // TODO: add shutdown hook to verify that its stopped before 5 seconds  or mocks  } private static final String uri = 'mina:tcp://localhost:6321?textline=true'; protected RouteBuilder createRouteBuilder() { return new RouteBuilder() { public void configure() { from(uri).to('mock:result'); } }; } public void testProducer() throws Exception { MockEndpoint mock = getMockEndpoint('mock:result'); mock.expectedBodiesReceived('Hello World'); Endpoint endpoint = context.getEndpoint(uri); Producer producer = endpoint.createProducer(); Exchange exchange = endpoint.createExchange(); exchange.getIn().setBody('Hello World'); producer.start(); producer.process(exchange); producer.stop(); assertMockEndpointsSatisifed(); } // TODO: Test using mocks requires many codelines to mock all the producer  endpoints etc.}", "id": "395"}, "404": {"ground_truth": "0", "bug_report": "Javadoc warnings\nGet the javadoc warnings reported by the javadoc generator fixed.", "id": "404"}, "410": {"ground_truth": "1", "bug_report": "Exception handling of the ErrorHandlerSupport class\nWhen you configure your route builder and say you want to configure two exceptions lets say: NullPointer and Exception. Now say the bean you call as your end point throws a NullPointer  wouldn't you think the NullPointer policy would handle that exception? Well I'm seeing sometimes it does and sometimes it doesn't due to the map not keeping the exceptions in any particular order. Is there anyway this could be changed to a LinkedHashMap or a List?Issue with class: org.apache.camel.processor.ErrorHandlerSupport", "id": "410"}, "424": {"ground_truth": "0", "bug_report": "Improve FTP component wiki documentation\nThe wiki documentation for FTP usage could be improved with: java code examples (snippets in unit test classes) that you need the convertTo(String.class) for ASCII file transfer The FTP component is an extension of the File component so it inherits behaviour  features and options from file. State precise witch options a FTPProducer and FTPConsuer can use. Consuming using FTP there are special header key/values for the remote filename etc. that could be of interest for the end users (Maybe for the producer as well)", "id": "424"}, "426": {"ground_truth": "0", "bug_report": "splitter() should have the same parallel processing functionality that multicast() has\nAbility to havefrom('direct:parallel').splitter(body().tokenize(' ')  true).to('mock:result');where true parameter to splitter should behave like in multicast() &#8212; processing is done in separate threads for each 'part'.", "id": "426"}, "443": {"ground_truth": "0", "bug_report": "Improve File component wiki\nI have added two missings options and then I discovered a few more missing so I am created this ticket so we get this done.The File Component has several options we haven't documented on the wiki yet.Also its javadoc should be improved.And we should provide some better java samples on the wiki.", "id": "443"}, "448": {"ground_truth": "0", "bug_report": "Upgraded to OpenJPA 1.0.2\nOpenJPA in release 1.0 and onwards requires a change in the ant build in the pom.xmlIt now requires a persistance.xml file to use.", "id": "448"}, "456": {"ground_truth": "0", "bug_report": "Invalid jar in binary distribution\nThe apache-camel jar in the binary distribution misses a lot of files  including class and schema files (12k in size compared to the 1.9M released jar).", "id": "456"}, "457": {"ground_truth": "0", "bug_report": "Camel should raise an exception if parsing of xslt file fails\nConsider a Camel route that involves an xslt component. When Camel sets up the route  the XsltBuilder ignores any errors coming from the xerces xml parser and continues constructing the route even though the xslt transformer is not initialized. Later when the route is executed Camel correctly checks if the transformer is initialized and raises an error if not:java.lang.IllegalArgumentException: No transformer configured!However in case of a parse error in the xslt file  the whole route becomes unusable and the setup routine that constructs the route should fail with an appropriate error message. A sanity check needs to be added in methodorg.apache.camel.builder.xml.XsltBuilder.setTransformerSource(javax.xml.transform.Source).", "id": "457"}, "498": {"ground_truth": "0", "bug_report": "file endpoint with noop=true does not detect old files moved into a directory\nfile endpoint with noop=true does not detect old files moved into a directory", "id": "498"}, "499": {"ground_truth": "0", "bug_report": "camel-core does not compile on HP-UX\ncamel-core/src/main/java/org/apache/camel/model/ProcessorType.java:&#91;871 12&#93; inconvertible types found : org.apache.camel.model.ProcessorType&lt;Type&gt; required: org.apache.camel.model.InterceptTypecamel-core/src/main/java/org/apache/camel/model/ProcessorType.java:&#91;872 39&#93; inconvertible types found : org.apache.camel.model.ProcessorType&lt;Type&gt; required: org.apache.camel.model.InterceptTypecamel-core/src/main/java/org/apache/camel/model/ProcessorType.java:&#91;884 12&#93; inconvertible types found : org.apache.camel.model.ProcessorType&lt;Type&gt; required: org.apache.camel.model.InterceptTypecamel-core/src/main/java/org/apache/camel/model/ProcessorType.java:&#91;885 38&#93; inconvertible types found : org.apache.camel.model.ProcessorType&lt;Type&gt; required: org.apache.camel.model.InterceptType", "id": "499"}, "505": {"ground_truth": "0", "bug_report": "make it easier to create Endpoint instances nicely via Spring XML\nright now its a bit tricky creating Endpoint instances in a spring XML using the &lt;bean&gt;&lt;property&gt; mechanism.It'd be nice to be able to configure them more easily as...&lt;bean id='foo' class='org.apache.camel.component.file.FileEndpoint'&gt; &lt;property name='foo' value='bar'/&gt; ...type stuff and have folks Spring IDE's smart complete stuff etc", "id": "505"}, "509": {"ground_truth": "0", "bug_report": "JMX Connector is not closed by InstrumentationAgentImpl.doStop()\nJMX Connector is not closed by InstrumentationAgentImpl.doStop()", "id": "509"}, "514": {"ground_truth": "0", "bug_report": "Document - File component when its using file or directory names\nYes I think we need to document it much better how Camel handles this file/folder stuff when its consuming files producing filesIt's a bit confusing when Camel uses the unique message id for filename instead of the path from the URI.", "id": "514"}, "517": {"ground_truth": "0", "bug_report": "Javadoc - improve summaries etc\nThe javadoc could use to be polished for eg. summaries statis the Apache license instead of a short brief summary what the class/package does etc.It's all the javadoc also for the components.", "id": "517"}, "524": {"ground_truth": "0", "bug_report": "IntrumentationProcessor does properly record processing time\nThe InstrumentationLifeCycleStrategy inserts an InstrumentationProcessor interceptor at the end of a route which is intercepted after the processing has been done. The InstrumentationProcessor does not actually record the time spent on the route. It is fixed by inserting InstrumentationProcessor at the beginning of the route and wrapping all the outputs.There two MBeans (ManagedRoute and PerformanceCounter) registered for each route eventhough ManagedRoute already extends PerformanceCounter. We probably only need to expose one MBean. The ManagedRoute MBean shows performance attributes and operations (since it extends PerformanceCoutner) but these performance related stuffs don't really work. This is fixed by registering only the ManagedRoute MBean and making the performance related attributes and operations functional.This patch supports exposing all processors within a route as PerformanceCounter MBeans so that users are possible to monitor performance at the processor's level.With this patch  the org.apache.camel.spi package no longer depends CamelNamingStrategy of the org.apache.camel.management.management package. It follows the suggestion mentioned in https://issues.apache.org/activemq/browse/CAMEL-264.Another update is to following the JMX spec convention of including a 'type' property in the ObjectName (replacing the current 'groups' property). This patch also simplify the ManagedRoute's ObjectName a bit by removing builder and group properties. If for some reasons  they need to be in the ObjectName  please add them back.", "id": "524"}, "536": {"ground_truth": "0", "bug_report": "camel-cxf component not propagating context data\nFor POJO data formats the CxfProducer currently invokes the following method to invoke on a target serverresult = client.invoke(operation  parameters.toArray());This fails to setup the Request and Response contexts for the out (request) message and in (response) message. It should instead be copying the relevant data from the consumer and invoking the following operation on the Client interfaceObject[] invoke(BindingOperationInfo oi  Object[] params  Map&lt;String  Object&gt; context) throws Exception;Likewise the PAYLOAD and MESSAGE data formats are not setting up their contexts before they call the dispatch operation. In fact there is comments in the current codebase... // invoke the message prepare the context Map&lt;String  Object&gt; context = new HashMap&lt;String  Object&gt;(); Map&lt;String  Object&gt; requestContext = new HashMap&lt;String  Object&gt;(); Map&lt;String  Object&gt; responseContext = new HashMap&lt;String  Object&gt;(); // TODO Get the requestContext from the CamelExchange context.put(CxfClient.REQUEST_CONTEXT  requestContext); context.put(CxfClient.RESPONSE_CONTEXT  responseContext);The fix should also include a fix for all three data format types", "id": "536"}, "539": {"ground_truth": "0", "bug_report": "XsltBuilder synchronizes on process method making performance bad on XSLTs\nIn heavy load environment XSLT transformations have very bad performance.I propose to use javax.xml.transform.Templates object to produce separate Transformers for every execution.", "id": "539"}, "541": {"ground_truth": "0", "bug_report": "The spi package should not depend on the processor package\nI have found one other problem in RouteContext. The method intercept uses the class Interceptor from processor. I think Interceptor should be an interface that should reside in spi or camel. So we could avoid referencing the processor package from spi.When I look into the current Interceptor implementation I think the two main methods that need to be in the interface are process and proceed. Process can be inherited from Processor but proceed is only declared in the implementation class DelegateProcessor. So I think the clean way to handle this would be to create an interface DelegateProcessor and a spearate DefaultDelegateProcessor.public interface DelegateProcessor extends Processor { /** * Proceed with the underlying delegated processor */ public abstract void proceed(Exchange exchange) throws Exception; }and an interface Interceptorpublic interface Interceptor extends DelegateProcessor { public abstract void process(Exchange exchange) throws Exception; public abstract Processor getInterceptorLogic(); public abstract void setInterceptorLogic(Processor interceptorLogic); }When we put these to spi and use them instead of the implementations where possible the spi would not depend on processor anymore.", "id": "541"}, "550": {"ground_truth": "0", "bug_report": "NPE from came:run with below route codes\nWith the following route: from('timer://tutorial?fixedRate=true&amp;period=10') .setBody( constant('&lt;?xml version='1.0' encoding='UTF-8'?&gt;&lt;greetMe&gt;Hello World&lt;/greetMe&gt;')) .setHeader('CBR1'  constant('No')).choice().when( header('CBR1').isEqualTo('Yes')).setHeader( 'CreditcardValidation'  constant('Yes')).to( 'log:CBRBean?level=INFO').to('log:XSLT for provider1?level=INFO') .when(header('CBR1').isEqualTo('No')).setHeader( 'CreditcardValidation'  constant('No')).to( 'log:XSLT for provider2?level=INFO').end().choice() .when(header('CreditcardValidation').isEqualTo('Yes')) .to('log:CCVBean?level=INFO').to('log:XSLT for consumer1?level=INFO').when( header('CreditcardValidation').isEqualTo('No')) .to('log:XSLT for consumer2?level=INFO').otherwise() .to('log:test?level=INFO').end();running mvn camel:run I get the following stack trace:java.lang.NullPointerException at org.apache.camel.view.NodeData.&lt;init&gt;(NodeData.java:136) at org.apache.camel.view.GraphGeneratorSupport.getNodeData(GraphGeneratorSupport.java:142) at org.apache.camel.view.RouteDotGenerator.printNode(RouteDotGenerator.java:101) at org.apache.camel.view.RouteDotGenerator.printNode(RouteDotGenerator.java:123) at org.apache.camel.view.RouteDotGenerator.printRoute(RouteDotGenerator.java:87) at org.apache.camel.view.RouteDotGenerator.printRoutes(RouteDotGenerator.java:64) at org.apache.camel.view.RouteDotGenerator.printRoutes(RouteDotGenerator.java:48) at org.apache.camel.view.RouteDotGenerator.generateFile(RouteDotGenerator.java:169) at org.apache.camel.view.GraphGeneratorSupport.generateFile(GraphGeneratorSupport.java:103) at org.apache.camel.view.GraphGeneratorSupport.drawRoutes(GraphGeneratorSupport.java:81) at org.apache.camel.spring.Main.generateDot(Main.java:392) at org.apache.camel.spring.Main.postProcessContext(Main.java:374) at org.apache.camel.spring.Main.doStart(Main.java:333) at org.apache.camel.impl.ServiceSupport.start(ServiceSupport.java:47) at org.apache.camel.spring.Main.run(Main.java:123) at org.apache.camel.spring.Main.run(Main.java:114) at org.apache.camel.spring.Main.main(Main.java:106) at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39) at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25) at java.lang.reflect.Method.invoke(Method.java:585) at org.apache.camel.maven.RunMojo$1.run(RunMojo.java:333) at java.lang.Thread.run(Thread.java:613)the error seems related to the maven camel plugin failing generating the dot file for the route.", "id": "550"}, "551": {"ground_truth": "0", "bug_report": "File component - noop does not lock the file during processing\nThe noop=true option does not lock the file during processing as it states in its class javadoc. The parameter is false. It should be true instead. public NoOpFileProcessStrategy() { super(false); }", "id": "551"}, "552": {"ground_truth": "0", "bug_report": "camel-spring is dependent on spring-aop\n&lt;dependency&gt; &lt;groupId&gt;org.springframework&lt;/groupId&gt; &lt;artifactId&gt;spring-aop&lt;/artifactId&gt; &lt;version&gt;${spring-version}&lt;/version&gt; &lt;/dependency&gt;is needed in pom.xml for camel-spring as its needed to let camel-spring component work out-of-the-box. Without it the camel-example-spring does not work and blows up with a ClassNotFoundException when you use camel:run", "id": "552"}, "574": {"ground_truth": "0", "bug_report": "Multicast default excecutor do not create the enough thread for parallel processing\nWhen I added the loan broker example CAMEL-556  I found there is no performance improvement when using the parallelly mulitcast.After digging into to code  I found we should create the enough thread for the parallel processing.", "id": "574"}, "581": {"ground_truth": "0", "bug_report": "CamelTemplate should clear endpoint cache when stopping\nOnly the producer cache is stopped and cleared // start and stop in camel template protected void doStart() throws Exception { producerCache.start(); } protected void doStop() throws Exception { producerCache.stop(); } // stop in producer cache protected void doStop() throws Exception { ServiceHelper.stopServices(producers.values()); producers.clear(); }", "id": "581"}, "582": {"ground_truth": "0", "bug_report": "JMX Instrumentation - PerformanceCounter - total processed\nWilliam Tam  this one is for you The total processed time is not exposed to as a managed attribute. And it should be changed from double to long.", "id": "582"}, "593": {"ground_truth": "0", "bug_report": "[patch] Make sure streams get closed\na couple places streams are opened and are not closed. patch fixes this.", "id": "593"}, "594": {"ground_truth": "0", "bug_report": "Missing compile step in example readmes\nI noticed that some examples that are run via mvn exec:java require that the example be compiled first. I've updated the readmes to include this step...", "id": "594"}, "596": {"ground_truth": "0", "bug_report": "[patch] postpone creating browsing strategy until and only if its needed\ncode creates queue browsing strategy even if not needed. patch pushes creation down to relevant branch.", "id": "596"}, "613": {"ground_truth": "0", "bug_report": "Change the JMX default connetor's URL to avoid the confilict with the ActiveMQ or ServiceMix JMX default connector\nSince the Camel default JMX connector's URL is same with ActiveMQ and ServiceMix default JMX Connector URL  we need to change it to avoid the conflict.", "id": "613"}, "615": {"ground_truth": "0", "bug_report": "Headers should be modifiable using velocity templates\nSee context at:http://www.nabble.com/Exchange-headers-in-velocity-td17916457s22882.html", "id": "615"}, "620": {"ground_truth": "1", "bug_report": "ResequencerType.createProcessor could throw NPE as stream config does not get initialized.\njava.lang.NullPointerException at org.apache.camel.model.ResequencerType.createStreamResequencer(ResequencerType.java:198) at org.apache.camel.model.ResequencerType.createProcessor(ResequencerType.java:163) at org.apache.camel.model.ProcessorType.createOutputsProcessor(ProcessorType.java:1584) at org.apache.camel.model.ProcessorType.createOutputsProcessor(ProcessorType.java:93) at org.apache.camel.model.InterceptorRef.createProcessor(InterceptorRef.java:61) at org.apache.camel.model.ProcessorType.makeProcessor(ProcessorType.java:1471) at org.apache.camel.model.ProcessorType.addRoutes(ProcessorType.java:97) at org.apache.camel.model.RouteType.addRoutes(RouteType.java:210) at org.apache.camel.model.RouteType.addRoutes(RouteType.java:80) at org.apache.camel.impl.DefaultCamelContext.startRouteDefinitions(DefaultCamelContext.java:462) at org.apache.camel.impl.DefaultCamelContext.doStart(DefaultCamelContext.java:454) at org.apache.camel.impl.ServiceSupport.start(ServiceSupport.java:47) at org.apache.camel.ContextTestSupport.startCamelContext(ContextTestSupport.java:108) at org.apache.camel.ContextTestSupport.setUp(ContextTestSupport.java:81) at org.apache.camel.processor.ResequencerTest.setUp(ResequencerTest.java:48) at junit.framework.TestCase.runBare(TestCase.java:128) at junit.framework.TestResult$1.protect(TestResult.java:106) at junit.framework.TestResult.runProtected(TestResult.java:124) at junit.framework.TestResult.run(TestResult.java:109) at junit.framework.TestCase.run(TestCase.java:120) at junit.framework.TestSuite.runTest(TestSuite.java:230) at junit.framework.TestSuite.run(TestSuite.java:225) at org.eclipse.jdt.internal.junit.runner.junit3.JUnit3TestReference.run(JUnit3TestReference.java:130) at org.eclipse.jdt.internal.junit.runner.TestExecution.run(TestExecution.java:38) at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:460) at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:673) at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.run(RemoteTestRunner.java:386) at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.main(RemoteTestRunner.java:196)", "id": "620"}, "621": {"ground_truth": "0", "bug_report": "File component - file rename pattern to support patterns such as date time etc.\nA very common use case is to copy received messages into files stored in a backup folder with sub folders named with the date pattern etc.", "id": "621"}, "627": {"ground_truth": "0", "bug_report": "JMX Instrumentation - PerformanceCounter - last processed timestamp when failed\nI thought about another real life use case we have at work once in a while.a) when was the last time the integration worked?b) when was the last time the integration was invoked?We do have option a covered now with lastExchangeCompletionTime.However I would like another timestamp for lastExchangeTime that is just a record the last time it was processed (even if it failed).PS: At work we do have to grep through logfiles in our legacy EIP platform.", "id": "627"}, "634": {"ground_truth": "0", "bug_report": "DeadLetterChannel default redelivery policy eclipsed expected transactional behaviour in a transacted route\nCamel routes get a DLC processor with a redelivery policy  which defaults to redeliverying a message to a destination processor up to 6 times. In case of a transacted route it is preferable that DLC's delivery policy be reset to a single attempt  so that a fan-out transacted route would not hold tx locks on destinations for too long. The DLC's default redelivery policy has also made transactional tests not really testing tx behavior of Camel Components backed runtimes (jms brokers  etc)  rather DLC would catch the exception and try to redeliver the message to destination processor and not letting the components to rollback native transactions initiated by components backed runtimes (jms  db)The attached patch installs a property into Camel Exchange that indicates weather a route is transacted. This is done in org.apache.camel.spring.spi.TransactionInterceptor.javaDLC then checks if the flow is transacted and sets its redelivery policy to 1With this change JMS transactions are actually rolled back and messages are put back into the queue and then consumed again  verifying that brokers support transactions and can redeliver messages into Camel routes that were previously rolled back.", "id": "634"}, "636": {"ground_truth": "0", "bug_report": "ResolverUtil can't resolve converter annotations in WebSphere 6.1\nI have a simple hello world file based ESB that scans a folder for files  invoke a POJO and store the output as a file in another folder.Deployed as a WAR file in WebSphere it seems as if Camel 1.4-SNAPSHOT can not load the converters needed to converter to String to InputStream for the FileProducer when it is about to store the file.The logging output where the ResolverUtil can't find the annotated converters in camel jar itself[06-25 13:31:23] DEBUG ResolverUtil [Thread: 1 org.apache.camel.component.file.FileComponent@7ade7ade]: Searching for annotations of org.apache.camel.Converter in packages: [org.apache.camel.spring.converter  org.apache.camel.converter][06-25 13:31:23] DEBUG ResolverUtil [Thread: 1 org.apache.camel.component.file.FileComponent@7ade7ade]: Found: []And the stacktrace:org.apache.camel.InvalidPayloadException: No in body available of type: java.io.InputStream but has value: This is important work/temp/camel/in/README.txtDone by me. of type: java.lang.String on: Message: This is important work/temp/camel/in/README.txtDone by me. on the exchange: Exchange[Message: This is important work/temp/camel/in/README.txtDone by me.] at org.apache.camel.util.ExchangeHelper.getMandatoryInBody(ExchangeHelper.java:127) at org.apache.camel.component.file.FileProducer.process(FileProducer.java:67) at org.apache.camel.component.file.FileProducer.process(FileProducer.java:55) at org.apache.camel.impl.converter.AsyncProcessorTypeConverter$ProcessorToAsyncProcessorBridge.process(AsyncProcessorTypeConverter.java:43) at org.apache.camel.processor.SendProcessor.process(SendProcessor.java:75) at org.apache.camel.management.InstrumentationProcessor.process(InstrumentationProcessor.java:57) at org.apache.camel.processor.DeadLetterChannel.process(DeadLetterChannel.java:146)", "id": "636"}, "642": {"ground_truth": "0", "bug_report": "jms aggregation does not work\nI found this issue when I test Camel 1.4.0 RC2 kit  I just add a test case to show the error.https://svn.apache.org/repos/asf/activemq/camel/trunk/components/camel-jms/src/test/java/org/apache/camel/component/jms/AggregratedJmsRouteTest.javaYou can reproduce the error if you remove the x character from xtestJmsMulticastAndAggregration() method.BTW the test case works with the Camel 1.4.0 RC1.", "id": "642"}, "652": {"ground_truth": "0", "bug_report": "camel-cxf example build.xml is out of date\nNeed to update the build.xml of example-camel-cxf to support run the examples of camel transport and web service provider API.", "id": "652"}, "653": {"ground_truth": "0", "bug_report": "Bean method lost when sending a message from one JMS queue to another\nI noticed a problem in JmsBinding.java. If Camel has read a JMS message from a queue and that message has a bean method specified in the header ('org.apache.camel.MethodName')  the method header will removed if that message is written to another queue. Here's the offending code:  protected boolean shouldOutputHeader(org.apache.camel.Message camelMessage  String headerName   Object headerValue) { return headerValue != null &amp;&amp; !getIgnoreJmsHeaders().contains(headerName) &amp;&amp; ObjectHelper.isJavaIdentifier(headerName); } 'org.apache.camel.MethodName' fails the check isJavaIdentifier and is excluded from the headers written to the new message. I'm not sure the purpose of this check  but this might be an unintended side effect. The call chain is something like this: JmsProducer.process JmsBinding.makeJmsMessage JmsBinding.appendJmsProperties JmsBinding.shouldOutputHeader Update: Experimenting later with WebLogic's JMS  I noticed that WebLogic (9.2) does not allow this header name. Maybe this was the original motivation for this check. In order to be compatible with WebLogic  perhaps the method header name should changed to something like 'CamelMethod'. I believe this would correct both problems.", "id": "653"}, "656": {"ground_truth": "0", "bug_report": "Component documentation - needs overhaul  check for missing options  add more samples java/spring  etc\nOur extensive list of components needs to be checked for its state of current documentation standard in the wiki.The should be checked for options headers they use/set pitfalls samples both java and spring XML see also etcAnd whats the difference / relation to similar component (the http ones  the sql ones etc.)", "id": "656"}, "663": {"ground_truth": "0", "bug_report": "create a TransactionErrorHandler so you can easily  use a transaction & rollback on a route - with redeliveryDelay to just fail the route if it can't be processed\ncreate a TransactionErrorHandler so you can easily  use a transaction & rollback on a route - with redeliveryDelay to just fail the route if it can't be processed", "id": "663"}, "668": {"ground_truth": "0", "bug_report": "Transactional Client - Setting Spring Policy is a bit cumbersome in the XML\nCurrently you have to setup the transaction demarcation in the spring xml file as: &lt;bean id='PROPAGATION_REQUIRED' class='org.apache.camel.spring.spi.SpringTransactionPolicy'&gt; &lt;constructor-arg&gt; &lt;bean class='org.springframework.transaction.support.TransactionTemplate'&gt; &lt;property name='transactionManager' ref='jmsTransactionManager'/&gt; &lt;/bean&gt; &lt;/constructor-arg&gt; &lt;/bean&gt;to be able to use the policy from XML directly in the tag: &lt;camel:policy ref='PROPAGATION_REQUIRED'/&gt;We should support a neater syntax without the nested bean and constructor args.", "id": "668"}, "684": {"ground_truth": "0", "bug_report": "Upgrade Geronimo specs to 1.1.1 when available\nWe should upgrade to the 1.1.1 version of the different Geronimo specs jar &#8211; they include the necessary OSGi metadata.", "id": "684"}, "686": {"ground_truth": "0", "bug_report": "CXF - Feedback from Eduard on problems with CXF over JMS\nSee user forum:http://www.nabble.com/Fwd%3A-Using-Apache-Camel-as-Transport-for-Apache-CXF-with-SOAP-over-JMS-td18314917s22882.html", "id": "686"}, "688": {"ground_truth": "0", "bug_report": "process method of should check ExchnagePAttern before setting out\nprocess method of should check ExchnagePAttern before setting out", "id": "688"}, "696": {"ground_truth": "0", "bug_report": "ProducerTemplate doenst honor exchange pattern when it extracts the result\nThe code the extracts the result that is returned when you use the sendXXX  requestXXX methods on the producer template doens't honor the exchange pattern. protected Object extractResultBody(E result) { Object answer = null; if (result != null) { Message out = result.getOut(false); if (out != null) { answer = out.getBody(); } else { answer = result.getIn().getBody(); } } return answer; }It defaults to preferring out messages all the time. But in some circumstances the out body could be set to null but the real response is in the in body.Setting the exchange pattern to InOnly doesn't honor this.Maybe this ticket is a symptom of the MEP problem that we have in Camel. See the discussion on the dev forum.", "id": "696"}, "697": {"ground_truth": "0", "bug_report": "transform() doesnt propogate headers\nThe new transform() DSL doesn't propogate headers so you can not do: from('direct:four') .transform().constant('London') .to('mock:result');And expect that any headers on the exchange at direct:four is received after the transform", "id": "697"}, "707": {"ground_truth": "0", "bug_report": "JMX Instrumentation - Nodeid can be null\nThe processors that is registered in JMX can have null in their id. So the JMX path is processor -&gt; null -&gt; 0.Either we should replace null with unknown as we do for endpoints. Or try to fix that the id is generated.", "id": "707"}, "709": {"ground_truth": "0", "bug_report": "CXF - Easier use for end-user to retreive POJO data\nI am working on a web app example that uses CXF to expose a webservice.During the process I thought that getting my POJO object (InputReportIncident) was a bit clumsy as I had to do; MessageContentsList list = exchange.getIn().getBody(MessageContentsList.class); InputReportIncident in = (InputReportIncident) list.get(0);So I have created a patch that improves the getBody to be more end-user friendly.You can now do  as you always do in Camel: InputReportIncident in = exchange.getIn().getBody(InputReportIncident.class);Just cast it to what you expect and want to work with.InputReportIncident is a POJO object generated by the CXF wsdl2java generator.Willem could you take a look? Maybe I have misunderstood the CXF and there is a easier way already. But I don't like the need to get the List and then get (0) to get my POJO.Sending the response is already supported nicely: // the response OutputReportIncident out = new OutputReportIncident(); out.setCode('Bye Claus'); exchange.getOut().setBody(out);", "id": "709"}, "713": {"ground_truth": "0", "bug_report": "FileProducer - consumes file instead of producing!\nThe strange code in the FileProducer that if the exchange is out capable it will poll the file instead bites us big time.James must have had a beer and a fancy moment when he created the code. Something with a dynamic receipentlist where the endpoints should be polled from a file but the expression uses a Producer when the endpoints is created. For the file it should consume instead but it doesn't. Any basically it should consume instead.It also bites us when we send an InOut exchange to the FileProducer it will not produce the file but consume it and there is no file so nothing happens.This codepublic class FileBackupTest extends ContextTestSupport { public void testMailGeneration() throws Exception { MockEndpoint mock = getMockEndpoint('mock:result'); mock.expectedMessageCount(1); template.requestBody('seda:mails'  'Hello World'); mock.assertIsSatisfied(); } protected RouteBuilder createRouteBuilder() throws Exception { return new RouteBuilder() { public void configure() throws Exception { from('seda:mails') .to('file:target/mails') .to('mock:result'); } }; }Would not create a file in target/mails folder as we are using template.request that is an InOut MEP.I will fix it by removing the strange consumer code in the FileProducer and change the fancy dynamic recepientlist test (SimulatorTest)  to not use file based endpoints.It could be a blocker for the 1.4 release and we should consider creating a new RC!", "id": "713"}, "714": {"ground_truth": "0", "bug_report": "Change default DeadLetterChannel strategy in Camel\nThe current DLC strategy in Camel is to retry 6 times with 1 sec delay. If still failed it will be moved to a log WARN.This default behavior is not feasible for most end-users  in fact none. We should have a better default strategy in Camel.Also we should force end-users to setup a strategy from the start.And we should improve this in the documentation so end-users is aware of this.", "id": "714"}, "721": {"ground_truth": "0", "bug_report": "Log component should use ExchangeFormatter for formatting log output\nCurrently log component only logs the payload. We have a nice ExchangeFormatter that can format an exchange with all kind of options.The options could be enabled on the log component so you can customize your logging. Also there should be a multiline option to the exchange formatter so it can log all the stuff on multi lines if for instance there are many options  they get very long.", "id": "721"}, "723": {"ground_truth": "0", "bug_report": "CXF - wrapper/unwrapper - camel-cxf should be smarter\nWillem knows what this is. See chat log on the july-15-2008.Basically getBody() should be smart in what kind of situation you are using CXF.", "id": "723"}, "726": {"ground_truth": "0", "bug_report": "Exception on using WS-Addressing with Apache Camel as Transport\nNot sure if this is a bug in CXF or Camel. Please see attached sample project.--------------------------------------------------INFO: Interceptor has thrown exception  unwinding noworg.apache.cxf.binding.soap.SoapFault: A header representing a Message Addressing Property is not valid and the message cannot be processed at org.apache.cxf.ws.addressing.MAPAggregator.mediate(MAPAggregator.java:375) at org.apache.cxf.ws.addressing.MAPAggregator.handleMessage(MAPAggregator.java:159) at org.apache.cxf.phase.PhaseInterceptorChain.doIntercept(PhaseInterceptorChain.java:221) at org.apache.cxf.transport.ChainInitiationObserver.onMessage(ChainInitiationObserver.java:78) at org.apache.camel.component.cxf.transport.CamelDestination.incoming(CamelDestination.java:148) at org.apache.camel.component.cxf.transport.CamelDestination$ConsumerProcessor.process(CamelDestination.java:172) at org.apache.camel.impl.converter.AsyncProcessorTypeConverter$ProcessorToAsyncProcessorBridge.process(AsyncProcessorTypeConverter.java:43) at org.apache.camel.component.direct.DirectProducer.process(DirectProducer.java:59) at org.apache.camel.processor.SendProcessor.process(SendProcessor.java:75) at org.apache.camel.management.InstrumentationProcessor.process(InstrumentationProcessor.java:57) at org.apache.camel.processor.DeadLetterChannel.process(DeadLetterChannel.java:155) at org.apache.camel.processor.DeadLetterChannel.process(DeadLetterChannel.java:91) at org.apache.camel.management.InstrumentationProcessor.process(InstrumentationProcessor.java:57) at org.apache.camel.processor.UnitOfWorkProcessor.process(UnitOfWorkProcessor.java:39) at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:41) at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:66) at org.apache.camel.component.jms.EndpointMessageListener.onMessage(EndpointMessageListener.java:68) at org.springframework.jms.listener.AbstractMessageListenerContainer.doInvokeListener(AbstractMessageListenerContainer.java:531) at org.springframework.jms.listener.AbstractMessageListenerContainer.invokeListener(AbstractMessageListenerContainer.java:466) at org.springframework.jms.listener.AbstractMessageListenerContainer.doExecuteListener(AbstractMessageListenerContainer.java:435) at org.springframework.jms.listener.AbstractPollingMessageListenerContainer.doReceiveAndExecute(AbstractPollingMessageListenerContainer.java:322) at org.springframework.jms.listener.AbstractPollingMessageListenerContainer.receiveAndExecute(AbstractPollingMessageListenerContainer.java:260) at org.springframework.jms.listener.DefaultMessageListenerContainer$AsyncMessageListenerInvoker.invokeListener(DefaultMessageListenerContainer.java:944) at org.springframework.jms.listener.DefaultMessageListenerContainer$AsyncMessageListenerInvoker.run(DefaultMessageListenerContainer.java:875) at java.lang.Thread.run(Thread.java:595)", "id": "726"}, "727": {"ground_truth": "0", "bug_report": "Propagated CXF header's value should not include quotes\nCAMEL-686 fixed the issue of not propagating transport headers (e.g. SOAPAction) but it looks like we added quotes around the value (i.e. getCustomer becomes 'getCustomer'). I updated the CustomerServicesTest to illustrate the problem. Also  I cleaned up the client/server-application.xml.", "id": "727"}, "732": {"ground_truth": "0", "bug_report": "JMX Instrumentation - check for already registered before registering\nCamel does not check for already registered mbeans. There can be shared endpoints in the camel routes etc.We used to have an instance count and everything but at the end a jms endpoint such as 'activemq:topic:orders' can be reused in several routes and we should in fact only register it once.", "id": "732"}, "737": {"ground_truth": "0", "bug_report": "When getContext().addInterceptorStrategy(new Tracer());  is added in a RouteBuilder class  then the timer component does not work\nWhen getContext().addInterceptorStrategy(new Tracer());is added in a RouteBuilder Class  then the timer component does not start.e.g. public class RouteBuilder extends RouteBuilder { getContext().addInterceptorStrategy(new Tracer()); public void configure() { from('timer://export') .to('bean:myBean'); }}", "id": "737"}, "738": {"ground_truth": "0", "bug_report": "After the downloading process  the layout of the remote file system doesn't match the local's one\nWhen downloading a directory with a complex layout (mutli level directory)  the downloaded files do not reflect the local onemore info here http://www.nabble.com/FTP-component%3A-Possible-bug-td18540318s22882.html", "id": "738"}, "739": {"ground_truth": "0", "bug_report": "Camel transport should set the content type property into the camel message header\nEduard Hildebrandt logged a JIRA&#91;1&#93; in CXF  it is actually a camel transport issue.https://issues.apache.org/jira/browse/CXF-1703", "id": "739"}, "741": {"ground_truth": "0", "bug_report": "CamelConduit's should check the TargetReference when create its instance\nCAMEL-726 shows a ws-address error when using Camel transport for CXF.After running the code   I found there is no To address tag generated in the soap header. It was caused by the CamelConduit can set right targe reference.", "id": "741"}, "747": {"ground_truth": "0", "bug_report": "xpath expression with $header and the header doesnt exist on the in message results in NPE\nUsing the $headerkey shorthand for xpath expression throws a NPE if the headerkey doesn't exists on the in message.We should try to find a better workaround for key doesn't exists. The NPE is thrown by SUN in their xpath engine.Check nabble:http://www.nabble.com/Camel-XPath-and-no-variables-found-in-MessageVariableResolver---What-should-Camel-do--td18603960s22882.html", "id": "747"}, "755": {"ground_truth": "0", "bug_report": "AMQP Tests are disabled\nThe AMQP tests are currently disabled. Adding an older version of MINA (than Camel uses) &amp; commons lang to the classpath got the tests passing except for ObjectMessage type test.Sending a TextMessage and BytesMessage work fine so I'm opening up a separate JIRA for the ObjectMessage issue.", "id": "755"}, "763": {"ground_truth": "0", "bug_report": "CamelContext's setErrorHandler is not effect when the jmx agent is disabled\nThe example applications from Camel 1.4 source distribution work correctly on my machine. After comparing the sample Spring XML configuration and my Spring configuration  I noticed there is no jmxAgent element in the sample XML where my configuration has this element. The problem I noticed was that when the disabled attribute of the jmxAgent element is set to true  the redelivery policy does not work. http://www.nabble.com/DeadLetterChannel-Configuration-Camel-1.4-td18622356s22882.html#a18622356", "id": "763"}, "765": {"ground_truth": "0", "bug_report": "InstrumentationProcessor should catch Throwable\nThe InstrumentationProcessor currently only catches exception and sets it in the exception. Runtime errors and throwables can be thrown all the way out of the DeadLetterChannel's process method  out of the reach of exception policy.", "id": "765"}, "794": {"ground_truth": "0", "bug_report": "Pipeline with thread() processor also redelivers following the default policy independently from the preset  errorhadling\nWhen using the thread processor in a simple pipeline  the exchange will be redelivered 6 times (default policy) along with the preset errorhandler settings. The code below will re-deliver 6 times to the default DeadLetterChannel and once to the log:errorTester. errorHandler(deadLetterChannel('log:errorTester?level=ERROR').maximumRedeliveries(1)); from('seda:whatEver') .thread(2) .process(new Processor() { public void process(Exchange exchange) throws Exception { System.out.println('### Exchg : ' + exchange.getExchangeId()); throw new Exception('Kaboom 2!'); } });", "id": "794"}, "795": {"ground_truth": "0", "bug_report": "MinaConsumerTest failure\nThe test fails with the following error:junit.framework.ComparisonFailure: expected:&lt;&#91;Bye World&#93;&gt; but was:&lt;[]&gt; at junit.framework.Assert.assertEquals(Assert.java:81) at junit.framework.Assert.assertEquals(Assert.java:87) at org.apache.camel.component.mina.MinaConsumerTest.testSendTextlineSyncText(MinaConsumerTest.java:28)...One test sends sync the text 'World' and the should receive 'Bye World' in response.2008-08-08 01:35:25 589 DEBUG MinaProducer - Message received: Bye World 2008-08-08 01:35:25 589 DEBUG MinaProducer - Message received: 2008-08-08 01:35:25 589 DEBUG MinaProducer - Message received: Bye 2008-08-08 01:35:25 589 DEBUG MinaProducer - Message received: There are actually not one  but two messages received which causes the reply to be overridden by the second message. The problem is with the test itself that actually returns 'Bye ' + body + '/n'! Because the test uses the 'textline' mina codec  the encoder actually adds another '/n'. With the textline codec there's one message per line  so the extra /n makes it two lines and hence the extra message. The decoder at the other end suppresses the LineDelimiter (/n)  so the extra message is actually an empty string.Removing the extra /n in the message fixes the test  but the notes above should be considered when camel-mina is used with the textline codec.", "id": "795"}, "807": {"ground_truth": "0", "bug_report": "HttpProducer premature out message creation\nI believe there is incorrect flow in the HttpProducer which can subvert error handling in the route:in Camel 1.4.0 in HttpProducer on line 76 a 'blank' out message is set on the exchange:Message out = exchange.getOut(true); try { int responseCode = httpClient.executeMethod(method);...1. If an IO error occurs on connect  the out message will be passed to the error handling code and if the originating endpoint was a JmsMessage it will cause an NPE when JmsMessage.getMessageId() is called. It also obscures the offending message I believe.2. A similar situation will happen if the HTTP service returned an error code; the out message will contain a reply message even though the processing resulted in an error (e.g. HTTP Status 500) 3. Also  shouldn't this code test whether the exchange expects an 'out' altogether  and if not  perhaps  put just put the return HTTP status into the 'in' message header.--Bill", "id": "807"}, "811": {"ground_truth": "0", "bug_report": "delayer pattern doesn't work in Spring DSL\nYou can't configure the delayer pattern properly in the Spring DSL currently. I will be attaching a patch for this shortly.", "id": "811"}, "815": {"ground_truth": "0", "bug_report": "support to set the loadBalancerStrategy before the outputs\nCurrent Camel only support the set the LoadBalancer Strategy after the outputs like this &lt;camelContext id='camel' xmlns='http://activemq.apache.org/camel/schema/spring'&gt; &lt;route&gt; &lt;from uri='direct:start'/&gt; &lt;loadBalance&gt; &lt;to uri='mock:x'/&gt; &lt;to uri='mock:y'/&gt; &lt;to uri='mock:z'/&gt; &lt;roundRobin/&gt; &lt;/loadBalance&gt; &lt;/route&gt; &lt;/camelContext&gt;It should be much better with the below configuration file&lt;camelContext id='camel' xmlns='http://activemq.apache.org/camel/schema/spring'&gt; &lt;route&gt; &lt;from uri='direct:start'/&gt; &lt;loadBalance&gt; &lt;roundRobin/&gt; &lt;to uri='mock:x'/&gt; &lt;to uri='mock:y'/&gt; &lt;to uri='mock:z'/&gt; &lt;/loadBalance&gt; &lt;/route&gt; &lt;/camelContext&gt;", "id": "815"}, "818": {"ground_truth": "0", "bug_report": "Should preserve the exchange type in the routing slip\nCurrently  the routing slip will create a new InOut exchange for each target based on the target endpoint type. This means that someone calling from a jbi endpoint (or other endpoint with custom exchange) into the routing slip will have their exchange type changed (to mostly likely DefaultExchange). I will be including a patch to fix this issue shortly.", "id": "818"}, "828": {"ground_truth": "0", "bug_report": "File component - write to temp file and rename to real name startegy\nWhen producing files an idea is to write to a temp file that has a name pattern that will be skipped by consumers (such as starting with a dot) and then after the write rename the file to the correct name.Then the consumers wont need to use exotic locking to get exclusive read access to the file. Works on all file systems.There is a nabble discussion on this issue somewhere.", "id": "828"}, "834": {"ground_truth": "0", "bug_report": "Trailing slash missing in SftpConsumer\nWhen this route  &lt;camel:route&gt; &lt;camel:from uri='sftp://someuser@hostname/path/to/directory/?password=secret&amp;amp;directory=true&amp;amp;binary=true&amp;amp;consumer.useFixedDelay=false&amp;amp;consumer.setNames=true&amp;amp;consumer.recursive=false' /&gt; &lt;camel:to uri='file:///C:/camel/output/' /&gt; &lt;/camel:route&gt;is configured the files in the remote directory are download  but subsequent calls of the method 'pollDir' result in this exception:[ Thread: 1 RemoteFileComponent] SftpConsumer WARN Caught SftpException:2: No such file[ Thread: 1 RemoteFileComponent] SftpConsumer WARN Doing nothing for now  need to determine an appropriate action[ Thread: 1 RemoteFileComponent] ScheduledPollConsumer WARN An exception occured while polling: Endpoint[sftp://someuser@hostname/path/to/directory/?password=secret&amp;amp;directory=true&amp;amp;binary=true&amp;amp;consumer.useFixedDelay=false&amp;amp;consumer.setNames=true&amp;amp;consumer.recursive=false]: No such file 2: No such fileAs you can see the slash is definitely in the configured route. If I check for the missing slash and add it to the dir variable (line 115 in SftpConsumer) then the consumer works: if(!dir.startsWith('/')) { dir = '/' + dir; }Didn't have the time to have a closer look. The root cause of the missing slash is somewhere else.", "id": "834"}, "839": {"ground_truth": "0", "bug_report": "Type Converter - if not possible to convert LOG a WARN\nAn end-user had a route that didn't work and had trouble figure out the problem. Could be the fact that the type converted failed for some reason and no trace in his log.We should add some DEBUG logging to the type converter stuff what it does  especially in cases where it cant convert.http://www.nabble.com/Marshaling-jdbc-output-with-xstream-td19065283s22882.htmlNotice we have another ticket about type converters should fail instead of returning null etc.", "id": "839"}, "847": {"ground_truth": "0", "bug_report": "mina should be exchange pattern agnostic\nCurrently the camel-mina component silently ignores exchanges that is not out capable even though its configured for sync=true (InOut)What it does now is setting the sync option itself depending on the exchange type.", "id": "847"}, "873": {"ground_truth": "0", "bug_report": "Current mina component can't tansfer the exchange fault message body\nI just found MinaTransferExchangeOptionTest don't show how to set fault message and the fault message is not a part of MinaPayloadHolder.You can't set the exception on the exchange in the processor   sine the camel DeadLetterChannel will try to redeliver the message.So we just need to support put the exception which need to send back to the camel client into the fault message body.", "id": "873"}, "876": {"ground_truth": "0", "bug_report": "splitter() should support batch for processing large files\nSee nabble:http://www.nabble.com/Splitter-for-big-files-td19272583s22882.htmlSomekind of batch(size) parameter to the splitter() DSL so we can process the exchanges in batches instead of all in one go.", "id": "876"}, "877": {"ground_truth": "0", "bug_report": "Access HttpRequest Params from exchange.in.header\nCurrently  you can only get the http request parameters by using a getHttpRequest() on the HttpExchange and thus you need java code and can't do it from the Spring XML configuration using simple expression language. e.g. if the request is http://localhost:8080/test?x=1  then the following route should result in 1 being returned in the body of the html response:&lt;route&gt; &lt;from uri='jetty:http://localhost:8080/test' /&gt; &lt;setBody&gt; &lt;simple&gt;&lt;html&gt;&lt;body&gt;${in.header.x}&lt;/body&gt;&lt;/html&gt;&lt;/simple&gt; &lt;/setBody&gt; &lt;to uri='mock:end'/&gt;&lt;/route&gt;", "id": "877"}, "881": {"ground_truth": "0", "bug_report": "camel-mina - codec options should fail if not possible to find i registry\nIf you configure the codec option on camel-mina and you eg make a spelling mistake camel will default to Mina default protocol if not found. We should throw an exception instead so end user knows about this and can fix his spelling mistake.", "id": "881"}, "882": {"ground_truth": "1", "bug_report": "SftpEndpoint ignores custom ssh port\nSftpEndpoint ignores custom ssh port. It works only if server runs on port 22.", "id": "882"}, "886": {"ground_truth": "0", "bug_report": "element should not require contextPath attribute\nIn the Java DSL  you can say from('foo').marshal().jaxb().to('bar')In XML I think it would look like this:&lt;from uri='...' /&gt;&lt;marshal&gt; &lt;jaxb /&gt;&lt;/marshal&gt;&lt;to uri='...' /&gt;The problem is that you can't use the &lt;jaxb /&gt; element without the contextPath attribute  which the XSD says is required.", "id": "886"}, "902": {"ground_truth": "0", "bug_report": "The should throw the exception if there is some thing wrong with  type attribute\nIf you specify an invalided class name in the convertBodyTo@type  you will get a NPE error  but no detail log information for the type attribute.We need to throw the exception for user to locate the error.", "id": "902"}, "906": {"ground_truth": "0", "bug_report": "JmsProducer - option requestTimeout isn't configured properly\nWhen sending a JMS message to a destination using camel-jms (JMSProducer) I can't get it to use my requestTimeout option in the endpoint configuration. It always default to 20000.template.requestBody('activemq:queue:slow?requestTimeout=1000'  'Hello World');This doesn't work as expected with a timeout of only 1 sec.", "id": "906"}, "912": {"ground_truth": "0", "bug_report": "camel-cxf component is not passing request context through correctly\nCxfProducer.process() is not setting up the request context correctly during createCxfMessage  so later in that method propagateContext has no request data to propagate. Also  we need the exchange properties to be added to the request context  so that non-camel components can pass properties into the cxf request context.I have coded a fix for this  along with a unit test of course. I'll attach the patch to this JIRA.", "id": "912"}, "920": {"ground_truth": "0", "bug_report": "file component consumer.regexPattern does not work as expected (matching is applied not only to file  but also to directory)\nfile component consumer.regexPattern does not work as expectedexample : from('file://d:/the_input_dir?consumer.regexPattern=.*/.xml$'.to(whatever)(should match only files  that has extention .xml)the result of the above regexPattern is  that no file will be proccessed  regardless if an existing filename matches the pattern.FileConsumer.pollFileOrDirectory() applies the regexPattern on the starting directory (the_input_dir) which will not match.", "id": "920"}, "922": {"ground_truth": "0", "bug_report": "Remove deps on persistence-api jar  non compliant with the spec\nI mentioned a while ago a warning I couldn't explain in eclipse related to the use of @UniqueConstraint in camel-jpa.It turned out to be due to the fact that camel-jpa has a dependency on persistence api  but used for testing openjpa that has a dependency on geronimo-jpa_3.0_spec. So camel-jpa pulls in two different implementation of the same spec. So far so good. It also turns out that the definition of the @UniqueConstraint annotation is different in the two jars  the persistence-api (and the camel-jpa code as implemented) being non spec compliant. I found other inconsistencies in the persistence-api impl and it seems to be based on an older version of the spec.(More precisely persistence api annotates the @interface UniqueConstraint with @Target({TYPE}) whereas the spec and the geronimo impl use: @Target({}))My recommendation is to replace the dependency on persistence-api with the geronimo version. I will commit a change for this in the next hour or so  but leave this issue open. If anybody has any objections please shout and I will revert the change.", "id": "922"}, "944": {"ground_truth": "0", "bug_report": "tracer - option to disable interceptors\nCurrently the tracer also outputs interceptors such as delegation to the DLC that is wrapped in the pipeline.Would be nice with an option to enable/disable this (disabled by default) so all the interceptors isn't logged and confuses end-users.", "id": "944"}, "955": {"ground_truth": "0", "bug_report": "Manage non-singleton endpoints in the CamelContext\nSo that we can manages JMS endpoint for instance  that are not singletons.", "id": "955"}, "957": {"ground_truth": "0", "bug_report": "camel-spring/rest does not build on HP-UX\nI'm getting the following error from camel-spring on the HP-UX platform. I should be able to reuse a fix I made to a similar problem in CAMEL-939&#91;18:53:50&#93;: &#91;ERROR&#93; FATAL ERROR&#91;18:53:50&#93;: &#91;INFO&#93; ------------------------------------------------------------------------&#91;18:53:50&#93;: &#91;INFO&#93; com/sun/mirror/apt/AnnotationProcessorFactory&#91;18:53:50&#93;: &#91;INFO&#93; ------------------------------------------------------------------------&#91;18:53:50&#93;: &#91;INFO&#93; Trace&#91;18:53:50&#93;: java.lang.NoClassDefFoundError: com/sun/mirror/apt/AnnotationProcessorFactory&#91;18:53:50&#93;: at com.sun.tools.jxc.maven2.SchemaGenMojo.execute(SchemaGenMojo.java:143)&#91;18:53:50&#93;: at org.apache.maven.plugin.DefaultPluginManager.executeMojo(DefaultPluginManager.java:451)", "id": "957"}, "958": {"ground_truth": "0", "bug_report": "Inconsistency in recipient list documentation?\nThe mail thread at http://tinyurl.com/47bqre seems to contradict the documentation at http://activemq.apache.org/camel/recipient-list.html &#8211; not sure if this is a doc issue  or a camel behavioural issue.", "id": "958"}, "959": {"ground_truth": "0", "bug_report": "JMS InOut operations should default to non transacted even if the JMS component or endpoint defaults to transacted; as typically RPCs over JMS are not transacted\ncurrently there is no automatic transaction commit inside the send of the request when doing InOut with JMS; so the transaction won't commit if the component/endpoint is transacted - then the message won't reach the request and things will time out.This will be confusing to users.So if things are transacted; lets default to using non-transacted for InOut - and force a new property  transactedInOut to allow that to be transacted if folks really want that (which they usually won't I'd have thought).", "id": "959"}, "964": {"ground_truth": "0", "bug_report": "loggingErrorHandler should default to ERROR and LoggingErrorHandlerBuilder should operate as a builder\nPlease see attached patch which changes the default level created by the LoggingErrorHandlerBuilder to ERROR instead of INFO.Also some of the methods on this builder to not return 'this'. This breaks the chain when attempting to use the builder resulting in:LoggingErrorHandlerBuilder errorBuilder = loggingErrorHandler('my.logger.name');errorBuilder.setLevel(LoggingLevel.ERROR);errorHandler(errorBuilder);instead of:errorHandler(loggingErrorHandler('mylogger.name').level(LoggingLevel.ERROR));I have added on builder methods for 'level' and for 'log'. I have left the properties that currently exist as following the pattern on DeadLetterChannelBuilder the builder method names should not include 'set'. Whoever applies the patch may wish to remove the getters and setters  depending how they feel this will affect existing users.", "id": "964"}, "969": {"ground_truth": "0", "bug_report": "CamelContext.setRoutes() documentation is misleading\nThe javaDoc for CamelContext.setRoutes() states:'Sets the routes for this context  replacing any current routes'Yet when used  and the context started  startRouteDefinitions() is used first  causing any existing routes created through the definitions (such as those from RouteBuilders) to be re-created and started before the new routes provided to setRoutes() are started.", "id": "969"}, "970": {"ground_truth": "0", "bug_report": "createConnector attribute for CamelJMXAgentType should default to 'true'\ncreateConnector attribute for CamelJMXAgentType should default to 'true'", "id": "970"}, "973": {"ground_truth": "0", "bug_report": "TypeConverter Exception is thrown in the latest build of camel\nI have upgraded to the latest of Camel and when I attempt to use the content based router pattern - its now throwing an error.The contents of the Message passed is a StringSource object and from debugging camel - the BodyType is a StringSource but it is attempting to convert from a StreamCache to a StringSource. I will try and put a testcase together but if anyone has any ideas of its cause in the meantime ?The error it throws it below.thanks  Edell.No type converter available to convert from type: class org.apache.servicemix.camel.JbiMessage to the required type: org.w3c.dom.Document with value JbiMessage: org.apache.servicemix.jbi.runtime.impl.NormalizedMessageImpl@1d03b5borg.apache.camel.NoTypeConversionAvailableException: No type converter available to convert from type: class org.apache.servicemix.camel.JbiMessage to the required type: org.w3c.dom.Document with value JbiMessage: org.apache.servicemix.jbi.runtime.impl.NormalizedMessageImpl@1d03b5b at org.apache.camel.impl.converter.DefaultTypeConverter.convertTo(DefaultTypeConverter.java:117) at org.apache.camel.impl.converter.DefaultTypeConverter.convertTo(DefaultTypeConverter.java:65) at org.apache.camel.impl.MessageSupport.getBody(MessageSupport.java:69) at org.apache.camel.impl.MessageSupport.getBody(MessageSupport.java:51) at org.apache.camel.builder.xml.XPathBuilder.getDocument(XPathBuilder.java:528) at org.apache.camel.builder.xml.XPathBuilder.evaluateAs(XPathBuilder.java:420) at org.apache.camel.builder.xml.XPathBuilder.matches(XPathBuilder.java:98) at org.apache.camel.builder.xml.XPathBuilder.matches(XPathBuilder.java:63) at org.apache.camel.processor.ChoiceProcessor.process(ChoiceProcessor.java:47) at org.apache.camel.management.InstrumentationProcessor.process(InstrumentationProcessor.java:75) at org.apache.camel.processor.DeadLetterChannel.process(DeadLetterChannel.java:174) at org.apache.camel.processor.DeadLetterChannel.process(DeadLetterChannel.java:96) at org.apache.camel.management.InstrumentationProcessor.process(InstrumentationProcessor.java:63) at org.apache.camel.processor.UnitOfWorkProcessor.process(UnitOfWorkProcessor.java:47) at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:41) at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:66) at org.apache.servicemix.camel.CamelProviderEndpoint.handleActiveProviderExchange(CamelProviderEndpoint.java:115) at org.apache.servicemix.camel.CamelProviderEndpoint.process(CamelProviderEndpoint.java:73) at org.apache.servicemix.common.AsyncBaseLifeCycle.doProcess(AsyncBaseLifeCycle.java:600) at org.apache.servicemix.common.AsyncBaseLifeCycle.processExchange(AsyncBaseLifeCycle.java:554) at org.apache.servicemix.common.AsyncBaseLifeCycle.processExchangeInTx(AsyncBaseLifeCycle.java:456) at org.apache.servicemix.common.AsyncBaseLifeCycle$2.run(AsyncBaseLifeCycle.java:341) at java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:650) at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:675) at java.lang.Thread.run(Thread.java:595)", "id": "973"}, "978": {"ground_truth": "0", "bug_report": "camel-mail - type converter to InputStream\ncamel-mail need a type converter to InputStream Currently we have type converters to StringSee nabble:http://www.nabble.com/Process-Mail-Attachment-InvalidPayloadException-Camel-1.4.0-td19937573s22882.html", "id": "978"}, "979": {"ground_truth": "0", "bug_report": "FileLanguage - to support constant expressions\nCurrently the simple language does not support constant expressions  that actually is useable in the file component that uses simple language to set file namesSo if an end-user want to produce a file with a fixed name  then its not possibleexpression=MyBigFile.txt Is not possible.But this is:expression=MyBigFile-${header.foo}.txt is as there is a ${} placeholder and then the simple language can evaluate it.", "id": "979"}, "983": {"ground_truth": "0", "bug_report": "BeanInfo - should consider overridden methods when selecting method from operations list\nSee nabble:http://www.nabble.com/BeanInfo.chooseMethodWithMatchingBody-throws-an-AmbiguousMethodCallException-when-there%27s-no-ambiguity-td19959124s22882.html", "id": "983"}, "985": {"ground_truth": "0", "bug_report": "bean binding - annotation to get the exception from exchange\nIf you are doing error handling using POJO beans to do some error handling code and using bean binding annoations to get the stuff from the exchange  we are missing an annotation to get the caused exceptionSuch as a @Exception or @Fault if that is a better nameSee nabble:http://www.nabble.com/Error-Handler-and-OutHeaders-td19970966s22882.htmljstrachan using @Exception or @Fault or whatever on a bean method call to pull out the Exchange's fault/exception right? 14:02 jstrachan if so definitely!", "id": "985"}, "991": {"ground_truth": "0", "bug_report": "Maven goal camel:dot should use overridden  when specified\nMaven goal camel:dot should use overridden &lt;mainClass/&gt; when used as in pom.xml: &lt;build&gt; &lt;plugins&gt; &lt;!-- Allows the routes to be run via 'mvn camel:run' --&gt; &lt;plugin&gt; &lt;groupId&gt;org.apache.camel&lt;/groupId&gt; &lt;artifactId&gt;camel-maven-plugin&lt;/artifactId&gt; &lt;version&gt;${pom.version}&lt;/version&gt; &lt;!-- optional  default value: org.apache.camel.spring.Main --&gt; &lt;configuration&gt; &lt;mainClass&gt;mypackage.boot.camel.CamelStartup&lt;/mainClass&gt; &lt;/configuration&gt; &lt;/plugin&gt; &lt;/plugins&gt; &lt;/build&gt;", "id": "991"}, "992": {"ground_truth": "0", "bug_report": "Component spring 'event' is not auto registered by Camel. Add a Event file in the folder META-INF/services/org/apache/camel/compoment of camel-spring\nComponent spring 'event' is not auto registered by Camel. Add a Event file in the folder META-INF/services/org/apache/camel/compoment of camel-spring.", "id": "992"}, "997": {"ground_truth": "0", "bug_report": "Http producer should be smarter to select correct GET or POST method\nThe code in HttpProducer should be smarter to select the correct method to use.Algorithm:1) if the method is provided in a header2) GET if a querystring is provided in a header3) GET if endpoint is configured with a query string4) POST if there is data to send5) GET fallback to getAlso the HttpOperationFailedException is missing a message  so you get the error code and description in the stack-trace", "id": "997"}, "1002": {"ground_truth": "0", "bug_report": "Quartz support should allow stateful jobs\nSee http://www.nabble.com/Clustered-Quartz-td20068086s22882.htmlCurrently Quartz only has CamelJob which implements Quartz's Job interface. There is no option to use an implemenation of StatefulJob. This causes problems when you may want to use a JDBC JobStore and have Quartz running on multiple machines  as you may end up with multiple jobs running together. StatefulJob in effect allows for a blocking singleton style job on one machine.Attached is a patch which adds a new URI parameter named 'stateful'  which defaults to false. When set to true it uses StatefulCamelJob.One significant change to the QuartzComponent is that a reference to the CamelContext is now stored in the Quartz Scheduler. This idea is taken from Spring's SchedulerFactoryBean which stores a reference to a Spring ApplicationContext. This is needed as when using stateful jobs the URI of the Endpoint is stored instead of a reference to the endpoint. This is to allow for the use of JDBC JobStore as the URI can be serialised and shared beteen participating schedulers.Current Faults:Still has no notion of volatilityDifference in operation between CamelJob and StatefulCamelJob is not strictly needed. It may be less confusing if both versions simply store the URI instead of an endpoint reference.You need to use stateful if you want to use clustering at all due to the reason above. This is mixing together clustering support and blocking functionality.In Camel 2 we may want to try rewriting this Component as it is becoming a little messy. It would be nice to try and harness the power of Spring's SchedulerFactoryBean.", "id": "1002"}, "1018": {"ground_truth": "0", "bug_report": "camel http Uri from the message header\nImagine a use case when the target systems  where http messages have to be sent to  are maintained in a database. In that case the http uri is cannot be set in the camelcontext but it should come from the header of the message.So the http client should check first if there is an uri in the header and if not than use the one given in the camelcontext (like for querystring).", "id": "1018"}, "1023": {"ground_truth": "0", "bug_report": "camel:dot - pipeline is drawn as a multicast\nAnd it has a few other areas as well that could be polished.", "id": "1023"}, "1036": {"ground_truth": "0", "bug_report": "Add ability to configure log level on exceptions from DLC retry mechanism\nRight now  when Camel tries to redeliver an message a number of times (using the DLC)  the exceptions are logged as ERROR. Sometimes though  these retries may be considered part of normal operation. I'm going to put in DSL options to configure this log level. Something like this will be possible:onException(AException.class).maximumRedeliveries(5) .retriesExhaustedLogLevel(LoggingLevel.DEBUG) .retryAttemptedLogLevel(LoggingLevel.DEBUG) .process(new MyExceptionProcessor('I got an Exception.'));", "id": "1036"}, "1039": {"ground_truth": "0", "bug_report": "Add support to tracer for logging out messages\nAdd support to tracer for logging out messages", "id": "1039"}, "1044": {"ground_truth": "0", "bug_report": "Passive mode\nThere should be an option to enable passive mode in the ftp endpoint. If not  when deploying the camel rules on a host with a firewall the default active mode is useless.", "id": "1044"}, "1053": {"ground_truth": "0", "bug_report": "spring integration xsd change breaks component\nThread is here http://www.nabble.com/-HEADS-UP--camel-spring-integration-issue-td20331450s22882.html", "id": "1053"}, "1057": {"ground_truth": "0", "bug_report": "XQuery creates an empty out message that makes it impossible to chain more processors behind it\nWhen using XQuery the getOut() function is called on the message so if it is not used at a place where the out is filled an empty out message will be created. With this xquery cannot be used for example in setBody  setHeader... and anywhere where the out is not filled.An example where this causes real trouble:&lt;choice&gt; &lt;when&gt; &lt;xquery&gt;...&lt;/xquery&gt; &lt;to uri='direct:follow' /&gt; &lt;/when&gt;&lt;/choice&gt;...&lt;from uri='direct:follow'&gt;&lt;to ...&gt;&lt;to ...&gt;In the patch the out property in the xquery context is filled only if it is not null. With it all of my pipelines seem to work well for me.", "id": "1057"}, "1062": {"ground_truth": "0", "bug_report": "PipelineConcurrentTest.java fails randomly\nThe test fails with an IllegalStateException: Queue full. I believe the reason for this is that there are 10000 messages sent  but the default queue size is 1000. On a fast machine  the queue fills up before the consumer gets a chance to pop the messages from the queue.", "id": "1062"}, "1070": {"ground_truth": "0", "bug_report": "org.apache.camel.Message - hasAttachments is buggy\nI must use if (exchange.getIn().getAttachments().size() &gt; 0) {Instead of if (exchange.getIn().hasAttachments()) {As the latter always returns false. Or at least returns false even though the size is &gt; 0", "id": "1070"}, "1074": {"ground_truth": "0", "bug_report": ".unmarshal(new JaxbDataFormat('com.foo.bar')) returning JAXBElement\nusing .unmarshal(new JaxbDataFormat('com.foo.bar') is returning a JAXBElement instead of the desired object that was generated by xjc.", "id": "1074"}, "1078": {"ground_truth": "0", "bug_report": "Remove specialized Exchange and make DefaultExchange final to pave the road for optimization by reducing exchange copies\nThe code in DefaultEndpoint.createExchange(Exchange exchange)  calls on getExchangeType() to figure out if a new copy of Exchange needs be created. The code relies though on the generic argument of the Endpoint type to figure out the actual Exchange type. With the generics removed part of CAMEL-872  getExchangeType() always returns null  forcing a copy every time.There is no real need to extend Exchange  so the proposal for this to make the Exchange final and move the component specific bits  if any  in the Message.", "id": "1078"}, "1088": {"ground_truth": "0", "bug_report": "Can't get the soap header when the camel-cxf endpoint working in the PAYLOAD data fromat\nWhen I added a unit test to show how to get the SOAP header from a PAYLOAD camel-cxf endpoint   I found the soap header stuff is not working.", "id": "1088"}, "1090": {"ground_truth": "0", "bug_report": "ThroughputLogger incorrectly reports duration 0\nfrom the apache-camel-load test:2008-11-14 15:27:01 114 &#91;mponent@1296d1d&#93; INFO aset:myDataSet?produceDelay=10 - Sent: 600 messages so far. Last group took: 0 millis which is: 85.106 messages per second. average: 80.128The ThroughputLogger used by DataSet resets the duration before reporting it.", "id": "1090"}, "1091": {"ground_truth": "1", "bug_report": "jetty endpoints ignore host specified in URI and expose an endpoint on all interfaces\nhttp://www.nabble.com/Jetty-and-Mina%3A-how-to-bind-to-%22anylocal%22-AKA-%22wildcard%22-address--tp20475674s22882p20494645.html", "id": "1091"}, "1093": {"ground_truth": "0", "bug_report": "camel-jetty - Exchange failures should not be returned as 200\nThe code below: protected RouteBuilder createRouteBuilder() throws Exception { return new RouteBuilder() { public void configure() throws Exception { errorHandler(noErrorHandler()); from('jetty:http://localhost:8080/myapp/myservice').process(new MyBookService()); } }; } public class MyBookService implements Processor { public void process(Exchange exchange) throws Exception { throw new IllegalArgumentException('Damm'); } }Will return http response code 200. We should let end users easily set what response code they want and in case of route failures we should probably return 500 and return the stracktrace in the body", "id": "1093"}, "1103": {"ground_truth": "0", "bug_report": "Delayer not working as expected.\nThe delayer expression is not evaluated in my route builder:from(waitQueueName).delayer(header(HEADER_EXECUTION_TIME)).bean(routerBean).recipientList(header(HEADER_TARGET_ROUTE));While the recipientList expression is working the header expression is always ignored. I stepped through the code and saw that in DelayerType.createAbsoluteTimeDelayExpression() 'expr.getLanguage()' is always null: private Expression createAbsoluteTimeDelayExpression(RouteContext routeContext) { ExpressionType expr = getExpression(); if (expr != null) { if (ObjectHelper.isNotNullAndNonEmpty(expr.getLanguage())) { return expr.createExpression(routeContext); } } return null; }I have seen that this was changed in 1.5.0 (http://issues.apache.org/activemq/browse/CAMEL-811).", "id": "1103"}, "1105": {"ground_truth": "0", "bug_report": "Spring DSL - redeliveryPolicy element should have ref attribute\nI'd like to be able to create reusable RedeliveryPolicy's in Spring and refer to them in Camel's Spring DSL. This is to achieve two goals: I can use the Spring PropertyPlaceholderConfigurer to enable us to tune timeouts and redelivery in production - we cannot do that with Camel's Spring DSL; I can have several routes sharing the same RedeliveryPolicy (but possibly with different exceptions).There doesn't seem to be a way to share RedeliveyPolicy's between onException elements  meaning it needs to be duplicated (at least not that I could find in the docco)For example  I'd like to do something like this: &lt;bean id='redeliveryPolicy' class='org.apache.camel.processor.RedeliveryPolicy'&gt; &lt;property name='...' value=${property.placeholder}/&gt; &lt;/bean&gt; &lt;camelContext&gt; &lt;route&gt; &lt;from uri='somewhere'/&gt; &lt;onException&gt; &lt;exception&gt;ExceptionA&lt;/exception&gt; &lt;redeliveryPolicy ref='redeliveryPolicy'/&gt; &lt;to uri='deadLetter'/&gt; &lt;/onException&gt; &lt;to uri='unreliableEndpoint'/&gt; &lt;/route&gt; &lt;route&gt; &lt;from uri='xyz'/&gt; &lt;onException&gt; &lt;exception&gt;ExceptionA&lt;/exception&gt; &lt;redeliveryPolicy ref='differentRedeliveryPolicy'/&gt; &lt;to uri='differentDeadLetter'/&gt; &lt;/onException&gt; &lt;to uri='unreliableEndpoint'/&gt; &lt;/route&gt; &lt;route&gt; &lt;from uri='somewhereElse'/&gt; &lt;onException&gt; &lt;exception&gt;ExceptionB&lt;/exception&gt; &lt;redeliveryPolicy ref='redeliveryPolicy'/&gt; &lt;to uri='deadLetter'/&gt; &lt;/onException&gt; &lt;to uri='anotherUnreliableEndpoint'/&gt; &lt;/route&gt; &lt;/camelContext&gt;Thanks!", "id": "1105"}, "1107": {"ground_truth": "0", "bug_report": "camel-http - does not remove httpClient.xxx URI options\nWhen using the options to configure httpClient using URI option  they should be removed from the uri that is left over to the HTTPProducer.http://someserver?httpClient.soTimeOut=5000should remove the httpClient.xxx so it'shttp://someserver", "id": "1107"}, "1108": {"ground_truth": "0", "bug_report": "ParallelProcessing and executor flags are ignored in Multicast processor\nThe parallelProcessing and executor arguments are ignored in the constructor of MulticastProcessor. Here is a call that MulticastType makesorg.apache.camel.model.MulticastType.java return new MulticastProcessor(list  aggregationStrategy  isParallelProcessing()  threadPoolExecutor);MulticastProcessor ignores parallelProcessing and executor arguments and invokes a chain constructor with '.. false  null ..'org.apache.camel.processor.MulticastProcessor.java public MulticastProcessor(Collection&lt;Processor&gt; processors  AggregationStrategy aggregationStrategy  boolean parallelProcessing  ThreadPoolExecutor executor) { this(processors  aggregationStrategy  false  null  false); } public MulticastProcessor(Collection&lt;Processor&gt; processors  AggregationStrategy aggregationStrategy  boolean parallelProcessing  ThreadPoolExecutor executor  boolean streaming) { notNull(processors  'processors'); this.processors = processors; this.aggregationStrategy = aggregationStrategy; this.isParallelProcessing = parallelProcessing; if (isParallelProcessing) { if (executor != null) { this.executor = executor; } else { // setup default Executor this.executor = new ThreadPoolExecutor(processors.size()  processors.size()  0  TimeUnit.MILLISECONDS  new ArrayBlockingQueue&lt;Runnable&gt;(processors.size())); } } this.streaming = streaming; }Attached a patch but have not tested it. Also need a unit test for this.", "id": "1108"}, "1122": {"ground_truth": "0", "bug_report": "Camel should propagate exception cause in InOnly scenarios\nIn the case an exception is handled by the DeadLetterChannel  Camel will currently set the exception to null and add an exchange property containing the exception. We should also add this as a message header so that it will be propagated to external services  like a JBI service.", "id": "1122"}, "1145": {"ground_truth": "0", "bug_report": "CxfExchange does not copy unit of work and thus its null and thus NPE is thrown\nWilliam could you check this error reported by end userSee nabble:http://www.nabble.com/UnitOfWork-td20829434s22882.html", "id": "1145"}, "1146": {"ground_truth": "0", "bug_report": "camel-mina adds two versions of slf4j on the classpath\nOne version comes from camel-mina (version 1.5.5) and one from mina-core (version 1.4.3). This causes problems as seen when trying to use camel-mina at runtime or in my case deploying to ServiceMix. This is the error I getorg.apache.xbean.kernel.ServiceRegistrationException: java.lang.NoSuchFieldError: name at org.apache.xbean.kernel.standard.ServiceManagerRegistry.registerService(ServiceManagerRegistry.java:424) at org.apache.xbean.kernel.standard.StandardKernel.registerService(StandardKernel.java:220) at org.apache.xbean.server.spring.loader.SpringLoader.load(SpringLoader.java:152) at org.apache.servicemix.common.xbean.AbstractXBeanDeployer.deploy(AbstractXBeanDeployer.java:83) at org.apache.servicemix.camel.CamelSpringDeployer.deploy(CamelSpringDeployer.java:83) at org.apache.servicemix.common.BaseServiceUnitManager.doDeploy(BaseServiceUnitManager.java:88) at org.apache.servicemix.common.BaseServiceUnitManager.deploy(BaseServiceUnitManager.java:69) at org.apache.servicemix.jbi.framework.DeploymentService.deployServiceAssembly(DeploymentService.java:508) at org.apache.servicemix.jbi.framework.AutoDeploymentService.checkPendingSAs(AutoDeploymentService.java:482) at org.apache.servicemix.jbi.framework.AutoDeploymentService.checkPendingComponents(AutoDeploymentService.java:535) at org.apache.servicemix.jbi.framework.AutoDeploymentService.updateSharedLibrary(AutoDeploymentService.java:317) at org.apache.servicemix.jbi.framework.AutoDeploymentService.updateArchive(AutoDeploymentService.java:254) at org.apache.servicemix.jbi.framework.AutoDeploymentService.monitorDirectory(AutoDeploymentService.java:667) at org.apache.servicemix.jbi.framework.AutoDeploymentService.access$800(AutoDeploymentService.java:62) at org.apache.servicemix.jbi.framework.AutoDeploymentService$1.run(AutoDeploymentService.java:631) at java.util.TimerThread.mainLoop(Timer.java:512) at java.util.TimerThread.run(Timer.java:462)Caused by: java.lang.NoSuchFieldError: name at org.slf4j.impl.SimpleLogger.&lt;init&gt;(SimpleLogger.java:83) at org.slf4j.impl.SimpleLoggerFactory.getLogger(SimpleLoggerFactory.java:67) at org.slf4j.LoggerFactory.getLogger(LoggerFactory.java:103) at org.apache.mina.util.NamePreservingRunnable.&lt;init&gt;(NamePreservingRunnable.java:32) at org.apache.mina.transport.socket.nio.SocketAcceptor.startupWorker(SocketAcceptor.java:165) at org.apache.mina.transport.socket.nio.SocketAcceptor.bind(SocketAcceptor.java:141) at org.apache.camel.component.mina.MinaConsumer.doStart(MinaConsumer.java:60) at org.apache.camel.impl.ServiceSupport.start(ServiceSupport.java:47) at org.apache.camel.impl.DefaultCamelContext.addService(DefaultCamelContext.java:421) at org.apache.camel.impl.DefaultCamelContext.startRoutes(DefaultCamelContext.java:659) at org.apache.camel.impl.DefaultCamelContext.doStart(DefaultCamelContext.java:632) at org.apache.camel.spring.SpringCamelContext.maybeDoStart(SpringCamelContext.java:167) at org.apache.camel.spring.SpringCamelContext.doStart(SpringCamelContext.java:162) at org.apache.camel.impl.ServiceSupport.start(ServiceSupport.java:47) at org.apache.camel.spring.SpringCamelContext.maybeStart(SpringCamelContext.java:97) at org.apache.camel.spring.SpringCamelContext.onApplicationEvent(SpringCamelContext.java:116) at org.springframework.context.event.SimpleApplicationEventMulticaster$1.run(SimpleApplicationEventMulticaster.java:77) at org.springframework.core.task.SyncTaskExecutor.execute(SyncTaskExecutor.java:49) at org.springframework.context.event.SimpleApplicationEventMulticaster.multicastEvent(SimpleApplicationEventMulticaster.java:75) at org.springframework.context.support.AbstractApplicationContext.publishEvent(AbstractApplicationContext.java:246) at org.springframework.context.support.AbstractApplicationContext.finishRefresh(AbstractApplicationContext.java:617) at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:355) at org.apache.xbean.server.spring.configuration.SpringConfiguration.&lt;init&gt;(SpringConfiguration.java:63) at org.apache.xbean.server.spring.configuration.SpringConfigurationServiceFactory.createService(SpringConfigurationServiceFactory.java:106) at org.apache.xbean.kernel.standard.ServiceManager.start(ServiceManager.java:420) at org.apache.xbean.kernel.standard.ServiceManager.initialize(ServiceManager.java:200) at org.apache.xbean.kernel.standard.RegistryFutureTask$RegisterCallable.call(RegistryFutureTask.java:110) at java.util.concurrent.FutureTask$Sync.innerRun(FutureTask.java:269) at java.util.concurrent.FutureTask.run(FutureTask.java:123) at org.apache.xbean.kernel.standard.ServiceManagerRegistry.registerService(ServiceManagerRegistry.java:409)", "id": "1146"}, "1187": {"ground_truth": "0", "bug_report": "The Mina VM protocol is not recognising codec and other options\nUse of the vm protocol appears to ignore any codec options. There could be other options that are missed also.Using the same URI but for tcp works fine.", "id": "1187"}, "1191": {"ground_truth": "0", "bug_report": "camel-velocity - log4j is needed at runtime\nSee nabble:http://www.nabble.com/velocity%3A-Couldn%27t-find-class-org.apache.velocity.runtime.log.SimpleLog4JLogSystem-td21036449s22882.htmlJon do you mind taking a look at this  you are are good at maven pom's", "id": "1191"}, "1195": {"ground_truth": "0", "bug_report": "File component - exclusive read lock strategy using renaming\nSee CAMEL-760But an end user has problem with this  the read lock can not be granted and a IOException is thrown.We should support the same strategy as the FTP consumer does with a try to rename the file.Also we should allow some nice URI options to select the strategy nio locks renaming", "id": "1195"}, "1196": {"ground_truth": "0", "bug_report": "MockEndpoint - sleep for empty test doesnt work\nSee nabble:http://www.nabble.com/MockEndpoint---sleep-for-empty-tests-is-flawed--td21067367s22882.html", "id": "1196"}, "1199": {"ground_truth": "0", "bug_report": "Throttler appears to 'throttle' per thread instead of throttling across multiple threads\nThrottler appears to 'throttle' per thread instead of throttling across multiple threads", "id": "1199"}, "1205": {"ground_truth": "0", "bug_report": "@EndpointInject can not lookup bean if endpoint is defined directly as a consumer (from)\nI was messing with camel-spring and routes using spring DSLI had this part of unit test code @EndpointInject(name = 'myFileEndpoint') protected Endpoint inputFile;To lookup an endppoint with the given name myFileEndpointBut if I define it directly then it cannot be found &lt;route&gt; &lt;from id='myFileEndpoint' uri='file://target/antpathmatcher?consumer.recursive=true&amp;amp;filter=#myFilter'/&gt; &lt;to uri='mock:result'/&gt; &lt;/route&gt;So I have to define it as a loose endpoint as: &lt;endpoint id='myFileEndpoint' uri='file://target/antpathmatcher?consumer.recursive=true&amp;amp;filter=#myFilter'/&gt; &lt;route&gt; &lt;from ref='myFileEndpoint'/&gt; &lt;to uri='mock:result'/&gt; &lt;/route&gt;", "id": "1205"}, "1207": {"ground_truth": "0", "bug_report": "ConcurrentModificationException when stop the camel-osgi bundle\nERROR: Error stopping mvn:org.apache.camel/camel-osgi/1.5.0 (org.osgi.framework.BundleException: Activator stop error.)java.util.ConcurrentModificationException at java.util.HashMap$HashIterator.nextEntry(HashMap.java:841) at java.util.HashMap$ValueIterator.next(HashMap.java:871) at org.apache.camel.osgi.Activator.mayBeRemoveComponentFor(Activator.java:85) at org.apache.camel.osgi.Activator.stop(Activator.java:120) at org.apache.felix.framework.util.SecureAction.stopActivator(SecureAction.java:613) at org.apache.felix.framework.Felix._stopBundle(Felix.java:1995) at org.apache.felix.framework.Felix.stopBundle(Felix.java:1952) at org.apache.felix.framework.Felix.setFrameworkStartLevel(Felix.java:1151) at org.apache.felix.framework.StartLevelImpl.run(StartLevelImpl.java:267) at java.lang.Thread.run(Thread.java:595)", "id": "1207"}, "1209": {"ground_truth": "0", "bug_report": "camel-xmpp to work with google chat\nSee blog entryhttp://www.andrejkoelewijn.com/wp/2008/12/30/using-google-talk-from-java-example/There is a solution that works with plain java. Could be used to identify what needs to be fixed in Camel to get it working with Google chat as well.Notice I haven't verified if it doesn't already work with google chat. Just created this ticket to not forget it.", "id": "1209"}, "1211": {"ground_truth": "1", "bug_report": "camel-restlet security extension\nNow we have basic http auth. Quick shot is adding digest as it is supported by Restlet  but I have something more in mind. As I'm using token based auth and for me http auth is not suitable (pushing credentials back and forth all the time etc). How about a pattern where from one endpoint you can consume a ticket/token/sessionId and you can use it as a header to authenticate? As now the realm is to keep login and pass and it could be something like a bean that can validate the token. Of course that data would not be static so it is more about a callback (eg. getTokens()) than a static map/list. And finally as we have the uri we can resolve an 'operation' and do authorization (so uri+method is the target). I mean in my project I have processor that does stuff like that and it would be cool to have all those things in one place in consumer (and provide only data and have skeletal logic under the hood).Now the question is if my idea makes sense and if so what are your suggestions on how to implement that w/o reinventing the wheel (and not using ACEGI )Btw  Claus  William - logs about attaching/detaching restlets are at info level and it's kind of spamming if there are say 20 endpoints... Maybe it should be at debug?", "id": "1211"}, "1212": {"ground_truth": "0", "bug_report": "Improve JMS header name endocing/decoding strategy\nWe have a scenario where we need to perform the following style of integration:HTTP -&gt; JMS -&gt; HTTPThe final HTTP endpoint needs to receive the headers as they were in the original HTTP request. However  I am finding that the HTTP headers that contain a hyphen (such as Content-Type  Content-Length etc) are being omitted when the messages go onto the queue. JmsBinding has two static methods to perform some basic header manipulation to 'encode' and 'decode' headers that are not valid Java identifiers. However  the strategy employed does not handle hyphens or other illegal characters  only periods. Secondly  as static methods they cannot be overridden by my own extension of JmsBinding. And finally  JmsHeaderFilterStrategy has a static link back to these methods in JmsBinding so that makes it hard to replace.To me  it would be more appropriate that HeaderFilterStrategy implementations should actually contain the code to Advise if a header needs to be encoded/decoded  which it already does  but in addition; Actually perform that encoding/decoding in it's own implementation-specific wayThis affects 1.5.0 but it's also in the trunk like this.I have a workaround which is a little messy but it works Thanks Jason", "id": "1212"}, "1233": {"ground_truth": "0", "bug_report": "Pipeline could change the MEP unintended\nWhen exchanges is processed from pipeline they result is copyed as input to the next exchange. However during this copy Camel could potentially change the MEP to InOut. It should respect the original MEP.The flaw is in ExchangeHelper#copyResultsFixing this also forces end users to use the correct send/request method on ProducerTemplate. Now Camel will keep the MEP.So if you are using send then its inOnly and then you the there is no result. Use request for InOut MEP's.This breaks a few of our own unit testing that was using the wrong method.", "id": "1233"}, "1235": {"ground_truth": "0", "bug_report": "Tracer - allow configuration of fixed size of leading breadcrum or let it be variable sized\nThe TraceFormatter fixes the breadcrum to 65 chars. If you output the exchange id and its based on the computer name it can be long  and thus cut important parts such as the destination.Allow it to be wider and add option to configure the length or let it be variable.breadcrumLength = 65. Setting it to 0 will let it be flexible. Maybe bump the 65 to 80 to let it be bigger from the start.", "id": "1235"}, "1236": {"ground_truth": "0", "bug_report": "file consumer - support expression for setting the folder/file to consume\nWould be nice to support the file language to set dynamic patterns for the starting folder/file to consume.See nabble:http://www.nabble.com/Mega-mega-%28VFS%29-file-handler-to21346374s22882.html", "id": "1236"}, "1247": {"ground_truth": "0", "bug_report": "SFTP : Polling - Cannot list directory Error\nhttp://www.nabble.com/SFTP-%3A-Polling---Cannot-list-directory-to21413159s22882.html", "id": "1247"}, "1254": {"ground_truth": "0", "bug_report": "camel-cxf: URI option for serviceClass does not support lookup in registry\nHaving an endpoint such as: String cxfEndpoint = 'cxf://http://localhost:8080/part-five/webservices/incident' + '?serviceClass=org.apache.camel.example.reportincident.ReportIncidentEndpoint' + '&amp;wsdlURL=report_incident.wsdl';The serviceClass option currently only supports defining a FQN for the class. I think we need to support Registry lookup as well using the # notation. So you can do: String cxfEndpoint = 'cxf://http://localhost:8080/part-five/webservices/incident' + '?serviceClass=#reportService' + '&amp;wsdlURL=report_incident.wsdl';And then have it defined in Spring XML:&lt;bean id='reportService' class='...'&gt;The # notation is already supported if you use the cxf Spring XML configuration. We need this in the Java DSL as well.Sorry if it already exists. But I got a hint from a Camel end user that it didn't", "id": "1254"}, "1270": {"ground_truth": "0", "bug_report": "Starting Camel using Main from camel:run or Main.class - countdown latch is hanging\nThe countdown latch in MainSupport is not completed when Main is stopping.Then we have a hanging thread. Can bee seen using ctrl + /", "id": "1270"}, "1271": {"ground_truth": "0", "bug_report": "Can only interact with servicemix-http if logging is at DEBUG\nGiven the following camel DSL:from('activemq:queue.testJms.in')  .to('jbi:service:urn:oms:testHttp?mep=in-out')  .to('activemq:queue.testJms.out'); and the following xbean.xml for the smx (3.3) SU:&lt;http:endpoint  service='oms:testHttp'  endpoint='testHttp'  role='provider'  locationURI='http://localhost:8080/testP1'&gt; &lt;/http:endpoint&gt; then Camel operates correctly (or at least as desired) only if DEBUG logging is enabled in the org.apache.servicemix.http package. This seems to be because a DOMSource is returned (which Camel can convert). If the log level is reduced (say to WARN) then a StreamSource object is returned instead which Camel appears unable to convert. This results in stack traces such as:ERROR - DeadLetterChannel - Failed delivery for exchangeId: ID-davisond-laptop/53380-1232099798317/0-0. On delivery attempt: 0 caught: org.apache.camel.RuntimeCamelException: javax.xml.transform.TransformerException: java.io.IOException: Attempted read on closed stream. org.apache.camel.RuntimeCamelException: javax.xml.transform.TransformerException: java.io.IOException: Attempted read on closed stream.  at org.apache.camel.util.ObjectHelper.invokeMethod(ObjectHelper.java:441)  at org.apache.camel.impl.converter.InstanceMethodTypeConverter.convertTo(InstanceMethodTypeCo+nverter.java:57)", "id": "1271"}, "1274": {"ground_truth": "0", "bug_report": "Jetty HTTP SelectChannelConnector is not closed when CamelContext is stopped\nWhen the camel-jetty component is shut down  it leaves Jetty SelectChannelConnector instances active.", "id": "1274"}, "1277": {"ground_truth": "0", "bug_report": "Apache camel example reportincident dependency removed from pom.xml\nHi Someone has removed the following dependency from the camel pom.xml file : &lt;dependency&gt; &lt;groupId&gt;org.apache.camel&lt;/groupId&gt; &lt;artifactId&gt;camel-example-reportincident&lt;/artifactId&gt; &lt;version&gt;${project.version}&lt;/version&gt; &lt;/dependency&gt;", "id": "1277"}, "1283": {"ground_truth": "0", "bug_report": "SQL component doesn't handle wrong number of parameters\nNPE thrown when null body sent to to SQL endpoint. When to many parameters are set then exception is thrown but nothing wrong happens when to less parameters are set.It should be possible to set null as a body as there might be parameterless statement to execute. There should be consistent Exception thrown when wrong number of parameters is set.", "id": "1283"}, "1296": {"ground_truth": "0", "bug_report": "camel-ftp : uri set on endpoint has stripped all parameters  that is wrong as they should be there as well\nSee nabblehttp://www.nabble.com/Camel-Remote-File-Producer---Recipient-List-Password-Issue-td21678952s22882.htmlThe bug is introduced with CAMEL-941", "id": "1296"}, "1297": {"ground_truth": "0", "bug_report": "Seda component should configure its executor\nCurrently SEDA endpoint processes only using 1 thread so it is impossible to easily configure few concurrent processings on 1 seda endpoint. I believe SEDA endpoint could be configured with some executor and/or thread number that we would like to use to process given flows.", "id": "1297"}, "1325": {"ground_truth": "1", "bug_report": "Two more NullPointerExceptions when context classloader is null\nWhen I applied the CAMEL-1301 fix (thanks Claus) I hit two more NullPointerExceptions caused by code that assumes that the context classloader will never be null.Here's the relevant part of one stack trace:java.lang.NullPointerException at org.apache.camel.impl.converter.AnnotationTypeConverterLoader.findPackages(AnnotationTypeConverterLoader.java:97) at org.apache.camel.impl.converter.AnnotationTypeConverterLoader.findPackageNames(AnnotationTypeConverterLoader.java:91)And the other:java.lang.NullPointerException at org.apache.camel.util.ResolverUtil.getResources(ResolverUtil.java:402) at org.apache.camel.util.ResolverUtil.find(ResolverUtil.java:313) at org.apache.camel.util.ResolverUtil.find(ResolverUtil.java:290)A patch is attached.", "id": "1325"}, "1337": {"ground_truth": "0", "bug_report": "The xpath expression evaluations should rest the cached stream\n&lt;route&gt; &lt;from uri='jetty:http://localhost:8084/services/simpleService'/&gt; &lt;choice&gt; &lt;when&gt; &lt;xpath&gt;/sim:GetCapabilitiesRequest&lt;/xpath&gt; &lt;/when&gt; &lt;when&gt; &lt;xpath&gt;/sim:GetMetadataRequest&lt;/xpath&gt; &lt;/when&gt; &lt;/choice&gt;&lt;/route&gt;A messages that matches the first when statement (I tested with both the route above and a version where I swapped the two xpath statements to make sure it was not dependent on the actual message) throws no errors and a call that matches the second when statement throws the Premature end of file error.", "id": "1337"}, "1357": {"ground_truth": "0", "bug_report": "Add regexReplaceAll to builder support\n... so we can do things likefrom('direct:start').setBody(regexReplaceAll(body()  'Foo'  'Bar'))...which essentially is equivalent to sed 's/Foo/Bar/g' on the body.", "id": "1357"}, "1366": {"ground_truth": "0", "bug_report": "EndpointMessageListener should respect ExchangePattern\nIn all current releases  org.apache.camel.component.jms.EndpointMessageListener.onMessage() has the following logic (line 90 in 1.6.0 code):// send the replyif (rce == null &amp;&amp; body != null &amp;&amp; !disableReplyTo) { sendReply(replyDestination  message  exchange  body);}This logic should also respect ExchangePattern of the exchange  so I propose a change to:// send the replyif (rce == null &amp;&amp; body != null &amp;&amp; exchange.isOutCapable()) { sendReply(replyDestination  message  exchange  body);}This change allows a processing pattern where the route may change the ExchangePattern using methods like RouteBuilder.inOnly() to switch the MEP at will so that the reply is send at a later time (true asynchronous exchange). This processing pattern is particularly useful for integrating long running services. For example // Java DSLfrom('activemq:my_queue?exchangePattern=InOnly').to('predict_weather://?reply_later=true');// orfrom('activemq:my_queue2').inOnly().to('predict_weather://?reply_later=true');The flaw of the current logic makes it impossible to do true asynchronous exchange  because 1) it does not respect the ExchangePattern; 2) if property 'disableReplyTo' is used  the 'org.apache.camel.jms.replyDestination' property will not be set (see method createExchange in the same file)  thus downstream cannot find the reply destination.The proposed change can also deprecate the disableReplyTo property and put the MEP concept into good use.", "id": "1366"}, "1378": {"ground_truth": "0", "bug_report": "@Header should have a value default so you do not have to set the name attribute\nDoing this bean binding: public List&lt;String&gt; route(@XPath('/customer/id') String customerId  @Header('Location') String location  Document body) {The @Header does not have a default value  so you have to do this to get it to work: public List&lt;String&gt; route(@XPath('/customer/id') String customerId  @Header(name = 'Location') String location  Document body) {So we should support you do not have to set the name attribute.", "id": "1378"}, "1384": {"ground_truth": "1", "bug_report": "ExchangeHelper should respect ExchangePattern.InOptionalOut\nThe utility method org.apache.camel.util.ExchangeHelper.copyResults() is use by many core classes. However  this method does not properly support MEP InOptionalOut.Assuming in an InOptionalOut exchange  having no out message means just that &#8211; no out message should be sent  then the following lines in this method// Message out = source.getOut(false); if (out != null) { result.getOut(true).copyFrom(out); } else { // no results so lets copy the last inputshould be changed to:// Message out = source.getOut(false); if (out != null) { result.getOut(true).copyFrom(out); } else if (result.getPattern() == ExchangePattern.InOptionalOut) { result.setOut(null); } else { // no results so lets copy the last input", "id": "1384"}, "1401": {"ground_truth": "0", "bug_report": "JaxbDataFormat is not thread-safe\nJaxbDataFormat reuses the Marshaller/Unmarshaller instances.However  according to the https://jaxb.dev.java.net/faq/index.html#threadSafety  Marshaller/Unmarshaller instances are NOT thread safe  so you can't use them from separate threads at the same time.Due to this we are getting exceptions from the JAXB implementation (like ClassCastException or 'org.xml.sax.SAXException: FWK005 parse may not be called while parsing.'). Everything works nice with our custom JaxbDataFormat that creates new Unmarshaller/Marshaller instance on every request.Also  lazy-creating instances (like JAXBContext) in getter methods is not thread-safe as well (because explicit synchronization is required).", "id": "1401"}, "1407": {"ground_truth": "0", "bug_report": "Camel-quartz - improve setting of cron expression to be more cron like\nSee nabble:http://www.nabble.com/Re%3A-Camel-quartz-td22247508.html", "id": "1407"}, "1408": {"ground_truth": "0", "bug_report": "File component - better support for absolute path\nSee nabble:http://www.nabble.com/File%3A-using-absolute-file-paths-with-moveExpressions-td22253199.html", "id": "1408"}, "1411": {"ground_truth": "0", "bug_report": "CamelContext - Add ClassResolver to be used when you need to load a class instead of ObjectHelper.loadClass to work in OSGi environments\nAdd the skeleton and let Willem add the stuff in camel-osgi", "id": "1411"}, "1412": {"ground_truth": "0", "bug_report": "Can not load the QueueBrowserStrategy in OSGI environment\nHere is the mail thread which discusses about it.http://www.nabble.com/Classloading-and-OSGI-to22303475.html#a22303475", "id": "1412"}, "1414": {"ground_truth": "0", "bug_report": "JMSMessage vanishes attachments\nWhen using this kind of route&lt;from uri='activemq:queue:test'/&gt;&lt;camel:process ref='mailProcessor' /&gt;&lt;to uri='smtp://localhost:25?to=user@localhost' /&gt;and trying to enrich the message in the mailProcessor withexchange.getIn().addAttachment('attachement.txt'  new DataHandler('Hello world'  'text/plain'));The received mail doesn't contains any attachment.If the input 'from' is a 'direct' instead of activemq  it works fine.Inspecting source code  MessageSupport.copyFrom(Message that) doesgetAttachments().putAll(that.getAttachments());but the child class JmsMessage doesn't.", "id": "1414"}, "1417": {"ground_truth": "0", "bug_report": "StreamCache causes to many type converters not possible\nSince StreamCache is default turned on it cause to many convters attempt that fails in MessageSupport.No type converter available to convert from type: java.lang.Integer to the required type: org.apache.camel.StreamCache with value 1It hurts performance to much. See nabble:http://www.nabble.com/Performance-and-MessageSupport.getBody-%281.6.0%29-td22291841s22882.html", "id": "1417"}, "1424": {"ground_truth": "0", "bug_report": "Bean component - improve method selection logic for overloaded methods\nIf end users have overloaded methods with different types as method parameter Camel should try to find the method with exact type match from the payload.See nabble:http://www.nabble.com/Is-it-possible-to-overload-a-bean-method--td22338316s22882.html", "id": "1424"}, "1442": {"ground_truth": "0", "bug_report": "unmarshaling of data always send the last occurence of the stream\nThe unmarshaling method of BindyDataFormat (CSV or Key Value Pair) does not create a new model object for each new line of the stream readed", "id": "1442"}, "1443": {"ground_truth": "1", "bug_report": "Unable to resolve scripting languages in OSGi environment\nThe OsgiLanguageResolver.java created since CAMEL-1221 does not resolve scripting languages by using the default resolver declared in camel-script. The DefaultLanguageResolver  however in the non-osgi context  handles it properly.This leads to NullPointerException while launching a route in an OSGi container using a scripting language  e.g. javascript.Exception in thread 'SpringOsgiExtenderThread-2' java.lang.NullPointerException at org.apache.camel.model.language.ExpressionType.createPredicate(ExpressionType.java:145) at org.apache.camel.model.ExpressionNode.createFilterProcessor(ExpressionNode.java:95) at org.apache.camel.model.WhenType.createProcessor(WhenType.java:57) at org.apache.camel.model.ChoiceType.createProcessor(ChoiceType.java:73)...", "id": "1443"}, "1451": {"ground_truth": "0", "bug_report": "IdempotentConsumer - should only add to repository after processing  so we know the processing was a success\nJust as the file component does with its build in support for idempotent. It should add to it last  eg after processing.See nabble:http://www.nabble.com/Problem-with-IdempotentConsumer-td22467720s22882.html", "id": "1451"}, "1461": {"ground_truth": "0", "bug_report": "A request route with a topic node incurs a 20 second wait and refers to the wrong MEP.\nIf a route contains a node that publishes to a topic  the route is incorrectly suspended for a default 20 seconds at the topic node. Further  JmsProducer.java checks the MEP of the original request Exchange and not the endpoint of the topic.For example  say I have a route built like this:from('activemq:queue:request'). to('generate_news'). to('activemq:topic:news'). to('do_something_else');The original request is expecting a reply. However  after the 'news' is pumped into the news topic  there is a default 20 second wait (requestTimeout). This wait always results in the exception: 'The OUT message was not received within: 20000 millis on the exchange...' After reading the JmsProducer code  I changed the route to the following:from('activemq:queue:request'). to('generate_news'). to('activemq:topic:news?exchangePattern=InOnly'). to('do_something_else');This reveals the root of the bug  which is in the first few lines of method org.apache.camel.component.jms.JmsProducer.process(Exchange):// public void process(final Exchange exchange) { final org.apache.camel.Message in = exchange.getIn(); if (exchange.getPattern().isOutCapable()) {The above if statement checks the MEP of the original request's Exchange and not the new endpoint of the news topic. This makes the above '?exchangePattern=InOnly' configuration useless  because the original request MEP is InOut. The result is that after that 20 second time-out  the temporary queue for the original request has expired  so the whole request failed. Note that the next node 'do_something_else' is never reached due to the time-out exception.", "id": "1461"}, "1463": {"ground_truth": "0", "bug_report": "JMX instrumentation - will add DeadLetterChannel even if you have defined to use NoErrorHandler\nSee nabble:http://www.nabble.com/StreamCaching-in-Camel-1.6-td22305654s22882.htmlI will add an unit test that demonstrates this:org.apache.camel.processor.ChoiceNoErrorHandlerTestThe route should at all time not contain any error handler at all  regardless wether JMX is enabled or not.", "id": "1463"}, "1465": {"ground_truth": "0", "bug_report": "Added a Spring configuration in the camel-example-reportincident\nWe should provide the Spring configuration which equals to the Java DSL route rule in camel-example-reportincident  as some user prefer to use Spring.", "id": "1465"}, "1480": {"ground_truth": "0", "bug_report": "JMS - Sending a message with jmsTemplate102=true fails\nSee nabble:http://www.nabble.com/Apache-Camel-2.0-M1-java.lang.ClassCastException%3A-org.apache.camel.component.jms.JmsConfiguration%24CamelJmsTeemplate102-td22665483s22882.htmlThe ClassCastException is because of the old JMS API is used.Camel should test whether the template is 1.1 or 1.0.2 and cast to correct type.", "id": "1480"}, "1492": {"ground_truth": "0", "bug_report": "Allow parementer append for jms bindings with no endpoint\nSee test failures in https://issues.apache.org/activemq/browse/AMQ-2182", "id": "1492"}, "1497": {"ground_truth": "0", "bug_report": "JmsPollingConsumer - receive does not work\nThe timeout values to set on Spring JmsTemplate is wrong. We should uses the provided constants on JmsTemplate for this /** * Timeout value indicating that a receive operation should * check if a message is immediately available without blocking. */ public static final long RECEIVE_TIMEOUT_NO_WAIT = -1; /** * Timeout value indicating a blocking receive without timeout. */ public static final long RECEIVE_TIMEOUT_INDEFINITE_WAIT = 0;Is the correct values. Looks like the values was reverted in the camel-jms code", "id": "1497"}, "1502": {"ground_truth": "0", "bug_report": "Bean component should propagate headers\nWhen doing a route an you invoke a bean that sets a response on the OUT body it does not propagate the headers from the IN body.", "id": "1502"}, "1503": {"ground_truth": "0", "bug_report": "javax.xml.transform.Source and StreamSource wrapped should be easier to route with JMS\nSee SM-1826What end users need to do is to use .convertBodyTo(String.class) before sending to a JMS queue with Camel when the payload is XML based  eg the javax.xml.transform.Source class that can be wrapped in a StreamCache as well.It should be able to route out of the box by converting to byte[] in the JMS producer", "id": "1503"}, "1504": {"ground_truth": "1", "bug_report": "HTTP_URI and HTTP_PATH message headers not concatenated when sending messages to http endpoint\nWhen a message is sent to an http endpoint  the path specified in the HTTP_PATH header is ignored.In the HttpProducer.createMethod() of the camel-http component  the URI is taken from the HTTP_URI header or the endpoint  but the HTTP_PATH header is not concatenated. See also the discussion on the mailing list: http://www.nabble.com/Setting-a-path-in-message-header-with-Camel-http-2.0M1-td22781504.html", "id": "1504"}, "1505": {"ground_truth": "0", "bug_report": "deploy the CamelContext with velocity endpoint into the Servicemix 4.0 will get the  NoClassDefFoundError\n&#91;trace&#93; ******************************************************************* &#91;debug&#93; Starting Apache Velocity v1.5 (compiled: 2007-02-22 08:52:29) &#91;trace&#93; RuntimeInstance initializing. &#91;debug&#93; Default Properties File: org/apache/velocity/runtime/defaults/velocity.properties &#91;debug&#93; Trying to use logger class org.apache.velocity.runtime.log.Log4JLogChute &#91;debug&#93; Couldn't find class org.apache.velocity.runtime.log.Log4JLogChute or necessary supporting classes in classpath.org/apache/log4j/Layoutjava.lang.NoClassDefFoundError: org/apache/log4j/Layout at java.lang.Class.forName0(Native Method) at java.lang.Class.forName(Class.java:164) at org.apache.velocity.util.ClassUtils.getClass(ClassUtils.java:76) at org.apache.velocity.util.ClassUtils.getNewInstance(ClassUtils.java:95) at org.apache.velocity.runtime.log.LogManager.createLogChute(LogManager.java:147)We can get around this issue by replacing the org.apache.velocity.runtime.log.Log4JLogChute withorg.apache.velocity.runtime.log.Log4JLogChute  and also need to update the Servicemix Velocity bundle to 1.6.", "id": "1505"}, "1506": {"ground_truth": "0", "bug_report": "Recursively scan multipart nodes of an email for attachments - not just top level nodes\nThe current code will only scan the top level of a multipart message. This misses any attachments that are under another node.All unit tests still run for me after applying this patch.", "id": "1506"}, "1507": {"ground_truth": "0", "bug_report": "Allow sending multipart/alternative MIME messages with both a plain-text and text/html body  and allow sending images inline\nTo send a multipart/alternative email you have to follow a pretty specific course.This adds a property (which is poorly named in this patch) to the MailConfiguration that names the header that contains the plaintext version of the email  and adds a property where you can embed images inline. If an attachment has a filename starting with 'cid:' then this will add the 'Content-ID' header to that multipart body - which will allow the email client to put the image in the appropriate place when it is viewed. (i.e. the html email has something like &lt;image src='cid:0001' /&gt; and the attachment is named 'cid:0001' - when it sees an inline attachment with 'Content-ID: 0001' it will put it in the right spot)", "id": "1507"}, "1512": {"ground_truth": "0", "bug_report": "http component - allow failed responses to be returned on the exchange instead of HttpOperationsFailedException\nIt can be a bit cumbersome to eg handled 404 error codes if it gets thrown back as an exception. Sometimes you want to handle any response from the http producer in the exchange itself.", "id": "1512"}, "1530": {"ground_truth": "0", "bug_report": "Upgrade camel-http to use httpclient 4.0\nUpgrading httpclient from 3.1 to 4.0 requires changes in the camel-http code as the API has change quite a lot.", "id": "1530"}, "1543": {"ground_truth": "1", "bug_report": "Apply removeHeader also to the underying JMS message delegate\nIn case of a JMS message  header information is redundantly stored in org.apache.camel.component.jms.JmsMessage (here Camel-Message) and in its javax.jms.Message jmsMessage delegate (here JMS-Message). Currently you cannot remove effectively any header from the Camel-Message instance as in the next processing step those removed headers resurrect from the underlying JMS-Message.Please provide any means to remove or or at least mask out those headers from the underlying JMS-Message.", "id": "1543"}, "1548": {"ground_truth": "0", "bug_report": "ErrorHandler to be wrapped at every node incl children\nErrorHandler to be wrapped at every node incl children", "id": "1548"}, "1568": {"ground_truth": "0", "bug_report": "Converting from stream/reader to string changes line breaks other than '/n'\nThe IOConverter#toString(Reader/Stream) copies the input data line by line. A line is considered to be terminated by any one of a line feed ('/n')  a carriage return ('/r')  or a carriage return followed immediately by a linefeed. Unfortunately  the lines are always concatenated with '/n'  so that HL7 messages (which use '/r') become unusable after conversion.Also see http://www.nabble.com/HL7-messages-become-unusable-after-convertBodyTo%28String.class%29-td23219748.html", "id": "1568"}, "1581": {"ground_truth": "0", "bug_report": "ClassCastException when using camel-cxf and camel-jms in the InOut same flow\nAs per thread on FUSE forum http://fusesource.com/forums/thread.jspa?threadID=834&amp;tstart=0:[[I have a camel route that listens on a CXFEndpoint (for MESSAGE data as DOMSource) and routes the message to a JMS queue. Something like:&lt;route&gt;&lt;from uri='cxf:bean:passportRequestWS?dataFormat=MESSAGE'/&gt;&lt;to uri='soapProcessor'/&gt;&lt;convertBodyTo type='java.lang.String'/&gt;&lt;to uri='activemq:queue:blah'/&gt;&lt;convertBodyTo type='javax.xml.transform.dom.DOMSource'/&gt;&lt;/route&gt;My understanding is that the JMS producer will realize that the exchange is InOut  create a temporary queue for the response  and then wait for the response to arrive on the temporary queue before sending the original CXFExchange on along the pipeline. Indeed  this is what I observe! However  I?ve discovered a little nasty.When the JMSProducer gets in the incoming message  it sets the Out message of the original CXFExchange to a JmsMessage. Then  the pipeline processor calls exchange.getOut on the CXFExchange and BANG! we get a class-cast exception. Turns out that the CXFExchange.getOut() method always casts the message to a CxfMessage. Ouch. Surely this means then that camel-cxf can?t talk to any producer that does not produce a CXFMessage - very limiting.]]The response on the form from davsclaus was:[[Well spotted.If just the damn Exchange was final so we had one implementation of it. But I guess we have to thank Java generics for that so the first API had generics for per component.Could you create a ticket in JIRA for this?As a workaround you can add a processor where you have full access to the Exchange so you can set a CxfMessage as the payload.]]", "id": "1581"}, "1585": {"ground_truth": "0", "bug_report": "SFTP GenericFileProducer.createFileName produces OS normalized file name  that doesn't work with SFTP\nThe use of File.separator and FileUtil.normalizePath in GenericFileProducer.createFileName produce a OS normalized file name  that doesn't work with SFTPe.g. outboundout_20090501_091940_ACC.txt which will not work produce a file called outboundout_20090501_091940_ACC.txtThe proper name should be outbound/out_20090501_091940_ACC.txt", "id": "1585"}, "1586": {"ground_truth": "0", "bug_report": "camel-cxf producer loses the content-type\ncamel-cxf doesn't put the Protocol-Header into the camel message header  so we lost the content-type message.Here is the mail thread for the discussion.http://www.nabble.com/camel-cxf-content-type-response-header-tt23370337.html", "id": "1586"}, "1589": {"ground_truth": "0", "bug_report": "Clean up  the CamelTransportConstants.CONTENT_TYPE\nHere is the mail thread about it.http://www.nabble.com/Re%3A-svn-commit%3A-r772054---in--camel-trunk-components-camel-cxf-src%3A--main-java-org-apache-camel-component-cxf-CxfHeaderFilterStrategy.java--test-java-org-apache-camel-component-cxf-CxfRawMessageRouterTest.java-tt23412367.html", "id": "1589"}, "1614": {"ground_truth": "0", "bug_report": "Warning 'Disabling JMSReplyTo as this Exchange is not OUT capable' on false positives in JBossAS5\nsee: http://www.nabble.com/Disabling-JMSReplyTo-as-this-Exchange-is-not-OUT-capable-td23524909s22882.html", "id": "1614"}, "1650": {"ground_truth": "0", "bug_report": "Race condition in IdempotentConsumer\nA possible possible race condition exists in the IdempotentConsumer implementation:The code first checks in the MessageIdRepository if the message was already processed. If not then it processes the message andafterwards adds the id to the repository. (See also http://issues.apache.org/activemq/browse/CAMEL-1451). There is no lockingbetween the check with 'contains' and the insert with 'add'. So if multiple threads/instances try this in parallel for the same id  thenit might happen that more than one finds the id not yet contained in the repository and the same message is processed multipletimes.I enclose an extended version of IdempotentConsumerTest which illustrates the problem.It is important to note that even if the test demonstrates the issue with an MemoryIdempotentRepository a solution should alsoaddress the case of a database based respository in a clustered environment. So this might imply that some locking mechanism on thedatabase is required.", "id": "1650"}, "1681": {"ground_truth": "0", "bug_report": "Clean up the CamelNamespaceHandler\nSince we use the JAXB to parse the Routes definitions so we can get ride of the unnecessary bean parser registry code.", "id": "1681"}, "1687": {"ground_truth": "0", "bug_report": "CAMEL-HTTP should copy system proxy settings\nBy standard  Java uses some properties for configuring proxies. Details are on http://java.sun.com/javase/6/docs/technotes/guides/net/proxies.html but in short the properties http.proxyHost and http.proxyPort are used for setting a global HTTP proxy.CAMEL-HTTP doesn't reuse this. I guess many would expect it to.", "id": "1687"}, "1688": {"ground_truth": "0", "bug_report": "Enrich DSL - Add fluent builder for using default aggregation strategy\nThe fluent builder is missing the enrich(uri) method that uses the default agg strategy. That is to copy the result from the resource as input.This is also very useable.In Spring DSL this is already possible as you do not have to provide the strategyRef attribute.", "id": "1688"}, "1689": {"ground_truth": "0", "bug_report": "JMS-Headers are ignored in Producer\nCamel jms producer ignores some JMSHeaders. For example the header JMSPriority is ignored - due to the comment in the code  because it is set by the producer. But it should not only be set by the produer due to the received message  it should also be possible to set a priority using the JMSPriority header on the consumer. (See also the option preserveMessageQos on the jms endpoint - if every JMSHeader is ignored by the producer it is impossible to set Qos-Properties on the message.)The reason for the bug is in org.apache.camel.component.jms.JmsBinding#appendJmsProperty. The follwoing JMS message headers are useful for sending messages and therefore should be copied to the jms message: JMSDestination JMSDeliveryMode JMSExpiration JMSPriority JMSMessageID JMSTimestamp", "id": "1689"}, "1697": {"ground_truth": "0", "bug_report": "Java DSL for multicast  split  aggregate does not use block explicit\nWhen using one of the EIP that uses a nested route for sub processing  typically EIPs that does some sort of aggregation such as multicast (for aggregating a response) split aggregateAnd maybe a few othersThey should use pushBlock so the end() DSL to indicate end of sub route works correctly in Java DSL.", "id": "1697"}, "1706": {"ground_truth": "1", "bug_report": "DefaultErrorHandler - add support for redelivery\nThe new default error handler does currently not support redelivery. The error handling codebase has stabilized and we should allow this error handler to leverage the redelivery features we have in DeadLetterChannel.", "id": "1706"}, "1716": {"ground_truth": "0", "bug_report": "Simple language support for AND / OR to concat multiple expressions fails if string constants are enclosed in single quotation marks\nThe current implementation for CAMEL-1637 fails if the string constants in the two expressions are enclosed in single quotation marks as given in the following example ${in.header.foo} == 'abc' and ${in.header.bar} == '123'This is due to an issue with the GROUP_PATTERN regular expression in SimpleLanguageSupport.java. The matching pattern in between the single quotes is greedy and thus does not match correctly.", "id": "1716"}, "1717": {"ground_truth": "0", "bug_report": "Remove cycle between model and util\nCurrently util and model reference each other what makes them difficult to understand separately. When you look closely at the references you see that model only needs one class ProcessorDefinitionHelper. As this class only needs other classes from model I think it should belong to model. As this class is only needed from model I think it does not need to be public. So it is also clear that the class does not belong to the camel model classes users should access.", "id": "1717"}, "1719": {"ground_truth": "0", "bug_report": "bean component should thrown NoTypeConverterException when bean parameter binding cannot convert to method signature type\nSee nabble:http://www.nabble.com/Error-not-raised-by-Camel-if-the-%40Header-type-define-in-a-bean-is-not--correct-td24051086s22882.html", "id": "1719"}, "1725": {"ground_truth": "0", "bug_report": "Better logging at startup if Camel uses camel-osgi or not\nWe should at least once at INFO level log whether OSGi was detected or not.And in the camel-osgi we should have more DEBUG / TRACE logging as well.", "id": "1725"}, "1735": {"ground_truth": "0", "bug_report": "camel-example-etl - bug in sample about type converter\ncamel-example-etl - bug in sample about type converter", "id": "1735"}, "1736": {"ground_truth": "0", "bug_report": "camel-cxf defaultHeaderFilterStrategy doesn't filter the Camel releates headers\nHere is the mailing thread&#91;1&#93; which discuss this issue.&#91;1&#93; http://www.nabble.com/-camel-cxf--Stripping-headers-td24143323.html", "id": "1736"}, "1744": {"ground_truth": "0", "bug_report": "ScheduledPollConsumer - Should not throw polled exception on stop\nSee CAMEL-501And nabble:http://www.nabble.com/Bug-in-ScheduledPollingConsumer--td24151070s22882.htmlIf an exception occured during a poll Camel will handle it by a ExceptionHandler you can set on the DefaultConsumer. The default impl will log it at WARN level.But the ScheduledPollingConsumer will remember this and when it does a doStop in case of shutdown or the likes it will throw the first exception occurred during a poll.This will indicate in an ERROR when doing a shtudown and its not really related as the poll error could have happened like 3 months ago.We should not do this. But only handle the poll exception when it occurred. End users can configure their own ExceptionHandler if they want to do something differently than logging.", "id": "1744"}, "1745": {"ground_truth": "0", "bug_report": "Validator component to use SaxSource internally\nValidatingProcessor uses DOMSource internally while SaxSource could perform better.", "id": "1745"}, "1752": {"ground_truth": "0", "bug_report": "SpringCamelContext will get into endless loop of calling start method if the route service calling the ApplicationContext refresh method in it's initial method\nHere is the mail thread which discusses this issue.http://www.nabble.com/StackOverFlow-error-with-Camel-1.6.1-tp24172060p24172060.html", "id": "1752"}, "1755": {"ground_truth": "0", "bug_report": "Failover load balancer - should prepare exchange before failover\nWhen the failover load balancer does a fail over it only clears the exception.When you use dead letter channel or default error handler with redeliveries enabled they will have such information.This should also be cleared before failover. So we have a clean and fresh start.", "id": "1755"}, "1760": {"ground_truth": "0", "bug_report": "Unable to read post params from request\nIf consuming messsages from jetty endpoint there is no way to read post parameters from HttpServletRequest. In example getting HttpServletRequest from body :HttpServletRequest req = exchange.getIn().getBody(HttpServletRequest.class);req.getParameterMap() returns allways empty mapThe problem is that jetty Request.extractParameters() method is trying to read post parameters from Request.getInputStream(). But unfortunately someone strips the input stream before and req.getInputStream() returns allways 0 bytesThe workaround for me is to extend DefaultHttpBinding as described in: http://camel.apache.org/jetty.htmlMyHttpBinding .javapublic class MyHttpBinding extends DefaultHttpBinding { public void readRequest(HttpServletRequest request  HttpMessage message) { request.getParameterMap(); super.readRequest(request message); }}calling request.getParameterMap() will cache parameters inside jetty Request and it's possible to query params later  without having inputStream", "id": "1760"}, "1764": {"ground_truth": "0", "bug_report": "Camel builds should not use platform specific encoding\nThe builds on my Mac use the platform specific encoding thus leading to the following warngin:[WARNING] Using platform encoding (MacRoman actually) to copy filtered resources  i.e. build is platform dependent!We should use the &lt;project.build.sourceEncoding&gt; property to specify a project specific encoding (UTF-8).", "id": "1764"}, "1765": {"ground_truth": "1", "bug_report": "License for One-JAR classes not included in camel-example-spring one-jar artifact. Also apache legal files missing\nThe license for the com/simontuffs/onejar files is at http://one-jar.sourceforge.net/index.php?page=documents&amp;file=license.When I build camel-example-spring neither this license nor the apache license nor apache notice file is in the one-jar.jar artifact.I'd suggest disabling the one-jar plugin until someone can figure out how to include these files.", "id": "1765"}, "1766": {"ground_truth": "0", "bug_report": "Upgrade maven build to use apache 6 pom and related features.\nGeronimo recently has had some problems due to unversioned snapshots of camel. Since nexus automatically cleans up old snapshots it's preferred to use unique timestamped snapshots when publishing to apache nexus.There are some other nice standard featrues of the apache 6 pom and related work such as automatic source archive creation. I'm attaching a patch that updates to apache 6 pom and cleans up a few other things.Since the build fails for me before the changes I can't be very sure that these changes break nothing.", "id": "1766"}, "1778": {"ground_truth": "0", "bug_report": "camel-file - consumer  starting directory should validate that its configured properly eg not containing dynamic expressions etc\nYou cannot use ${ } in the start path of file/ftp consumers. Use the fileName option for that. We should validate and thrown an exception about this so end users notices this immediately and can fix it.", "id": "1778"}, "1783": {"ground_truth": "0", "bug_report": "camel-jms - allow a header like JMSDestination to override the destination to send to\nWe cannot use JMSDestination as it would not work when you do a route from(jms A) to (jms B) as it will go into round about as when received from jms A the header will contain JMSDestination = queue:A and thus Camel will send it back to itself.So we should a different nameCamelJmsDestination", "id": "1783"}, "1786": {"ground_truth": "0", "bug_report": "camel-irc parsing of channel name and parameters is incorrect\nIf you try and pass some parameters to camel-irc it turns out that camel joins a different IRC channel than expected  for example a URI like:irc://camel-con@irc.codehaus.org:6667/#camel-test?nickname=camel-concauses camel to join #camel-test?nickname=camel-con and not #camel-test with a nickname of camel-con. Will attach a patch that addresses this and updates the unit test.", "id": "1786"}, "1793": {"ground_truth": "1", "bug_report": "CustomerServicesWsAddressingTest hangs sometimes\nSometimes I get the following error&#91;23:59:55&#93;: Running org.apache.camel.itest.customerrelations.CustomerServicesWsAddressingTest&#91;00:00:06&#93;: Exception in thread 'DefaultMessageListenerContainer-4' java.lang.NullPointerException&#91;00:00:06&#93;: at java.lang.String.indexOf(String.java:1564)&#91;00:00:06&#93;: at java.lang.String.indexOf(String.java:1546)&#91;00:00:06&#93;: at org.springframework.jms.support.JmsUtils.buildExceptionMessage(JmsUtils.java:255)&#91;00:00:06&#93;: at org.springframework.jms.listener.DefaultMessageListenerContainer.handleListenerSetupFailure(DefaultMessageListenerContainer.java:745)&#91;00:00:06&#93;: at org.springframework.jms.listener.DefaultMessageListenerContainer$AsyncMessageListenerInvoker.run(DefaultMessageListenerContainer.java:897)&#91;00:00:06&#93;: at java.lang.Thread.run(Thread.java:595)... which then causes a hang. Its a known issue in spring-jms 2.5.6 (http://jira.springframework.org/browse/SPR-5470). Happens when we try to do a shutdown of the context. Reverting back to 2.5.5 fixes this issue  but we probably don't want to do that", "id": "1793"}, "1795": {"ground_truth": "0", "bug_report": "camel-jms - wrong defaults causes message listener to use new thread when receiving a message\nJmsConfiguratiuon have a bad defaultmaxMessagesPerTask=1It should be -1 as we do not want to strict the DefaultMessageListenerContainer to only handle 1 message per thread.", "id": "1795"}, "1800": {"ground_truth": "0", "bug_report": "EventDrivenConsumer - Wait starting them until all other processors / routes have been started\nWe should wait starting the input to the CamelContext until all child processors and other services have been started.Then at the end we should open the gates by starting all the input consumers.That should also help unit testing on slower boxes where these consumers might start a bit early and the remaining work starting the other processors is slow and thus the consumer is too fast.", "id": "1800"}, "1801": {"ground_truth": "0", "bug_report": "FTP component - add option to specify retry login attempts\nWhen ftp component attempts login it does that once. We should add option to configure how many attempts should be done before giving up.For instance try 3 times with 1 sec apart.", "id": "1801"}, "1808": {"ground_truth": "0", "bug_report": "file component - markerFile read lock - do not use nio FileLock\nIn some situations in OSGi platforms the file lock can be kept and then you need to shutdown the JVM to clear the JDK FileLock.So better to not use them as we can just create the file and Camel will still back off reading the file as it can see the lock file exists.", "id": "1808"}, "1822": {"ground_truth": "0", "bug_report": "Cleanup unnecessary copy related methods in Exchange\nThere are currently 4 apis related to copying exchanges that overlap for the most part  are confusing and unnecessary. The consensus is to replace: Exchange newInstance(); Exchange copy(); Exchange newCopy(boolean handoverOnCompletion); void copyFrom(Exchange source);with: Exchange copy(); Exchange copy(boolean handoverOnCompletion);newInstance() does not bring much value copyFrom() is semantically equivalent to copy()newCopy() will be just renamed to copy(boolean) See nabble thread:http://www.nabble.com/-DISCUSS--Exchange-copy-api-cleanup-td24400340.html", "id": "1822"}, "1828": {"ground_truth": "0", "bug_report": "jaxb prettyPrint does not work\nHere is the mail thread with discuss about it. http://www.nabble.com/JAXB-pretty-print-marshaling-td24449564.html", "id": "1828"}, "1838": {"ground_truth": "0", "bug_report": "camel-ftp - Recover from lost connection issue\nSee nabblehttp://www.nabble.com/FTP-Component-Network-Failure-Recovery-Problem-td24517828.html", "id": "1838"}, "1839": {"ground_truth": "0", "bug_report": "camel-web can't process the endpoint with '://' schema  like /endpoints/mock://results\nAfter improving the endpoint URI schema on http://issues.apache.org/activemq/browse/CAMEL-1756  camel-web's endpoint request URL is changed from http://localhost:8080/endpoints/mock:results into http://localhost:8080/endpoints/mock://results while '//' is a separator for URL  so camel-web will use only the 'mock:' to get the expected endpoint  which will throw an exception:org.apache.camel.ResolveEndpointFailedException: Failed to resolve endpoint: mock: due to: Expected scheme-specific part at index 5: mock: at org.apache.camel.impl.DefaultCamelContext.getEndpoint(DefaultCamelContext.java:367) at org.apache.camel.web.resources.EndpointsResource.getEndpoint(EndpointsResource.java:75) at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39) at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25) at java.lang.reflect.Method.invoke(Method.java:585) at com.sun.jersey.server.impl.uri.rules.SubLocatorRule.invokeSubLocator(SubLocatorRule.java:135) at com.sun.jersey.server.impl.uri.rules.SubLocatorRule.accept(SubLocatorRule.java:89) at com.sun.jersey.server.impl.uri.rules.RightHandPathRule.accept(RightHandPathRule.java:111) at com.sun.jersey.server.impl.uri.rules.SubLocatorRule.accept(SubLocatorRule.java:105) at com.sun.jersey.server.impl.uri.rules.RightHandPathRule.accept(RightHandPathRule.java:111) at com.sun.jersey.server.impl.uri.rules.ResourceClassRule.accept(ResourceClassRule.java:71) at com.sun.jersey.server.impl.uri.rules.RightHandPathRule.accept(RightHandPathRule.java:111) at com.sun.jersey.server.impl.uri.rules.RootResourceClassesRule.accept(RootResourceClassesRule.java:63) at com.sun.jersey.server.impl.application.WebApplicationImpl._handleRequest(WebApplicationImpl.java:654) at com.sun.jersey.server.impl.application.WebApplicationImpl.handleRequest(WebApplicationImpl.java:612) at com.sun.jersey.server.impl.application.WebApplicationImpl.handleRequest(WebApplicationImpl.java:603) at com.sun.jersey.spi.container.servlet.WebComponent.service(WebComponent.java:309) at com.sun.jersey.spi.container.servlet.ServletContainer.service(ServletContainer.java:425) at com.sun.jersey.spi.container.servlet.ServletContainer.doFilter(ServletContainer.java:737) at com.sun.jersey.spi.container.servlet.ServletContainer.doFilter(ServletContainer.java:689) at org.mortbay.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1148) at com.opensymphony.module.sitemesh.filter.PageFilter.parsePage(PageFilter.java:119) at com.opensymphony.module.sitemesh.filter.PageFilter.doFilter(PageFilter.java:55) at org.mortbay.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1148) at org.mortbay.jetty.servlet.ServletHandler.handle(ServletHandler.java:387) at org.mortbay.jetty.security.SecurityHandler.handle(SecurityHandler.java:216) at org.mortbay.jetty.servlet.SessionHandler.handle(SessionHandler.java:181) at org.mortbay.jetty.handler.ContextHandler.handle(ContextHandler.java:765) at org.mortbay.jetty.webapp.WebAppContext.handle(WebAppContext.java:417) at org.mortbay.jetty.handler.HandlerCollection.handle(HandlerCollection.java:114) at org.mortbay.jetty.handler.HandlerWrapper.handle(HandlerWrapper.java:152) at org.mortbay.jetty.Server.handle(Server.java:324) at org.mortbay.jetty.HttpConnection.handleRequest(HttpConnection.java:535) at org.mortbay.jetty.HttpConnection$RequestHandler.headerComplete(HttpConnection.java:865) at org.mortbay.jetty.HttpParser.parseNext(HttpParser.java:539) at org.mortbay.jetty.HttpParser.parseAvailable(HttpParser.java:212) at org.mortbay.jetty.HttpConnection.handle(HttpConnection.java:404) at org.mortbay.io.nio.SelectChannelEndPoint.run(SelectChannelEndPoint.java:409) at org.mortbay.thread.QueuedThreadPool$PoolThread.run(QueuedThreadPool.java:520)Caused by: java.net.URISyntaxException: Expected scheme-specific part at index 5: mock: at java.net.URI$Parser.fail(URI.java:2816) at java.net.URI$Parser.failExpecting(URI.java:2822) at java.net.URI$Parser.parse(URI.java:3025) at java.net.URI.&lt;init&gt;(URI.java:578) at org.apache.camel.util.URISupport.normalizeUri(URISupport.java:354) at org.apache.camel.impl.DefaultCamelContext.getEndpoint(DefaultCamelContext.java:365) ... 39 more", "id": "1839"}, "1849": {"ground_truth": "0", "bug_report": "CachedOutputStream not cleaning up tmp files when using file based caching\nA recent feature of Camel's CachedOutputStream is to serialize any messages over 64k to disk. In some cases the *tmp message files are not being cleaned up.", "id": "1849"}, "1851": {"ground_truth": "0", "bug_report": "Route JMX attributes not being updated\nSome routes are not getting instrumented using JMX and we get the following WARN for those on startup;InstrumentationLifecycleStrategy: Route has not been instrumented for endpoint: ...It turns out that its only those routes that have an onException handler as the first processor in the route  e.g.&lt;route id='per-msg-route' errorHandlerRef='RouteErrorHandler'&gt; &lt;from uri='jms:MSG_IN'/&gt; &lt;onException&gt; &lt;exception&gt;can.retry.Exception&lt;/exception&gt; &lt;redeliveryPolicy ref='UnlimitedRedeliveryPolicyConfig'/&gt; &lt;handled&gt;&lt;constant&gt;true&lt;/constant&gt;&lt;/handled&gt; &lt;/onException&gt; &lt;bean ref='Formatter' method='formatInput'/&gt;...8&lt;... More info and proposed fix at http://www.nabble.com/Routes-JMX-attributes-not-updated-in-2.0-M2-td24631265.html#a24639433", "id": "1851"}, "1858": {"ground_truth": "0", "bug_report": "Provide a flag to avoid mapping a JMS message to it's actual type\nCAMEL-1853 adds the ability to use a custom Spring MessageConverter to map an incoming (or outgoing) JMS Message  and also makes it easier to do a pass through route where Camel does not try and deserialize a serialized object message. This improvement is to add a simple flag that achieves a similar effect but without having to supply a MessageConverter implementation.", "id": "1858"}, "1862": {"ground_truth": "0", "bug_report": "camel-cxf bundle doesn't specify any Import-Package version\nThe camel-cxf component is currently generated against CXF version 2.2.2.As a result  the camel-cxf module as well as the camel-cxf bundle require CXF 2.2. More importantly  that bundle does not work correctly with CXF 2.0 (note that this is an expected behavior  CXF has had API changes with its 2.2 version).Now  the trouble is that the camel-cxf JAR's MANIFEST has an Import-Package on org.apache.cxf.* components without specifying any version! As a result  when it looks for CXF and both CXF 2.0 and 2.2 are present on the platform  it sometimes chooses the wrong one.To solve this issue  version specifiers should be added to the Import-Package declarations of the camel-cxf bundle. I guess an import on version 2.2 would be enough (we don't need to specify 2.2.2 explicitely).CheersS. Ali Tokmenhttp://ali.tokmen.com/", "id": "1862"}, "1865": {"ground_truth": "1", "bug_report": "NPE thrown when DEBUG logging on\nStack trace;org.apache.camel.language.bean.RuntimeBeanExpressionException: Failed to invoke method: doSplit on MySplitter due to: java.lang.NullPointerException at org.apache.camel.language.bean.BeanExpression.evaluate(BeanExpression.java:82) at org.apache.camel.language.bean.BeanExpression.evaluate(BeanExpression.java:87) at org.apache.camel.processor.Splitter.createProcessorExchangePairs(Splitter.java:72)...Caused by: java.lang.NullPointerException at org.apache.camel.util.MessageHelper.extractBodyForLogging(MessageHelper.java:129) at org.apache.camel.impl.DefaultMessage.toString(DefaultMessage.java:38) at java.lang.String.valueOf(String.java:2827) at java.lang.StringBuilder.append(StringBuilder.java:115) at java.util.AbstractCollection.toString(AbstractCollection.java:422) at java.lang.String.valueOf(String.java:2827) at java.lang.StringBuilder.append(StringBuilder.java:115) at org.apache.camel.component.bean.BeanProcessor.process(BeanProcessor.java:139)Steps to reproduce;1. Create simple route with splitter pattern; e.g.&lt;route&gt; &lt;from uri='jms:IN_QUEUE'/&gt; &lt;split&gt;&lt;method bean='MySplitter' method='doSplit'/&gt; &lt;to uri='log:route.log'/&gt; &lt;/split&gt;&lt;/route&gt;2. Set DEBUG logging on for org.apache.camel classes  e.g.log4j.logger.org.apache.camel=DEBUG3. Fire message into route - message fails with NPE inside Camel", "id": "1865"}, "1867": {"ground_truth": "0", "bug_report": "JmsKeyFormatStrategy not used consistently and JmsMessage.getHeader() not returning correct value\nOn entry to a route from a JMS endpoint configured with PassthroughJmsKeyFormatStrategy the headers with underscores (_) are passed through correctly.However  when any header value in the message is then changed  the original headers are added back into the message using the DefaultJmsKeyFormatStrategy. For example  sending a JMS message with headers;HEADER_1=VALUE_1HEADER_2=VALUE_1we do see just these two headers in the message received into the route.However  if we then set a header value in the route  say HEADER_1=VALUE_2  we now see the headers;HEADER.1=VALUE_1HEADER.2=VALUE_1HEADER_1=VALUE_2HEADER_2=VALUE_1For some reason in the set header process the original message headers and values get added into the message after being passed through the DefaultJmsKeyFormatStrategy. This has the implication of unnecessary duplication of the headers.Also  when a message header is accessed using the getHeader(key) method it also goes through the DefaultJmsKeyFormatStrategy to decode the key that is passed. In the example above  if after we have updated 'HEADER_1' to 'VALUE_2'  we do;message.getHeader('HEADER_1') this goes through the DefaultJmsKeyFormatStrategy and actually gets executed as message.getHeader('HEADER.1') which returns VALUE_1 (wrong!).Note: if instead we lookup the header through message.getHeaders() which returns the all headers in a Map  we can correctly access the 'HEADER_1' key. (Why is getHeader(key) even going through the KeyFormatStrategy anyway if setHeader() isn't?)", "id": "1867"}, "1869": {"ground_truth": "0", "bug_report": "camel-mail - Add option to ignore unsupported charset and fallback to platform default instead\nSee nabble:http://www.nabble.com/Camel-Mail-issue-with-unsupported-charset-td24755585.html", "id": "1869"}, "1871": {"ground_truth": "0", "bug_report": "camel-jms - DefaultJmsKeyFormatStrategy should replace . with _DOT_ to avoid conflicting with end user using _\nIf an end user sends a JMS property asMY_KEYThen it should be preserved when Camel route it  so the receiver side using Camel as well will see it as: MY_KEY and not MY.KEY.The code should be: String answer = key.replace('.'  '_DOT_'); answer = answer.replace('_DOT_'  '.');", "id": "1871"}, "1873": {"ground_truth": "0", "bug_report": "template   consumerTemplate  service  proxy can't be set with right camel context if there are more than one camel context in the spring application context\nCurrent camel support to define a producer template OUTSIDE a camel context  I think it works well just like the autowire function which is provided in Spring.If there more than two Camel context in the Spring Application context   the user should specify the camel context which the template should use.But I have a concern that even we put the template INSIDE the camel context  the template will not be set with a right version of camel context  since we use a CamelPostProcessor to inject CamelContext.So I did a quick test on the current Camel code and found there is a bug if there are more one CamelContext &#8211; CamelPostProcessor will inject the last create camel context into the CamelContextAware object. Since it is not easy to add the camelContext referece id into the template element attribute  we'd better just support to parser these elements inside the camel context.", "id": "1873"}, "1878": {"ground_truth": "0", "bug_report": "Bean component - invokes onMessage from javax.jms.MessageListener even though a specific method name have been provided\nThis is only an issue when your bean implements javax.jms.MessageListener and then specify a specific method to use  then Camel will still prefer to use the onMessage method.", "id": "1878"}, "1881": {"ground_truth": "0", "bug_report": "camel-irc consumer only listens to messages on a channel and ignores direct messages\nWhile camel-irc listens to events on a channel very nicely  if you send a camel-irc consumer a message directly it ignores it.", "id": "1881"}, "1884": {"ground_truth": "0", "bug_report": "XMPP producer and consumer don't share the same connection and Chat objects\nIt's actually not possible to produce and consume messages from the same XMPP endpoint  i.e. something like:from('xmpp://irc.jabber.org...').to('direct:out');from('direct:in').to('xmpp://irc.jabber.org...');typically what I see happen is that the consumer will work until the XMPP producer sends a message  at that point the consumer stops receiving messages. What's happening is that producers and consumers created from the endpoint also create their own connection object and then also create their own Chat object. The attached patch ties the XMPP connection to the endpoint  making a producer or consumer share this connection. If a consumer creates the Chat first the producer will look it up and connect to the existing Chat. If the producer creates the Chat then the consumer will attach itself as a listener to this Chat.I notice that the tests are turned off as they require a local Jabber server instance to run. Is it worth creating some accounts on jabber.org to run the test with? Currently I've been testing this patch using my own Google talk accounts  this is all working towards an IRC to Jabber bridge that I might submit later on as a more complicated demo...", "id": "1884"}, "1895": {"ground_truth": "0", "bug_report": "camel-file - Consume and pollEnrich another file should work transparent\nSee nabblehttp://www.nabble.com/Problem-with-FileConsumer-and-pollEnrich-td24795192.html", "id": "1895"}, "1914": {"ground_truth": "0", "bug_report": "Xmpp consumer stops consuming after some time\nNoticed after creating some more complicated routes that my xmpp consumers would stop receiving messages. This patch sorts that out  I also improved some of the logging in the producer and consumer classes and tweaked the XmppRouteChatTest to work properly.", "id": "1914"}, "1924": {"ground_truth": "0", "bug_report": "Unit test failures on Windows in 2.0.0 release\n3 failures in camel-core that do not seem to occur on linux and mac.Failure Details testCannotDeleteFile junit.framework.AssertionFailedError: Should have thrown an exceptionorg.apache.camel.component.file.strategy.GenericFileDeleteProcessStrategyTest:125 testCacheStreamToFileAndNotCloseStream junit.framework.AssertionFailedError: we should have no temp file expected:&lt;1&gt; but was:&lt;0&gt;org.apache.camel.converter.stream.CachedOutputStreamTest:117 testRouteIsCorrectAtRuntime junit.framework.AssertionFailedError: expected:&lt;4&gt; but was:&lt;1&gt;org.apache.camel.processor.ChoiceWithEndTest:39", "id": "1924"}, "1925": {"ground_truth": "0", "bug_report": "HTTP component throwing IllegalArgumentException in M3 release while bridging between jetty and http\nThe CamelHttpUri header is not set to the right value while routing between jetty and http components. Because of which the construction of the HttpMethod in the http component fails and throws up an IllegalArgumentException.Detailed discussion regarding this issue can be found in this following thread.http://www.nabble.com/HTTP-component-throwing-IllegalArgumentException-in-M3-release.-tt25057133.html#a25057133", "id": "1925"}, "1931": {"ground_truth": "0", "bug_report": "XmppBinding will add non-serializeable header values to the outgoing xmpp message\nI started using velocity in my project which seems to add some headers to the message exchange  the values of which are apparently not serialize-able. As a result when a message in my route gets to the camel-xmpp component it fails in XmppBinding with an IllegalArgumentException as the binding tries to add the bad header. This patch that by not inserting any headers into the xmpp message that don't have serialize-able values.", "id": "1931"}, "1934": {"ground_truth": "0", "bug_report": "Unit test failure in Windows for StreamCache. Temp file is not deleted\nThe temporary file is not deleted. I think the file is still open in some other stream. The problem is I have no idea how to find this place. Like in issue CAMEL-1924 this only happens on windows as on unix you can delete a file even if there are open streams.testStreamCacheToFileShouldBeDeletedInCaseOfException java.lang.AssertionError: There should be no files expected:&lt;1&gt; but was:&lt;0&gt;org.apache.camel.component.jetty.HttpStreamCacheFileTest:71", "id": "1934"}, "1944": {"ground_truth": "0", "bug_report": "Revamped IRC component event adapter logging\nCurrently only the camel-irc producer installs an event listener on the IRC connection to log incoming messages from the IRC server. This patch revamps the logging so that the component installs an event adapter to do logging before the connection is even established so it's easier to debug various issues that could be occurring with the connection to the IRC server.", "id": "1944"}, "1948": {"ground_truth": "0", "bug_report": "ServiceSupport - incorrect state after restart\nThis hampers restart of services by example the overhauled JMX in CAMEL-1933.When a service was restarted it had the following incorrect state: started = true starting = false stopped = true stopping = falseThe stopped should have been changed to false as its started.", "id": "1948"}, "1950": {"ground_truth": "0", "bug_report": "Add server name to logging event adapter\nWhen connected to multiple IRC servers it's a bit difficult to figure out what server incoming log messages from the event adapter are from. This patch adds the IRC server responsible for a given log message from the event adapter.", "id": "1950"}, "1951": {"ground_truth": "0", "bug_report": "camel-jms consumer endpoint should allow properties such as maxConcurrentConsumers and concurrentConsumers to be managed via JMX\ncamel-jms consumer endpoint should allow properties such as maxConcurrentConsumers and concurrentConsumers to be managed via JMX", "id": "1951"}, "1952": {"ground_truth": "0", "bug_report": "Exchange - getIn and getOut with expected type parameter\nIt would be nice with a getIn(type) method so you can avoid ugly type cast and let Camel do type casting instead.CxfMessage cxf = exchange.getIn(CxfMessage.class);And the same for a getOut as well.", "id": "1952"}, "1956": {"ground_truth": "0", "bug_report": "camel-irc should handle onReply callbacks\nCurrently it's not possible to receive the response from commands like WHO as irclib invokes onReply when it gets a response from the IRC server  which the IrcConsumer doesn't implement. This patch adds that and also turns on debug logging for the IRC component in the tests.", "id": "1956"}, "1963": {"ground_truth": "0", "bug_report": "Graceful shutdown problem\nWhile running camel-example-spring-jms in 2.0M3  I've noticed that GracefulShutdownService can't stop Camel. It calls Main.getInstance().stop();but this call blocks and never returns. With enabled debug logging for org.springframework.jms  console outputs&#91;aultMessageListenerContainer-1&#93; efaultMessageListenerContainer DEBUG Waiting for shutdown of message listener invokers&#91;aultMessageListenerContainer-1&#93; efaultMessageListenerContainer DEBUG Still waiting for shutdown of 1 message listener invokersRelated forum thread:http://www.nabble.com/Garceful-shutdown-bug-in-2.0M3--td25113519.htmlDado", "id": "1963"}, "1976": {"ground_truth": "0", "bug_report": "Restarting JmsConsumer should pickup configuration changes\nYou should be able to using JMX to manage JMS endpoints and change configuration such as number of concurrent consumers.Then when restarting the jms consumers they should pickup any configuration changes done on the jms endpoint.", "id": "1976"}, "1988": {"ground_truth": "0", "bug_report": "Better OSGi metadata to allow deploying multiple camel versions in the same OSGi framework\nBetter OSGi metadata to allow deploying multiple camel versions in the same OSGi framework", "id": "1988"}, "1993": {"ground_truth": "0", "bug_report": "Spring DSL - errorHandlerRef should only be support on camel context or route\nIt just makes it to confusing you can set it on a processor definition in the middle of a route.Only these 2 xml tags should support it camelContext route", "id": "1993"}, "2016": {"ground_truth": "0", "bug_report": "camel-jpa exports the org.apache.camel.processor.interceptor which leads to a split package\nThe package is already exported by camel-core  so the class in this package needs to be moved to another package.", "id": "2016"}, "2020": {"ground_truth": "1", "bug_report": "NPE when the bundle is camel-osgi bundle is inactive\nThe stack trace. java.lang.NullPointerException atorg.apache.camel.osgi.OsgiFactoryFinder.getResource(OsgiFactoryFinder.java:85) atorg.apache.camel.osgi.OsgiFactoryFinder.findClass(OsgiFactoryFinder.java:51) atorg.apache.camel.component.file.GenericFileEndpoint.createGenericFileStrategy(GenericFileEndpoint.java:130) atorg.apache.camel.component.file.GenericFileEndpoint.getGenericFileProcessStrategy(GenericFileEndpoint.java:114) atorg.apache.camel.component.file.GenericFileConsumer.processExchange(GenericFileConsumer.java:162) atorg.apache.camel.component.file.GenericFileConsumer.processBatch(GenericFileConsumer.java:120) atorg.apache.camel.component.file.GenericFileConsumer.poll(GenericFileConsumer.java:93) atorg.apache.camel.impl.ScheduledPollConsumer.run(ScheduledPollConsumer.java:98) at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:441) atjava.util.concurrent.FutureTask$Sync.innerRunAndReset(FutureTask.java:317) at java.util.concurrent.FutureTask.runAndReset(FutureTask.java:150) atjava.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$101(ScheduledThreadPoolExecutor.java:98) atjava.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.runPeriodic(ScheduledThreadPoolExecutor.java:181) atjava.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:205) atjava.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:886) atjava.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:908) at java.lang.Thread.run(Thread.java:619)Here is the mail thread&#91;1&#93; which discusses about this issue.&#91;1&#93;http://www.nabble.com/Error-using-camel-file-with-windows-tt25475829.html#a25486384", "id": "2020"}, "2031": {"ground_truth": "0", "bug_report": "DataSet - Add initial delay with a default of 1 sec\nTo avoid data set consumers starting spitting out messages before other routes have properly started.", "id": "2031"}, "2032": {"ground_truth": "0", "bug_report": "XmppMessages don't get converted to strings\nThis has been bugging me for awhile  when you have a route using XMPP you get instances of XmppMessage in your route rather than just a string containing the body of the XmppMessage. Tracked that down and took out the work arounds I had previously put in my contributed xmpp tests.", "id": "2032"}, "2049": {"ground_truth": "0", "bug_report": "Improper configuration of MINA connector and acceptor instances; Better producer\nA sample scenario where both MINA producer(s) and consumer(s) are used in the same route (e.g. some kind of dispatching or proxying):from('mina:tcp://localhost:8888?lazySessionCreation=true&amp;sync=true') .to('mina:tcp://localhost:7777?lazySessionCreation=true&amp;sync=true');from('mina:tcp://localhost:7777?lazySessionCreation=true&amp;sync=true') .process(/prepare answer/);Due to improper configuration of MINA acceptor and connector instances in MinaComponent#createSocketEndpoint()  no more than 15 incoming threads can be served at port 8888 &#8211; the producer becomes unable to open an outgoing session. This is actually an issue of MINA  not of Camel &#8211; a test application written using 'raw' MINA shows the same behaviour.A solution is to apply configuration rules described  e.g.  at http://mina.apache.org/configuring-thread-model.html  as done in the attached patch.Moreover  the standard Camel-MINA producer is not thread-safe &#8211; actually a well-known point. A second attached file contains a thread pool-based reentrant version  which can be efficiently used for TCP endpoints with both parameters 'lazySessionCreation' and 'sync' set to true.", "id": "2049"}, "2060": {"ground_truth": "0", "bug_report": "Camel Bean component should not remember the last called method name if the bean's method name is not explicitly specified.\nHere is the mail thread which discuses this issue. http://www.nabble.com/Bean-endpoint-in-a-route-is-holding-reference-to-the-last-used-methodName-and-does-not-invoke-Camel%27s-Bean-binding-tp25838095p25838095.html", "id": "2060"}, "2063": {"ground_truth": "0", "bug_report": "DeadLetterChannel - Should pre check the endpointUri is valid and report failure on startup\nIf you misconfigure the DLC endpoint URI it will get created on demand and if case of a problem its logged. We should pre check this on route startup so we know the DLC queue works.", "id": "2063"}, "2064": {"ground_truth": "0", "bug_report": "Redundant interceptions when using interceptSendToEndpoint\nSee http://www.nabble.com/Issue-with-interceptSendToEndpoint-to25859201s22882.html", "id": "2064"}, "2070": {"ground_truth": "0", "bug_report": "Dynamic Recipient List - Comma is always delimiter even if custom specified\nSee nabblehttp://www.nabble.com/Dynamic-RecipientList-delimeter-issue-td25917854.html", "id": "2070"}, "2072": {"ground_truth": "0", "bug_report": "camel-mail - extracting mails with headers using multi values inserts duplicates\nSending a message with headers that contains 2 values such a String[] with 2 values will result on the other side when consuming that mail message to contain a header with 2 entries. There should only be 1 entry with the 2 values.", "id": "2072"}, "2078": {"ground_truth": "0", "bug_report": "camel-jpa - JpaProducer should mandate body instead of creating a new empty instance\nIf you send an empty body to a JpaProducer it will create a new empty instance of that type which then gets inserted.Camel should thrown an exception indicate a body is missing", "id": "2078"}, "2084": {"ground_truth": "0", "bug_report": "http polling consumer does not support timeout\nWhen using the consumer template to receive from a remote http service using camel-http the method receive(5000) that uses a 5 sec timeout does not work as expected.Camel does not use the 5000 value.", "id": "2084"}, "2092": {"ground_truth": "0", "bug_report": "velocity endpoint should not remember the last used template uri\nIf there are two velocity endpoint linked with the pipeline  you will find the last velocity will not effect anymore.", "id": "2092"}, "2094": {"ground_truth": "0", "bug_report": "CamelContext should support autoStartup\nWe now have option autoStartup on routes. Lets also have this on the camel context itself so it replaces the shouldStartContext option that is a bit confusing. &lt;camelContext id='myCamel' xmlns='http://camel.apache.org/schema/spring' autoStartup='false'&gt; &lt;route&gt; &lt;from uri='direct:start'/&gt; &lt;to uri='mock:result'/&gt; &lt;/route&gt; &lt;/camelContext&gt;For example the code above will not start Camel on startup. You can then later start camel manually by SpringCamelContext camel = (SpringCamelContext) ac.getBean('myCamel'); camel.start();And then all runs.This also means that we will remove the option shouldStartContext! so if you use this option you must migrate to the autoStartup instead.", "id": "2094"}, "2095": {"ground_truth": "0", "bug_report": "Support Issue: Routing a TextMessage from a  to a JMS queue\nI did not find any example or documentation for using the &lt;camel:proxy&gt; with a simple send(String textMessage) method and a route sending the textMessage String as body to a JMS queue (for example).The thing is that &lt;camel:proxy&gt; creates a messages with body of type BeanInvocation. I would expect that Camel provides some builtin transformer/converter to change the body to the String argument  so that the message on the queue is of type TextMessage.Did I miss something?", "id": "2095"}, "2113": {"ground_truth": "0", "bug_report": "@Bean - Add method to the annotation so you can configure the method name\nIts a bit more trivial for end users to know how to set bean name and method if having two attributes.Otherwise they have to know about you can use dot to separate the ben name for the method name.", "id": "2113"}, "2132": {"ground_truth": "0", "bug_report": "camel-jms - Sending Object message should fail if payload cannot be converted to serializable\nIf not a null message is created and send.See nabble:http://old.nabble.com/JPA%3A-Could-not-pass-Object-from-jpa-to-jms-to26160124.html", "id": "2132"}, "2133": {"ground_truth": "0", "bug_report": "The converter's MandatoryConvert method doesn't throw the exception when the value is null\nThe converter's MandatoryConvert method doesn't throw the exception when the value is null", "id": "2133"}, "2139": {"ground_truth": "0", "bug_report": "Some methods of SftpOperations create streams that are never closed\nWhere SftpOperations creates streams for storing or retrieving files via ChannelSftp  these streams are not always closed. For example  the retrieveFileToStreamInBody method creates an OutputStream object  but never closes it.", "id": "2139"}, "2146": {"ground_truth": "0", "bug_report": "Type converter - Should respect Future ExecutionException as not failed to convert but some other error\nType converter - Should respect Future ExecutionException as not failed to convert but some other error", "id": "2146"}, "2150": {"ground_truth": "0", "bug_report": "RSS Component - parameter filtering not working\nI have tried to sort RRS feeds or to split the entries as described in the documentation. The problem is that the parameters that are to be consumed by Camel are passed through to the endpoint  who does not understand the parameters.Here is my code: from('rss:' + feedLocation+ '?sortEntries=true&amp;feedHeader=true').marshal().rss()...where feedLocation = 'http://www.iafrica.com/pls/cms/grapevine.xml'It results in:java.io.FileNotFoundException: http://www.iafrica.com/pls/cms/grapevine.xml?feedHeader=true&amp;sortEntries=true at sun.net.www.protocol.http.HttpURLConnection.getInputStream(HttpURLConnection.java:1311) at java.net.URL.openStream(URL.java:1010) at org.apache.camel.component.rss.RssUtils.createFeed(RssUtils.java:32) at org.apache.camel.component.rss.RssEntryPollingConsumer.createFeed(RssEntryPollingConsumer.java:54) at org.apache.camel.component.feed.FeedEntryPollingConsumer.poll(FeedEntryPollingConsumer.java:42) at org.apache.camel.impl.ScheduledPollConsumer.run(ScheduledPollConsumer.java:99) at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:441) at java.util.concurrent.FutureTask$Sync.innerRunAndReset(FutureTask.java:317) at java.util.concurrent.FutureTask.runAndReset(FutureTask.java:150) at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$101(ScheduledThreadPoolExecutor.java:98) at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.runPeriodic(ScheduledThreadPoolExecutor.java:181) at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:205) at java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:886) at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:908) at java.lang.Thread.run(Thread.java:637)", "id": "2150"}, "2152": {"ground_truth": "0", "bug_report": "Workaround for UnsupportedEncodingException\nReference this discussion: http://old.nabble.com/Camel-Mail-issue-with-unsupported-charset-td24755585.htmlCamel-mail fails to process a message with an unsupported charset in the Content-Type. It throws an exception and can never get past that message...subsequent messages in the inbox never get processed.Claus and I came up with a fix  where we make a copy of the MimeMessage object and modify the Content-Type header  stripping the unrecognized charset.", "id": "2152"}, "2153": {"ground_truth": "1", "bug_report": "FTP Component issue with tempPrefix or tempFileName\nusing FTP component to push files via FTP I am facing issues pushing a file on subfolder when using tempPrefix or tempFileName. route sample: from('direct:start').to('ftp://username@ipaddress?password=mypass&amp;fileName=./camel/test/message.txt&amp;tempFileName=${file:name.noext}.tmp');no errors are raised if the final destination file doesn't exists  if it exists following error is raised: Exception in thread 'main' org.apache.camel.CamelExecutionException: Exception occurred during execution on the exchange: Exchange&#91;Message: Message content&#93;  at org.apache.camel.util.ObjectHelper.wrapCamelExecutionException(ObjectHelper.java:1055)  at org.apache.camel.util.ExchangeHelper.extractResultBody(ExchangeHelper.java:446)  at org.apache.camel.impl.DefaultProducerTemplate.extractResultBody(DefaultProducerTemplate.java:431)  at org.apache.camel.impl.DefaultProducerTemplate.extractResultBody(DefaultProducerTemplate.java:427)  at org.apache.camel.impl.DefaultProducerTemplate.sendBody(DefaultProducerTemplate.java:112)  at org.apache.camel.impl.DefaultProducerTemplate.sendBody(DefaultProducerTemplate.java:117)  at com.opta.camel.test.FTPTester.main(FTPTester.java:30) Caused by: java.lang.NullPointerException  at org.apache.camel.component.file.remote.FtpOperations.existsFile(FtpOperations.java:372) at org.apache.camel.component.file.GenericFileProducer.processExchange(GenericFileProducer.java:92)  at org.apache.camel.component.file.remote.RemoteFileProducer.process(RemoteFileProducer.java:52)  at org.apache.camel.processor.SendProcessor$1.doInProducer(SendProcessor.java:86)  at org.apache.camel.processor.SendProcessor$1.doInProducer(SendProcessor.java:84)  at org.apache.camel.impl.ProducerCache.doInProducer(ProducerCache.java:146)  at org.apache.camel.processor.SendProcessor.process(SendProcessor.java:83)  at org.apache.camel.management.InstrumentationProcessor.process(InstrumentationProcessor.java:67)  at org.apache.camel.processor.DelegateProcessor.processNext(DelegateProcessor.java:53)  at org.apache.camel.processor.DelegateProcessor.proceed(DelegateProcessor.java:82)  at org.apache.camel.processor.interceptor.TraceInterceptor.process(TraceInterceptor.java:85)  at org.apache.camel.management.InstrumentationProcessor.process(InstrumentationProcessor.java:67)  at org.apache.camel.processor.RedeliveryErrorHandler.processExchange(RedeliveryErrorHandler.java:232)  at org.apache.camel.processor.RedeliveryErrorHandler.processErrorHandler(RedeliveryErrorHandler.java:162)  at org.apache.camel.processor.RedeliveryErrorHandler.process(RedeliveryErrorHandler.java:91)  at org.apache.camel.processor.DefaultErrorHandler.process(DefaultErrorHandler.java:49)  at org.apache.camel.processor.DefaultChannel.process(DefaultChannel.java:201)  at org.apache.camel.processor.UnitOfWorkProcessor.processNext(UnitOfWorkProcessor.java:54)  at org.apache.camel.processor.DelegateProcessor.process(DelegateProcessor.java:48)  at org.apache.camel.management.InstrumentationProcessor.process(InstrumentationProcessor.java:67)  at org.apache.camel.component.direct.DirectProducer.process(DirectProducer.java:45)  at org.apache.camel.impl.ProducerCache$1.doInProducer(ProducerCache.java:179)  at org.apache.camel.impl.ProducerCache$1.doInProducer(ProducerCache.java:161)  at org.apache.camel.impl.ProducerCache.doInProducer(ProducerCache.java:146)  at org.apache.camel.impl.ProducerCache.sendExchange(ProducerCache.java:160)  at org.apache.camel.impl.ProducerCache.send(ProducerCache.java:98)  at org.apache.camel.impl.DefaultProducerTemplate.send(DefaultProducerTemplate.java:97)  at org.apache.camel.impl.DefaultProducerTemplate.sendBody(DefaultProducerTemplate.java:110)  ... 2 more", "id": "2153"}, "2156": {"ground_truth": "0", "bug_report": "ActivityMonitorEngine uses ?1 parameters in JPAQL  which don't work with (at least) the hibernate JPA provider.\nTrying to just replace my RouteBuilder with a ProcessBuilder to start moving towards using BAM. I converted everything over to JPA  to make bam happy  but then found that it still explodes  (Full stack trace below)Line 80 of ActivityMonitorEngine has this JPAQL  List&lt;ActivityState&gt; list = template.find('select x from ' + ActivityState.class.getName() + ' x where x.timeOverdue &lt; ?1'  timeNow);The ?1 named/numbered parameter seems to not be supported by hibernate's JPA provider.I can't find much of any documentation on this  could this just be made a normal positional? I can't even try out the BAM module without this 2009-11-11 01:33:53 815 ERROR &#91;org.apache.camel.bam.processor.ActivityMonitorEngine:ActivityMonitorEngine&#93; - &lt;Caught: org.springframework.dao.InvalidDataAccessApiUsageException: org.hibernate.QueryParameterException: could not locate named parameter &#91;1&#93;; nested exception is java.lang.IllegalArgumentException: org.hibernate.QueryParameterException: could not locate named parameter &#91;1&#93;&gt;org.springframework.dao.InvalidDataAccessApiUsageException: org.hibernate.QueryParameterException: could not locate named parameter &#91;1&#93;; nested exception is java.lang.IllegalArgumentException: org.hibernate.QueryParameterException: could not locate named parameter &#91;1&#93; at org.springframework.orm.jpa.EntityManagerFactoryUtils.convertJpaAccessExceptionIfPossible(EntityManagerFactoryUtils.java:271) at org.springframework.orm.jpa.vendor.HibernateJpaDialect.translateExceptionIfPossible(HibernateJpaDialect.java:97) at org.springframework.dao.support.DataAccessUtils.translateIfNecessary(DataAccessUtils.java:212) at org.springframework.orm.jpa.JpaAccessor.translateIfNecessary(JpaAccessor.java:152) at org.springframework.orm.jpa.JpaTemplate.execute(JpaTemplate.java:189) at org.springframework.orm.jpa.JpaTemplate.executeFind(JpaTemplate.java:151) at org.springframework.orm.jpa.JpaTemplate.find(JpaTemplate.java:311) at org.apache.camel.bam.processor.ActivityMonitorEngine$1.doInTransactionWithoutResult(ActivityMonitorEngine.java:80) at org.springframework.transaction.support.TransactionCallbackWithoutResult.doInTransaction(TransactionCallbackWithoutResult.java:33) at org.springframework.transaction.support.TransactionTemplate.execute(TransactionTemplate.java:128) at org.apache.camel.bam.processor.ActivityMonitorEngine.run(ActivityMonitorEngine.java:77) at java.lang.Thread.run(Thread.java:619)Caused by: java.lang.IllegalArgumentException: org.hibernate.QueryParameterException: could not locate named parameter &#91;1&#93; at org.hibernate.ejb.QueryImpl.setParameter(QueryImpl.java:206) at org.hibernate.ejb.QueryImpl.setParameter(QueryImpl.java:261) at org.springframework.orm.jpa.JpaTemplate$9.doInJpa(JpaTemplate.java:316) at org.springframework.orm.jpa.JpaTemplate.execute(JpaTemplate.java:184) ... 7 moreCaused by: org.hibernate.QueryParameterException: could not locate named parameter &#91;1&#93; at org.hibernate.engine.query.ParameterMetadata.getNamedParameterDescriptor(ParameterMetadata.java:99) at org.hibernate.engine.query.ParameterMetadata.getNamedParameterExpectedType(ParameterMetadata.java:105) at org.hibernate.impl.AbstractQueryImpl.determineType(AbstractQueryImpl.java:437) at org.hibernate.impl.AbstractQueryImpl.setParameter(AbstractQueryImpl.java:407) at org.hibernate.ejb.QueryImpl.setParameter(QueryImpl.java:201) ... 10 moreLine 80", "id": "2156"}, "2165": {"ground_truth": "0", "bug_report": "ftp uploads can fail: File operation failed:  Connection closed without indication.. Code: 421\nLooks like something that was fixed for CAMEL-444 didn't make it into 2.0?On 2.0.0  this is not a warning  this is a fatal.SEVERE: Exception occured during execution on the exchange: Exchange&#91;Message: XXXXXX&#93;org.apache.camel.CamelExecutionException: Exception occured during execution on the exchange: Exchange&#91;Message: XXXXX&#93; at org.apache.camel.util.ObjectHelper.wrapCamelExecutionException(ObjectHelper.java:1027) at org.apache.camel.util.ExchangeHelper.extractResultBody(ExchangeHelper.java:479) at org.apache.camel.impl.DefaultProducerTemplate.extractResultBody(DefaultProducerTemplate.java:431) at org.apache.camel.impl.DefaultProducerTemplate.sendBody(DefaultProducerTemplate.java:106) at org.apache.camel.impl.DefaultProducerTemplate.sendBody(DefaultProducerTemplate.java:122) at org.apache.camel.impl.DefaultProducerTemplate.requestBody(DefaultProducerTemplate.java:266) at... into my code here...Caused by: org.apache.camel.component.file.GenericFileOperationFailedException: File operation failed: Connection closed without indication.. Code: 421 at org.apache.camel.component.file.remote.FtpOperations.disconnect(FtpOperations.java:167) at org.apache.camel.component.file.remote.RemoteFileProducer.disconnect(RemoteFileProducer.java:77) at org.apache.camel.component.file.remote.RemoteFileProducer.handleFailedWrite(RemoteFileProducer.java:66) at org.apache.camel.component.file.GenericFileProducer.processExchange(GenericFileProducer.java:104) at org.apache.camel.component.file.remote.RemoteFileProducer.process(RemoteFileProducer.java:52) at org.apache.camel.processor.SendProcessor$1.doInProducer(SendProcessor.java:81) at org.apache.camel.processor.SendProcessor$1.doInProducer(SendProcessor.java:79) at org.apache.camel.impl.ProducerCache.doInProducer(ProducerCache.java:141) at org.apache.camel.processor.SendProcessor.process(SendProcessor.java:78) at org.apache.camel.management.InstrumentationProcessor.process(InstrumentationProcessor.java:61) at org.apache.camel.processor.RedeliveryErrorHandler.processExchange(RedeliveryErrorHandler.java:186) at org.apache.camel.processor.RedeliveryErrorHandler.processErrorHandler(RedeliveryErrorHandler.java:155) at org.apache.camel.processor.RedeliveryErrorHandler.process(RedeliveryErrorHandler.java:88) at org.apache.camel.processor.DefaultErrorHandler.process(DefaultErrorHandler.java:49) at org.apache.camel.processor.DefaultChannel.process(DefaultChannel.java:148) at org.apache.camel.processor.Pipeline.process(Pipeline.java:74) at org.apache.camel.processor.UnitOfWorkProcessor.processNext(UnitOfWorkProcessor.java:54) at org.apache.camel.processor.DelegateProcessor.process(DelegateProcessor.java:48) at org.apache.camel.component.direct.DirectProducer.process(DirectProducer.java:45) at org.apache.camel.impl.ProducerCache$1.doInProducer(ProducerCache.java:170) at org.apache.camel.impl.ProducerCache$1.doInProducer(ProducerCache.java:156) at org.apache.camel.impl.ProducerCache.doInProducer(ProducerCache.java:141) at org.apache.camel.impl.ProducerCache.sendExchange(ProducerCache.java:155) at org.apache.camel.impl.ProducerCache.send(ProducerCache.java:111) at org.apache.camel.impl.DefaultProducerTemplate.send(DefaultProducerTemplate.java:101) at org.apache.camel.impl.DefaultProducerTemplate.sendBody(DefaultProducerTemplate.java:105) ... 37 moreCaused by: org.apache.commons.net.ftp.FTPConnectionClosedException: Connection closed without indication. at org.apache.commons.net.ftp.FTP.__getReply(FTP.java:297)This is 'not what I want' and there doesn't seem to be any keep alive or other option on the ftp2 component.", "id": "2165"}, "2168": {"ground_truth": "0", "bug_report": "Logger logs INFO level messages at DEBUG level\nThe Camel logger logs INFO level messages at the DEBUG level. CAMEL-1048 fixed the problem in one of two cases (logging without an exception)  but it is still broken for logging with an exception. Patch to fix this is attached.", "id": "2168"}, "2170": {"ground_truth": "0", "bug_report": "UnitOfWorkProcessor - Should wrap more EIPs such as Aggregator  Splitter  RecipientList on their child routes\nThis ensures these exchanges have an UoW when they are routed  which allows for synchronization tasks to run on completion", "id": "2170"}, "2174": {"ground_truth": "0", "bug_report": "Remove dependency on spring core in PatternBasedPackageScanFilter\nThe dependency scan is using Springs ANT path matcher but the java code is in camel-core.We should moved that code to camel-spring so camel does not have any dep on spring code at all. (except for JMX annotations  which you is optional to use at runtime)", "id": "2174"}, "2180": {"ground_truth": "0", "bug_report": "TryProcessor - Do not use local copy Exchange in doCatch\nThere is no need to use a local copy when processing in doCatch.See nabblehttp://old.nabble.com/To-Roman---About-TryProcessor-to26377903s22882.html", "id": "2180"}, "2183": {"ground_truth": "0", "bug_report": "camel-cxf - Empty body causes http error 500 even for GET when using cxfbean\nCxfSoapBinding has a bug that it mandates a body to exist. But when you send a GET then there is of course no body.The code below fixed this in the method getCxfInMessage // body can be empty in case of GET etc. InputStream body = message.getBody(InputStream.class); if (body != null) { answer.setContent(InputStream.class  body); } else if (message.getBody() != null) { // fallback and set the body as what it is answer.setContent(Object.class  body); }Willem Tam can you review if that is okay? Maybe the code can be more finer to check the HTTP method and in cases of GET etc. it allows no body.I will commit my fix to get the unit tests passing.", "id": "2183"}, "2188": {"ground_truth": "0", "bug_report": "JcrProducer node creation throws javax.jcr.PathNotFoundException when using exchange ID as node name\nTo reproduce  use the camel-jcr component without specifying a node name in the message properties. JcrProducer will attempt to use the exchange ID as the node name  but in ServiceMix 4  this ID contains path separator characters  which results in a PathNotFound exception when the producer attempts to create the node. IMHO  the producer should attempt to create parent nodes as needed when the value of either the exchange ID or the property named JcrConstants.JCR_NODE_NAME contain path separators.", "id": "2188"}, "2189": {"ground_truth": "0", "bug_report": "Improvment in example archtypes\nMade changes to improve application context xml to improve schema usage. Also replaced log4j.properties fles with log4j.xml files.", "id": "2189"}, "2194": {"ground_truth": "0", "bug_report": "RestletProducer should support native async request/response semantics\nRestletProducer should support native async request/response semantics like the recent changes made to the camel-jetty producer.", "id": "2194"}, "2195": {"ground_truth": "0", "bug_report": "camel-cxf - CxfProducer should check parameters more strictly to ensure we have the number of parameters required\nThe method getParams in CxfProducer does not check for correct number of parameters and that we have data when its mandatory.", "id": "2195"}, "2201": {"ground_truth": "0", "bug_report": "RedeliveryPolicy - Setting delay > maxDelay should should also set max value\nSee nabblehttp://old.nabble.com/maximumRedeliveryDelay-applies-even-if-you-are-not-using-exponential-back-off-to26415728.html", "id": "2201"}, "2205": {"ground_truth": "0", "bug_report": "When the 'from' endpoint is improperly set  it can be very hard to work out why/where\nI have static routes configured using the java DSL  but use bean properties on my route builder to provide custom endpoints for different environments  like so... from(sourceUriProperty) .to('bean:fileParser') .beanRef('conanCore'  'updateOperationFailure') ;If you forget to set the from URI property  the exception you get at application startup just says: 'java.lang.IllegalArgumentException: Either 'uri' or 'ref' must be specified on: org.apache.camel.impl.DefaultRouteContext@d6a3d1' (Full stack trace below..... but probably not really important... note that it never once mentions any of my own classes)It would be nice if throw could be somewhere like in: RouteDefinition.java public List&lt;RouteContext&gt; addRoutes(CamelContext context  Collection&lt;Route&gt; routes) throws Exception { // other parts snipped... for (FromDefinition fromType : inputs) { // Throwing here would be nice  fromType.description already has 'no uri or ref!' so it already knows it's broken. RouteContext routeContext = addRoutes(routes  fromType); answer.add(routeContext); }}The RouteDefinition at that stage already contains things like: {{this = {org.apache.camel.model.RouteDefinition@5751}'Route[[From&#91;no uri or ref supplied!&#93;] -&gt; [To&#91;bean:fileParser&#93;  Bean&#91;ref:conanCore method: updateOperationFailure&#93;]]'}}So if we can explode there  you can clearly see what route you've screwed up.Caused by: org.apache.camel.RuntimeCamelException: java.lang.IllegalArgumentException: Either 'uri' or 'ref' must be specified on: org.apache.camel.impl.DefaultRouteContext@d6a3d1 at org.apache.camel.util.ObjectHelper.wrapRuntimeCamelException(ObjectHelper.java:1011) at org.apache.camel.spring.SpringCamelContext.onApplicationEvent(SpringCamelContext.java:121) at org.apache.camel.spring.CamelContextFactoryBean.onApplicationEvent(CamelContextFactoryBean.java:469) at org.springframework.context.event.SimpleApplicationEventMulticaster$1.run(SimpleApplicationEventMulticaster.java:78) at org.springframework.core.task.SyncTaskExecutor.execute(SyncTaskExecutor.java:49) at org.springframework.context.event.SimpleApplicationEventMulticaster.multicastEvent(SimpleApplicationEventMulticaster.java:76) at org.springframework.context.support.AbstractApplicationContext.publishEvent(AbstractApplicationContext.java:274) at org.springframework.context.support.AbstractApplicationContext.finishRefresh(AbstractApplicationContext.java:736) at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:383) at org.springframework.test.context.support.AbstractGenericContextLoader.loadContext(AbstractGenericContextLoader.java:84) at org.springframework.test.context.support.AbstractGenericContextLoader.loadContext(AbstractGenericContextLoader.java:42) at org.springframework.test.context.TestContext.loadApplicationContext(TestContext.java:173) at org.springframework.test.context.TestContext.getApplicationContext(TestContext.java:197) ... 18 moreCaused by: java.lang.IllegalArgumentException: Either 'uri' or 'ref' must be specified on: org.apache.camel.impl.DefaultRouteContext@d6a3d1 at org.apache.camel.impl.DefaultRouteContext.resolveEndpoint(DefaultRouteContext.java:117) at org.apache.camel.model.FromDefinition.resolveEndpoint(FromDefinition.java:72) at org.apache.camel.impl.DefaultRouteContext.getEndpoint(DefaultRouteContext.java:74) at org.apache.camel.model.RouteDefinition.addRoutes(RouteDefinition.java:432) at org.apache.camel.model.RouteDefinition.addRoutes(RouteDefinition.java:126) at org.apache.camel.impl.DefaultCamelContext.startRoute(DefaultCamelContext.java:569) at org.apache.camel.impl.DefaultCamelContext.startRouteDefinitions(DefaultCamelContext.java:924) at org.apache.camel.impl.DefaultCamelContext.doStart(DefaultCamelContext.java:901) at org.apache.camel.spring.SpringCamelContext.maybeDoStart(SpringCamelContext.java:165) at org.apache.camel.spring.SpringCamelContext.doStart(SpringCamelContext.java:160) at org.apache.camel.impl.ServiceSupport.start(ServiceSupport.java:52) at org.apache.camel.impl.DefaultCamelContext.start(DefaultCamelContext.java:816) at org.apache.camel.spring.SpringCamelContext.maybeStart(SpringCamelContext.java:99) at org.apache.camel.spring.SpringCamelContext.onApplicationEvent(SpringCamelContext.java:119) ... 29 more", "id": "2205"}, "2215": {"ground_truth": "0", "bug_report": "CaseInsensitiveMap should be serializable\nCaseInsensitiveMap should be fully serializableSee nabblehttp://old.nabble.com/DataSet-header-%7BCamelDataSetIndex%3D0%7D-causes-failure-to26487985.html", "id": "2215"}, "2220": {"ground_truth": "0", "bug_report": "camel-jdbc - Allow properties to be set on Statement such as fetchSize  maxRows etc\nJust like the SQL component offers a template. to set any property on the Spring JdbcTemplate we should do the same for this component for its Statement class.", "id": "2220"}, "2222": {"ground_truth": "0", "bug_report": "camel-bean - Classes enhanced by CGLIB should skip cglib methods\nSee nabblehttp://old.nabble.com/AmbiguousMethodCallException-on-transactional-spring-bean-to26496269.html", "id": "2222"}, "2227": {"ground_truth": "0", "bug_report": "Mock component - expectedBodiesReceived(List) does not work as expected\nJava chooses the varargs methods always instead of the List method.", "id": "2227"}, "2231": {"ground_truth": "0", "bug_report": "Exception during mail connection requires folder to be reset\nI think that this problem may still be around with 2.1-SNAPSHOT:http://fusesource.com/forums/thread.jspa?threadID=746&amp;tstart=0I noticed that I had a pop3 server outage and then subsequently had a similar problem i.e. IllegalStateException  folder not open.Here's when the outage started.2009-11-26 11:57:55 316 [: MailComponent] WARN ultPollingConsumerPollStrategy - Consumer Consumer[pop3://...] could not poll endpoint: pop3://... caused by: Connect failedjavax.mail.MessagingException: Connect failed; nested exception is: java.net.NoRouteToHostException: No route to host at com.sun.mail.pop3.POP3Store.protocolConnect(POP3Store.java:161) at javax.mail.Service.connect(Service.java:288) at org.apache.camel.component.mail.MailConsumer.ensureIsConnected(MailConsumer.java:241) at org.apache.camel.component.mail.MailConsumer.poll(MailConsumer.java:79) at org.apache.camel.impl.ScheduledPollConsumer.run(ScheduledPollConsumer.java:108) at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:441) at java.util.concurrent.FutureTask$Sync.innerRunAndReset(FutureTask.java:317) at java.util.concurrent.FutureTask.runAndReset(FutureTask.java:150) at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$101(ScheduledThreadPoolExecutor.java:98) at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.runPeriodic(ScheduledThreadPoolExecutor.java:181) at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:205) at java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:886) at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:908) at java.lang.Thread.run(Thread.java:619)Caused by: java.net.NoRouteToHostException: No route to host at java.net.PlainSocketImpl.socketConnect(Native Method) at java.net.PlainSocketImpl.doConnect(PlainSocketImpl.java:333) at java.net.PlainSocketImpl.connectToAddress(PlainSocketImpl.java:195) at java.net.PlainSocketImpl.connect(PlainSocketImpl.java:182) at java.net.SocksSocketImpl.connect(SocksSocketImpl.java:366) at java.net.Socket.connect(Socket.java:519) at java.net.Socket.connect(Socket.java:469) at com.sun.mail.util.SocketFetcher.createSocket(SocketFetcher.java:233) at com.sun.mail.util.SocketFetcher.getSocket(SocketFetcher.java:189) at com.sun.mail.pop3.Protocol.&lt;init&gt;(Protocol.java:94) at com.sun.mail.pop3.POP3Store.getPort(POP3Store.java:214) at com.sun.mail.pop3.POP3Store.protocolConnect(POP3Store.java:157) ... 13 moreThis went on for about a minute or so and there was no more in the log file until several hours later - in fact when an email appeared in the INBOX. I know this because my personal email account was copied on the email and so I have the timestamp.I then get the following message every time I poll the server and have to re-start my application to get over it:2009-11-26 19:19:57 293 [: MailComponent] ERROR MailConsumer - Folder not openjava.lang.IllegalStateException: Folder not open at javax.mail.Folder.getMessages(Folder.java:938) at javax.mail.Folder.search(Folder.java:1226) at org.apache.camel.component.mail.MailConsumer.poll(MailConsumer.java:107) at org.apache.camel.impl.ScheduledPollConsumer.run(ScheduledPollConsumer.java:108) at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:441) at java.util.concurrent.FutureTask$Sync.innerRunAndReset(FutureTask.java:317) at java.util.concurrent.FutureTask.runAndReset(FutureTask.java:150) at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$101(ScheduledThreadPoolExecutor.java:98) at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.runPeriodic(ScheduledThreadPoolExecutor.java:181) at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:205) at java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:886) at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:908) at java.lang.Thread.run(Thread.java:619)I took a look at MailConsumer.java and note the following code:236 if (!connected) {237 if (LOG.isDebugEnabled()) {238 LOG.debug('Connecting to MailStore: ' + endpoint.getConfiguration().getMailStoreLogInformation());239 }240 store = sender.getSession().getStore(config.getProtocol());241 store.connect(config.getHost()  config.getPort()  config.getUsername()  config.getPassword());242 }If you're not connected then how is it possible to have a folder? Following this logic my recommendation is to insert the following at line 242:241 store.connect(config.getHost()  config.getPort()  config.getUsername()  config.getPassword()); folder = null;242 }", "id": "2231"}, "2234": {"ground_truth": "0", "bug_report": "file producer - NIO transferTo 2gb bug in jdk\nIt appears that the JDK have a limitation that transferTo with large files.http://72.5.124.102/thread.jspa?threadID=5205184&amp;messageID=9822064See nabblehttp://old.nabble.com/camel-casts-exception-when-there-is-nothing-to-fetch-from-the-ftp-endpoint-to26541447.htmlThe code should be in a loop and transfer in chunks.", "id": "2234"}, "2237": {"ground_truth": "0", "bug_report": "Improper ordering of MINA filters\nWhen we want to use SSL on the consumer side  MINA's SSLFilter must be inserted as the very first filter into the chain (or  at least  as the second one after an ExecutorFilter)  but it is currently not possible  because MinaComponent#createSocketEndpoint() always inserts a ProtocolCodecFilter at the very beginning by calling configureCodecFactory().A proposed workaround is to introduce an additional URL parameter noDefaultCodec which prohibits the installation of the default protocol codec filter. The protocol codec must be then configured manually  e.g. using Spring:&lt;bean id='sslFilter' class='org.apache.mina.filter.SSLFilter'&gt; &lt;constructor-arg&gt; &lt;bean class='javax.net.ssl.SSLContext' factory-method='getDefault' /&gt; &lt;/constructor-arg&gt;&lt;/bean&gt;&lt;bean id='codecFilter' class='org.apache.mina.filter.codec.ProtocolCodecFilter'&gt; &lt;constructor-arg ref='hl7codec' /&gt;&lt;/bean&gt;&lt;bean id='hl7codec' class='org.apache.camel.component.hl7.HL7MLLPCodec' /&gt;&lt;bean id='minaFilters' class='java.util.ArrayList'&gt; &lt;constructor-arg&gt; &lt;list value-type='org.apache.mina.common.IoFilter'&gt; &lt;ref bean='sslFilter' /&gt;  &lt;ref bean='codecFilter' /&gt;  &lt;/list&gt; &lt;/constructor-arg&gt;&lt;/bean&gt;After that  the consumer endpoint URL can look likefrom('mina:tcp://0.0.0.0:8888?sync=true&amp;lazySessionCreation=true&amp;noDefaultCodec=true&amp;filters=#minaFilters').I am not sure whether this approach is optimal  therefore I call it 'workaround' and not 'solution'. The corresponding patch is attached.", "id": "2237"}, "2240": {"ground_truth": "0", "bug_report": "Ridiculously long release time due to the javadoc plugin\nRidiculously long release time due to the javadoc plugin", "id": "2240"}, "2245": {"ground_truth": "0", "bug_report": "Routing slip does not stop when Exchange is failed\nRouting slip does not stop when Exchange is failed", "id": "2245"}, "2255": {"ground_truth": "0", "bug_report": "camel-example-etl throw error when running it.\nHere is the stack trace.[ Camel thread 0: JpaComponent] JuelExpression DEBUG Noimpl class for juel ExpressionFactory defined in'META-INF/services/org/apache/camel/component/el'org.apache.camel.NoFactoryAvailableException: Could not find factory classfor resource: META-INF/services/org/apache/camel/component/juel atorg.apache.camel.impl.DefaultFactoryFinder.doFindFactoryProperties(DefaultFactoryFinder.java:135) atorg.apache.camel.impl.DefaultFactoryFinder.findClass(DefaultFactoryFinder.java:77) atorg.apache.camel.language.juel.JuelExpression.getExpressionFactory(JuelExpression.java:81) atorg.apache.camel.language.juel.JuelExpression.evaluate(JuelExpression.java:70) atorg.apache.camel.builder.ProcessorBuilder$4.process(ProcessorBuilder.java:94) atorg.apache.camel.management.InstrumentationProcessor.process(InstrumentationProcessor.java:67) atorg.apache.camel.processor.DelegateProcessor.processNext(DelegateProcessor.java:53) atorg.apache.camel.processor.DelegateProcessor.proceed(DelegateProcessor.java:82) atorg.apache.camel.processor.interceptor.TraceInterceptor.process(TraceInterceptor.java:93) atorg.apache.camel.management.InstrumentationProcessor.process(InstrumentationProcessor.java:67) atorg.apache.camel.processor.RedeliveryErrorHandler.processExchange(RedeliveryErrorHandler.java:223) atorg.apache.camel.processor.RedeliveryErrorHandler.processErrorHandler(RedeliveryErrorHandler.java:153) atorg.apache.camel.processor.RedeliveryErrorHandler.process(RedeliveryErrorHandler.java:91) atorg.apache.camel.processor.DefaultErrorHandler.process(DefaultErrorHandler.java:49) atorg.apache.camel.processor.DefaultChannel.process(DefaultChannel.java:206) at org.apache.camel.processor.Pipeline.process(Pipeline.java:74) atorg.apache.camel.processor.UnitOfWorkProcessor.processNext(UnitOfWorkProcessor.java:54) atorg.apache.camel.processor.DelegateProcessor.process(DelegateProcessor.java:48) atorg.apache.camel.management.InstrumentationProcessor.process(InstrumentationProcessor.java:67) atorg.apache.camel.component.jpa.JpaConsumer.processBatch(JpaConsumer.java:133) atorg.apache.camel.component.jpa.JpaConsumer$1.doInJpa(JpaConsumer.java:86) atorg.apache.camel.component.jpa.JpaTemplateTransactionStrategy$1$1.doInJpa(JpaTemplateTransactionStrategy.java:81) atorg.springframework.orm.jpa.JpaTemplate.execute(JpaTemplate.java:184) atorg.springframework.orm.jpa.JpaTemplate.execute(JpaTemplate.java:147) atorg.apache.camel.component.jpa.JpaTemplateTransactionStrategy$1.doInTransaction(JpaTemplateTransactionStrategy.java:79) atorg.springframework.transaction.support.TransactionTemplate.execute(TransactionTemplate.java:128) atorg.apache.camel.component.jpa.JpaTemplateTransactionStrategy.execute(JpaTemplateTransactionStrategy.java:77) atorg.apache.camel.component.jpa.JpaConsumer.poll(JpaConsumer.java:70) atorg.apache.camel.impl.ScheduledPollConsumer.run(ScheduledPollConsumer.java:108) atjava.util.concurrent.Executors$RunnableAdapter.call(Executors.java:441) atjava.util.concurrent.FutureTask$Sync.innerRunAndReset(FutureTask.java:317) at java.util.concurrent.FutureTask.runAndReset(FutureTask.java:150) atjava.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$101(ScheduledThreadPoolExecutor.java:98) atjava.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.runPeriodic(ScheduledThreadPoolExecutor.java:181) atjava.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:205) atjava.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:886) atjava.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:908) at java.lang.Thread.run(Thread.java:619)", "id": "2255"}, "2269": {"ground_truth": "0", "bug_report": "doCatch() - Without any exception given should report that as a problem\nCode like this .doTry() .to('mock:b') .throwException(new IllegalArgumentException('Damn')) .doCatch() .to('mock:catch') .end();Should report a failure in the route as doCatch must have at least 1 exception as parameter.It should correctly be .doCatch(Exception.class)We could also consider using Excpetion.class as default but in Java you must also provide the exception to catch and thus its more intuitive if its 100% like Java", "id": "2269"}, "2276": {"ground_truth": "0", "bug_report": "seda component - Support no timeout for task to complete using timeout 0 or negative\nSee nabblehttp://old.nabble.com/SEDA-Timeout-ts26724664.html", "id": "2276"}, "2292": {"ground_truth": "0", "bug_report": "RejectedExecutionException after restarting camel context\nUser reported over the #camel channel the following exception trying to send a message after the context was stopped and restarted 'Failed to create Producer for endpoint:'. Thats the exception I'm gettingReason: java.util.concurrent.RejectedExecutionExceptionException in thread 'core' org.apache.camel.FailedToCreateProducerException: Failed to create Producer for endpoint: Endpoint[activemq://queue:request.lavaOrderProducer.powerTraderServer]. Reason: java.util.concurrent.RejectedExecutionException at org.apache.camel.component.jms.JmsProducer.testAndSetRequestor(JmsProducer.java:116) at org.apache.camel.component.jms.JmsProducer.processInOut(JmsProducer.java:175) at org.apache.camel.component.jms.JmsProducer.process(JmsProducer.java:147) at org.apache.camel.impl.ProducerCache$1.doInProducer(ProducerCache.java:179) at org.apache.camel.impl.ProducerCache$1.doInProducer(ProducerCache.java:161) at org.apache.camel.impl.ProducerCache.doInProducer(ProducerCache.java:146) at org.apache.camel.impl.ProducerCache.sendExchange(ProducerCache.java:160) at org.apache.camel.impl.ProducerCache.send(ProducerCache.java:98) at org.apache.camel.impl.DefaultProducerTemplate.send(DefaultProducerTemplate.java:97) at com.wjb.producer.lavaData.dispatcher.ServerRequestDispatcher.requestSymbolSectorArray(ServerRequestDispatcher.java:122) at com.wjb.producer.core.LavaDataManager.initialize(LavaDataManager.java:64) at com.wjb.producer.core.ProducerCore.run(ProducerCore.java:98) at java.lang.Thread.run(Thread.java:619)Caused by: java.util.concurrent.RejectedExecutionException at java.util.concurrent.ThreadPoolExecutor$AbortPolicy.rejectedExecution(ThreadPoolExecutor.java:1760) at java.util.concurrent.ThreadPoolExecutor.reject(ThreadPoolExecutor.java:767) at java.util.concurrent.ScheduledThreadPoolExecutor.delayedExecute(ScheduledThreadPoolExecutor.java:216) at java.util.concurrent.ScheduledThreadPoolExecutor.schedule(ScheduledThreadPoolExecutor.java:366) at org.apache.camel.util.DefaultTimeoutMap.schedulePoll(DefaultTimeoutMap.java:156) at org.apache.camel.util.DefaultTimeoutMap.&lt;init&gt;(DefaultTimeoutMap.java:52) at org.apache.camel.component.jms.requestor.Requestor.&lt;init&gt;(Requestor.java:68) at org.apache.camel.component.jms.JmsProducer.testAndSetRequestor(JmsProducer.java:107)The following unit tests seems to reproduce the problem:ublic final class StartStopTest { private final GenericApplicationContext applicationContext = new GenericApplicationContext(); private final int testCount = 3; @Test public void test() throws Exception { //Initialize final File propertiesFile = new File(Constants.RESOURCE_DIRECTORY_NAME  Constants.PROPERTIES_FILE_NAME); PropertyConfigurator.configure(propertiesFile.getPath()); final File applicationContextFile = new File(Constants.RESOURCE_DIRECTORY_NAME  Constants.CONTEXT_FILE_NAME); final Resource applicationContextResource = new FileSystemResource(applicationContextFile); final AbstractBeanDefinitionReader beanDefinitionReader = new XmlBeanDefinitionReader(this.applicationContext); beanDefinitionReader.loadBeanDefinitions(applicationContextResource); this.applicationContext.refresh(); //Begin Testing for (int i = 0; i &lt; this.testCount; i++) { this.startSendStop(); Thread.sleep(3000); } } private void startSendStop() throws Exception { final SpringCamelContext springCamelContext = (SpringCamelContext)this.applicationContext.getBean(Constants.CAMEL_CONTEXT_NAME); final ProducerTemplate producerTemplate; final Endpoint serverRequestQueue; springCamelContext.start(); producerTemplate = springCamelContext.createProducerTemplate(); serverRequestQueue = springCamelContext.getEndpoint('serverRequestQueue'); final Exchange exchange = producerTemplate.send(serverRequestQueue  new Processor() { public void process(final Exchange exchange) throws Exception { exchange.setPattern(ExchangePattern.InOut); exchange.getIn().setHeader(ServerJmsServices.REQUEST  ServerJmsServices.GET_SYMBOL_INFO); exchange.getIn().setBody(''); } }); final String responseString = (String)exchange.getOut().getBody(); Assert.assertTrue(responseString.length() &gt; 0); springCamelContext.stop(); }}&lt;?xml version='1.0' encoding='UTF-8'?&gt;&lt;beans xmlns='http://www.springframework.org/schema/beans'  xmlns:xsi='http://www.w3.org/2001/XMLSchema-instance' xmlns:camel='http://camel.apache.org/schema/spring' xsi:schemaLocation='http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-2.5.xsd http://camel.apache.org/schema/spring http://camel.apache.org/schema/spring/camel-spring.xsd'&gt; &lt;!-- ActiveMQ component for Camel to use --&gt; &lt;bean id='activemq' class='org.apache.activemq.camel.component.ActiveMQComponent' &gt; &lt;property name='connectionFactory'&gt; &lt;bean class='org.apache.activemq.ActiveMQConnectionFactory'&gt; &lt;property name='brokerURL' value='tcp://192.168.5.10:61616?daemon=true' /&gt; &lt;/bean&gt; &lt;/property&gt; &lt;/bean&gt; &lt;!-- Camel Context --&gt; &lt;camelContext id='camelContext' xmlns='http://camel.apache.org/schema/spring' autoStartup='false'&gt;  &lt;camel:endpoint id='serverRequestQueue' uri='activemq:queue:request.lavaOrderProducer.powerTraderServer' /&gt; &lt;/camelContext&gt;&lt;/beans&gt;", "id": "2292"}, "2295": {"ground_truth": "0", "bug_report": "ExceptionHandler - Let it be able to log additional information such as a custom message or current exchange\nThis will output better exceptions in the logs when using the default exception handler which just logs it.The ExceptionHandler is used in consumers (polling  event driven) which cant send the exception back to a client and thus must handle it somehowand best shot is to log it  but you can plugin your own handler if you like", "id": "2295"}, "2303": {"ground_truth": "0", "bug_report": "GroupedExchange in Aggregator is not working correctly\nSee nabblehttp://old.nabble.com/Help%21-org.apache.camel.impl.GroupedExchange-does-not-exist-in-the-latest-download-ts26841584.html", "id": "2303"}, "2308": {"ground_truth": "0", "bug_report": "StrictHostKeyChecking Url Option\nCamel users will appreciate a new url option that sets JSch Session StrictHostKeyChecking to 'no' . Preferably  this new option will work just like URI Options knownHosts. This improvement will facilitate bypass sftp/ssh key authentication.", "id": "2308"}, "2310": {"ground_truth": "0", "bug_report": "UnitOfWork - Must be done in finally to ensure even when java.lang.Error is thrown fore reliable shutdown\nThis helps to keep in flight registry up-to-date even when java.lang.Error is thrown  such as when people use JUnit assertions.", "id": "2310"}, "2318": {"ground_truth": "0", "bug_report": "camel-bindy dataformat KeyValue DSL can't work\nWhen you set the bindy dataformat with below DSL   you will get the error that camel can't find the DataFormat.   public void configure() { from('direct:start').marshal() .bindy(BindyType.KeyValue  'org.apache.camel.dataformat.bindy.model.fix.simple') .to('mock:result'); }", "id": "2318"}, "2319": {"ground_truth": "0", "bug_report": "camel-cache - Missing some classes in .jar\nSee nabblehttp://old.nabble.com/Camel-Cache%3A-Processors-not-released--ts26908653.html", "id": "2319"}, "2320": {"ground_truth": "0", "bug_report": "JDBC component doesn't preserve headers\nJDBC component doesn't preserve any of the headers that are sent into it", "id": "2320"}, "2327": {"ground_truth": "0", "bug_report": "The NP check of the remote service is wrong in CamelServiceExporter\nWe should check the export service instead of the camelContext.&#8212; components/camel-spring/src/main/java/org/apache/camel/spring/remoting/CamelServiceExporter.jav(revision 895109)+++ components/camel-spring/src/main/java/org/apache/camel/spring/remoting/CamelServiceExporter.jav(working copy)@@ -83 7 +83 7 @@ } Endpoint endpoint = CamelContextHelper.getMandatoryEndpoint(camelContext  uri); notNull(camelContext  'service');+ notNull(getService()  'service'); Object proxy = getProxyForService(); consumer = endpoint.createConsumer(new BeanProcessor(proxy  camelContext));", "id": "2327"}, "2335": {"ground_truth": "0", "bug_report": "The  in Spring XML should support using serviceRef to lookup a reference for an endpoint\nEven though people can use the ref component  but that is hardly technique.So you can do using serviceRef to refer to the endpoint &lt;!-- create a proxy that will route to the direct:start endpoint when invoked --&gt; &lt;proxy id='myProxySender' serviceInterface='org.apache.camel.spring.config.MyProxySender' serviceRef='cool'/&gt; &lt;!-- define the endpoint we want to proxy --&gt; &lt;endpoint id='cool' uri='direct:start'/&gt;", "id": "2335"}, "2338": {"ground_truth": "0", "bug_report": "package will log WARN that you should use packageScan instead. We should keep both options so remove the WARN\n&#91;2010-01-06 11:32:35.494&#93; server-dm-7 org.apache.camel.spring.CamelContextFactoryBean.unknown W Using a packages element to specify packages to search has been deprecated. Please use a packageScan element instead.", "id": "2338"}, "2344": {"ground_truth": "0", "bug_report": "MailConsumer should log exception in processRollback\nThe MailConsumer logs in the rollback case the exchange (line 162 in revision 893983) but the exchange contains (usually ?) an exception which is not logged.In my case the exception is thrown from a custom Expression which splits a mail message.Only a rollback warning which contains the headers of the mail message is logged which makes finding the actual cause difficult.", "id": "2344"}, "2348": {"ground_truth": "0", "bug_report": "EventNotifier - Make it easy to ignore unwanted event categories\nThe current EventNotifier is a bit sparse. It should have a bunch of ignoreXXX events to filter by category. In case you do not want certain types etc.Also it can be used to configure it to only report failures which is interesting if you want to alert that to a monitoring system.", "id": "2348"}, "2352": {"ground_truth": "0", "bug_report": "camel-jdbc - Add option to select between JDBC 4 or 3 column label / name semantics\nJDBC drivers is often a pain when it comes to compliance.If you use SQL SELECT with aliases then you may have issues with camel-jdbc as it retrieves the column name use ResultSetMetaData which behaves different according to the JDBC spec.See more at:http://fusesource.com/forums/thread.jspa?messageID=5623&amp;#5623Introduce a new option useJDBC4ColumnNameAndLabelSemantics where you can configure which option to use. Will by default use JDBC 4", "id": "2352"}, "2361": {"ground_truth": "0", "bug_report": "Keep the lastModified timestamp when writing a file\n&gt;&gt; I do the following:&gt;&gt;&gt; 'ftp://tata@.../ftp.input?&amp;recursive=true&amp;binary=true&amp;consumer.delay=1000')&gt; .to('file://M:/FTP.INPUT/');&gt;&gt; I would like to have my file in transfered and keeping their&gt; lastModifiedTime. I wonder if a flag is available for that ? Another&gt; solution would be to get it from the Message and do it programmatically.&gt;... &#91;show rest of quote&#93;HiGood idea. Notice that the timestamp from the FTP library is often not100% accurate down to the seconds.Could you create a ticket in JIRA for this feature request?http://issues.apache.org/activemq/browse/CAMEL", "id": "2361"}, "2363": {"ground_truth": "0", "bug_report": "Remove sample caches from Camel Cache component\nCamel Cache has sample caches created by the component via its ehCache settings.These should not be created in order to avoid unnecessary taking up of ports by the sample caches.", "id": "2363"}, "2368": {"ground_truth": "0", "bug_report": "Bean Expression for Non Registry beans can't reference an instance\nThe documentation at the bottom of this page: http://camel.apache.org/bean-language.html says that I can use the bean expression DSL to work with beans that are not in the registry in two different ways (2.0-M2+). Specify Class/method and Camel will create a new instance of the bean and call the method. Specify instance/method and Camel will use the the specified instance and call the method.In fact  the doc shows examples of both:Method 1) from('activemq:topic:OrdersTopic'). filter().expression(bean(MyBean.class  'isGoldCustomer')). to('activemq:BigSpendersQueue');Method 2) private MyBean my; from('activemq:topic:OrdersTopic'). filter().expression(bean(my  'isGoldCustomer')). to('activemq:BigSpendersQueue');I am unable to do the latter (#2) as the methods are not defined. I'm using Camel 2.1.0 but I've tried 2.0.0 as well. So either the doc is wrong or the methods are missing/not visible. My code specifically is:private Object list;...from (getErrorEndpoint()) .recipientList(list  'getRecipients');Yes  there are easy ways to avoid this. But I prefer not to have to create more XML and/or specify a Class name here.Finally  is there a good reason '.recipientList()' isn't overloaded to take an Endpoint[] instead of only an Expression? The @RecipientList annotation seems to anticipate this form but there doesn't seem to be a good way to plug the @RecipientList annotated bean into the route definition. Even if the bean is in the registry it looks as if you still have to supply the method name anyway despite that its already annotated (unless you also annotate with @Handler which might be undesirable). Ideally  I could have...Object list = new Object() { @RecipientList public Collection&lt;Endpoint&gt; getRecipents(Object body) {... }}...from (endpoint).recipientList(&lt;any instance annotated with @RecipientList&gt;)or even// Look for method 'errors' then look for annotation @RecipientList('errors')from (endpoint).recipientList( bean  'errors' )Is this making any sense? (I'm still very wet behind the ears)", "id": "2368"}, "2375": {"ground_truth": "0", "bug_report": "Let ExpressionClause be reusable by other builders which are not route based\nAllows you to use all the expressions from ExpressionClause which has many  on other builders which are not tied to the route models.For example at mock  notify builder and elsewhere", "id": "2375"}, "2384": {"ground_truth": "0", "bug_report": "camel-bean - CGLIB proxied classed having trouble using annotated bean bindings\nHeader value (and body) is not bound in pojo method:Route definiton: camel:route trace='true' id='RapNotificationRoute'&gt; &lt;camel:from uri='oracleQueue:queue:FURTHERELEMENTS_TEST?jmsMessageType=Text'/&gt; &lt;camel:transacted ref='PROPAGATION_REQUIRED'/&gt; &lt;camel:wireTap uri='seda:audit'/&gt; &lt;camel:to uri='mock:result'/&gt; &lt;/camel:route&gt; &lt;camel:route id='AuditRoute'&gt; &lt;camel:from uri='seda:audit'/&gt; &lt;camel:bean ref='auditMessageDAO' method='audit'/&gt; &lt;/camel:route&gt;auditMessageDAO interface: public void audit(@Body String body  @Header(value='JMSMessageID' String jmsMessageId)Trace from log when running: &#91;Camel thread 0: seda://audit&#93; 20 jan. 2010 - 12:22:09 858 INFO org.apache.camel.processor.interceptor.Tracer[42a5443b-0a62-4477-885f-c6f6c40274b1 &gt;&gt;&gt; (AuditRoute) from(seda://audit) --&gt; ref:auditMessageDAO method: audit &lt;&lt;&lt; Pattern:InOnly  Headers:{JMSDestination=PLAYLISTE.FURTHERELEMENTS_TEST  JMS_OracleDelay=0  JMSDeliveryMode=2  JMSRedelivered=true  JMS_OracleTimestamp=1263986526156  JMSType=null  JMSCorrelationID=null  JMSXRecvTimestamp=1263986529858  JMSXState=0  JMSXDeliveryCount=2  JMSMessageID=ID:7D97CBE346B7CAA2E040650A0A103AC2  JMSTimestamp=1263986526156  JMSPriority=1  JMSXGroupID=null  JMS_OracleDeliveryMode=2  JMSXUserID=playliste  JMSExpiration=0  JMSReplyTo=null}  BodyType:byte[]  Body:&lt;?xml version='1.0' encoding='UTF-8' standalone='yes'?&gt;&lt;Publication&gt;hidden&lt;/Publication&gt;]The exchange gets send (Evenen when using Oracle AQ)  to the seda:audit endpoint and the auditMessageDAO gets called. Body is bound to correct payload but the header element JMSMessageID is null. If i change the parameter to include @Headers Map the parameter is still null.Current workaround is to use the Message  or Exchange as parameter  but then my pojo will have dependencies on Camel - ok for now.See thread : http://old.nabble.com/wiretap-getting-header-value-ts27238444.html for further details.", "id": "2384"}, "2388": {"ground_truth": "0", "bug_report": "Remove some dependencies\nWhile checking the dependencies of camel-cxf I found that some dependencies are at least not necessary to compile the project.I have attached a patch with the removed dependencies. The dependencies are:camel-springcxf-rt-transports-http-jetty", "id": "2388"}, "2392": {"ground_truth": "0", "bug_report": "DefaultTypeConverterRegistry - Let it load upfront\nThis allows it to pre load all type converters on startup instead on demand. This also removes the need for synchronization at runtime as the converters are loaded up front.", "id": "2392"}, "2395": {"ground_truth": "0", "bug_report": "file component - Using fileName option should better detect constant vs dynamic name\neg using fileName=header.txt makes Camel think its header with the name txt you want to use.", "id": "2395"}, "2398": {"ground_truth": "0", "bug_report": "DefaultCamelContext starts route services out of order\norg.apache.camel.impl.DefaultCamelContext uses HashMap to hold route servicesIn start() method it uses routeServices.values() to list route services.It does not work for Esper.Camel-extra Esper demo example for Esper  http://code.google.com/p/camel-extra/wiki/EsperDemo  creates 3 routes:1: Route[[From&#91;activemq:EventStreamQueue&#93;] -&gt; [To&#91;esper://feed&#93;]]2: Route[[From&#91;esper://feed?eql=insert into TicksPerSecond select feed  count(*) as cnt from com.iona.ps.demos.MarketDataEvent.win:time_batch(1 sec) group by feed&#93;] -&gt; [To&#91;esper://feed&#93;]]3: Route[[From&#91;esper://feed?eql=select feed  avg(cnt) from TicksPerSecond.win:time(10 sec) group by feed + having cnt &lt; avg(cnt) * 0.75&#93;] -&gt; [To&#91;esper://feed&#93;  process&#91;com.iona.ps.demos.MyRouteBuilder$1@1274069&#93;]]3-rd route depends on 2-nd route  it uses TicksPerSecond event type that gets created in route 2.DefaultCamelContext starts 3-rd route before 2-nd route  as a result Esper fails to resolve event type:com.espertech.esper.epl.expression.ExprValidationException: Failed to resolve event type: Event type or class named 'TicksPerSecond' was not found at com.espertech.esper.epl.spec.FilterStreamSpecRaw.resolveType(FilterStreamSpecRaw.java:189) at com.espertech.esper.epl.spec.FilterStreamSpecRaw.compile(FilterStreamSpecRaw.java:99) at com.espertech.esper.core.StatementLifecycleSvcImpl.compile(StatementLifecycleSvcImpl.java:956) at com.espertech.esper.core.StatementLifecycleSvcImpl.createStopped(StatementLifecycleSvcImpl.java:195) ... As a workaround  it is possible to change startup order by assigning custom ids to routes  so routeServices HashMap would return values in different order. Please  be advise that 3-rd route's From URI: 'esper://feed?eql=select feed  avg(cnt) from TicksPerSecond.win:time(10 sec) group by feed + having cnt &lt; avg(cnt) * 0.75' is modified original From URI from svn:'esper://feed?eql=select feed  avg(cnt) as avgCnt  cnt as feedCnt from TicksPerSecond.win:time(10 sec) group by feed + having cnt &lt; avg(avgCnt) * 0.75' It was done to resolve Esper compiling issue with avgCnt and feedCnt and has no impact on this reported Camel issue .", "id": "2398"}, "2434": {"ground_truth": "0", "bug_report": "Mock component - expected header and property should output the name that fails\nSo you know the name of the header which failed. Currently it just say: Header of message bla bla", "id": "2434"}, "2436": {"ground_truth": "0", "bug_report": "BeanProcessor - Should differentiate between void and method returning null values\nWhen invoking a bean method it should better detect whether the bean is a void or has a return type.And if it returns null it should be regarded as a valid response and set as body.See nabblehttp://old.nabble.com/filtering-messages-ts27403559.html", "id": "2436"}, "2447": {"ground_truth": "0", "bug_report": "cxfbean should  propagate CONTENT_TYPE for other camel component to use\nThere is no 'content-type' header return from the below route &lt;route&gt; &lt;from uri='jetty:http://localhost:9006/employeesBase?matchOnUriPrefix=true'/&gt; &lt;to uri='cxfbean:EmployeesPOJO'/&gt; &lt;/route&gt;", "id": "2447"}, "2452": {"ground_truth": "0", "bug_report": "HttpHeaderFilterStrategy dosn't filters out 'Cache-Control'  'Connection'  'Pragma'  'Trailer'  'Transfer-Encoding'  'Upgrade'  'Via' and 'Warning' in method applyFilterToCamelHeaders\nHttpHeaderFilterStrategy uses the HTTP headers with upper case characters on the beginning (e. g. 'Transfer-Encoding' instead of 'transfer-encoding').", "id": "2452"}, "2456": {"ground_truth": "0", "bug_report": "WARNING log of JmsTemporaryTopicEndpoint   JmsTemporaryQueueEndpoint don't have the ManagedResource annotation\nHere is the mail thread which discusses about this issue.http://old.nabble.com/Attemp-to-send-message-to-activemq-temporary-queue-using-producerTemplate%3A-InvalidMetadataException-tp27520096p27520096.html", "id": "2456"}, "2458": {"ground_truth": "0", "bug_report": "HttpHeaderFilterStrategy should filter the HTTP 'Date' header when applyFilterToCamelHeaders is called\nSee rfc2616.", "id": "2458"}, "2471": {"ground_truth": "0", "bug_report": "seda endpoint - Let it be easily to configure size option to use an unbounded queue\nInstead of having 1000 as the default size we should let it be unbounded by default and let people set a size if they really want that", "id": "2471"}, "2476": {"ground_truth": "0", "bug_report": "Camel Velocity: change the case of all fields properties Header\nUsing the velocity component doesn't respect the case matching of all fields of the header.For example: the exchange of properties CorrelationID change the case matching  after using velocity component  it puts the property in lowercase correlationid.", "id": "2476"}, "2477": {"ground_truth": "0", "bug_report": "Camel Freemarker: change the case of all fields properties Header\nUsing the Freemarker component doesn't respect the case matching of all fields of the header.For example: the exchange of properties CorrelationID change the case matching  after using Freemarker component  it puts the property in lowercase correlationid.", "id": "2477"}, "2483": {"ground_truth": "0", "bug_report": "NotifyBuilder - add reset method\nAdd a reset() method", "id": "2483"}, "2486": {"ground_truth": "1", "bug_report": "DefaultCamelContext throws NPE in start() for route with no destination\nNot easy to track down when you have a lot of routes. This might be new with the introduction of StartupRouteHolder (I think that was introduced in 2.1  right?)public class TriggerNPETest extends CamelTestSupport { @Override protected RouteBuilder createRouteBuilder() throws Exception { return new RouteBuilder() { public void configure() { // This will generate an NPE on DefaultCamelContext.start() (line 973) // If this is an invalid route a proper message should be given far before  // this and/or NPE should be tested on line 973 from('direct:psd.nowhere'); } }; } @Test public void testme() throws Exception { Thread.sleep(10000); }}java.lang.NullPointerException at org.apache.camel.impl.DefaultCamelContext.start(DefaultCamelContext.java:973) at org.apache.camel.test.junit4.CamelTestSupport.startCamelContext(CamelTestSupport.java:145) at org.apache.camel.test.junit4.CamelTestSupport.setUp(CamelTestSupport.java:98) // now start the inputs for all the route services as we have prepared Camel // yeah open the floods so messages can start flow into Camel for (Map.Entry&lt;Integer  StartupRouteHolder&gt; entry : inputs.entrySet()) { Integer order = entry.getKey(); Route route = entry.getValue().getRoute(); // &lt;&lt;&lt;------- Right here.", "id": "2486"}, "2492": {"ground_truth": "0", "bug_report": "PollingConsumerPollStrategy - Should support boolean on begin to support skipping polling\nSee nabblehttp://old.nabble.com/File-Consumer-with-dynamic-list-of-files-to-poll-ts27683938.htmlAnd wiki pagehttp://camel.apache.org/polling-consumer.html", "id": "2492"}, "2514": {"ground_truth": "0", "bug_report": "karaf features.xml  should use servicemix commons-pool bundle\nas commons-pool/commons-pool/1.5.4 osgi manifest header isn't correct  which shouldn't import org.apache.commons.pool package.SMX4-491&#91;1&#93; create servicemix wrapper bundle to fix this issue  so the karaf features.xml should use servicemix wrapper bundle&#91;1&#93;https://issues.apache.org/activemq/browse/SMX4-491", "id": "2514"}, "2526": {"ground_truth": "0", "bug_report": "SedaConsumer - Add check to limit the concurrentConsumer to < 1000 to prevent mistypes\nIf you enter concurrentConsumers=99999999 then Camel creates a lot of threads for concurrent consumers on the SEDA queue.We should validate the size is a reasonable value  at least &lt; 1000. Maybe limit to &lt; 500", "id": "2526"}, "2528": {"ground_truth": "0", "bug_report": "should use servicemix jaxws 2.1 spec bundle but not the geronimo one\notherwise will see the exception like javax.xml.ws.spi.FactoryFinder$ConfigurationError: Provider org.apache.axis2.jaxws.spi.Provider not foundat javax.xml.ws.spi.FactoryFinder$2.run(FactoryFinder.java:135)at javax.xml.ws.spi.FactoryFinder.doPrivileged(FactoryFinder.java:264)at javax.xml.ws.spi.FactoryFinder.newInstance(FactoryFinder.java:122)at javax.xml.ws.spi.FactoryFinder.access$200(FactoryFinder.java:42)at javax.xml.ws.spi.FactoryFinder$3.run(FactoryFinder.java:255)at javax.xml.ws.spi.FactoryFinder.doPrivileged(FactoryFinder.java:264)at javax.xml.ws.spi.FactoryFinder.find(FactoryFinder.java:165)at javax.xml.ws.spi.Provider.provider(Provider.java:39)at javax.xml.ws.Service.&lt;init&gt;(Service.java:36)", "id": "2528"}, "2529": {"ground_truth": "0", "bug_report": "ConsumerTemplate don't support the jms uri with selector\nThis unit test can shows the issue that selector option don't work for ConsumerTemplate@Test public void testConsumerTemplate() throws Exception { template.sendBodyAndHeader('activemq:queue:consumer'  'Message1'  'SIZE_NUMBER'  1505); template.sendBodyAndHeader('activemq:queue:consumer'  'Message3'  'SIZE_NUMBER'  1300); template.sendBodyAndHeader('activemq:queue:consumer'  'Message2'  'SIZE_NUMBER'  1600); // process every exchange which is ready. If no exchange is left break // the loop while (true) { Exchange ex = consumer.receiveNoWait('activemq:queue:consumer?selector=SIZE_NUMBER&lt;1500'); if (ex != null) { Message message = ex.getIn(); int size = message.getHeader('SIZE_NUMBER'  int.class); assertTrue('The message header SIZE_NUMBER should be less than 1500'  size &lt; 1500); assertEquals('The message body is wrong'  'Message3'  message.getBody()); } else { break; } } }And here is mail thread which discusses about it.", "id": "2529"}, "2537": {"ground_truth": "0", "bug_report": "Batch Resequencer issues with JMSPriority\nMy project uses ActiveMQ and we have a requirement to support priority queues for one or more of our configured queues. One of the suggestions under the ActiveMQ FAQ is to use a Resequencer  so I followed the link and applied the &lt;resequence&gt; element to my XML-based route. While testing this functionality we uncovered a couple issues that seem like they should be addressed in a future release of camel-core. The JMSPriority header is not a unique field and internally the Resequencer class uses java.util.Set to collect messages into a batch. This means that a given batch cannot contain multiple messages with the same JMSPriority. For example  if I use the default batch config and submit five messages with JMSPriority=6 to the queue within a second  only one of those message is delivered to the configured endpoint. According to the JMS API  priority has ten values where 0 is the lowest and 9 is the highest. This means that messages with higher priorities should be processed before messages with lower priorities. When I configure my resequencer with &lt;header&gt;JMSPriority&lt;/header&gt;  however  it by default orders the messages within the batch in ascending order which means that messages with lower priorities are processed first.If there are any known workarounds to these issues please document them  because the current Resequencer documentation that uses JMSPriority as an example is misleading.", "id": "2537"}, "2540": {"ground_truth": "0", "bug_report": "async route not working with Mina\nhere is my route: from('mina:tcp://localhost:6202?textline=true&amp;sync=true').process(new Processor() { public void process(Exchange exchange) throws Exception { String body = exchange.getIn().getBody(String.class); Thread.sleep(5000); exchange.getOut().setBody('Bye 1' + body); } }); from('file:///test/test/response') .convertBodyTo(String.class)//.threads(1) .toAsync('mina:tcp://localhost:6202?sync=true&amp;textline=true' 10) .to('log:+++ reply++++'); here is the output  you can see all reply logs have a same message body and async process is releasing all threads at the first response  this is probably Mina component bug in the context of aync route.2010-03-11 10:21:16 405 &#91;Camel thread 11: FileComponent&#93; FileConsumer DEBUG Total 3 files to consume2010-03-11 10:21:16 405 &#91;Camel thread 11: FileComponent&#93; FileConsumer DEBUG About to process file: GenericFile&#91;C:/test/test/response/Copy (2) of New Text Document (3).txt&#93; using exchange: Exchange[GenericFileMessage with file: GenericFile&#91;C:/test/test/response/Copy (2) of New Text Document (3).txt&#93;]2010-03-11 10:21:16 452 &#91;Camel thread 11: FileComponent&#93; DefaultManagementAgent DEBUG Registered MBean with objectname: org.apache.camel:context=tamlft0spj1/cameltest type=producers name=MinaProducer(0x2e6c66)2010-03-11 10:21:16 452 &#91;Camel thread 11: FileComponent&#93; MinaProducer DEBUG Starting producer: Producer&#91;mina://tcp://localhost:6202?sync=true&amp;textline=true&#93;2010-03-11 10:21:16 452 &#91;Camel thread 11: FileComponent&#93; ProducerCache DEBUG Adding to producer service pool with key: Endpoint&#91;mina://tcp://localhost:6202?sync=true&amp;textline=true&#93; for producer: Producer&#91;mina://tcp://localhost:6202?sync=true&amp;textline=true&#93;2010-03-11 10:21:16 452 &#91;2: SendAsyncProcessor-Producer&#93; MinaProducer DEBUG Creating connector to address: localhost/127.0.0.1:6202 using connector: org.apache.mina.transport.socket.nio.SocketConnector@16cefa8 timeout: 30000 millis.2010-03-11 10:21:16 452 &#91;Camel thread 11: FileComponent&#93; FileConsumer DEBUG About to process file: GenericFile&#91;C:/test/test/response/Copy of New Text Document (3).txt&#93; using exchange: Exchange[GenericFileMessage with file: GenericFile&#91;C:/test/test/response/Copy of New Text Document (3).txt&#93;]2010-03-11 10:21:16 467 &#91;3: SendAsyncProcessor-Producer&#93; MinaProducer DEBUG Creating connector to address: localhost/127.0.0.1:6202 using connector: org.apache.mina.transport.socket.nio.SocketConnector@16cefa8 timeout: 30000 millis.2010-03-11 10:21:16 467 &#91;Camel thread 11: FileComponent&#93; FileConsumer DEBUG About to process file: GenericFile&#91;C:/test/test/response/New Text Document (3).txt&#93; using exchange: Exchange[GenericFileMessage with file: GenericFile&#91;C:/test/test/response/New Text Document (3).txt&#93;]2010-03-11 10:21:16 467 &#91;4: SendAsyncProcessor-Producer&#93; MinaProducer DEBUG Creating connector to address: localhost/127.0.0.1:6202 using connector: org.apache.mina.transport.socket.nio.SocketConnector@16cefa8 timeout: 30000 millis.2010-03-11 10:21:16 499 &#91;SocketConnectorIoProcessor-0.1&#93; ExecutorFilter DEBUG Launching thread for localhost/127.0.0.1:62022010-03-11 10:21:16 499 [ SocketAcceptorIoProcessor-0.0] ExecutorFilter DEBUG Launching thread for /127.0.0.1:33622010-03-11 10:21:16 499 [ SocketAcceptorIoProcessor-0.1] ExecutorFilter DEBUG Launching thread for /127.0.0.1:33632010-03-11 10:21:16 499 &#91;SocketConnectorIoProcessor-0.0&#93; ExecutorFilter DEBUG Launching thread for localhost/127.0.0.1:62022010-03-11 10:21:16 499 [ SocketAcceptorIoProcessor-0.2] ExecutorFilter DEBUG Launching thread for /127.0.0.1:33742010-03-11 10:21:16 499 &#91;SocketConnectorIoProcessor-0.2&#93; ExecutorFilter DEBUG Launching thread for localhost/127.0.0.1:62022010-03-11 10:21:16 514 &#91;amel thread 22: MinaThreadPool&#93; ExecutorFilter DEBUG Exiting since queue is empty for /127.0.0.1:33632010-03-11 10:21:16 514 &#91;amel thread 24: MinaThreadPool&#93; ExecutorFilter DEBUG Exiting since queue is empty for /127.0.0.1:33622010-03-11 10:21:16 514 &#91;amel thread 23: MinaThreadPool&#93; ExecutorFilter DEBUG Exiting since queue is empty for localhost/127.0.0.1:62022010-03-11 10:21:16 514 &#91;2: SendAsyncProcessor-Producer&#93; MinaProducer DEBUG Writing body : hello22010-03-11 10:21:16 514 &#91;3: SendAsyncProcessor-Producer&#93; MinaProducer DEBUG Writing body : hello32010-03-11 10:21:16 514 &#91;amel thread 26: MinaThreadPool&#93; ExecutorFilter DEBUG Exiting since queue is empty for /127.0.0.1:33742010-03-11 10:21:16 514 &#91;amel thread 25: MinaThreadPool&#93; ExecutorFilter DEBUG Exiting since queue is empty for localhost/127.0.0.1:62022010-03-11 10:21:16 514 &#91;amel thread 27: MinaThreadPool&#93; ExecutorFilter DEBUG Exiting since queue is empty for localhost/127.0.0.1:62022010-03-11 10:21:16 514 &#91;4: SendAsyncProcessor-Producer&#93; MinaProducer DEBUG Writing body : hello12010-03-11 10:21:16 514 &#91;SocketConnectorIoProcessor-0.2&#93; ExecutorFilter DEBUG Launching thread for localhost/127.0.0.1:62022010-03-11 10:21:16 514 &#91;3: SendAsyncProcessor-Producer&#93; MinaProducer DEBUG Waiting for response2010-03-11 10:21:16 530 &#91;2: SendAsyncProcessor-Producer&#93; MinaProducer DEBUG Waiting for response2010-03-11 10:21:16 530 &#91;4: SendAsyncProcessor-Producer&#93; MinaProducer DEBUG Waiting for response2010-03-11 10:21:16 530 [ SocketAcceptorIoProcessor-0.2] ExecutorFilter DEBUG Launching thread for /127.0.0.1:33742010-03-11 10:21:16 530 &#91;amel thread 27: MinaThreadPool&#93; ExecutorFilter DEBUG Exiting since queue is empty for localhost/127.0.0.1:62022010-03-11 10:21:16 530 &#91;amel thread 26: MinaThreadPool&#93; MinaConsumer DEBUG Received body: hello22010-03-11 10:21:21 530 &#91;amel thread 26: MinaThreadPool&#93; MinaConsumer DEBUG Writing body: Bye 1hello22010-03-11 10:21:21 530 &#91;SocketConnectorIoProcessor-0.2&#93; ExecutorFilter DEBUG Launching thread for localhost/127.0.0.1:62022010-03-11 10:21:21 530 &#91;amel thread 27: MinaThreadPool&#93; MinaProducer DEBUG Message received: Bye 1hello22010-03-11 10:21:21 530 &#91;amel thread 27: MinaThreadPool&#93; ExecutorFilter DEBUG Exiting since queue is empty for localhost/127.0.0.1:62022010-03-11 10:21:21 530 &#91;amel thread 26: MinaThreadPool&#93; MinaConsumer DEBUG Received body: hello32010-03-11 10:21:21 530 &#91;:6202?sync=true&amp;textline=true&#93;] SendProcessor DEBUG Async reply received now routing the Exchange: Exchange&#91;Message: Bye 1hello2&#93;2010-03-11 10:21:21 530 &#91;:6202?sync=true&amp;textline=true&#93;] SendProcessor DEBUG Async reply received now routing the Exchange: Exchange&#91;Message: Bye 1hello2&#93;2010-03-11 10:21:21 530 &#91;:6202?sync=true&amp;textline=true&#93;] SendProcessor DEBUG Async reply received now routing the Exchange: Exchange&#91;Message: Bye 1hello2&#93;2010-03-11 10:21:21 546 &#91;:6202?sync=true&amp;textline=true&#93;] DefaultManagementAgent DEBUG Registered MBean with objectname: org.apache.camel:context=tamlft0spj1/cameltest type=producers name=Producer(0x16321e6)2010-03-11 10:21:21 546 &#91;:6202?sync=true&amp;textline=true&#93;] ProcessorEndpoint$1 DEBUG Starting producer: Producer&#91;log://+++ reply++++&#93;2010-03-11 10:21:21 546 &#91;:6202?sync=true&amp;textline=true&#93;] ProducerCache DEBUG Adding to producer cache with key: Endpoint&#91;log://+++ reply++++&#93; for producer: Producer&#91;log://+++ reply++++&#93;2010-03-11 10:21:21 546 &#91;:6202?sync=true&amp;textline=true&#93;] +++ reply++++ INFO Exchange&#91;BodyType:String  Body:Bye 1hello2&#93;2010-03-11 10:21:21 546 &#91;:6202?sync=true&amp;textline=true&#93;] GenericFileOnCompletion DEBUG Done processing file: GenericFile&#91;C:/test/test/response/Copy (2) of New Text Document (3).txt&#93; using exchange: Exchange&#91;Message: Bye 1hello2&#93;2010-03-11 10:21:21 546 &#91;:6202?sync=true&amp;textline=true&#93;] +++ reply++++ INFO Exchange&#91;BodyType:String  Body:Bye 1hello2&#93;2010-03-11 10:21:21 546 &#91;:6202?sync=true&amp;textline=true&#93;] GenericFileOnCompletion DEBUG Done processing file: GenericFile&#91;C:/test/test/response/Copy of New Text Document (3).txt&#93; using exchange: Exchange&#91;Message: Bye 1hello2&#93;2010-03-11 10:21:21 546 &#91;:6202?sync=true&amp;textline=true&#93;] FileUtil DEBUG Tried 1 to delete file: C:/test/test/response/Copy (2) of New Text Document (3).txt.camelLock with result: true2010-03-11 10:21:21 561 &#91;:6202?sync=true&amp;textline=true&#93;] +++ reply++++ INFO Exchange&#91;BodyType:String  Body:Bye 1hello2&#93;2010-03-11 10:21:21 561 &#91;:6202?sync=true&amp;textline=true&#93;] GenericFileOnCompletion DEBUG Done processing file: GenericFile&#91;C:/test/test/response/New Text Document (3).txt&#93; using exchange: Exchange&#91;Message: Bye 1hello2&#93;2010-03-11 10:21:21 561 &#91;:6202?sync=true&amp;textline=true&#93;] FileUtil DEBUG Tried 1 to delete file: C:/test/test/response/Copy of New Text Document (3).txt.camelLock with result: true2010-03-11 10:21:21 561 &#91;:6202?sync=true&amp;textline=true&#93;] nericFileRenameProcessStrategy DEBUG Renaming file: GenericFile&#91;C:/test/test/response/Copy (2) of New Text Document (3).txt&#93; to: GenericFile&#91;C:/test/test/response/.camel/Copy (2) of New Text Document (3).txt&#93;2010-03-11 10:21:21 561 &#91;:6202?sync=true&amp;textline=true&#93;] FileUtil DEBUG Tried 1 to delete file: C:/test/test/response/New Text Document (3).txt.camelLock with result: true2010-03-11 10:21:21 561 &#91;:6202?sync=true&amp;textline=true&#93;] nericFileRenameProcessStrategy DEBUG Renaming file: GenericFile&#91;C:/test/test/response/Copy of New Text Document (3).txt&#93; to: GenericFile&#91;C:/test/test/response/.camel/Copy of New Text Document (3).txt&#93;2010-03-11 10:21:21 561 &#91;:6202?sync=true&amp;textline=true&#93;] nericFileRenameProcessStrategy DEBUG Renaming file: GenericFile&#91;C:/test/test/response/New Text Document (3).txt&#93; to: GenericFile&#91;C:/test/test/response/.camel/New Text Document (3).txt&#93;2010-03-11 10:21:21 561 &#91;:6202?sync=true&amp;textline=true&#93;] FileUtil DEBUG Tried 1 to rename file: C:/test/test/response/Copy (2) of New Text Document (3).txt to: C:/test/test/response/.camel/Copy (2) of New Text Document (3).txt with result: true2010-03-11 10:21:21 561 &#91;:6202?sync=true&amp;textline=true&#93;] FileUtil DEBUG Tried 1 to rename file: C:/test/test/response/Copy of New Text Document (3).txt to: C:/test/test/response/.camel/Copy of New Text Document (3).txt with result: true2010-03-11 10:21:21 577 &#91;:6202?sync=true&amp;textline=true&#93;] FileUtil DEBUG Tried 1 to rename file: C:/test/test/response/New Text Document (3).txt to: C:/test/test/response/.camel/New Text Document (3).txt with result: true2010-03-11 10:21:26 530 &#91;amel thread 26: MinaThreadPool&#93; MinaConsumer DEBUG Writing body: Bye 1hello32010-03-11 10:21:26 530 &#91;amel thread 26: MinaThreadPool&#93; MinaConsumer DEBUG Received body: hello12010-03-11 10:21:26 530 &#91;SocketConnectorIoProcessor-0.2&#93; ExecutorFilter DEBUG Launching thread for localhost/127.0.0.1:62022010-03-11 10:21:26 530 &#91;amel thread 27: MinaThreadPool&#93; MinaProducer DEBUG Message received: Bye 1hello32010-03-11 10:21:26 530 &#91;amel thread 27: MinaThreadPool&#93; ExecutorFilter DEBUG Exiting since queue is empty for localhost/127.0.0.1:62022010-03-11 10:21:31 531 &#91;amel thread 26: MinaThreadPool&#93; MinaConsumer DEBUG Writing body: Bye 1hello12010-03-11 10:21:31 531 &#91;SocketConnectorIoProcessor-0.2&#93; ExecutorFilter DEBUG Launching thread for localhost/127.0.0.1:62022010-03-11 10:21:31 531 &#91;amel thread 26: MinaThreadPool&#93; ExecutorFilter DEBUG Exiting since queue is empty for /127.0.0.1:33742010-03-11 10:21:31 531 &#91;amel thread 27: MinaThreadPool&#93; MinaProducer DEBUG Message received: Bye 1hello12010-03-11 10:21:31 531 &#91;amel thread 27: MinaThreadPool&#93; ExecutorFilter DEBUG Exiting since queue is empty for localhost/127.0.0.1:6202", "id": "2540"}, "2554": {"ground_truth": "0", "bug_report": "IndexOutOfBoundsException occur in UnsafeUriCharactersEncoder.class\nHere is the mail thread for the detail discussion.", "id": "2554"}, "2566": {"ground_truth": "0", "bug_report": "camel-http component should set Transfer-Encoding as chunked header for response message when checkChunked is true\nso that the client side which send request will know this is a chunked message.It's important when the response http headers is more than 4096 and we want to use chunked response message", "id": "2566"}, "2567": {"ground_truth": "0", "bug_report": "Allow recipientList to be used inside a CBR using Java DSL\nRecipientList is now offering fluent builders for parallel support.We should allow it to work in CBR with having end() being able to return the Type it came from  eg ChoiceDefinition.See nabblehttp://old.nabble.com/RecipientList-%2B-Choice-no-longer-work-together-in-Camel-2.2.0--ts27983922.html", "id": "2567"}, "2575": {"ground_truth": "0", "bug_report": "CXFRS Routing in 2.2.0 does not behave like in 2.0.0\nCXFRS Routing in Camel 2.0.0 works well with these endPoints:&lt;cxf:rsServer id='restRouter' address='/restRouter/'  serviceClass='com.project.service.impl.ServiceManagerImpl' /&gt; &lt;cxf:rsClient id='restEndpoint' address='http://localhost:8080/services/rest' serviceClass='com.project.service.impl.ServiceManagerImpl' /&gt;In Camel 2.2.0  Routing fails with error causing the CXF Client to invoke a 404 not found Rest Service which is 'http://localhost:8080/services/rest/restRouter/Path'.The address of cxf:rsClient is being appended by the cxf:rsServer's address", "id": "2575"}, "2587": {"ground_truth": "0", "bug_report": "Graceful shutdown - Add option to shutdown routes in reverse order as they were started\nAs its more intuitive this way.And it should be the new default in 2.3 onwards. The old behavior can be enabled by turning off the shutdownRoutesInReverseOrder option.", "id": "2587"}, "2603": {"ground_truth": "0", "bug_report": "support get operation for cache\nPlease support get operation on cache component.here is the discussion.http://old.nabble.com/read-from-cache-component-ts28071593.html", "id": "2603"}, "2606": {"ground_truth": "0", "bug_report": "Make use of testing mocks of the the GAE SDK\nReplace existing GAE service mocks with those coming with the GAE SDK.", "id": "2606"}, "2622": {"ground_truth": "0", "bug_report": "Invocation of hasNext() on org.apache.camel.util.ObjectHelper.createIterator(...).new Iterator() {...} return different results\npublic boolean hasNext() { // empty string should not be regarded as having next return ++idx == 0 &amp;&amp; ObjectHelper.isNotEmpty(s); } public String next() { return s; }This is incorrect. Should be: public boolean hasNext() { // empty string should not be regarded as having next return idx+1 == 0 &amp;&amp; ObjectHelper.isNotEmpty(s); } public String next() { idx++; return s; }", "id": "2622"}, "2629": {"ground_truth": "0", "bug_report": "Aggregator - Completion by batch consumer should trigger completion for the batch group if multiple correlation keys was used\nYeah its really an odd use case if you use multiple correlation keys for the same batch consumer  but its still possible to do.", "id": "2629"}, "2636": {"ground_truth": "0", "bug_report": "IOException: Bad file descriptor and FileNotFoundException\nWhen I try to stream BINARY (pdf) file using camel-http I get the java.io.IOException: Bad file descriptorThe pdf isn't recieved succesfully by reciever (0kb)This seems to be caused by a bug in java (on linux systems)  closing inputstream twice causes problems. It seemed to me this is exactly what is happening  see also link:http://256.com/gray/docs/misc/java_bad_file_descriptor_close_bug.shtmlI fixed this by (checking out apache camel-core and camel-http 2.2.0):In FileInputStreamCache.java:In method close() wrapped getInputStream().close() in if:if (stream != null &amp;&amp; stream instanceof FileInputStream &amp;&amp; ((FileInputStream) stream).getChannel().isOpen()) {getInputStream().close() ;}In method reset() also:if (stream != null &amp;&amp; stream instanceof FileInputStream &amp;&amp; ((FileInputStream) stream).getChannel().isOpen()) {getInputStream().close() ;}Second I needed to fix a filenotfoundexception  the tempfile created by camel was deleted to early.I changed CachedOutputStream.java Reimplemented constructor:public CachedOutputStream(Exchange exchange) { String hold = exchange.getContext().getProperties().get(THRESHOLD); String dir = exchange.getContext().getProperties().get(TEMP_DIR); if (hold != null) { this.threshold = exchange.getContext().getTypeConverter().convertTo(Long.class  hold); } if (dir != null) { this.outputDir = exchange.getContext().getTypeConverter().convertTo(File.class  dir); } // add on completion so we can cleanup after the exchange is done such // as deleting temporary files exchange.addOnCompletion(new SynchronizationAdapter() { @Override public void onDone(Exchange exchange) { try { // close the stream and FileInputStreamCache // close(); // for (FileInputStreamCache cache : fileInputStreamCaches) // { // cache.close(); // } // cleanup temporary file if (tempFile != null) { System.err.println('####################################################'); System.err.println('DISABLED tempFile.delete:89'); System.err.println('####################################################'); // boolean deleted = tempFile.delete(); // if (!deleted) { // LOG.warn('Cannot delete temporary cache file: ' + // tempFile); // } else if (LOG.isTraceEnabled()) { // LOG.trace('Deleted temporary cache file: ' + // tempFile); // } tempFile = null; } } catch (Exception e) { LOG.warn('Error deleting temporary cache file: ' + tempFile  e); } } @Override public String toString() { return 'OnCompletion[CachedOutputStream]'; } }); }Reimplemented close():public void close() throws IOException { System.err.println('####################################################'); System.err.println('outputStream.close:119 -&gt; delete tempFile'); System.err.println('####################################################'); new Exception().printStackTrace(); currentStream.close(); boolean deleted = tempFile.delete(); if (!deleted) { LOG.warn('Cannot delete temporary cache file: ' + tempFile); } else if (LOG.isTraceEnabled()) { LOG.trace('Deleted temporary cache file: ' + tempFile); } }", "id": "2636"}, "2642": {"ground_truth": "0", "bug_report": "Inconsistency between IntrospectionSupport.getProperties() and IntrospectionSupport.getProperty()\nIntrospectionSupport.getProperties() and IntrospectionSupport.getProperty() work in an inconsistency way:ExampleBean bean = new ExampleBean();Date date = new Date(0);bean.setDate(date);assertSame(date  IntrospectionSupport.getProperty(bean  'date')); // succeedMap&lt;String  Object&gt; map = new HashMap&lt;String  Object&gt;();IntrospectionSupport.getProperties(bean  map  null);assertSame(date  map.get('date')); // fails", "id": "2642"}, "2656": {"ground_truth": "0", "bug_report": "Aggregator - Add option to specify if completionInterval to have interval based completion\nThis allows for example the stock quote example to use 5 sec interval to trigger completions to spit out current quotes every 5th seconds.", "id": "2656"}, "2663": {"ground_truth": "0", "bug_report": "DefaultPackageScanClassResolver can't read entries in an eclipse rcp app because it can't handle bundleresource - protocol\nscenario:I have an eclipse rcp based app and use the apache camel libs within my plugin  i.e. the libs are one classpath of the plugin. I use a route using camel-mail to process some mailqueues.CamelContext context = new DefaultCamelContext();context.addRoutes(new RouteBuilder() { public void configure() { from('imaps://mailserver?username=user&amp;password=password&amp;consumer.delay=5000&amp;delete=false&amp;unseen=true') .to('log: new mail'); }}); context.start();When I start my app all seems to be ok. But in my log I get a lot of error messages regarding the loading of converters. If I ask my context to find a converter f.i. to converty to byte[] form inputstream (as I did see in another mail example reagding attachments) I get null because the context can't find one.I debugged deeper into the camel code and it seems that the DefaultPackageScanClassResolver can't load from urls starting with bundleresource like 'bundleresource://109.fwk32380043:4/org/apache/camel/component/file/'using camel-osgi didn't worked because all camel libs are loaded as inner libs of my single plugin and not as plugins. (loading as plugins didn't worked but thats another problem/bug)LOG Messages:2010-04-21 11:15:34 829 DEBUG org.apache.camel.impl.converter.DefaultTypeConverter loadTypeConverters - Loading type converters ...2010-04-21 11:15:34 829 DEBUG org.apache.camel.impl.DefaultPackageScanClassResolver findAnnotated - Searching for annotations of org.apache.camel.Converter in packages: &#91;org.apache.camel.component.file  org.apache.camel.component.bean  org.apache.camel.converter  org.apache.camel.component.mail  org.apache.camel.component.spring.integration.converter&#93;2010-04-21 11:15:34 829 DEBUG org.apache.camel.impl.DefaultPackageScanClassResolver getClassLoaders - The thread context class loader: org.eclipse.core.runtime.internal.adaptor.ContextFinder@1a76eff is used to load the class2010-04-21 11:15:34 829 DEBUG org.apache.camel.impl.DefaultPackageScanClassResolver find - Searching for: annotated with @Converter in package: org/apache/camel/component/file using classloader: org.eclipse.core.runtime.internal.adaptor.ContextFinder2010-04-21 11:15:39 954 DEBUG org.apache.camel.impl.DefaultPackageScanClassResolver getResources - Getting resource URL for package: org/apache/camel/component/file with classloader: org.eclipse.core.runtime.internal.adaptor.ContextFinder@1a76eff2010-04-21 11:16:44 970 DEBUG org.apache.camel.impl.DefaultPackageScanClassResolver find - URL from classloader: bundleresource://109.fwk32380043:4/org/apache/camel/component/file/2010-04-21 11:17:01 642 DEBUG org.apache.camel.impl.DefaultPackageScanClassResolver find - Decoded urlPath: /org/apache/camel/component/file/ with protocol: bundleresource2010-04-21 11:23:59 814 DEBUG org.apache.camel.impl.DefaultPackageScanClassResolver find - isLocalFileSystem: false2010-04-21 11:24:00 470 DEBUG org.apache.camel.impl.DefaultPackageScanClassResolver find - Scanning for classes in &#91;/org/apache/camel/component/file/&#93; matching criteria: annotated with @Converter2010-04-21 11:24:16 079 DEBUG org.apache.camel.impl.DefaultPackageScanClassResolver find - Loading from jar using http/https: /org/apache/camel/component/file/2010-04-21 11:24:26 626 DEBUG org.apache.camel.impl.DefaultPackageScanClassResolver find - Cannot read entries in url: bundleresource://109.fwk32380043:4/org/apache/camel/component/file/java.net.MalformedURLException: no protocol: /org/apache/camel/component/file/ at java.net.URL.&lt;init&gt;(URL.java:567) at java.net.URL.&lt;init&gt;(URL.java:464) at java.net.URL.&lt;init&gt;(URL.java:413) at org.apache.camel.impl.DefaultPackageScanClassResolver.find(DefaultPackageScanClassResolver.java:264) at org.apache.camel.impl.DefaultPackageScanClassResolver.find(DefaultPackageScanClassResolver.java:180) at org.apache.camel.impl.DefaultPackageScanClassResolver.findAnnotated(DefaultPackageScanClassResolver.java:100) at org.apache.camel.impl.converter.AnnotationTypeConverterLoader.load(AnnotationTypeConverterLoader.java:63) at org.apache.camel.impl.converter.DefaultTypeConverter.loadTypeConverters(DefaultTypeConverter.java:361) at org.apache.camel.impl.converter.DefaultTypeConverter.doStart(DefaultTypeConverter.java:384) at org.apache.camel.impl.ServiceSupport.start(ServiceSupport.java:53) at org.apache.camel.util.ServiceHelper.startService(ServiceHelper.java:49) at org.apache.camel.impl.DefaultCamelContext.startServices(DefaultCamelContext.java:1174) at org.apache.camel.impl.DefaultCamelContext.addService(DefaultCamelContext.java:644) at org.apache.camel.impl.DefaultCamelContext.getTypeConverter(DefaultCamelContext.java:691) at org.apache.camel.util.CamelContextHelper.convertTo(CamelContextHelper.java:68)", "id": "2663"}, "2669": {"ground_truth": "0", "bug_report": "XPath - Add type converters from the pesky XPath types to String  InputStream etc.\nSee nabblehttp://old.nabble.com/XPath-Splitter-Problem-ts28325959.htmlThen its easier for Camel end users as they wont have as many problems with the bad XPath result types for NODESET and whatnot.", "id": "2669"}, "2683": {"ground_truth": "0", "bug_report": "Smpp component schedule delivery time should default to null\nIn testing this component  I ran into a problem where the calculated SCHEDULE_DELIVERY_TIME in SmppBinding ends up off for my time zone  so all my SMS messages are delivered an hour later. I'm not quite sure why I'm seeing this problem  it almost appears that TimeZone is not properly adjusting the raw offset for DST.However  in reading the SMS v3.4 spec  there's no reason to attempt to define a default delivery time of 'now'  because transmitting null indicates the message is to be delivered immediately.Therefore  it seems like SmppBinding should be updated not to attempt to set a default date of 'now'. This solved my problem  and avoids any potential date miscalculations for the overwhelming majority of cases where people want the message delivered immediately.P.S. There is no camel-smpp Component defined in Jira.", "id": "2683"}, "2694": {"ground_truth": "0", "bug_report": "HttpEntityConverter should not create a InputStreamEntity by using the GZIPHelper.toGZIPInputStream()\nGZIPHelper.toGZIPInputStream() is used for uncompress the zip date and not for compress the data.", "id": "2694"}, "2697": {"ground_truth": "0", "bug_report": "camel-spring - Spring 3.0.x - Add depends-on in the namespace handler to make it easy for end users to use Spring and Camel without considering ordering of their beans\nSpring 3.0.x behaves differently when discovering bean dependencies. For example if you have a &lt;routeBuilder ref='xxx'/&gt; in &lt;camelContext/&gt; than the xxx bean will not by default be dependent on the &lt;camelContext/&gt;. This causes Spring maybe to create the xxx before the camelContext. And you most likely want CamelContext to be created beforehand  so IoC allows you to inject CamelContext into that xxx or whatnot.See nabblehttp://old.nabble.com/Spring-3.0-and-Camel-2.2---Route-configure%28%29-called-before-Spring-beans-injected-ts28415437.htmlWe do already have logic for this in the namespace handler  but we need to add it to more places to have it working for all kind of camel types.", "id": "2697"}, "2700": {"ground_truth": "0", "bug_report": "cxfbean component should ignore the wsdlLocation in the POJO\ncxfbean component should ignore the wsdlLocation in the annotation in the POJO when starting the service. It should be using the JAXWS bean to create the service. Came across this bug when I (mistakenly) set the wsdlLocation to the http one published by the service  which of course wasn't up yet and I got the exception below. Fix for this coming soon.For Googlers out there  this ticket may fix this error message you may be getting:Caused by: org.apache.camel.ResolveEndpointFailedException: Failed to resolve endpoint: cxfbean://jaxwsBean due to: Failed to create service. at org.apache.camel.impl.DefaultCamelContext.getEndpoint(DefaultCamelContext.java:437) at org.apache.camel.util.CamelContextHelper.getMandatoryEndpoint(CamelContextHelper.java:46) at org.apache.camel.model.RouteDefinition.resolveEndpoint(RouteDefinition.java:154) at org.apache.camel.impl.DefaultRouteContext.resolveEndpoint(DefaultRouteContext.java:109) at org.apache.camel.impl.DefaultRouteContext.resolveEndpoint(DefaultRouteContext.java:115) at org.apache.camel.model.SendDefinition.resolveEndpoint(SendDefinition.java:63) at org.apache.camel.model.SendDefinition.createProcessor(SendDefinition.java:57) at org.apache.camel.model.ToDefinition.createProcessor(ToDefinition.java:87) at org.apache.camel.model.ProcessorDefinition.makeProcessor(ProcessorDefinition.java:286) at org.apache.camel.model.ProcessorDefinition.addRoutes(ProcessorDefinition.java:114) at org.apache.camel.model.RouteDefinition.addRoutes(RouteDefinition.java:640) ... 32 moreCaused by: org.apache.cxf.service.factory.ServiceConstructionException: Failed to create service. at org.apache.cxf.wsdl11.WSDLServiceFactory.&lt;init&gt;(WSDLServiceFactory.java:93) at org.apache.cxf.service.factory.ReflectionServiceFactoryBean.buildServiceFromWSDL(ReflectionServiceFactoryBean.java:396) at org.apache.cxf.service.factory.ReflectionServiceFactoryBean.initializeServiceModel(ReflectionServiceFactoryBean.java:521) at org.apache.cxf.service.factory.ReflectionServiceFactoryBean.create(ReflectionServiceFactoryBean.java:271) at org.apache.cxf.jaxws.support.JaxWsServiceFactoryBean.create(JaxWsServiceFactoryBean.java:177) at org.apache.cxf.frontend.AbstractWSDLBasedEndpointFactory.createEndpoint(AbstractWSDLBasedEndpointFactory.java:100) at org.apache.cxf.frontend.ServerFactoryBean.create(ServerFactoryBean.java:105) at org.apache.cxf.jaxws.JaxWsServerFactoryBean.create(JaxWsServerFactoryBean.java:167) at org.apache.camel.component.cxf.cxfbean.CxfBeanEndpoint.createServer(CxfBeanEndpoint.java:104) at org.apache.camel.component.cxf.cxfbean.CxfBeanEndpoint.init(CxfBeanEndpoint.java:86) at org.apache.camel.component.cxf.cxfbean.CxfBeanComponent.createEndpoint(CxfBeanComponent.java:48) at org.apache.camel.impl.DefaultComponent.createEndpoint(DefaultComponent.java:78) at org.apache.camel.impl.DefaultCamelContext.getEndpoint(DefaultCamelContext.java:416) ... 42 moreCaused by: javax.wsdl.WSDLException: WSDLException: faultCode=PARSER_ERROR: java.lang.IllegalArgumentException: InputSource must have a ByteStream or CharacterStream at org.apache.cxf.wsdl11.WSDLManagerImpl.loadDefinition(WSDLManagerImpl.java:226) at org.apache.cxf.wsdl11.WSDLManagerImpl.getDefinition(WSDLManagerImpl.java:179) at org.apache.cxf.wsdl11.WSDLServiceFactory.&lt;init&gt;(WSDLServiceFactory.java:91) ... 54 moreCaused by: java.lang.IllegalArgumentException: InputSource must have a ByteStream or CharacterStream at org.apache.cxf.staxutils.StaxUtils.createXMLStreamReader(StaxUtils.java:983) at org.apache.cxf.wsdl11.WSDLManagerImpl.loadDefinition(WSDLManagerImpl.java:217) ... 56 more", "id": "2700"}, "2704": {"ground_truth": "0", "bug_report": "RoutingSlip - Let it be expression based\nCurrently the Routing Slip EIP is a bit inflexible as it mandates the attached slip has been created beforehand.It would be nice if you could let it be expression based to generate the initial attached slip.Then end users can use a bean to generate the slip.This requires a change in the DSL which is not backwards compatible.But it makes the EIP in line with Recipient List and others which is expression based.", "id": "2704"}, "2708": {"ground_truth": "0", "bug_report": "File name lost when it starts with the same characters as the relative directory on the endpoint\nWhen polling file from a directory using a relative file URI  the file name gets lost when it starts with the same characters as the directory name.E.g. a directory 'orders' containing 'orders-1719.xml' and 'orders-1819.xml'from('file:orders').process(new Processor() { public void process(Exchange exchange) { // there's no file name on the message here (exchange.getIn().getHeader(Exchange.FILE_NAME) returns null) }});", "id": "2708"}, "2716": {"ground_truth": "0", "bug_report": "Incomplete cleanup of jmx mbeans after context stop\nThere is a fair amount of cleanup on context stop  but it is incomplete. Most of it has to do with JMX and if one creates and starts a new CamelContext she may end up with managed objects pointing nowhere or have duplicates or other minor side-effects. One of the nasty side effects is that we are pretty much forced to use '&lt;forkMode&gt;pertest&lt;/forkMode&gt;' in our surefire plugin configuration  ensuring a clean slate for every test.For long running apps in which you may have multiple CamelContext running at various times during the lifetime of the application we must properly cleanup when stopping the context. I have a series of patches fixing that which I hope to finish before 2.3. Once we're comfortable and tested with multiple jdk implementations and versions  I'd change the forkMode to 'once'. In my local copy this reduces the test time in core from 40+ mins to under 15 mins. Since interactions between tests is still possible and might lead us on a wild-goose we could add another profile that uses the safer yet time consuming 'pertest' forkMode.", "id": "2716"}, "2731": {"ground_truth": "0", "bug_report": "Camel-bindy should be able to process fix length records\nCamel-bindy should be able to process fix length records which has no separators:A sample line could looks like: 47111234567890654321098765432199999999999999994711 is the companyId1234567890 is the cardProgram6543210987654321 is the accountNumber9999999999999999 is the cardNumberCreated a POJO with the Camel bindy annotations:@CsvRecord(separator = '')public class CSVRecord implements Serializable { @DataField(pos = 1  length = 4) private String companyId; @DataField(pos = 2  length = 10) private String cardProgram; @DataField(pos = 3  length = 16) private String accountNumber; @DataField(pos = 4  length = 16) private String cardNumber; // getter and setter} See nabble for details.", "id": "2731"}, "2736": {"ground_truth": "0", "bug_report": "SendProcessor - When a route is started it should be able to warmup the Producer\nIn case you want to have Camel etc. to fail on startup in case a Producer cannot start  for example it needs a remote connection which fails.The producer would normally be created on-the-fly  eg a message needs to be send to it.", "id": "2736"}, "2743": {"ground_truth": "0", "bug_report": "HttpProducer should not sending the Http headers with low case\nHere is the mail thread which discusses about it.http://old.nabble.com/camel-http-converts-headers-to-lower-case-tp28620717p28620717.html", "id": "2743"}, "2744": {"ground_truth": "1", "bug_report": "AggregationStrategy returning null causes NPE\nWhen the AggregationStrategy's aggregate method returns null  the AggregateProcessor throws an NPE. While this is a result of user error  I think it would be easy to provide a more useful error indicating what the true problem is. This is the (not very helpful) error the user sees:ERROR | Caused by: [org.apache.camel.RuntimeCamelException - java.lang.NullPointerException]org.apache.camel.RuntimeCamelException: java.lang.NullPointerException at org.apache.camel.util.ObjectHelper.wrapRuntimeCamelException(ObjectHelper.java:1117) at org.apache.camel.component.jms.EndpointMessageListener.onMessage(EndpointMessageListener.java:104) at org.springframework.jms.listener.AbstractMessageListenerContainer.doInvokeListener(AbstractMessageListenerContainer.java:543) at org.springframework.jms.listener.AbstractMessageListenerContainer.invokeListener(AbstractMessageListenerContainer.java:482) at org.springframework.jms.listener.AbstractMessageListenerContainer.doExecuteListener(AbstractMessageListenerContainer.java:451) at org.springframework.jms.listener.AbstractPollingMessageListenerContainer.doReceiveAndExecute(AbstractPollingMessageListenerContainer.java:323) at org.springframework.jms.listener.AbstractPollingMessageListenerContainer.receiveAndExecute(AbstractPollingMessageListenerContainer.java:261) at org.springframework.jms.listener.DefaultMessageListenerContainer$AsyncMessageListenerInvoker.invokeListener(DefaultMessageListenerContainer.java:982) at org.springframework.jms.listener.DefaultMessageListenerContainer$AsyncMessageListenerInvoker.executeOngoingLoop(DefaultMessageListenerContainer.java:974) at org.springframework.jms.listener.DefaultMessageListenerContainer$AsyncMessageListenerInvoker.run(DefaultMessageListenerContainer.java:876) at java.lang.Thread.run(Thread.java:619)Caused by: java.lang.NullPointerException at org.apache.camel.processor.aggregate.AggregateProcessor.doAggregation(AggregateProcessor.java:227) at org.apache.camel.processor.aggregate.AggregateProcessor.process(AggregateProcessor.java:182) at org.apache.camel.management.InstrumentationProcessor.process(InstrumentationProcessor.java:67) at org.apache.camel.processor.DelegateProcessor.processNext(DelegateProcessor.java:53) at org.apache.camel.processor.DelegateProcessor.proceed(DelegateProcessor.java:82) at org.apache.camel.processor.interceptor.TraceInterceptor.process(TraceInterceptor.java:97) at org.apache.camel.management.InstrumentationProcessor.process(InstrumentationProcessor.java:67) at org.apache.camel.processor.RedeliveryErrorHandler.processExchange(RedeliveryErrorHandler.java:185) at org.apache.camel.processor.RedeliveryErrorHandler.processErrorHandler(RedeliveryErrorHandler.java:151) at org.apache.camel.processor.RedeliveryErrorHandler.process(RedeliveryErrorHandler.java:89) at org.apache.camel.processor.DefaultErrorHandler.process(DefaultErrorHandler.java:49) at org.apache.camel.processor.DefaultChannel.process(DefaultChannel.java:228) at org.apache.camel.processor.UnitOfWorkProcessor.processNext(UnitOfWorkProcessor.java:70) at org.apache.camel.processor.DelegateProcessor.process(DelegateProcessor.java:48) at org.apache.camel.management.InstrumentationProcessor.process(InstrumentationProcessor.java:67) at org.apache.camel.component.jms.EndpointMessageListener.onMessage(EndpointMessageListener.java:84) ... 9 more", "id": "2744"}, "2748": {"ground_truth": "0", "bug_report": "camel-cxf feature doesn't include all cxf needs bundles\nCurrent camel-cxf features doesn't include wss4j  saaj-imple  opensaml  fastinfoset bundle.We need to add these bundle into camel-cxf features.", "id": "2748"}, "2755": {"ground_truth": "0", "bug_report": "VM endpoints with same name do not communicate if args don't match\nIf you send to a VM endpoint from one route and consume from the same endpoint in another route  but include an argument on only one of the routes  Camel sees them as two different routes. Therefore  the messages are never consumed. For example:&lt;camelContext id='sendNotifyContext' xmlns='http://camel.apache.org/schema/spring' errorHandlerRef='errorHandler'&gt; &lt;route id='sendToNotify'&gt; &lt;from uri='...' /&gt; .... &lt;to uri='vm:myNotify' /&gt; &lt;/route&gt;&lt;/camelContext&gt;&lt;camelContext id='receiveNotifyContext' xmlns='http://camel.apache.org/schema/spring' errorHandlerRef='errorHandler'&gt; &lt;route id='receiveNotify'&gt; &lt;from uri='vm:myNotify?size=2500' /&gt; .... &lt;to uri='...' /&gt; &lt;/route&gt;&lt;/camelContext&gt;The producer appears to send to vm:myNotify while the consumer is listening to a separate endpoint named vm:myNotify?size=2500  so the messages build up and are never received.", "id": "2755"}, "2763": {"ground_truth": "0", "bug_report": "MailBinding can't handle the subject header with NO_ASCII code rightly.\nHere is the mail thread which discusses about it.", "id": "2763"}, "2769": {"ground_truth": "0", "bug_report": "OnCompletion - Let it be executed last so the internal on completions can be executed beforehand\nSee nabblehttp://old.nabble.com/Problems-shutting-down-route-onCompletion-ts28707903.htmlThis requires some sort of marker / API changes or whatever to let Camel knows that its a OnCompletion synchronization so it should be executed last.We may need to add a priority option or the likes.", "id": "2769"}, "2773": {"ground_truth": "0", "bug_report": "Bindy - No @Section causes a null key being generated which causes a NumberFormatException\nSee nabblehttp://old.nabble.com/Bindy-CSV-not-Marshaling-ts28719942.html", "id": "2773"}, "2778": {"ground_truth": "0", "bug_report": "Escaped characters in http4 URLs do not work\nThere is a bug in http4 HttpProducer that is unescaping URL query and path components too early. Patch fix attached.", "id": "2778"}, "2786": {"ground_truth": "0", "bug_report": "ManagementAgent should expose getter/setters for the JMX settings so you can set it easily from Java\nToday you have to use a JVM system propertyYou can set the service URL path by system property.-Dorg.apache.camel.jmx.serviceUrlPath=&lt;path&gt;This should be possible to set from Java like this also:context.getManagementStrategy().getManagementAgent().setServiceUrlPath('foo ....');", "id": "2786"}, "2798": {"ground_truth": "1", "bug_report": "Aggregation raises NullPointerException if last file in batch is not to be aggregated.\nWhen trying to aggregate files from a directory  it seems that camel-core raises a NullPointerException if the last file of the batch is a single file. That is it doesn't match the correlationExpression with any other files and therefore should just pass through. If such a file is the first file or in the middle of the files (alphabetically) this issue is not present.See:http://old.nabble.com/Aggregator-problem-with-files-(Camel-2.3)-td28778641.html#a28780522", "id": "2798"}, "2800": {"ground_truth": "0", "bug_report": "Graceful shutdown - Add option to shutdown manually added/started routes\nIf you for example add routes later at runtime  then those where not enlisted on startup and thus not part of the process to be stopped.Those routes added manually should be part of this so they are also shutdown. There should be an option to control this behavior so you can turn it off  in the odd cases you dont want that.", "id": "2800"}, "2805": {"ground_truth": "0", "bug_report": "It is impossible to put # sign in SQL statement in camel-sql\nSqlProducer implementation turns all # characters into ? making it impossible to have # in the SQL statement.", "id": "2805"}, "2815": {"ground_truth": "0", "bug_report": "camel-castor relies on specific  out of date version of Castor\ncamel-castor specifies a non-flexible version dependency on Castor 1.2.0. Ideally should be changed to [1.2.0 2.0) to allow later versions of Castor to be deployed. Castor 1.2 was released in Feb 2008  1.3 was first released in Feb 2009", "id": "2815"}, "2821": {"ground_truth": "0", "bug_report": "camel-ftp - SFTP in fileExists should handle exception being thrown with id code stating no such file\nSee nabblehttp://camel.465427.n5.nabble.com/camel-ftp-cannot-create-directory-using-sftp-tp479092p479092.html", "id": "2821"}, "2824": {"ground_truth": "0", "bug_report": "Deadlock in org.apache.camel.util.DefaultTimeoutMap\nAfter running a camel route with a camel Aggregator for a while  I get a deadlock in org.apache.camel.util.DefaultTimeoutMap. A full processdump is attached to this bug.I have also tried to recreate this as failing testcase  but without any luck so far.", "id": "2824"}, "2833": {"ground_truth": "0", "bug_report": "Support for Binary Files in HttpProducer\nPresently  the HTTP Component doesn't support transferring binary files. The attached patch adds support. Tested successfully using a file -&gt; http route with a PUT.", "id": "2833"}, "2837": {"ground_truth": "0", "bug_report": "CsvDataFromat delimiter should also be configurable in the XML/Spring DSL\nThe org.apache.camel.model.dataformat.CsvDataFormat doesn't support any attributes or nested elements in the XML DSL. So  currently it is not possible for the XML/Spring DSL to change the token delimiter as it is possible in the Java DSL.See Nabble", "id": "2837"}, "2847": {"ground_truth": "0", "bug_report": "Thread Name Syntax - Do not output endpoint parameters to be less verbose\nBy default thread names from consumers have the endpoint uri in the name  but those can become longCamel Thread 1 - ftp://sms01@localhost:2121/autreq/err?delay=5000&amp;filter=%23conaxRequestFilter&amp;move=.processed&amp;passiveMode=true&amp;password=sms01]So we should change {$name} to be just the endpoint without all the parameters. Eg clip after the first ? so it becomesCamel Thread 1 - ftp://sms01@localhost:2121/autreq/err]So we should change it to be ${name} the new short handed syntax ${fullName} as now with everything", "id": "2847"}, "2854": {"ground_truth": "0", "bug_report": "No consumers available on 'direct://xyz' endpoint\nThe following warning in log4j log shows up with no predictable reason:2010-06-24 14:07:01 090 WARN &#91;DefaultMessageListenerContainer-7:DirectProducer.java:42&#93; No consumers available on endpoint: Endpoint&#91;direct://UserCancelJobRequest&#93; to process: Exchange[JmsMessage: RunnerBase{locationToRunId='DV02YcABTE43HTRPATEGCBFk0m0'  jobrun_id=1234  requestOrigId='null'  secretKey='null'  replyToQueueOrTopic='null'  corrolationId='null'  requestCreationTime=Thu Jun 24 14:07:01 PDT 2010}]The endpoint &#91;direct://UserCancelJobRequest&#93; could be a number of different endpoints in our application and all of them are of 'direct:' type. When this happens  all messages that run through that endpoint will fail  and it will never recover unless the application is restarted.Also  if I restart the application and use that route immediately  that warning will not occur and the request will finish successfully. It seems to happen to routes that have not been used for a while after startup.When this happens  I can find the exact Camel endpoint/route/processor in JConsole  and nothing seems to be wrong. How can a 'direct:' endpoint runs out of consumer? Isn't the thread that product this warning THE thread to process the message?We recently upgraded from 5.2 to 5.3.2 and this starts to show up randomly. It is a show stopper!--Michael", "id": "2854"}, "2867": {"ground_truth": "0", "bug_report": "convertBodyTo should handle null bodies\nIf the body is null and you use convertBodyTo you will get a no type converter exception due body is null. Instead it should accept the null body and continue routing.", "id": "2867"}, "2889": {"ground_truth": "0", "bug_report": "Redelivery policy's retryUntil option should be renamed as retryWhile\nThe semantics of retryUntil are a bit counter-intuitive. I would naturally expect retryUntil(predicate) to mean retry until predicate is true  but it actually means retry until predicate is false. If you change the name of the option to retryWhile  you would get the natural interpretation retry while predicate is true.", "id": "2889"}, "2891": {"ground_truth": "0", "bug_report": "URIs for viewing a route as a language clashes with any other possible sub resource for routes (such as status)\nrather than: {id}/{lang}we should use something like {id}/lang/{lang}so that it doesn't gobble up: {id}/status or {id}/somethingElse", "id": "2891"}, "2892": {"ground_truth": "0", "bug_report": "remove ugly warnings running tests since upgrading to jetty 7\nlets zap these...[ main] log WARN java.lang.ClassNotFoundException: org.eclipse.jetty.jsp.JettyLog", "id": "2892"}, "2903": {"ground_truth": "0", "bug_report": "update camel-http and camel-cxf features to use Commons Codec 1.4\nThe latest version of Commons Codec is available as an OSGi bundle  so it would be nice to update the features file for Camel 2.3 to use that version:&lt;bundle&gt;mvn:commons-codec/commons-codec/1.4&lt;/bundle&gt;I've been installing 1.4 by hand and removing the org.apache.servicemix.bundles.commons-codec/1.3_2 without any ill effects on camel-http.", "id": "2903"}, "2909": {"ground_truth": "0", "bug_report": "Oracle AQ does not support the JMSReplyTo property and therefore throws a 'JMS-102: Feature not supported' exception when the JMS provider tries to get it.\nOracle AQ does not support the JMSReplyTo property and therefore throws a 'JMS-102: Feature not supported' exception when the JMS provider tries to get it.", "id": "2909"}, "2920": {"ground_truth": "0", "bug_report": "more eager validation of routes\nit seems you can dynamically create invalid routes which don't fail fast if there are errors.e.g.from('seda:foo').beanRef('doesNotExist'  'noMethodCalledThis')its only if a message is sent to 'seda:foo' that the whole thing barfs. We should maybe check that the to can be validated first before allowing the consumer to startup? If nothing else failing faster and earlier helps users spot errors sooner", "id": "2920"}, "2925": {"ground_truth": "0", "bug_report": "Use  forkMode=once for the surefire plugin to significantly speed up tests\nWe need to reduce the testing time in Camel since we got so many tests now. For this to work wee need to make sure there are no side effects outside of a test (which is not always simple).Side effects usually stem from using static fields in classes shared across multiple tests (such as caches of Exchanges  or whatnot)  which should be avoided.", "id": "2925"}, "2926": {"ground_truth": "0", "bug_report": "Injecting Properties into the PropertiesComponent with Spring\nThe component is quite nice - however a good improvement would be allowing properties to be injected through Spring.Currently there are two ways to do this using Spring.1) Declare a bean with an id of properties:&lt;bean id='properties' class='org.apache.camel.component.properties.PropertiesComponent'&gt; &lt;property name='location' value='classpath:com/mycompany/myprop.properties'/&gt;&lt;/bean&gt;This would be improved if we could simply say:&lt;bean id='properties' class='org.apache.camel.component.properties.PropertiesComponent'&gt; &lt;property name='location' ref='myPropertiesBean'/&gt;&lt;/bean&gt;This would allow properties to be declared in Spring using &lt;util:properties/&gt;. The same properties grouping could be injected into Camel as is injected into other beans.2) Inline within the camelContext defined in Spring:&lt;camelContext ...&gt; &lt;propertyPlaceholder id='properties' location='com/mycompany/myprop.properties'/&gt;&lt;/camelContext&gt;Similarly it would be nice to say:&lt;camelContext ...&gt; &lt;propertyPlaceholder id='properties' ref='myPropertiesBean' /&gt;&lt;/camelContext&gt;I noticed CAMEL-2791 is out there to access JVM system properties - it would be good to not have to load as a system property to access them in Camel.", "id": "2926"}, "2935": {"ground_truth": "0", "bug_report": "Broken failure reporting via DefaultProucerTemplate.asyncCallback and Synchronization.onFailure\nThe recent change in ProducerCache.sendProducerCache.java public void send(Endpoint endpoint  Exchange exchange) { try { sendExchange(endpoint  null  null  exchange); // RECENT CHANGE HERE: // ensure that CamelExecutionException is always thrown if (exchange.getException() != null) { exchange.setException(wrapCamelExecutionException(exchange  exchange.getException())); } } catch (Exception e) { throw wrapCamelExecutionException(exchange  e); } }that throws a CamelExecutionException if exchange.getException is not null  makes it impossible for DefaultProducerTemplate.asyncCallback to report failures (other than fault messages) asynchronously via Synchronization.onFailureDefaultProducerTemplate.java public Future&lt;Exchange&gt; asyncCallback(final Endpoint endpoint  final Exchange exchange  final Synchronization onCompletion) { Callable&lt;Exchange&gt; task = new Callable&lt;Exchange&gt;() { public Exchange call() throws Exception { // FIXME: exception is thrown in Camel 2.4 where a normal return with answer.getException != null was done in Camel 2.3 Exchange answer = send(endpoint  exchange); if (answer.isFailed()) { onCompletion.onFailure(answer); } else { // ... } return answer; } }; // ... }This was working in Camel 2.3 (but unfortunately there wasn't any test case for it). I attached a patch for DefaultProducerTemplateAsyncTest that demonstrates the problem. I didn't commit a fix yet because I'm unsure at the moment about the best way to fix that. Of course I tried a naive fix in the DefaultProducerTemplate.asyncCallback methods which causes the test (in the patch) to pass but I'd like to hear other opinions before I continue.", "id": "2935"}, "2937": {"ground_truth": "0", "bug_report": "StreamProducer does not close stream in camel-stream\nSince the stream could be System.out or System.err  the producer does not close the stream ever. It should close all streams with the noted exceptions.", "id": "2937"}, "2940": {"ground_truth": "0", "bug_report": "org.apache.camel.component.test package is imported in camel-spring component - generates error on OSGI platform\n[ 86] [Installed ] [ ] [ 60] camel-spring (2.5.0.SNAPSHOT)karaf@root&gt; start 86Error executing command: Unresolved constraint in bundle org.apache.camel.camel-spring [86]: Unable to resolve 86.0: missing requirement [86.0] package; (&amp;(package=org.apache.camel.component.test)(version&gt;=2.5.0)(!(version&gt;=2.5.1))) - [86.0] package; (&amp;(package=org.apache.camel.component.test)(version&gt;=2.5.0)(!(version&gt;=2.5.1)))karaf@root&gt; headers 86camel-spring (86)-----------------Bnd-LastModified = 1278946400750Build-Jdk = 1.6.0_20Built-By = CharlesmBundle-Activator = org.apache.camel.osgi.ActivatorBundle-Description = Camel Spring supportBundle-DocURL = http://www.apache.org/Bundle-License = http://www.apache.org/licenses/LICENSE-2.0.txtBundle-ManifestVersion = 2Bundle-Name = camel-springBundle-SymbolicName = org.apache.camel.camel-springBundle-Vendor = The Apache Software FoundationBundle-Version = 2.5.0.SNAPSHOTCreated-By = Apache Maven Bundle PluginExport-Package = org.apache.camel.spring.spi;uses:='org.springframework.context org.apache.camel.spi org.springframework.beans.factory org.apache.camel org.springframework.beans.factory.config org.apache.camel.builder org.springframework.transaction org.apache.commons.logging org.apache.camel.processor.exceptionpolicy org.apache.camel.processor org.apache.camel.util org.apache.camel.model org.springframework.transaction.support';version='2.5.0.SNAPSHOT' org.apache.camel.spring.util;uses:='org.apache.camel org.springframework.context org.apache.camel.util org.apache.commons.logging org.springframework.beans.factory org.springframework.util';version='2.5.0.SNAPSHOT' org.apache.camel.spring.remoting;uses:='org.apache.camel.util org.springframework.remoting.support org.apache.camel.component.bean org.apache.camel org.springframework.beans org.springframework.context org.apache.camel.spi org.apache.camel.spring.util org.springframework.beans.factory';version='2.5.0.SNAPSHOT' org.apache.camel.spring;uses:='org.apache.camel.impl org.apache.camel.util org.apache.commons.logging org.apache.camel org.springframework.beans org.springframework.context org.springframework.util org.springframework.beans.factory.config org.apache.camel.spring.util javax.xml.bind.annotation org.springframework.beans.factory org.apache.camel.builder org.apache.camel.model.dataformat org.springframework.context.event org.apache.camel.model.config org.apache.camel.model org.apache.camel.spi org.apache.camel.spring.spi org.apache.camel.view org.springframework.context.support org.apache.camel.spring.handler javax.xml.bind org.apache.camel.component.bean org.apache.camel.component.event org.springframework.transaction org.springframework.transaction.support';version='2.5.0.SNAPSHOT' org.apache.camel.spring.handler;uses:='org.springframework.beans.factory.support org.springframework.core org.springframework.util org.springframework.beans.factory.xml org.w3c.dom org.springframework.beans org.springframework.beans.factory.config org.springframework.beans.factory.parsing org.apache.camel.model.dataformat org.apache.camel.model.config org.apache.camel.util org.apache.camel.model org.apache.camel.spring javax.xml.bind org.springframework.beans.factory org.apache.camel.view org.apache.commons.logging org.apache.camel.model.loadbalancer org.apache.camel.builder.xml org.apache.camel.spring.remoting org.apache.camel.spi org.apache.camel org.apache.camel.model.language org.apache.camel.processor';version='2.5.0.SNAPSHOT' org.apache.camel.osgi;uses:='org.osgi.framework org.apache.camel.impl org.springframework.osgi.context org.apache.commons.logging javax.xml.bind.annotation org.springframework.context org.apache.camel.spring org.apache.camel.model org.apache.camel.model.loadbalancer org.apache.camel org.apache.camel.model.language org.springframework.beans.factory.xml org.apache.camel.model.dataformat org.apache.camel.spring.handler org.apache.camel.model.config org.apache.camel.spi';version='2.5.0.SNAPSHOT' org.apache.camel.component;uses:='org.apache.camel.impl org.apache.commons.logging org.springframework.core.io org.apache.camel org.apache.camel.converter org.apache.camel.spi';version='2.5.0.SNAPSHOT' org.apache.camel.component.event;uses:='org.apache.camel org.springframework.context org.apache.camel.impl org.springframework.beans org.apache.camel.util org.apache.camel.processor.loadbalancer';version='2.5.0.SNAPSHOT' org.apache.camel.component.test;uses:='org.apache.camel.impl org.apache.camel.util org.apache.camel org.apache.commons.logging org.apache.camel.component.mock';version='2.5.0.SNAPSHOT' org.apache.camel.component.validator;uses:='javax.xml.transform org.springframework.core.io javax.xml.transform.stream org.apache.camel.processor.validation org.apache.camel.impl org.apache.camel.component org.apache.commons.logging org.apache.camel';version='2.5.0.SNAPSHOT' org.apache.camel.component.xslt;uses:='org.apache.camel.impl org.apache.camel.component org.apache.commons.logging org.apache.camel org.springframework.core.io org.apache.camel.builder.xml org.apache.camel.util javax.xml.transform org.apache.camel.converter.jaxp org.apache.camel.spi';version='2.5.0.SNAPSHOT'Ignore-Package = org.apache.camel.spring.remoting org.apache.camel.component org.apache.camel.component.validator org.apache.camel.component.xslt org.apache.camel.spring.spi org.apache.camel.spring org.apache.camel.osgi org.apache.camel.spring.handler org.apache.camel.component.event org.apache.camel.spring.utilImplementation-Title = Camel :: SpringImplementation-Vendor = The Apache Software FoundationImplementation-Vendor-Id = org.apache.camelImplementation-Version = 2.5-SNAPSHOTImport-Package = javax.xml.bind javax.xml.bind.annotation javax.xml.bind.annotation.adapters javax.xml.transform javax.xml.transform.stream org.apache.camel;version='[2.5.0 2.5.1)' org.apache.camel.builder;version='[2.5.0 2.5.1)' org.apache.camel.builder.xml;version='[2.5.0 2.5.1)' org.apache.camel.component.bean;version='[2.5.0 2.5.1)' org.apache.camel.component.mock;version='[2.5.0 2.5.1)' org.apache.camel.component.properties;version='[2.5.0 2.5.1)' org.apache.camel.component.test;version='[2.5.0 2.5.1)' org.apache.camel.converter;version='[2.5.0 2.5.1)' org.apache.camel.converter.jaxp;version='[2.5.0 2.5.1)' org.apache.camel.impl;version='[2.5.0 2.5.1)' org.apache.camel.impl.converter;version='[2.5.0 2.5.1)' org.apache.camel.management;version='[2.5.0 2.5.1)' org.apache.camel.model;version='[2.5.0 2.5.1)' org.apache.camel.model.config;version='[2.5.0 2.5.1)' org.apache.camel.model.dataformat;version='[2.5.0 2.5.1)' org.apache.camel.model.language;version='[2.5.0 2.5.1)' org.apache.camel.model.loadbalancer;version='[2.5.0 2.5.1)' org.apache.camel.processor;version='[2.5.0 2.5.1)' org.apache.camel.processor.exceptionpolicy;version='[2.5.0 2.5.1)' org.apache.camel.processor.interceptor;version='[2.5.0 2.5.1)' org.apache.camel.processor.loadbalancer;version='[2.5.0 2.5.1)' org.apache.camel.processor.validation;version='[2.5.0 2.5.1)' org.apache.camel.spi;version='[2.5.0 2.5.1)' org.apache.camel.util;version='[2.5.0 2.5.1)' org.apache.camel.view;version='[2.5.0 2.5.1)' org.apache.commons.logging org.osgi.framework;version='[1.3 2)' org.osgi.util.tracker;version='[1.3 2)' org.springframework.beans;version='[2.5 4)' org.springframework.beans.factory;version='[2.5 4)' org.springframework.beans.factory.config;version='[2.5 4)' org.springframework.beans.factory.parsing;version='[2.5 4)' org.springframework.beans.factory.support;version='[2.5 4)' org.springframework.beans.factory.xml;version='[2.5 4)' org.springframework.context;version='[2.5 4)' org.springframework.context.event;version='[2.5 4)' org.springframework.context.support;version='[2.5 4)' org.springframework.core;version='[2.5 4)' org.springframework.core.io;version='[2.5 4)' org.springframework.osgi.context;version='[1.2 2)' org.springframework.remoting.support;version='[2.5 4)' org.springframework.transaction;version='[2.5 4)' org.springframework.transaction.support;version='[2.5 4)' org.springframework.util;version='[2.5 4)' org.w3c.domManifest-Version = 1.0Specification-Title = Camel :: SpringSpecification-Vendor = The Apache Software FoundationSpecification-Version = 2.5-SNAPSHOTTool = Bnd-0.0.357", "id": "2940"}, "2958": {"ground_truth": "0", "bug_report": "java.util.ConcurrentModificationException in Method org.apache.camel.util.CaseInsensitiveMap.putAll()\nEvery now and then I'm facing the ConcurrentModificationException. It very hard to reproduce. This is my stack trace:Failed delivery for exchangeId: ba969718-9044-4261-bc57-ca10aafb0a03. Exhausted after delivery attempt: 1 caught: java.util.ConcurrentModificationExceptionjava.util.ConcurrentModificationException: null at java.util.HashMap$HashIterator.nextEntry(HashMap.java:793) &#91;na:1.6.0_20&#93; at java.util.HashMap$KeyIterator.next(HashMap.java:828) &#91;na:1.6.0_20&#93; at org.apache.camel.util.CaseInsensitiveMap.putAll(CaseInsensitiveMap.java:86) &#91;camel-core-2.3.0.jar:2.3.0&#93; at org.apache.camel.impl.MessageSupport.copyFrom(MessageSupport.java:142) &#91;camel-core-2.3.0.jar:2.3.0&#93; at org.apache.camel.impl.DefaultMessage.copyFrom(DefaultMessage.java:52) &#91;camel-core-2.3.0.jar:2.3.0&#93; at org.apache.camel.util.ExchangeHelper.copyResults(ExchangeHelper.java:199) &#91;camel-core-2.3.0.jar:2.3.0&#93; at org.apache.camel.processor.Pipeline.process(Pipeline.java:114) &#91;camel-core-2.3.0.jar:2.3.0&#93; at org.apache.camel.processor.DelegateProcessor.processNext(DelegateProcessor.java:53) &#91;camel-core-2.3.0.jar:2.3.0&#93; at org.apache.camel.processor.ChoiceProcessor.process(ChoiceProcessor.java:51) &#91;camel-core-2.3.0.jar:2.3.0&#93; at org.apache.camel.management.InstrumentationProcessor.process(InstrumentationProcessor.java:67) &#91;camel-core-2.3.0.jar:2.3.0&#93; at org.apache.camel.processor.DelegateProcessor.processNext(DelegateProcessor.java:53) &#91;camel-core-2.3.0.jar:2.3.0&#93; at org.apache.camel.processor.DelegateProcessor.proceed(DelegateProcessor.java:82) &#91;camel-core-2.3.0.jar:2.3.0&#93; at org.apache.camel.processor.interceptor.TraceInterceptor.process(TraceInterceptor.java:97) &#91;camel-core-2.3.0.jar:2.3.0&#93; at org.apache.camel.management.InstrumentationProcessor.process(InstrumentationProcessor.java:67) &#91;camel-core-2.3.0.jar:2.3.0&#93; at org.apache.camel.processor.RedeliveryErrorHandler.processExchange(RedeliveryErrorHandler.java:185) &#91;camel-core-2.3.0.jar:2.3.0&#93; at org.apache.camel.processor.RedeliveryErrorHandler.processErrorHandler(RedeliveryErrorHandler.java:151) &#91;camel-core-2.3.0.jar:2.3.0&#93; at org.apache.camel.processor.RedeliveryErrorHandler.process(RedeliveryErrorHandler.java:89) &#91;camel-core-2.3.0.jar:2.3.0&#93; at org.apache.camel.processor.DefaultErrorHandler.process(DefaultErrorHandler.java:49) &#91;camel-core-2.3.0.jar:2.3.0&#93; at org.apache.camel.processor.DefaultChannel.process(DefaultChannel.java:228) &#91;camel-core-2.3.0.jar:2.3.0&#93; at org.apache.camel.processor.Pipeline.process(Pipeline.java:75) &#91;camel-core-2.3.0.jar:2.3.0&#93; at org.apache.camel.processor.UnitOfWorkProcessor.processNext(UnitOfWorkProcessor.java:70) &#91;camel-core-2.3.0.jar:2.3.0&#93; at org.apache.camel.processor.DelegateProcessor.process(DelegateProcessor.java:48) &#91;camel-core-2.3.0.jar:2.3.0&#93; at org.apache.camel.management.InstrumentationProcessor.process(InstrumentationProcessor.java:67) &#91;camel-core-2.3.0.jar:2.3.0&#93; at org.apache.camel.component.http.CamelServlet.service(CamelServlet.java:71) &#91;camel-http-2.3.0.jar:2.3.0&#93; at javax.servlet.http.HttpServlet.service(HttpServlet.java:831) &#91;javaee.jar:9.1&#93;...Looks like CaseInsensitiveMap isn't enough thread save. But I have no idea what other thread is modifies the map. Most of the time everything is ok.", "id": "2958"}, "2960": {"ground_truth": "0", "bug_report": "Upgrade to JCR 2.x\ncamel-jcr is based on 1.x. We should upgrade to 2.x which takes a bit of pain due API changes and the likes.", "id": "2960"}, "2964": {"ground_truth": "0", "bug_report": "Upgrade to HawtDB 1.2\nUpgrade to HawtDB 1.2", "id": "2964"}, "2969": {"ground_truth": "0", "bug_report": "When polling consumers is shutdown  do less verbose logging for rollback strategies\nTo avoid logs having stacktraces or the likes which was caused by shutting down the application.See nabblehttp://camel.465427.n5.nabble.com/Camel-2-4-Shutdown-Exception-tp1479154p1479154.html", "id": "2969"}, "2970": {"ground_truth": "0", "bug_report": "JmsProducer should support non blocking routing engine\nThe JMS component is the most complex  and we left out improvements on purpose as we wanted 2.4 out before.Now its time to let the JmsProducer in request/reply mode leverage async processing so threads are not blocked while waiting for reply.", "id": "2970"}, "2972": {"ground_truth": "0", "bug_report": "onException not working correctly when using routeContext\nWhen using a routeContext  the last (in the xml-file) defined route-scoped &lt;onException&gt; configuration is shared by the other routes in the context.http://camel.465427.n5.nabble.com/possible-onException-bug-when-using-routeContext-td1616244.html#a1616244", "id": "2972"}, "2978": {"ground_truth": "0", "bug_report": "java.net.SocketException: Too many open files with Apache Camel(Netty TCP) 2.4.0.\nI've got a unit test that works fine with Apache Camel 2.3.0  but as soon as I upgraded to 2.4.0 it consistently started to fail.It performs a number of concurrent requests using this url:netty:tcp://localhost:2048?sync=trueIn both the client and server side of the unit test.There's also a sister test which does the same thing with Netty directly and that works in isolation  so it would appear something has been broken in the transition to 2.4.0. Previously this code was also using a beta version of Netty  but even updating that specific dependency has made no difference.", "id": "2978"}, "2979": {"ground_truth": "1", "bug_report": "FtpComponent: If login fails and disconnect=true another connection is opened.\nIn a route such as below a second connection to the ftp server is opened if the login fails.&lt;route&gt;  &lt;from uri='ftp:localhost/inbox/?username=usr&amp;password=pwd&amp;disconnect=true&amp;consumer.delay=60s&amp;maximumReconnectAttempts=0' /&gt;  &lt;to uri='file:test_data' /&gt; &lt;/route&gt; Further description: http://camel.465427.n5.nabble.com/FTP-Try-login-once-and-disconnect-if-failure-td1692660.html#a1692660", "id": "2979"}, "2980": {"ground_truth": "0", "bug_report": "camel-jpa doesn't use EntityManager.merge(entity) in the right way\nThe EntityManager.merge(entity) method returns the merged entity. The exchange in message body should be updated with the merged entity (what camel-jpa currently not do).I running into this problem  because after saving an entity in the database  the id field was still null. So  we don't know  which entity in the database is the corresponding to this entity... Have a look in the process method of JpaProducer and the Java doc from the EntityManager.Christian", "id": "2980"}, "2981": {"ground_truth": "0", "bug_report": "DefaultHttpBinding's populateRequestParameters should be more flexible when checking the content type on POST\nLine 126 in DefaultHttpBinding checks if the request's method is POST and the content type is 'application/x-www-form-urlencoded'. This unfortunately fails to populate the request parameters of a POST request where the content type includes the charset  e.g. 'application/x-www-form-urlencoded; charset=UTF-8'. Could the equals be changed to startsWith?", "id": "2981"}, "2986": {"ground_truth": "0", "bug_report": "IllegalStateException in CamelContinuationServlet under heavy load\nReason is a race between continuation.suspend() and continuation.resume(). It can occur that continuation.resume() is executed before continuation.suspend() leading to an IllegalStateException thrown by Jetty:java.lang.IllegalStateException: DISPATCHED initial at org.eclipse.jetty.server.AsyncContinuation.dispatch(AsyncContinuation.java:364) at org.eclipse.jetty.server.AsyncContinuation.resume(AsyncContinuation.java:769) at org.apache.camel.component.jetty.CamelContinuationServlet$1.done(CamelContinuationServlet.java:85) at org.apache.camel.management.InstrumentationProcessor$1.done(InstrumentationProcessor.java:78) at org.apache.camel.processor.UnitOfWorkProcessor$1.done(UnitOfWorkProcessor.java:104) at org.apache.camel.processor.DefaultChannel$1.done(DefaultChannel.java:262) at org.apache.camel.processor.RedeliveryErrorHandler$1.done(RedeliveryErrorHandler.java:302) at org.apache.camel.management.InstrumentationProcessor$1.done(InstrumentationProcessor.java:78) at org.apache.camel.management.InstrumentationProcessor$1.done(InstrumentationProcessor.java:78)This is the case when an async completion callback is faster than the thread that is concurrently executing the if (continuation.isInitial()) block. I'll commit a fix soon that also follows the recommendations in http://wiki.eclipse.org/Jetty/Feature/Continuations to always call continuation.suspend() before registering the continuation with a callback handler.", "id": "2986"}, "2988": {"ground_truth": "0", "bug_report": "Add removeEndpoints to CamelContext\nIt should support uri patterns so you can remove all endpoints using wild cards etc.removeEndpoints('activemq:queue:foo*')removeEndpoints('ftp:*')", "id": "2988"}, "2993": {"ground_truth": "0", "bug_report": "Enable the deletion of routes via REST in camel-web\nThe camel-web allows a user to deploy and manipulate routes.It seems currently impossible to delete routes through camel-web.A delete operation on the route to be deleted would complete the REST interface: http://en.wikipedia.org/wiki/Representational_State_Transfer#RESTful_web_servicese.g.:RouteResource.java@Delete public void removeRoute() { getCamelContext().removeRouteDefinition(this.name); }", "id": "2993"}, "3024": {"ground_truth": "0", "bug_report": "Adding routes straight from XML should have Camel prepare the RouteDefintion as its done like in camel-spring\ncamel-spring does some preparation on the XML routes before they are added to CamelContext.When end users loads the XML routes themself using JAXB and add it straight to CamelContext  we should let camel-core prepare the routes as well.", "id": "3024"}, "3030": {"ground_truth": "0", "bug_report": "Velocity - Let it be able to load resources from both classpath and file system out of the box\nSee this blog entryhttp://www.thedwick.com/blog/2010/08/how-to-include-other-velocity-templates-from-apache-camel/We should pre configure Velocity to use both type of resource loaders.", "id": "3030"}, "3035": {"ground_truth": "0", "bug_report": "provide an optional interface Endpoints can provide to generate a simple String ID which can be used within the class loader to make JMX / REST APIs simpler to avoid having to encode large URIs\nrather than taking the URI and encoding it  it would be nice if endpoints could just generate their own unique ID on construction (then we don't have lifecycle issues of keeping track of endpoints coming and going and maintaining a parallel map of Endpoint -&gt; ID etc).We could use the same ID when registering endpoints with JMX etc", "id": "3035"}, "3045": {"ground_truth": "0", "bug_report": "Flatpack component : unable to set the delimiter parameter in spring config file\nIt's not possible to set the delimiter parameter in spring configuration file or I don't find the way to do it !For example : &lt;route id='routeA'&gt; &lt;from uri='file:src/test/resources/csv?move=done/&amp;fileName=testfileRouteA.csv' /&gt; &lt;to uri='flatpack:delim:META-INF/Delimited.pzmap.xml?delimiter=;' /&gt;&lt;/route&gt;I get the following error :Exception in thread 'main' org.apache.camel.RuntimeCamelException: org.apache.camel.FailedToCreateRouteException: Failed to create route routeA at: &gt;&gt;&gt; To&#91;flatpack:delim:META-INF/Delimited.pzmap.xml?ignoreFirstRecord=false&amp;splitRows=true&amp;delimiter=;&#93; &lt;&lt;&lt; in route: Route[[From[file:src/test/resources/csv?move=done/&amp;fileName=... because of Failed to resolve endpoint: flatpack://delim:META-INF/Delimited.pzmap.xml?delimiter=%3B&amp;ignoreFirstRecord=false&amp;splitRows=true due to: Could not find a suitable setter for property: delimiter as there isn't a setter method with same type: java.lang.String nor type conversion possible: No type converter available to convert from type: java.lang.String to the required type: char with value ; at org.apache.camel.util.ObjectHelper.wrapRuntimeCamelException(ObjectHelper.java:1126) at org.apache.camel.spring.SpringCamelContext.onApplicationEvent(SpringCamelContext.java:103) at org.apache.camel.spring.CamelContextFactoryBean.onApplicationEvent(CamelContextFactoryBean.java:231) at org.springframework.context.event.SimpleApplicationEventMulticaster.multicastEvent(SimpleApplicationEventMulticaster.java:97) at org.springframework.context.support.AbstractApplicationContext.publishEvent(AbstractApplicationContext.java:303) at org.springframework.context.support.AbstractApplicationContext.finishRefresh(AbstractApplicationContext.java:911) at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:428) at org.springframework.context.support.ClassPathXmlApplicationContext.&lt;init&gt;(ClassPathXmlApplicationContext.java:139) at org.springframework.context.support.ClassPathXmlApplicationContext.&lt;init&gt;(ClassPathXmlApplicationContext.java:93) at org.apache.camel.spring.Main.createDefaultApplicationContext(Main.java:219) at org.apache.camel.spring.Main.doStart(Main.java:173) at org.apache.camel.impl.ServiceSupport.start(ServiceSupport.java:56) at org.apache.camel.impl.MainSupport.run(MainSupport.java:114) at org.apache.camel.impl.MainSupport.run(MainSupport.java:291) at org.apache.camel.spring.Main.main(Main.java:97)If it's a bug  to solve it  it's just necessary to change the class org.apache.camel.component.flatpack.DelimitedEndpoint as below : change the flied definition like this (and getter/setter to): private String delimiter = ' '; private String textQualifier = '/''; and the the method createParser like this : public Parser createParser(Exchange exchange) throws InvalidPayloadException  IOException Unknown macro: { Reader bodyReader = ExchangeHelper.getMandatoryInBody(exchange  Reader.class); Resource resource = getResource(); if (delimiter == null || delimiter.equals(&quot;&quot;)) delimiter = &quot; &quot;; if (textQualifier == null || textQualifier.equals(&quot;&quot;)) textQualifier = &quot;&quot;&quot;; if (resource == null) { return getParserFactory().newDelimitedParser(bodyReader  delimiter.charAt(0)  textQualifier.charAt(0)); } else { return getParserFactory().newDelimitedParser(new InputStreamReader(resource.getInputStream())  bodyReader  delimiter.charAt(0)  textQualifier.charAt(0)  ignoreFirstRecord); } }", "id": "3045"}, "3047": {"ground_truth": "1", "bug_report": "JettyHttpComponent.doStop() shuts down all servers in the VM  not just those associated with the component\nWe are running several bundles in Karaf with separate Camel contexts  each of which uses the camel-jetty component to expose services over HTTP. Each bundle has an assigned port and may listen on multiple URIs. We noticed that when we updated or shut down one of these bundles  all of the Jetty servers in the other bundles would stop listening on their respective ports.The problem is that the map of ConnectorRef objects in JettyHttpComponent is static  and therefore shared across the entire VM. Changing this from static to an instance variable fixed the issue for us.", "id": "3047"}, "3048": {"ground_truth": "0", "bug_report": "Archetype for creating component should have better sample component\nThe current sample is based on Direct component which is a bad sample as its a very special component.We should do a HelloWorldComponent the producer will just print the message body to system out the consumer is scheduled and triggers every 5th second with a dummy exchange", "id": "3048"}, "3050": {"ground_truth": "0", "bug_report": "RouteBuilderRef should work out of the box with Spring 3 and dependency injection\nSpring 3 changed internally how dependency resolution works. Its now worse as we have to play tricks in the Camel namespace handler to tell Camel the various pieces you can ref  should depend on Camel. Otherwise the dependency resolution in Spring is not working properly.This used to work like a charm in Spring 2.5.6.", "id": "3050"}, "3060": {"ground_truth": "1", "bug_report": "Out of Heap memory issues with Camel-File processing large files\nCamel-File component throws heap memory issue when processing csv file which is about 45MB with 218k Lines. http://camel.465427.n5.nabble.com/Java-heap-space-issue-with-reading-large-CSV-file-tt2638903.html#a2638903", "id": "3060"}, "3075": {"ground_truth": "0", "bug_report": "Simple language - Allow unlimited usage of and or operators in expression\nThe simple language currently only allows using and or or operators once in the expression. We should allow unlimited usages of those.", "id": "3075"}, "3077": {"ground_truth": "0", "bug_report": "Cache Component needs to check for null values during GET operations\nEhCache often has a bit of lag time when invalidating expired cache elements  first setting the Element value to null and then removing the key. If you are hitting a cache rapidly one often will run across a key that is present in the cache that still has a null element entry.The logic for successfully key retrieval just needs to be slightly tweaked to check for null values.", "id": "3077"}, "3081": {"ground_truth": "0", "bug_report": "netty timeout exception\neventhough message was received by netty procuder  it thows a timeout exception after 30 secs. here is the route and log. as this is a basic functionality I think this is critical priority. from('netty:tcp://localhost:6205?textline=true&amp;sync=true').process(new Processor() { int i=0; public void process(Exchange exchange) throws Exception { String body = exchange.getIn().getBody(String.class); Thread.sleep(5000); exchange.getOut().setBody('Bye 1' + body); // if(i++%2==1) throw new IOException('custom exception'); } }); from('file:///test/test/response') .convertBodyTo(String.class) .threads(1) .to(ExchangePattern.InOut 'netty:tcp://localhost:6205?textline=true&amp;sync=true') .to('log:+++ reply++++');2010-08-25 11:33:29 963 &#91;1 - file:///test/test/response&#93; FileConsumer DEBUG Total 1 files to consume2010-08-25 11:33:29 963 &#91;1 - file:///test/test/response&#93; FileConsumer DEBUG About to process file: GenericFile&#91;C:/test/test/response/hello1.txt&#93; using exchange: Exchange[GenericFileMessage with file: GenericFile&#91;C:/test/test/response/hello1.txt&#93;]2010-08-25 11:33:31 510 [ Camel Thread 6 - Threads] SendProcessor DEBUG &gt;&gt;&gt;&gt; Endpoint&#91;tcp://localhost:6205&#93; Exchange&#91;GenericFileMessage with body: hello1&#93;2010-08-25 11:33:31 682 [ Camel Thread 6 - Threads] NettyProducer DEBUG Creating connector to address: localhost:62052010-08-25 11:33:31 682 [ Camel Thread 6 - Threads] NettyProducer DEBUG Writing body: hello12010-08-25 11:33:31 697 [ New I/O client worker #1-1] NettyProducer DEBUG Operation complete org.jboss.netty.channel.DefaultChannelFuture@944dbd2010-08-25 11:33:31 697 [ New I/O server worker #1-1] ServerChannelHandler DEBUG Incoming message: hello12010-08-25 11:33:36 697 [ New I/O server worker #1-1] ServerChannelHandler DEBUG Writing body: Bye 1hello12010-08-25 11:33:36 697 [ New I/O client worker #1-1] ClientChannelHandler DEBUG Message received: Bye 1hello12010-08-25 11:33:36 697 [ New I/O client worker #1-1] SendProcessor DEBUG &gt;&gt;&gt;&gt; Endpoint&#91;log://+++ reply++++&#93; Exchange&#91;GenericFileMessage with body: Bye 1hello1&#93;2010-08-25 11:33:36 713 [ New I/O client worker #1-1] +++ reply++++ INFO Exchange&#91;ExchangePattern:InOut  BodyType:String  Body:Bye 1hello1&#93;2010-08-25 11:33:36 713 [ New I/O client worker #1-1] GenericFileOnCompletion DEBUG Done processing file: GenericFile&#91;C:/test/test/response/hello1.txt&#93; using exchange: Exchange&#91;GenericFileMessage with body: Bye 1hello1&#93;2010-08-25 11:33:36 713 [ New I/O client worker #1-1] FileUtil DEBUG Tried 1 to delete file: C:/test/test/response/hello1.txt.camelLock with result: true2010-08-25 11:33:36 713 [ New I/O client worker #1-1] nericFileRenameProcessStrategy DEBUG Renaming file: GenericFile&#91;C:/test/test/response/hello1.txt&#93; to: GenericFile&#91;C:/test/test/response/.camel/hello1.txt&#93;2010-08-25 11:33:36 713 [ New I/O client worker #1-1] FileUtil DEBUG Tried 1 to rename file: C:/test/test/response/hello1.txt to: C:/test/test/response/.camel/hello1.txt with result: true2010-08-25 11:34:06 886 [ Hashed wheel timer #1] DefaultErrorHandler DEBUG Failed delivery for exchangeId: f5eb372d-a214-4418-a60f-62c0557768d2. On delivery attempt: 0 caught: org.apache.camel.ExchangeTimedOutException: The OUT message was not received within: 30000 millis. Exchange&#91;GenericFileMessage with body: Bye 1hello1&#93;2010-08-25 11:34:06 886 [ Hashed wheel timer #1] DefaultErrorHandler ERROR Failed delivery for exchangeId: f5eb372d-a214-4418-a60f-62c0557768d2. Exhausted after delivery attempt: 1 caught: org.apache.camel.ExchangeTimedOutException: The OUT message was not received within: 30000 millis. Exchange&#91;GenericFileMessage with body: Bye 1hello1&#93;org.apache.camel.ExchangeTimedOutException: The OUT message was not received within: 30000 millis. Exchange&#91;GenericFileMessage with body: Bye 1hello1&#93;", "id": "3081"}, "3082": {"ground_truth": "0", "bug_report": "BeanConveter didn't try to covert the bean invocation argument rightly\nHere is the mail thread about it.http://camel.465427.n5.nabble.com/Bug-in-the-BeanConverter-class-td2653552.html#a2653552", "id": "3082"}, "3091": {"ground_truth": "0", "bug_report": "QuartzEndpoint does not set the job name properly\nLooks like the job.name argument is not se properly on the endpoint and defaults to the uri path.Another nastier issue (for which I should have probably created a separate issue) is that the uri gets messed up if it does not have the double slashes after the scheme (as in 'quartz:&lt;uri&gt;' vs 'quartz://&lt;uri&gt;') and the @cron argument contains '?'. The workaround (arguably) is to start the uri with 'quartz://...'.See nabble thread. Many thanks to SK for reporting this.", "id": "3091"}, "3113": {"ground_truth": "0", "bug_report": "@QueryParam doesn't work for CxfBeans\nCharle report an issue&#91;1&#93;  after tracing the code I found the DefaultCxfBeanBinding doesn't put the http query string into the cxf message.So the @QueryParam will not take effect on the resource beans.&#91;1&#93;http://camel.465427.n5.nabble.com/camel-cxfbean-JAX-Rs-QueryParam-td2827252.html#a2827252", "id": "3113"}, "3120": {"ground_truth": "0", "bug_report": "hawtdb - Should work in OSGi\nThe decode method in ObjectCodec should wrap the causes stacktrace in the wrapped IOException.For example OSGi frameworks may be pesky and we want to be able to see whatever stacktrace it may thrown on you. public T decode(DataInput dataIn) throws IOException { int size = dataIn.readInt(); byte[] data = new byte[size]; dataIn.readFully(data); ByteArrayInputStream bytesIn = new ByteArrayInputStream(data); ObjectInputStream objectIn = new ObjectInputStream(bytesIn); try { return (T) objectIn.readObject(); } catch (ClassNotFoundException e) { throw new IOException(e.getMessage()); } }For being JDK 1.5 compatible you need to do it like public static IOException createIOException(String message  Throwable cause) { IOException answer = new IOException(message); answer.initCause(cause); return answer; }", "id": "3120"}, "3121": {"ground_truth": "0", "bug_report": "Splitter EIP - The sub exchanges should not contains on completions from original Exchange\nSee nabblehttp://camel.465427.n5.nabble.com/Camel-calling-commit-too-early-when-using-split-seda-file-endpoint-tp2830894p2830894.html", "id": "3121"}, "3123": {"ground_truth": "0", "bug_report": "Performance/scalability issue for converter lookup\nIn a simple HTTP-&gt;HTTP proxy scenario (whith a Jetty or a servlet endpoint  that does not matter) I observe a very severe performance regression between Camel 2.2.0 (as in servicemix 4.2) and camel 2.4.0 running on a apache karaf 2.0.0 OSGi stack. On the same hardware I get a throughput of 3500 messages per second with Camel 2.2.0  but only 210 messages per second on Camel 2.4.0 (both servlet-&gt;HTTP). If I replace the http endpoint with a log endpoint the throughput will be about 1500 messages per second in both cases.I have done some profiling for this: The active CPU times as shown in the profiler remain approximately the same for both versions  however if I monitor wait times  I get very long wait times for org.apache.camel.impl.DefaultMessage.getHeader(java.lang.String java.lang.Class) calls. If I break this down I see the java.beans.PropertyEditorManager.findEditor(java.lang.Class) call in org.apache.camel.impl.converter.PropertyEditorTypeConverter.convertTo(java.lang.Class java.lang.Object). The findEditor() method is synchronized and initializes some class loading which takes some time.Why is it necessary to instantiate the type converter for each message?", "id": "3123"}, "3124": {"ground_truth": "0", "bug_report": "polling of feeds in FeedEntryPollingConsumer is broken.\nThe FeedEntryPollingConsumer class implements the poll() method for the 'splitEntries' mode of the RssEndpoint is broken.You can think of two ways that polling feeds could work:1) A feed is created  then one item is processed  then the delay  then process another item. This way the feed is kept between calls to poll().2) A feed is created  then all the items are processed  the feed is cleared  and then the delay.But the way it presently works:A feed is created  one items is processed  and the feed is cleared  then the delay  and again the feed is created and the next item is cleared.This is clearly wrong. Feed entries can be missed  because the index of the next item to process is stored over polls but the list isn't. Also this creates a big network overhead when polling very active feeds such as twitter search...This is easy to fix. In the below code:public void poll() throws Exception { Object feed = createFeed(); populateList(feed); while (hasNextEntry()) { Object entry = list.get(entryIndex--); boolean valid = true; if (entryFilter != null) { valid = entryFilter.isValidEntry(endpoint  feed  entry); } if (valid) { Exchange exchange = endpoint.createExchange(feed  entry); getProcessor().process(exchange); // return and wait for the next poll to continue from last time (this consumer is stateful) return; } }The return (at line 56 of org.apache.camel.component.feed.FeedEntryPollingConsumer) should be deleted.", "id": "3124"}, "3128": {"ground_truth": "0", "bug_report": "Using $ in endpoint uri causes thread name parser to fail\nSee nabblehttp://camel.465427.n5.nabble.com/How-to-specify-route-to-folder-with-in-actual-name-tp2839895p2839895.html", "id": "3128"}, "3129": {"ground_truth": "0", "bug_report": "Support user-defined shutdown timeout for CamelTestSupport\nWould be nice if CamelTestSupport could allow user to define the Shutdown timeout of CamelContext.We at Neociclo are finding difficult to debug through JUnit tests because of the hard-coded 10s timeout.public void setUp() ... { ... context = createCamelContext(); assertValidContext(context); // reduce default shutdown timeout to avoid waiting for 300 seconds&#8211; context.getShutdownStrategy().setTimeout(10);++ context.getShutdownStrategy().setTimeout(getShutdownTimeout()); ...}+ protected int getShutdownTimeout() {+ return 10;+ }", "id": "3129"}, "3136": {"ground_truth": "0", "bug_report": "cxfbean creates another instance of the class instead of directly using the referenced bean\n... this makes it impossible to inject properties to the @WebService class&lt;camelContext&gt; &lt;route&gt; &lt;from uri='....' /&gt; &lt;to uri='cxfbean:handler' /&gt; &lt;/route&gt;&lt;/camelContext&gt;&lt;bean id='handler' class='a.b.c.Handler'&gt; &lt;property name='prop1' value='5' /&gt;&lt;/bean&gt;when 'handler' is created by Spring  its 'prop1' is set to '5'when the cxfbean:handler is triggered  the 'prop1' is null  because CXF created another instance of Handler instead of using the one created by Spring", "id": "3136"}, "3139": {"ground_truth": "0", "bug_report": "Use ActiveMQUuidGenerator as the default uuid generator as its faster than the JDK UUID generator\nThe Java UUID is too slow. Switching back to AMQ based will improve performance.We should just have to switch to use the JDK UUID for the camel-gae component as it cannot use the AMQ based.", "id": "3139"}, "3140": {"ground_truth": "0", "bug_report": "Context-sensitive setting of default UuidGenerator\nUse JavaUuidGenerator in GAE environment  otherwise use ActiveMQUuidGenerator as default UuidGenerator.", "id": "3140"}, "3141": {"ground_truth": "0", "bug_report": "Route autoStartup configurable through Property\nUsing Camel 2.4 I want to make the usage of a certain route configurable through properties. &lt;camelContext id='camel' trace='true' xmlns='http://camel.apache.org/schema/spring'&gt; &lt;route id='configurable_1' autoStartup='{{startup_1}}'&gt; &lt;from uri='direct:start_1'/&gt; &lt;to uri='mock:end_1'/&gt; &lt;/route&gt; &lt;route id='configurable_2' autoStartup='{{startup_2}}'&gt; &lt;from uri='direct:start_2'/&gt; &lt;to uri='mock:end_2'/&gt; &lt;/route&gt;&lt;/camelContext&gt;But if I do use the PropertyPlaceholder on the CamelContext like below it works. &lt;camelContext id='camel' trace='true' autoStartup='{{startup_context}}'So is this a bug or should this work this way?", "id": "3141"}, "3143": {"ground_truth": "0", "bug_report": "OsgiDefaultCamelContext.getTypeConverterRegistry() returns null\nThe showed up when using dozer as shown in http://camel.apache.org/dozer-type-conversion.html  whose DozerTypeConverterLoader tries to get the type converter registry using: {{{TypeConverterRegistry registry = camelContext.getTypeConverterRegistry();}}}Plausible error:OsgiDefaultCamelContext.java @Override protected TypeConverter createTypeConverter() { return new OsgiTypeConverter(bundleContext  getInjector()); }DefaultCamelContext.javapublic TypeConverterRegistry getTypeConverterRegistry() { if (typeConverterRegistry == null) { // init type converter as its lazy if (typeConverter == null) { getTypeConverter(); } // type converter is usually the default one that also is the registry if (typeConverter instanceof DefaultTypeConverter) { typeConverterRegistry = (DefaultTypeConverter) typeConverter; } } return typeConverterRegistry; }Error:getTypeConverter() returns an OsgiTypeConverter OsgiTypeConverter does not inherit from DefaultTypeConverter  thus the instanceof returns false=&gt; null is returnedSolution:Lots of different ways to do this  and it's getting late here. In this case  maybe it's OsgiDefaultCamelContext's responsibility to also override getTypeConverterRegistry with something along the lines of:@Overridepublic TypeConverterRegistry getTypeConverterRegistry() { if (typeConverterRegistry == null) { // init type converter as its lazy if (typeConverter == null) { getTypeConverter(); } // type converter is usually the default one that also is the registry if (typeConverter instanceof OsgiDefaultTypeConverter) { typeConverterRegistry = ((OsgiDefaultTypeConverter) typeConverter).getRegistry(); } } return typeConverterRegistry; }We've employed an (ugly) workaround in a local version of DozerTypeConverterLoader.java: TypeConverter typeConverter = camelContext.getTypeConverter(); DefaultTypeConverter registry = null; if (typeConverter instanceof DefaultTypeConverter) { registry = (DefaultTypeConverter)typeConverter; } else if (typeConverter instanceof OsgiTypeConverter) { OsgiTypeConverter osgiTypeConverter = (OsgiTypeConverter)typeConverter; registry = osgiTypeConverter.getRegistry(); }", "id": "3143"}, "3144": {"ground_truth": "0", "bug_report": "camel-ftp: fileExist=Fail not honored when producer works in FTP root path\nwhen using a route with ftp producer such as : &lt;to uri='ftp://user@host/?fileExist=Fail&amp;fileName=test&amp;password=mypass' /&gt;The route will not correctly fail if the fileName already exists.It will work in any sub-directory: &lt;to uri='ftp://user@host/mydir?fileExist=Fail&amp;fileName=test&amp;password=mypass' /&gt;The root cause of the bug is an incorrect test in org.apache.camel.util.FileUtil.onlyPath() in component camel-core.This method returns null when the parameter string is '/'. It should return '/'.The attached patch fixes the issue.", "id": "3144"}, "3159": {"ground_truth": "0", "bug_report": "Aggregator EIP - Add option to ignore timeout completed\nSee nabblehttp://camel.465427.n5.nabble.com/Aggregator-Howto-remove-from-persistency-tp2852702p2852702.html&gt; I was thinking about something like a removeOnTimeout (default=false of&gt; course) that would use the existing completionTimeout attribute but change&gt; its behavior to remove the aggregated message instead of publishing it.&gt; &#8211;Yeah I can kinda see an use case for this. You are using the timeoutas a last resort to just say hey we could not aggregate this in letssay 4 hours.So lets just ignore the message.Having an option on the aggregate to just auto discard those messageon timeout would help there to avoid the CBR and checking yourself.Just wondering if this is a use case others use? Its still kindadangerous to discard messages.", "id": "3159"}, "3160": {"ground_truth": "0", "bug_report": "Add alternative start token for simple language to avoid clash with Spring PropertyPlaceholder\nWhen using Spring property placeholders it will scan for ${ } tokens  which is the same set the Camel Simple language uses.This makes it harder to configure file endpoints where the file name is a simple expression because Spring interferes.So by introducing the $simple{ as alternative start token  we can avoid the clash.", "id": "3160"}, "3170": {"ground_truth": "0", "bug_report": "camel-ftp - Setting password and username using UserInfo on uri does not work\nYou should be able to set ftp endpoint uri as:'ftp://scott@localhost:' + getPort() + '/deletefile?password=tiger&amp;binary=false&amp;delete=true'And when using password and username in the userinfo part of the uri:'ftp://tiger:scott@localhost:' + getPort() + '/deletefile?binary=false&amp;delete=true'The latter didn't work", "id": "3170"}, "3181": {"ground_truth": "0", "bug_report": "Confusing IllegalArgumentException when address attribute isn't specified on CXF endpoint.\nIf you create CXF endpoint  like this  without the address attribute   &lt;cxf:cxfEndpoint id='greeting' wsdlURL='greeting.wsdl' serviceClass='tutorial.hanbo.webservice.Greeting' &gt; &lt;/cxf:cxfEndpoint&gt; ... then you get a really confusing error when you deploy the endpoint in ServiceMix: the error is Caused by: java.lang.IllegalArgumentException: endpointUri is not specified and org.apache.camel.component.cxf.CxfSpringEndpoint does not implement createEndpointUri() to create a default value at org.apache.camel.impl.DefaultEndpoint.getEndpointUri(DefaultEndpoint.java:83) at org.apache.camel.management.DefaultManagementLifecycleStrategy.onEndpointAdd(DefaultManagementLifecycleStrategy.java:205) at org.apache.camel.impl.DefaultCamelContext.getEndpoint(DefaultCamelContext.java:386) We find that if you explicitly set the address then the problem goes away (see below) &lt;cxf:cxfEndpoint id='greeting' wsdlURL='greeting.wsdl' address='http://localhost:9000/GreeterContext/SOAPMessageService' serviceClass='tutorial.hanbo.webservice.Greeting' &gt; &lt;/cxf:cxfEndpoint&gt; On camel-cxf web page  the 'address' attribute is not mentioned anywhere in the table of URI properties  so you might be lead to believe that it's not necessary.", "id": "3181"}, "3188": {"ground_truth": "1", "bug_report": "Concurrent consumers on seda endpoint can cause content routing to mismatch\nWhen consuming concurrently from a seda endpoint  when the route contains a content router based on the header  it will randomly route through the wrong choice.In my specific case  I was consuming from an activemq queue  which would receive messages with a header that would then determine which route it would follow. It would randomly send messages down the wrong path. When I turned on tracing  it would behave itself. It also behaved itself when I limited it to only a single consumer. I was  however  able to duplicate it with the unit test below. Due to the concurrency issue  the test can occasionally pass  but run it a couple times and it should fail. It'll either receive 2 messages when it should have only gotten 1  or it will get no messages when it should have gotten 1.ConcurrencyTest.javaimport org.apache.camel.EndpointInject;import org.apache.camel.Produce;import org.apache.camel.ProducerTemplate;import org.apache.camel.builder.RouteBuilder;import org.apache.camel.component.mock.MockEndpoint;import org.apache.camel.test.CamelTestSupport;public class ConcurrencyTest extends CamelTestSupport { @EndpointInject(uri = 'mock:result') protected MockEndpoint resultEndpoint; @EndpointInject(uri = 'mock:otherResult') protected MockEndpoint otherResultEndpoint; @Produce(uri = 'seda:start') protected ProducerTemplate template; public void testSendMatchingMessage() throws Exception { String expectedBody = '&lt;matched/&gt;'; resultEndpoint.expectedBodiesReceived(expectedBody); otherResultEndpoint.expectedBodiesReceived(expectedBody); template.sendBodyAndHeader(expectedBody  'myDirection'  'send'); template.sendBodyAndHeader(expectedBody  'myDirection'  'received'); resultEndpoint.assertIsSatisfied(); } @Override protected RouteBuilder createRouteBuilder() { return new RouteBuilder() { public void configure() { from('seda:start?concurrentConsumers=10')// from('seda:start?concurrentConsumers=1') .choice() .when(header('myDirection').isEqualTo('send')).to('mock:result') .when(header('myDirection').isEqualTo('received')).to('mock:otherResult'); } }; }}", "id": "3188"}, "3193": {"ground_truth": "0", "bug_report": "request/reply over JMS using temporary queues - if connection lost the temporary queue is not re-created which causes the producer to not work anymore\nTo recreate the problem you need a route with a jms inout endpoint that is configured to use a temporary destination for replies. Till now I was only able to show the problem with tibco ems. Start broker Start the jms consumer that replies to the request Start the route Send a request/reoply exchange (should work) Stop the broker Wait long enough for the client to do a full reconnect (I used connectionFactory.setReconnAttemptCount(1) on the client so I do not have to wait so long) Start the broker -&gt; The jms component will do a full new connect Send a request/reoply exchange -&gt; Now a InvalidDestination Exception happensThe client route will not work anymore until a restart as it creates the temporary destination only once and it is invalid now.", "id": "3193"}, "3201": {"ground_truth": "1", "bug_report": "The CxfConsumer's getContinuation method might throw NPE\nHelloWhen trying the latest CAMEL 2.5.0 SNAPSHOT  I got a NPE:java.lang.NullPointerException at org.apache.camel.component.cxf.CxfConsumer$1.getContinuation(CxfConsumer.java:129) at org.apache.camel.component.cxf.CxfConsumer$1.invoke(CxfConsumer.java:65) at org.apache.cxf.interceptor.ServiceInvokerInterceptor$1.run(ServiceInvokerInterceptor.java:58) at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:441) at java.util.concurrent.FutureTask$Sync.innerRun(FutureTask.java:303)...", "id": "3201"}, "3202": {"ground_truth": "0", "bug_report": "Add Exchange creation time to the exchange as property\nSometimes it would be really nice to access the exchange creation time from a processor. This can be of use for many tasks  like statistics etc.", "id": "3202"}, "3220": {"ground_truth": "0", "bug_report": "Threads - Should allow using 0 in core pool size\nSee nabblehttp://camel.465427.n5.nabble.com/ThreadPoolExecutor-configuration-tp3207845p3207845.html", "id": "3220"}, "3222": {"ground_truth": "0", "bug_report": "Route definitions should use boxed types and lazy evaluate defaults in the getter\nWhen you output a route definition as XML then all the boolean types and whatnot get outputted using their default values.For example inheritErrorHandler=true.This reduces the XML and keeps it much smaller.", "id": "3222"}, "3223": {"ground_truth": "0", "bug_report": "GenericFileProducer.writeFile method creates instance of un-used InputStream\norg.apache.camel.component.file.GenericFileProducerMethod: writeFileThis method has the following statement:InputStream payload = exchange.getIn().getBody(InputStream.class);This internally results in calling a TypeConverter to convert an object into InputStream type. However this InputStream has not been used and is eventually closed in the finally block. In the same method calling method storeFile on FileOperations (boolean success = operations.storeFile(fileName  exchange) also opens an InputStream on the same message.", "id": "3223"}, "3231": {"ground_truth": "0", "bug_report": "JMX MBeans not registered for initiators\nregistering the Initiator before it has been started will not register the sessions mbeans with JMX. So the acceptors are ther  but no initiators.", "id": "3231"}, "3237": {"ground_truth": "0", "bug_report": "XmppEndPoint - setting login to false when creating an account results in no action\nXmppEndPoint myXmppEndPoint = new XmppEndPoint();(...)myXmppEndPoint.setCreateAccount(true);myXmppEndPoint .setLogin(false);(...)This will result in 'no action' in xmpp server  if setLogin true the account is created and the user stays online.I believe it's because of the logic used in createConnection() method of XmppEndPoint that could be changed to:if (!connection.isAuthenticated()) { if (user != null) { if (LOG.isDebugEnabled()) { LOG.debug('Logging in to XMPP as user: ' + user + ' on connection: ' + getConnectionMessage(connection)); } if (password == null) { LOG.warn('No password configured for user: ' + user + ' on connection: ' + getConnectionMessage(connection)); } if (createAccount) { AccountManager accountManager = new AccountManager(connection); accountManager.createAccount(user  password); } if(login){ if (resource != null) { connection.login(user  password  resource); } else { connection.login(user  password); } } } else { if (LOG.isDebugEnabled()) { LOG.debug('Logging in anonymously to XMPP on connection: ' + getConnectionMessage(connection)); } connection.loginAnonymously(); }", "id": "3237"}, "3242": {"ground_truth": "0", "bug_report": "RetryWhile is missing on the errorHandler DSL\nYou can only use retryWhile on the onException. It should be possible from errorHandler as well.", "id": "3242"}, "3260": {"ground_truth": "0", "bug_report": "Let LazyLoadingTypeConverter load the converters from camel-core on startup\nWhen using lazy loading type converter and Spring XML you will trigger the type converters to be loaded on startup due XML configuration needs to convert from String -&gt; other types etc.So we should let Camel always load the type converters from camel-core as they are essential. Then the package scanning converters can be loaded on demand later.", "id": "3260"}, "3266": {"ground_truth": "0", "bug_report": "support the Ordered Interceptor Strategy configured in spring\nNow spring support user to configure their own Interceptor Strategy  but it cannot specifiy the wrap order of the interceptor strategy.So we need to support a feature to let the user define the interceptor's order:user can choice to implement the org.apache.camel.util.Ordered interface for the customed interceptor strategy ;if the interceptor strategy does support a Ordered interface  the camel context will loaded the interceptor-strategies and wrapper the process by the order;For example if I write two interceptor-strategy(A   B)  if A's order is 0  and B's order is 1. the camel will always wrapper the processor as {A{B{Processor}}.", "id": "3266"}, "3275": {"ground_truth": "0", "bug_report": "CaseInsensitiveMap concurrency issue\n&#91;10/25/2010 -:- 03:27:22 PM&#93; &lt;tarjei&gt; cibsen: I get a few of these errors on a route using SEDA queues:&#91;10/25/2010 -:- 03:27:43 PM&#93; &lt;tarjei&gt; Caused by: &#91;java.util.ConcurrentModificationException - null&#93;&#91;10/25/2010 -:- 03:27:44 PM&#93; &lt;tarjei&gt; java.util.ConcurrentModificationException&#91;10/25/2010 -:- 03:27:44 PM&#93; &lt;tarjei&gt; at java.util.HashMap$HashIterator.nextEntry(HashMap.java:810)&#91;10/25/2010 -:- 03:27:44 PM&#93; &lt;tarjei&gt; at java.util.HashMap$EntryIterator.next(HashMap.java:851)&#91;10/25/2010 -:- 03:27:44 PM&#93; &lt;tarjei&gt; at java.util.HashMap$EntryIterator.next(HashMap.java:849)&#91;10/25/2010 -:- 03:27:46 PM&#93; &lt;tarjei&gt; at org.apache.camel.util.CaseInsensitiveMap.entrySet(CaseInsensitiveMap.java:120)&#91;10/25/2010 -:- 03:27:49 PM&#93; &lt;tarjei&gt; at org.apache.camel.util.CaseInsensitiveMap.putAll(CaseInsensitiveMap.java:86)&#91;10/25/2010 -:- 03:27:51 PM&#93; &lt;tarjei&gt; at org.apache.camel.impl.MessageSupport.copyFrom(MessageSupport.java:142)&#91;10/25/2010 -:- 03:27:54 PM&#93; &lt;tarjei&gt; at org.apache.camel.impl.DefaultMessage.copyFrom(DefaultMessage.java:52)&#91;10/25/2010 -:- 03:27:56 PM&#93; &lt;tarjei&gt; at org.apache.camel.util.ExchangeHelper.copyResults(ExchangeHelper.java:215)&#91;10/25/2010 -:- 03:27:59 PM&#93; &lt;tarjei&gt; at org.apache.camel.processor.Pipeline.process(Pipeline.java:128)&#91;10/25/2010 -:- 03:28:01 PM&#93; &lt;tarjei&gt; at org.apache.camel.processor.UnitOfWorkProcessor.process(UnitOfWorkProcessor.java:99)&#91;10/25/2010 -:- 03:28:05 PM&#93; &lt;tarjei&gt; at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:70)&#91;10/25/2010 -:- 03:28:08 PM&#93; &lt;tarjei&gt; at org.apache.camel.processor.DelegateAsyncProcessor.processNext(DelegateAsyncProcessor.java:98)&#91;10/25/2010 -:- 03:28:11 PM&#93; &lt;tarjei&gt; at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:89)&#91;10/25/2010 -:- 03:28:14 PM&#93; &lt;tarjei&gt; at org.apache.camel.management.InstrumentationProcessor.process(InstrumentationProcessor.java:68)&#91;10/25/2010 -:- 03:28:17 PM&#93; &lt;tarjei&gt; at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:70)&#91;10/25/2010 -:- 03:28:20 PM&#93; &lt;tarjei&gt; at org.apache.camel.component.seda.SedaConsumer.sendToConsumers(SedaConsumer.java:170)&#91;10/25/2010 -:- 03:28:23 PM&#93; &lt;tarjei&gt; at org.apache.camel.component.seda.SedaConsumer.run(SedaConsumer.java:112)&#91;10/25/2010 -:- 03:28:25 PM&#93; &lt;tarjei&gt; at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1110)&#91;10/25/2010 -:- 03:28:28 PM&#93; &lt;tarjei&gt; at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:603)&#91;10/25/2010 -:- 03:28:31 PM&#93; &lt;tarjei&gt; at java.lang.Thread.run(Thread.java:636)&#91;10/25/2010 -:- 03:28:34 PM&#93; &lt;tarjei&gt; It seems to me to be an error completely within Camel so I thought I'd report it.&#91;10/25/2010 -:- 03:30:26 PM&#93; &lt;tarjei&gt; I got the error about 10/30 times having run about 5m messages through the different routes running in that jvm&#91;10/25/2010 -:- 03:51:36 PM&#93; &lt;cibsen&gt; and do your prod server have more cpu cores?&#91;10/25/2010 -:- 03:51:42 PM&#93; &lt;cibsen&gt; ibm  sun jdk?&#91;10/25/2010 -:- 03:51:51 PM&#93; &lt;tarjei&gt; Yes - 4. This is openjdk&#91;10/25/2010 -:- 03:51:54 PM&#93; &lt;tarjei&gt; both places&#91;10/25/2010 -:- 03:52:03 PM&#93; &lt;cibsen&gt; what os?&#91;10/25/2010 -:- 03:52:22 PM&#93; &lt;tarjei&gt; Centos 5&#91;10/25/2010 -:- 03:52:36 PM&#93; &lt;cibsen&gt; yeah kinda figured when you said openjdk&#91;10/25/2010 -:- 03:53:06 PM&#93; &lt;tarjei&gt; 1.6.0-17", "id": "3275"}, "3276": {"ground_truth": "0", "bug_report": "Multicast with pipeline may cause wrong aggregated exchange\nThis is a problem when using 2 set of nested pipeline and doing a transform as the first processor in that pipeline from('direct:start').multicast(new SumAggregateBean()) .pipeline().transform(bean(IncreaseOne.class)).bean(new IncreaseTwo()).to('log:foo').end() .pipeline().transform(bean(IncreaseOne.class)).bean(new IncreaseTwo()).to('log:bar').end() .end() .to('mock:result');", "id": "3276"}, "3279": {"ground_truth": "0", "bug_report": "Let custom Processor be managed in JMX when implementing ManagementAware\nSee nabblehttp://camel.465427.n5.nabble.com/manage-Camel-Processor-using-JMX-tp3235454p3235454.html", "id": "3279"}, "3284": {"ground_truth": "0", "bug_report": "Multiple Endpoints with the Same Port in Restlet Component\nIt should be possible to have several endpoints using the same port  the more it takes to rely on a HTTP server external to the component.", "id": "3284"}, "3293": {"ground_truth": "0", "bug_report": "Add exception.stacktrace to Simple language\nSo you can output the stracktrace. It should grab the stacktrace and print it to a String as output.", "id": "3293"}, "3309": {"ground_truth": "0", "bug_report": "Stepwise change of directory unfit for production (ftp/ftps/sftp)\nIn Camel 2.5  the logic for changing directory for ftp/ftps/sftp has changed in order to fix the problems discussed in the following thread: http://camel.465427.n5.nabble.com/How-to-change-directory-while-using-sftp-component-td2806817.html#a2807611In Camel 2.5 changing of the remote directory is now done in a stepwise manner. This is a strategy not fit for production since it assumes that the logged in ftp/ftps/sftp user has access to all intermediate directories all the way down to its home directory. This is rarely the case.Also  when testing ftp/sftp on Serv-U  a Windows based ftp/ftps/sftp server  it turns out that it reports the current directory in a 'Windows way'  e g /C:/temp/servu/user/sample/file2sftp. The topmost folder is not '/' but '/C:'. This also breaks the new stepwise way of changing directory since it always tries to change to '/' if an absolute path is used.I propose to introduce a configuration property to enable/disable stepwise changing of directories where disabling it should be the default. I will upload a patch shortly.", "id": "3309"}, "3319": {"ground_truth": "0", "bug_report": "cxfEndpoint of camel-cxf doesn't support  the shcemaLocation element\nHere is the mail thread&#91;1&#93; which discusses about it.&#91;1&#93;http://camel.465427.n5.nabble.com/camel-cxf-exception-when-parsing-cxf-schemaLocation-element-td3253254.html#a3253254", "id": "3319"}, "3335": {"ground_truth": "1", "bug_report": "NPE occurs without @Entity annotation\nHere is code from the org.apache.camel.component.jpa.JpaConsumer classprotected String getEntityName(Class&lt;?&gt; clazz) { Entity entity = clazz.getAnnotation(Entity.class); // Check if the property name has been defined for Entity annotation if (!entity.name().equals('')) { // line 307 return entity.name(); } else { return null; }}When trying to consume entities from jpa endpoint exception occursjava.lang.NullPointerException at org.apache.camel.component.jpa.JpaConsumer.getEntityName(JpaConsumer.java:307) at org.apache.camel.component.jpa.JpaConsumer.createQueryFactory(JpaConsumer.java:287) at org.apache.camel.component.jpa.JpaConsumer.getQueryFactory(JpaConsumer.java:196) at org.apache.camel.component.jpa.JpaConsumer$1.doInJpa(JpaConsumer.java:83) at org.apache.camel.component.jpa.JpaTemplateTransactionStrategy$1$1.doInJpa(JpaTemplateTransactionStrategy.java:82) at org.springframework.orm.jpa.JpaTemplate.execute(JpaTemplate.java:183) at org.springframework.orm.jpa.JpaTemplate.execute(JpaTemplate.java:146) at org.apache.camel.component.jpa.JpaTemplateTransactionStrategy$1.doInTransaction(JpaTemplateTransactionStrategy.java:80) at org.springframework.transaction.support.TransactionTemplate.execute(TransactionTemplate.java:130) at org.apache.camel.component.jpa.JpaTemplateTransactionStrategy.execute(JpaTemplateTransactionStrategy.java:78) at org.apache.camel.component.jpa.JpaConsumer.poll(JpaConsumer.java:79) at org.apache.camel.impl.ScheduledPollConsumer.run(ScheduledPollConsumer.java:98) at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:441) at java.util.concurrent.FutureTask$Sync.innerRunAndReset(FutureTask.java:317) at java.util.concurrent.FutureTask.runAndReset(FutureTask.java:150) at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$101(ScheduledThreadPoolExecutor.java:98) at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.runPeriodic(ScheduledThreadPoolExecutor.java:181) at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:205) at java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:886) at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:908) at java.lang.Thread.run(Thread.java:619)This is because there is no @Entity annotation and persistence is configured by means of orm.xml.To fix the problem change line 307 toif (entity != null &amp;&amp; !entity.name().equals(''))", "id": "3335"}, "3336": {"ground_truth": "0", "bug_report": "Quartz component has minor issues with old versions of Quartz\nHelloI have run into two issues using camel-quartz with old versions of Quartz (Quartz 1.6 and 1.7):1. With Quartz 1.6  at shutdown  I get a message:2010-11-12 02:41:22 965 DefaultShutdownStrategy.shutdownNow Error occurred while shutting down route: Consumer[quartz://importAnnuaireAgentsTimer?cron=0+30+2+*+*+%3F]. This exception will be ignored.java.lang.NoSuchMethodError: org.quartz.SchedulerMetaData.isJobStoreClustered()Z at org.apache.camel.component.quartz.QuartzComponent.isClustered(QuartzComponent.java:278) at org.apache.camel.component.quartz.QuartzComponent.removeJob(QuartzComponent.java:238) at org.apache.camel.component.quartz.QuartzEndpoint.removeTrigger(QuartzEndpoint.java:84) at org.apache.camel.component.quartz.QuartzEndpoint.consumerStopped(QuartzEndpoint.java:221) at org.apache.camel.component.quartz.QuartzConsumer.doStop(QuartzConsumer.java:44) at org.apache.camel.impl.ServiceSupport.stop(ServiceSupport.java:98) at org.apache.camel.impl.ServiceSupport.stop(ServiceSupport.java:122) at org.apache.camel.util.ServiceHelper.stopService(ServiceHelper.java:99) at org.apache.camel.impl.DefaultShutdownStrategy.shutdownNow(DefaultShutdownStrategy.java:235) at org.apache.camel.impl.DefaultShutdownStrategy$ShutdownTask.run(DefaultShutdownStrategy.java:386) at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:441) at java.util.concurrent.FutureTask$Sync.innerRun(FutureTask.java:303) at java.util.concurrent.FutureTask.run(FutureTask.java:138) at java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:886) at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:908) at java.lang.Thread.run(Thread.java:619)2. Starting of a delayed timer fails. I think warning the user would be a better idea.Patch is attached (it basically catches the NoSuchMethodError exceptions and acts accordingly)", "id": "3336"}, "3343": {"ground_truth": "1", "bug_report": "CxfRsInvoker produces NullpointerException when no ContinuationProvider is set in the InMessage\nIn my usage of CXF-RS with Camel through the camel-cxf component I ran into a NullpointerException  the specific case is described in some detail on StackOverflow: http://stackoverflow.com/questions/4198461/why-do-i-get-a-nullpointerexception-when-invoking-the-cxf-rs-endpoint-of-a-camel Specifically I run into a NullpointerException:Caused by: java.lang.NullPointerException at org.apache.camel.component.cxf.jaxrs.CxfRsInvoker.getContinuation(CxfRsInvoker.java:63) at org.apache.camel.component.cxf.jaxrs.CxfRsInvoker.performInvocation(CxfRsInvoker.java:52) at org.apache.cxf.service.invoker.AbstractInvoker.invoke(AbstractInvoker.java:89) ... 33 moreI was assuming I was misconfiguring something but didn't find any alternative way so I started digging in the camel-cxf source code.I found that such a 'getContinuation' method also exists for the org.apache.camel.component.cxf.CxfConsumer as well as for the CxfRsInvoker (where it was failing for me). However in the case of the CxfConsumer there is a guard on the ContinuationProvider so that if it is null  then null is returned:return provider == null ? null : provider.getContinuation();CxfRsInvoker does not have this guard  but it does have code to deal with a 'null' Continuation at the calling site (line 52  in performInvocation). Therefore I assumed this was a bug and patched the guard into the CxfRsInvoker as well.My program now seems to work correctly. I assume this is a bug.For completeness sake  this is what getContinuation now looks like for me: private Continuation getContinuation(Exchange cxfExchange) { ContinuationProvider provider = (ContinuationProvider)cxfExchange.getInMessage().get(ContinuationProvider.class.getName()); return provider == null ? null : provider.getContinuation(); }", "id": "3343"}, "3351": {"ground_truth": "0", "bug_report": "camel-irc component silently fails on nick collision\nWhen the camel-irc component connects to an irc server and there's a nick collision it silently fails. Also note there is no camel-irc component in Jira.", "id": "3351"}, "3356": {"ground_truth": "0", "bug_report": "Hard coded locale in Bindy DatePatternFormat\nAs reported by a user from the community (http://camel.465427.n5.nabble.com/Bindy-Dateformat-Parsing-exception-td3276981.html)  the locale of SimpeDateFormat in bindy's DatePatternFormat class is hard coded to FRANCE.", "id": "3356"}, "3359": {"ground_truth": "0", "bug_report": "Add option on FTP component so you can set which path separator char to use (eg windows vs unix)\nFor example if you use a windows platform and want to upload files to a remote linux FTP server  and the FTP server don't understand path separators using either / or / char", "id": "3359"}, "3377": {"ground_truth": "0", "bug_report": "spring-integration - Should have better configuration validation\nSee nabblehttp://camel.465427.n5.nabble.com/Integration-camel-and-spring-integration-tp3284105p3284105.html", "id": "3377"}, "3389": {"ground_truth": "0", "bug_report": "PackageHelper - issue with version numbers which contains non decimal\nSee more herehttp://fusesource.com/forums/thread.jspa?threadID=2447&amp;tstart=0", "id": "3389"}, "3399": {"ground_truth": "0", "bug_report": "Tidying up strategy for managing resources in JMX\nThe management strategy should be1) use ManagementAware if implemented on bean2) use @ManagedResource if provided on bean3) otherwise use defaultConsider using fallback from 1-&gt;2 which is the current behavior. If we change this we will break backwards compatibility.But in essence we should had Camel fail if (1) cannot be registered  and not just fallback to use (2) as it does today.", "id": "3399"}, "3402": {"ground_truth": "0", "bug_report": "Use ServiceMix guice bundle\nIn order to avoid to go on the googlecode maven repository  I provided a ServiceMix OSGi bundle for guice.This bundle could be used by Camel in the Karaf features descriptor.", "id": "3402"}, "3403": {"ground_truth": "1", "bug_report": "InterceptSendToEndpoint should check for if stop DSL has been used\nSee nabblehttp://camel.465427.n5.nabble.com/InterceptSendToEndpoint-Http-Component-tp3296620p3296620.html", "id": "3403"}}}